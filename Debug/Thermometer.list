
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a0  080096a0  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a8  080096a8  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  080096b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020194  2**0
                  CONTENTS
 10 .bss          000020b0  20000194  20000194  00020194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002244  20002244  00020194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ed72  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c67  00000000  00000000  0003ef36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00042ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00043b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246ca  00000000  00000000  00044900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001597f  00000000  00000000  00068fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7235  00000000  00000000  0007e949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145b7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003efc  00000000  00000000  00145bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000194 	.word	0x20000194
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008720 	.word	0x08008720

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000198 	.word	0x20000198
 80001c4:	08008720 	.word	0x08008720

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <int_emissivity_to_char_emissivity>:
 * @param emissivity Emissivity value (max 65535)
 * @param arr Pointer to output array
 * @return void
 */
void int_emissivity_to_char_emissivity(int emissivity, char* arr)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	emissivity *= 10000;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	607b      	str	r3, [r7, #4]
	arr[6] = '\0';
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	3306      	adds	r3, #6
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
	arr[5] = emissivity % 10 + '0';
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 80004e2:	fb83 1302 	smull	r1, r3, r3, r2
 80004e6:	1099      	asrs	r1, r3, #2
 80004e8:	17d3      	asrs	r3, r2, #31
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	440b      	add	r3, r1
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	1ad1      	subs	r1, r2, r3
 80004f6:	b2ca      	uxtb	r2, r1
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	3305      	adds	r3, #5
 80004fc:	3230      	adds	r2, #48	; 0x30
 80004fe:	b2d2      	uxtb	r2, r2
 8000500:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a37      	ldr	r2, [pc, #220]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1092      	asrs	r2, r2, #2
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	607b      	str	r3, [r7, #4]
	arr[4] = emissivity % 10 + '0';
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 8000516:	fb83 1302 	smull	r1, r3, r3, r2
 800051a:	1099      	asrs	r1, r3, #2
 800051c:	17d3      	asrs	r3, r2, #31
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	460b      	mov	r3, r1
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	440b      	add	r3, r1
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	1ad1      	subs	r1, r2, r3
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	3304      	adds	r3, #4
 8000530:	3230      	adds	r2, #48	; 0x30
 8000532:	b2d2      	uxtb	r2, r2
 8000534:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800053a:	fb82 1203 	smull	r1, r2, r2, r3
 800053e:	1092      	asrs	r2, r2, #2
 8000540:	17db      	asrs	r3, r3, #31
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	607b      	str	r3, [r7, #4]
	arr[3] = emissivity % 10 + '0';
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800054a:	fb83 1302 	smull	r1, r3, r3, r2
 800054e:	1099      	asrs	r1, r3, #2
 8000550:	17d3      	asrs	r3, r2, #31
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	460b      	mov	r3, r1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	440b      	add	r3, r1
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	1ad1      	subs	r1, r2, r3
 800055e:	b2ca      	uxtb	r2, r1
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	3303      	adds	r3, #3
 8000564:	3230      	adds	r2, #48	; 0x30
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800056e:	fb82 1203 	smull	r1, r2, r2, r3
 8000572:	1092      	asrs	r2, r2, #2
 8000574:	17db      	asrs	r3, r3, #31
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	607b      	str	r3, [r7, #4]
	arr[2] = emissivity % 10 + '0';
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800057e:	fb83 1302 	smull	r1, r3, r3, r2
 8000582:	1099      	asrs	r1, r3, #2
 8000584:	17d3      	asrs	r3, r2, #31
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	460b      	mov	r3, r1
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1ad1      	subs	r1, r2, r3
 8000592:	b2ca      	uxtb	r2, r1
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	3302      	adds	r3, #2
 8000598:	3230      	adds	r2, #48	; 0x30
 800059a:	b2d2      	uxtb	r2, r2
 800059c:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 80005a2:	fb82 1203 	smull	r1, r2, r2, r3
 80005a6:	1092      	asrs	r2, r2, #2
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	607b      	str	r3, [r7, #4]
	arr[1] = ',';
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	222c      	movs	r2, #44	; 0x2c
 80005b4:	701a      	strb	r2, [r3, #0]
	arr[0] = emissivity % 10 + '0';
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 80005ba:	fb83 1302 	smull	r1, r3, r3, r2
 80005be:	1099      	asrs	r1, r3, #2
 80005c0:	17d3      	asrs	r3, r2, #31
 80005c2:	1ac9      	subs	r1, r1, r3
 80005c4:	460b      	mov	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	1ad1      	subs	r1, r2, r3
 80005ce:	b2cb      	uxtb	r3, r1
 80005d0:	3330      	adds	r3, #48	; 0x30
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	66666667 	.word	0x66666667

080005e8 <int_address_to_char_address>:
 *
 * @param address Address to convert
 * @param arr Pointer to output char array
 */
void int_address_to_char_address(int address, char* arr)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
	arr[5] = '\0';
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	3305      	adds	r3, #5
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	arr[4] = address % 10 + '0';
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <int_address_to_char_address+0x110>)
 80005fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000602:	1099      	asrs	r1, r3, #2
 8000604:	17d3      	asrs	r3, r2, #31
 8000606:	1ac9      	subs	r1, r1, r3
 8000608:	460b      	mov	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	1ad1      	subs	r1, r2, r3
 8000612:	b2ca      	uxtb	r2, r1
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	3304      	adds	r3, #4
 8000618:	3230      	adds	r2, #48	; 0x30
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	701a      	strb	r2, [r3, #0]
	address /= 10;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a35      	ldr	r2, [pc, #212]	; (80006f8 <int_address_to_char_address+0x110>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	1092      	asrs	r2, r2, #2
 8000628:	17db      	asrs	r3, r3, #31
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	607b      	str	r3, [r7, #4]
	arr[3] = address % 10 + '0';
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <int_address_to_char_address+0x110>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	3303      	adds	r3, #3
 800064c:	3230      	adds	r2, #48	; 0x30
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	701a      	strb	r2, [r3, #0]
	address /= 10;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <int_address_to_char_address+0x110>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	1092      	asrs	r2, r2, #2
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	607b      	str	r3, [r7, #4]
	arr[2] = address % 10 + '0';
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <int_address_to_char_address+0x110>)
 8000666:	fb83 1302 	smull	r1, r3, r3, r2
 800066a:	1099      	asrs	r1, r3, #2
 800066c:	17d3      	asrs	r3, r2, #31
 800066e:	1ac9      	subs	r1, r1, r3
 8000670:	460b      	mov	r3, r1
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	440b      	add	r3, r1
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1ad1      	subs	r1, r2, r3
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3302      	adds	r3, #2
 8000680:	3230      	adds	r2, #48	; 0x30
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	701a      	strb	r2, [r3, #0]
	address /= 10;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <int_address_to_char_address+0x110>)
 800068a:	fb82 1203 	smull	r1, r2, r2, r3
 800068e:	1092      	asrs	r2, r2, #2
 8000690:	17db      	asrs	r3, r3, #31
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	607b      	str	r3, [r7, #4]
	arr[1] = address % 10 + '0';
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <int_address_to_char_address+0x110>)
 800069a:	fb83 1302 	smull	r1, r3, r3, r2
 800069e:	1099      	asrs	r1, r3, #2
 80006a0:	17d3      	asrs	r3, r2, #31
 80006a2:	1ac9      	subs	r1, r1, r3
 80006a4:	460b      	mov	r3, r1
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	440b      	add	r3, r1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	b2ca      	uxtb	r2, r1
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	3230      	adds	r2, #48	; 0x30
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
	address /= 10;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <int_address_to_char_address+0x110>)
 80006be:	fb82 1203 	smull	r1, r2, r2, r3
 80006c2:	1092      	asrs	r2, r2, #2
 80006c4:	17db      	asrs	r3, r3, #31
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	607b      	str	r3, [r7, #4]
	arr[0] = address % 10 + '0';
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <int_address_to_char_address+0x110>)
 80006ce:	fb83 1302 	smull	r1, r3, r3, r2
 80006d2:	1099      	asrs	r1, r3, #2
 80006d4:	17d3      	asrs	r3, r2, #31
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1ad1      	subs	r1, r2, r3
 80006e2:	b2cb      	uxtb	r3, r1
 80006e4:	3330      	adds	r3, #48	; 0x30
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	66666667 	.word	0x66666667

080006fc <display_output>:
 * @param message Pointer to message (what parameter)
 * @param char_param Parameter to output
 * @return void
 */
void display_output(char* message, char* char_param)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	SSD1306_GotoXY (0,0);
 8000706:	2100      	movs	r1, #0
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fe2d 	bl	8001368 <SSD1306_GotoXY>
	SSD1306_Puts (message, &Font_11x18, 1);
 800070e:	2201      	movs	r2, #1
 8000710:	4910      	ldr	r1, [pc, #64]	; (8000754 <display_output+0x58>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 febe 	bl	8001494 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000718:	f000 fd5e 	bl	80011d8 <SSD1306_UpdateScreen>
	HAL_Delay(1500);
 800071c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000720:	f001 f946 	bl	80019b0 <HAL_Delay>
	SSD1306_Clear();
 8000724:	f000 fedb 	bl	80014de <SSD1306_Clear>
	SSD1306_GotoXY (0,0);
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fe1c 	bl	8001368 <SSD1306_GotoXY>
	SSD1306_Puts (char_param, &Font_11x18, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <display_output+0x58>)
 8000734:	6838      	ldr	r0, [r7, #0]
 8000736:	f000 fead 	bl	8001494 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800073a:	f000 fd4d 	bl	80011d8 <SSD1306_UpdateScreen>
	HAL_Delay(1500);
 800073e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000742:	f001 f935 	bl	80019b0 <HAL_Delay>
	SSD1306_Clear();
 8000746:	f000 feca 	bl	80014de <SSD1306_Clear>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000000c 	.word	0x2000000c

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b0a6      	sub	sp, #152	; 0x98
 800075c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f001 f8b5 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f8cd 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f9bd 	bl	8000ae4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800076a:	f000 f931 	bl	80009d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800076e:	f000 f95d 	bl	8000a2c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000772:	f007 fa91 	bl	8007c98 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000776:	f000 f987 	bl	8000a88 <MX_I2C3_Init>
   *
   */
  int mlx_addr_1;
  int mlx_addr_2;

  float float_temp_1 = 0.0;
 800077a:	f04f 0300 	mov.w	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  float float_temp_2 = 0.0;
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34

  char char_temp_1[8];
  char char_temp_2[8];

  // Initialize Display
  if (SSD1306_Init(hi2c3) != 1)
 8000786:	4c54      	ldr	r4, [pc, #336]	; (80008d8 <main+0x180>)
 8000788:	4668      	mov	r0, sp
 800078a:	f104 0310 	add.w	r3, r4, #16
 800078e:	2244      	movs	r2, #68	; 0x44
 8000790:	4619      	mov	r1, r3
 8000792:	f007 ffaf 	bl	80086f4 <memcpy>
 8000796:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800079a:	f000 fb07 	bl	8000dac <SSD1306_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d00d      	beq.n	80007c0 <main+0x68>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a8:	484c      	ldr	r0, [pc, #304]	; (80008dc <main+0x184>)
 80007aa:	f001 fbec 	bl	8001f86 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f001 f8fd 	bl	80019b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ba:	4848      	ldr	r0, [pc, #288]	; (80008dc <main+0x184>)
 80007bc:	f001 fbe3 	bl	8001f86 <HAL_GPIO_TogglePin>
  }

  // Initialize MLX Sensors
  SSD1306_GotoXY (0,0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fdd0 	bl	8001368 <SSD1306_GotoXY>
  SSD1306_Puts (initializing_status, &Font_11x18, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	4945      	ldr	r1, [pc, #276]	; (80008e0 <main+0x188>)
 80007cc:	4845      	ldr	r0, [pc, #276]	; (80008e4 <main+0x18c>)
 80007ce:	f000 fe61 	bl	8001494 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80007d2:	f000 fd01 	bl	80011d8 <SSD1306_UpdateScreen>

  mlx_addr_1 = MLX90614_ScanDevices(hi2c1);
 80007d6:	4c44      	ldr	r4, [pc, #272]	; (80008e8 <main+0x190>)
 80007d8:	4668      	mov	r0, sp
 80007da:	f104 0310 	add.w	r3, r4, #16
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	4619      	mov	r1, r3
 80007e2:	f007 ff87 	bl	80086f4 <memcpy>
 80007e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007ea:	f000 fa89 	bl	8000d00 <MLX90614_ScanDevices>
 80007ee:	6338      	str	r0, [r7, #48]	; 0x30
  mlx_addr_2 = MLX90614_ScanDevices(hi2c2);
 80007f0:	4c3e      	ldr	r4, [pc, #248]	; (80008ec <main+0x194>)
 80007f2:	4668      	mov	r0, sp
 80007f4:	f104 0310 	add.w	r3, r4, #16
 80007f8:	2244      	movs	r2, #68	; 0x44
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 ff7a 	bl	80086f4 <memcpy>
 8000800:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000804:	f000 fa7c 	bl	8000d00 <MLX90614_ScanDevices>
 8000808:	6478      	str	r0, [r7, #68]	; 0x44

  SSD1306_Clear();
 800080a:	f000 fe68 	bl	80014de <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (DEBUG_MODE)
  {
	  char debug_status[] = "Debug mode";
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <main+0x198>)
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	ca07      	ldmia	r2, {r0, r1, r2}
 8000816:	c303      	stmia	r3!, {r0, r1}
 8000818:	801a      	strh	r2, [r3, #0]
 800081a:	3302      	adds	r3, #2
 800081c:	0c12      	lsrs	r2, r2, #16
 800081e:	701a      	strb	r2, [r3, #0]

	  SSD1306_GotoXY (0,0);
 8000820:	2100      	movs	r1, #0
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fda0 	bl	8001368 <SSD1306_GotoXY>
	  SSD1306_Puts (debug_status, &Font_11x18, 1);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2201      	movs	r2, #1
 800082e:	492c      	ldr	r1, [pc, #176]	; (80008e0 <main+0x188>)
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fe2f 	bl	8001494 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000836:	f000 fccf 	bl	80011d8 <SSD1306_UpdateScreen>
	  HAL_Delay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083e:	f001 f8b7 	bl	80019b0 <HAL_Delay>
	  SSD1306_Clear();
 8000842:	f000 fe4c 	bl	80014de <SSD1306_Clear>

	  // Emissivity
	  char char_emissivity[7];
	  float emissivity = MLX90614_ReadReg(mlx_addr_1, MLX90614_EMISSIVITY, MLX90614_DBG_OFF, hi2c1) / 65535; // max 65535
 8000846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000848:	b2dd      	uxtb	r5, r3
 800084a:	4c27      	ldr	r4, [pc, #156]	; (80008e8 <main+0x190>)
 800084c:	4668      	mov	r0, sp
 800084e:	1d23      	adds	r3, r4, #4
 8000850:	2250      	movs	r2, #80	; 0x50
 8000852:	4619      	mov	r1, r3
 8000854:	f007 ff4e 	bl	80086f4 <memcpy>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	2124      	movs	r1, #36	; 0x24
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f9f0 	bl	8000c44 <MLX90614_ReadReg>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <main+0x19c>)
 800086a:	fba3 2302 	umull	r2, r3, r3, r2
 800086e:	0bdb      	lsrs	r3, r3, #15
 8000870:	b29b      	uxth	r3, r3
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	  int_emissivity_to_char_emissivity(emissivity, char_emissivity);
 800087e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	ee17 0a90 	vmov	r0, s15
 8000890:	f7ff fe16 	bl	80004c0 <int_emissivity_to_char_emissivity>
	  display_output(EMISSIVITY_STATUS, char_emissivity);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4817      	ldr	r0, [pc, #92]	; (80008f8 <main+0x1a0>)
 800089c:	f7ff ff2e 	bl	80006fc <display_output>

	  // Slave address
	  char slave_address_char[6];
	  int slave_address_int = MLX90614_ReadReg(mlx_addr_1, MLX90614_SA, MLX90614_DBG_OFF, hi2c1);
 80008a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a2:	b2dd      	uxtb	r5, r3
 80008a4:	4c10      	ldr	r4, [pc, #64]	; (80008e8 <main+0x190>)
 80008a6:	4668      	mov	r0, sp
 80008a8:	1d23      	adds	r3, r4, #4
 80008aa:	2250      	movs	r2, #80	; 0x50
 80008ac:	4619      	mov	r1, r3
 80008ae:	f007 ff21 	bl	80086f4 <memcpy>
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	212e      	movs	r1, #46	; 0x2e
 80008b8:	4628      	mov	r0, r5
 80008ba:	f000 f9c3 	bl	8000c44 <MLX90614_ReadReg>
 80008be:	4603      	mov	r3, r0
 80008c0:	63fb      	str	r3, [r7, #60]	; 0x3c

	  int_address_to_char_address(slave_address_int, slave_address_char);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008c8:	f7ff fe8e 	bl	80005e8 <int_address_to_char_address>
	  display_output(SLAVE_ADDRESS_STATUS, slave_address_char);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <main+0x1a4>)
 80008d2:	f7ff ff13 	bl	80006fc <display_output>

	  while(1)
 80008d6:	e7fe      	b.n	80008d6 <main+0x17e>
 80008d8:	2000082c 	.word	0x2000082c
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000880 	.word	0x20000880
 80008ec:	200008d4 	.word	0x200008d4
 80008f0:	080087dc 	.word	0x080087dc
 80008f4:	80008001 	.word	0x80008001
 80008f8:	080087cc 	.word	0x080087cc
 80008fc:	080087d8 	.word	0x080087d8

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	; 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f007 fefe 	bl	8008710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <SystemClock_Config+0xc8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <SystemClock_Config+0xc8>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <SystemClock_Config+0xc8>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <SystemClock_Config+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a20      	ldr	r2, [pc, #128]	; (80009cc <SystemClock_Config+0xcc>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <SystemClock_Config+0xcc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	2310      	movs	r3, #16
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000970:	2310      	movs	r3, #16
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000974:	23c0      	movs	r3, #192	; 0xc0
 8000976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fd79 	bl	800447c <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000990:	f000 f924 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 ffdc 	bl	800496c <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009ba:	f000 f90f 	bl	8000bdc <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_I2C1_Init+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x58>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a0e:	f001 fad5 	bl	8001fbc <HAL_I2C_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a18:	f000 f8e0 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000880 	.word	0x20000880
 8000a24:	40005400 	.word	0x40005400
 8000a28:	000186a0 	.word	0x000186a0

08000a2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <MX_I2C2_Init+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_I2C2_Init+0x58>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a6a:	f001 faa7 	bl	8001fbc <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 f8b2 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200008d4 	.word	0x200008d4
 8000a80:	40005800 	.word	0x40005800
 8000a84:	000186a0 	.word	0x000186a0

08000a88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_I2C3_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_I2C3_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C3_Init+0x50>)
 8000ac6:	f001 fa79 	bl	8001fbc <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 f884 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000082c 	.word	0x2000082c
 8000adc:	40005c00 	.word	0x40005c00
 8000ae0:	00061a80 	.word	0x00061a80

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0xf0>)
 8000b8e:	f001 f9e1 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_GPIO_Init+0xf4>)
 8000ba6:	f001 f839 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000baa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0xf0>)
 8000bc4:	f001 f82a 	bl	8001c1c <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020c00 	.word	0x40020c00
 8000bd8:	40020000 	.word	0x40020000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <CRC8_Calc>:
 * @param p Pointer to uint8_t
 * @param len Length
 * @return uint8_t Checksum
 */
uint8_t CRC8_Calc (uint8_t *p, uint8_t len)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	81fb      	strh	r3, [r7, #14]
        while (len--)
 8000bf8:	e015      	b.n	8000c26 <CRC8_Calc+0x3e>
        {
                i = (crc ^ *p++) & 0xFF;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	4053      	eors	r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8000c0e:	89bb      	ldrh	r3, [r7, #12]
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <CRC8_Calc+0x58>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4053      	eors	r3, r2
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	81fb      	strh	r3, [r7, #14]
        while (len--)
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	70fa      	strb	r2, [r7, #3]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1e4      	bne.n	8000bfa <CRC8_Calc+0x12>
        }
        return crc & 0xFF;
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	b2db      	uxtb	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	0800882c 	.word	0x0800882c

08000c44 <MLX90614_ReadReg>:
 * @param dbg_lvl Debug level
 * @param hi2c Handler of I2C
 * @return uint16_t Register data
 */
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c)
{
 8000c44:	b082      	sub	sp, #8
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b08b      	sub	sp, #44	; 0x2c
 8000c4a:	af04      	add	r7, sp, #16
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b299      	uxth	r1, r3
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	2303      	movs	r3, #3
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f001 fbe1 	bl	8002440 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	3301      	adds	r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8000c96:	7c3b      	ldrb	r3, [r7, #16]
 8000c98:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8000c9a:	7c7b      	ldrb	r3, [r7, #17]
 8000c9c:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff9f 	bl	8000be8 <CRC8_Calc>
 8000caa:	4603      	mov	r3, r0
 8000cac:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 8000cae:	7c7b      	ldrb	r3, [r7, #17]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	7c3b      	ldrb	r3, [r7, #16]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 8000cbe:	7cbb      	ldrb	r3, [r7, #18]
 8000cc0:	7d7a      	ldrb	r2, [r7, #21]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d001      	beq.n	8000cca <MLX90614_ReadReg+0x86>
		data = 0x0000;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 8000cca:	797b      	ldrb	r3, [r7, #5]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d10b      	bne.n	8000ce8 <MLX90614_ReadReg+0xa4>
 8000cd0:	7cbb      	ldrb	r3, [r7, #18]
 8000cd2:	8afc      	ldrh	r4, [r7, #22]
 8000cd4:	79b8      	ldrb	r0, [r7, #6]
 8000cd6:	79f9      	ldrb	r1, [r7, #7]
 8000cd8:	7d7a      	ldrb	r2, [r7, #21]
 8000cda:	9201      	str	r2, [sp, #4]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	4623      	mov	r3, r4
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 f84e 	bl	8000d84 <MLX90614_SendDebugMsg>

	HAL_Delay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fe61 	bl	80019b0 <HAL_Delay>
	return data;
 8000cee:	8afb      	ldrh	r3, [r7, #22]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cfa:	b002      	add	sp, #8
 8000cfc:	4770      	bx	lr
	...

08000d00 <MLX90614_ScanDevices>:
 *
 * @param hi2c Handler of I2C
 * @return int Device address
 */
int MLX90614_ScanDevices (I2C_HandleTypeDef hi2c)
{
 8000d00:	b084      	sub	sp, #16
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	f107 0c10 	add.w	ip, r7, #16
 8000d0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;
	for (int i = 0; i<126; i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	e029      	b.n	8000d6a <MLX90614_ScanDevices+0x6a>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	2302      	movs	r3, #2
 8000d20:	2202      	movs	r2, #2
 8000d22:	f107 0010 	add.w	r0, r7, #16
 8000d26:	f001 fdb1 	bl	800288c <HAL_I2C_IsDeviceReady>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	70fb      	strb	r3, [r7, #3]
		if (result != HAL_OK)
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d004      	beq.n	8000d3e <MLX90614_ScanDevices+0x3e>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MLX90614_ScanDevices+0x80>)
 8000d3a:	f001 f924 	bl	8001f86 <HAL_GPIO_TogglePin>
		}
		if (result == HAL_OK)
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10f      	bne.n	8000d64 <MLX90614_ScanDevices+0x64>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MLX90614_ScanDevices+0x80>)
 8000d4a:	f001 f91c 	bl	8001f86 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d52:	f000 fe2d 	bl	80019b0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <MLX90614_ScanDevices+0x80>)
 8000d5c:	f001 f913 	bl	8001f86 <HAL_GPIO_TogglePin>
		  return i;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	e005      	b.n	8000d70 <MLX90614_ScanDevices+0x70>
	for (int i = 0; i<126; i++)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b7d      	cmp	r3, #125	; 0x7d
 8000d6e:	ddd2      	ble.n	8000d16 <MLX90614_ScanDevices+0x16>
		}
	}
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <MLX90614_SendDebugMsg>:
 * @param crc_in Checksum in
 * @param crc_calc Calculated checksum
 * @return void
 */
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc)
{
 8000d84:	b490      	push	{r4, r7}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4623      	mov	r3, r4
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	4603      	mov	r3, r0
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	717b      	strb	r3, [r7, #5]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	807b      	strh	r3, [r7, #2]
		// TODO: Do something if error
	}
	else if (op_type == MLX90614_DBG_MSG_R) {
		// TODO: Do something if error
	}
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc90      	pop	{r4, r7}
 8000daa:	4770      	bx	lr

08000dac <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8000dac:	b084      	sub	sp, #16
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b097      	sub	sp, #92	; 0x5c
 8000db2:	af14      	add	r7, sp, #80	; 0x50
 8000db4:	f107 0418 	add.w	r4, r7, #24
 8000db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8000dbc:	f000 fb98 	bl	80014f0 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <SSD1306_Init+0x44>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	2254      	movs	r2, #84	; 0x54
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f007 fc92 	bl	80086f4 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000dd0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2178      	movs	r1, #120	; 0x78
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <SSD1306_Init+0x44>)
 8000dda:	f001 fd57 	bl	800288c <HAL_I2C_IsDeviceReady>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	e1ee      	b.n	80011c6 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000de8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000dec:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dee:	e004      	b.n	8000dfa <SSD1306_Init+0x4e>
 8000df0:	200007d8 	.word	0x200007d8
		p--;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f9      	bne.n	8000df4 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e00:	4ce1      	ldr	r4, [pc, #900]	; (8001188 <SSD1306_Init+0x3dc>)
 8000e02:	23ae      	movs	r3, #174	; 0xae
 8000e04:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e06:	4668      	mov	r0, sp
 8000e08:	f104 0308 	add.w	r3, r4, #8
 8000e0c:	224c      	movs	r2, #76	; 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f007 fc70 	bl	80086f4 <memcpy>
 8000e14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	f000 fbc6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000e20:	4cd9      	ldr	r4, [pc, #868]	; (8001188 <SSD1306_Init+0x3dc>)
 8000e22:	2320      	movs	r3, #32
 8000e24:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e26:	4668      	mov	r0, sp
 8000e28:	f104 0308 	add.w	r3, r4, #8
 8000e2c:	224c      	movs	r2, #76	; 0x4c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f007 fc60 	bl	80086f4 <memcpy>
 8000e34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	; 0x78
 8000e3c:	f000 fbb6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e40:	4cd1      	ldr	r4, [pc, #836]	; (8001188 <SSD1306_Init+0x3dc>)
 8000e42:	2310      	movs	r3, #16
 8000e44:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e46:	4668      	mov	r0, sp
 8000e48:	f104 0308 	add.w	r3, r4, #8
 8000e4c:	224c      	movs	r2, #76	; 0x4c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f007 fc50 	bl	80086f4 <memcpy>
 8000e54:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	; 0x78
 8000e5c:	f000 fba6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e60:	4cc9      	ldr	r4, [pc, #804]	; (8001188 <SSD1306_Init+0x3dc>)
 8000e62:	23b0      	movs	r3, #176	; 0xb0
 8000e64:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e66:	4668      	mov	r0, sp
 8000e68:	f104 0308 	add.w	r3, r4, #8
 8000e6c:	224c      	movs	r2, #76	; 0x4c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f007 fc40 	bl	80086f4 <memcpy>
 8000e74:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	; 0x78
 8000e7c:	f000 fb96 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e80:	4cc1      	ldr	r4, [pc, #772]	; (8001188 <SSD1306_Init+0x3dc>)
 8000e82:	23c8      	movs	r3, #200	; 0xc8
 8000e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e86:	4668      	mov	r0, sp
 8000e88:	f104 0308 	add.w	r3, r4, #8
 8000e8c:	224c      	movs	r2, #76	; 0x4c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f007 fc30 	bl	80086f4 <memcpy>
 8000e94:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2078      	movs	r0, #120	; 0x78
 8000e9c:	f000 fb86 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ea0:	4cb9      	ldr	r4, [pc, #740]	; (8001188 <SSD1306_Init+0x3dc>)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ea6:	4668      	mov	r0, sp
 8000ea8:	f104 0308 	add.w	r3, r4, #8
 8000eac:	224c      	movs	r2, #76	; 0x4c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f007 fc20 	bl	80086f4 <memcpy>
 8000eb4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2078      	movs	r0, #120	; 0x78
 8000ebc:	f000 fb76 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ec0:	4cb1      	ldr	r4, [pc, #708]	; (8001188 <SSD1306_Init+0x3dc>)
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f104 0308 	add.w	r3, r4, #8
 8000ecc:	224c      	movs	r2, #76	; 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f007 fc10 	bl	80086f4 <memcpy>
 8000ed4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2078      	movs	r0, #120	; 0x78
 8000edc:	f000 fb66 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ee0:	4ca9      	ldr	r4, [pc, #676]	; (8001188 <SSD1306_Init+0x3dc>)
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ee6:	4668      	mov	r0, sp
 8000ee8:	f104 0308 	add.w	r3, r4, #8
 8000eec:	224c      	movs	r2, #76	; 0x4c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f007 fc00 	bl	80086f4 <memcpy>
 8000ef4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fb56 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f00:	4ca1      	ldr	r4, [pc, #644]	; (8001188 <SSD1306_Init+0x3dc>)
 8000f02:	2381      	movs	r3, #129	; 0x81
 8000f04:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f06:	4668      	mov	r0, sp
 8000f08:	f104 0308 	add.w	r3, r4, #8
 8000f0c:	224c      	movs	r2, #76	; 0x4c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f007 fbf0 	bl	80086f4 <memcpy>
 8000f14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	f000 fb46 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f20:	4c99      	ldr	r4, [pc, #612]	; (8001188 <SSD1306_Init+0x3dc>)
 8000f22:	23ff      	movs	r3, #255	; 0xff
 8000f24:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f26:	4668      	mov	r0, sp
 8000f28:	f104 0308 	add.w	r3, r4, #8
 8000f2c:	224c      	movs	r2, #76	; 0x4c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f007 fbe0 	bl	80086f4 <memcpy>
 8000f34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2078      	movs	r0, #120	; 0x78
 8000f3c:	f000 fb36 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f40:	4c91      	ldr	r4, [pc, #580]	; (8001188 <SSD1306_Init+0x3dc>)
 8000f42:	23a1      	movs	r3, #161	; 0xa1
 8000f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f46:	4668      	mov	r0, sp
 8000f48:	f104 0308 	add.w	r3, r4, #8
 8000f4c:	224c      	movs	r2, #76	; 0x4c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f007 fbd0 	bl	80086f4 <memcpy>
 8000f54:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2078      	movs	r0, #120	; 0x78
 8000f5c:	f000 fb26 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f60:	4c89      	ldr	r4, [pc, #548]	; (8001188 <SSD1306_Init+0x3dc>)
 8000f62:	23a6      	movs	r3, #166	; 0xa6
 8000f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f66:	4668      	mov	r0, sp
 8000f68:	f104 0308 	add.w	r3, r4, #8
 8000f6c:	224c      	movs	r2, #76	; 0x4c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f007 fbc0 	bl	80086f4 <memcpy>
 8000f74:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f000 fb16 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f80:	4c81      	ldr	r4, [pc, #516]	; (8001188 <SSD1306_Init+0x3dc>)
 8000f82:	23a8      	movs	r3, #168	; 0xa8
 8000f84:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f86:	4668      	mov	r0, sp
 8000f88:	f104 0308 	add.w	r3, r4, #8
 8000f8c:	224c      	movs	r2, #76	; 0x4c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f007 fbb0 	bl	80086f4 <memcpy>
 8000f94:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 fb06 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fa0:	4c79      	ldr	r4, [pc, #484]	; (8001188 <SSD1306_Init+0x3dc>)
 8000fa2:	233f      	movs	r3, #63	; 0x3f
 8000fa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8000fa6:	4668      	mov	r0, sp
 8000fa8:	f104 0308 	add.w	r3, r4, #8
 8000fac:	224c      	movs	r2, #76	; 0x4c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f007 fba0 	bl	80086f4 <memcpy>
 8000fb4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f000 faf6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fc0:	4c71      	ldr	r4, [pc, #452]	; (8001188 <SSD1306_Init+0x3dc>)
 8000fc2:	23a4      	movs	r3, #164	; 0xa4
 8000fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8000fc6:	4668      	mov	r0, sp
 8000fc8:	f104 0308 	add.w	r3, r4, #8
 8000fcc:	224c      	movs	r2, #76	; 0x4c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f007 fb90 	bl	80086f4 <memcpy>
 8000fd4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2078      	movs	r0, #120	; 0x78
 8000fdc:	f000 fae6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fe0:	4c69      	ldr	r4, [pc, #420]	; (8001188 <SSD1306_Init+0x3dc>)
 8000fe2:	23d3      	movs	r3, #211	; 0xd3
 8000fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8000fe6:	4668      	mov	r0, sp
 8000fe8:	f104 0308 	add.w	r3, r4, #8
 8000fec:	224c      	movs	r2, #76	; 0x4c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f007 fb80 	bl	80086f4 <memcpy>
 8000ff4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	; 0x78
 8000ffc:	f000 fad6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001000:	4c61      	ldr	r4, [pc, #388]	; (8001188 <SSD1306_Init+0x3dc>)
 8001002:	2300      	movs	r3, #0
 8001004:	9313      	str	r3, [sp, #76]	; 0x4c
 8001006:	4668      	mov	r0, sp
 8001008:	f104 0308 	add.w	r3, r4, #8
 800100c:	224c      	movs	r2, #76	; 0x4c
 800100e:	4619      	mov	r1, r3
 8001010:	f007 fb70 	bl	80086f4 <memcpy>
 8001014:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	; 0x78
 800101c:	f000 fac6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001020:	4c59      	ldr	r4, [pc, #356]	; (8001188 <SSD1306_Init+0x3dc>)
 8001022:	23d5      	movs	r3, #213	; 0xd5
 8001024:	9313      	str	r3, [sp, #76]	; 0x4c
 8001026:	4668      	mov	r0, sp
 8001028:	f104 0308 	add.w	r3, r4, #8
 800102c:	224c      	movs	r2, #76	; 0x4c
 800102e:	4619      	mov	r1, r3
 8001030:	f007 fb60 	bl	80086f4 <memcpy>
 8001034:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 fab6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001040:	4c51      	ldr	r4, [pc, #324]	; (8001188 <SSD1306_Init+0x3dc>)
 8001042:	23f0      	movs	r3, #240	; 0xf0
 8001044:	9313      	str	r3, [sp, #76]	; 0x4c
 8001046:	4668      	mov	r0, sp
 8001048:	f104 0308 	add.w	r3, r4, #8
 800104c:	224c      	movs	r2, #76	; 0x4c
 800104e:	4619      	mov	r1, r3
 8001050:	f007 fb50 	bl	80086f4 <memcpy>
 8001054:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	; 0x78
 800105c:	f000 faa6 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001060:	4c49      	ldr	r4, [pc, #292]	; (8001188 <SSD1306_Init+0x3dc>)
 8001062:	23d9      	movs	r3, #217	; 0xd9
 8001064:	9313      	str	r3, [sp, #76]	; 0x4c
 8001066:	4668      	mov	r0, sp
 8001068:	f104 0308 	add.w	r3, r4, #8
 800106c:	224c      	movs	r2, #76	; 0x4c
 800106e:	4619      	mov	r1, r3
 8001070:	f007 fb40 	bl	80086f4 <memcpy>
 8001074:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	; 0x78
 800107c:	f000 fa96 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001080:	4c41      	ldr	r4, [pc, #260]	; (8001188 <SSD1306_Init+0x3dc>)
 8001082:	2322      	movs	r3, #34	; 0x22
 8001084:	9313      	str	r3, [sp, #76]	; 0x4c
 8001086:	4668      	mov	r0, sp
 8001088:	f104 0308 	add.w	r3, r4, #8
 800108c:	224c      	movs	r2, #76	; 0x4c
 800108e:	4619      	mov	r1, r3
 8001090:	f007 fb30 	bl	80086f4 <memcpy>
 8001094:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	; 0x78
 800109c:	f000 fa86 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80010a0:	4c39      	ldr	r4, [pc, #228]	; (8001188 <SSD1306_Init+0x3dc>)
 80010a2:	23da      	movs	r3, #218	; 0xda
 80010a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010a6:	4668      	mov	r0, sp
 80010a8:	f104 0308 	add.w	r3, r4, #8
 80010ac:	224c      	movs	r2, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f007 fb20 	bl	80086f4 <memcpy>
 80010b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fa76 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80010c0:	4c31      	ldr	r4, [pc, #196]	; (8001188 <SSD1306_Init+0x3dc>)
 80010c2:	2312      	movs	r3, #18
 80010c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010c6:	4668      	mov	r0, sp
 80010c8:	f104 0308 	add.w	r3, r4, #8
 80010cc:	224c      	movs	r2, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	f007 fb10 	bl	80086f4 <memcpy>
 80010d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fa66 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010e0:	4c29      	ldr	r4, [pc, #164]	; (8001188 <SSD1306_Init+0x3dc>)
 80010e2:	23db      	movs	r3, #219	; 0xdb
 80010e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010e6:	4668      	mov	r0, sp
 80010e8:	f104 0308 	add.w	r3, r4, #8
 80010ec:	224c      	movs	r2, #76	; 0x4c
 80010ee:	4619      	mov	r1, r3
 80010f0:	f007 fb00 	bl	80086f4 <memcpy>
 80010f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fa56 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001100:	4c21      	ldr	r4, [pc, #132]	; (8001188 <SSD1306_Init+0x3dc>)
 8001102:	2320      	movs	r3, #32
 8001104:	9313      	str	r3, [sp, #76]	; 0x4c
 8001106:	4668      	mov	r0, sp
 8001108:	f104 0308 	add.w	r3, r4, #8
 800110c:	224c      	movs	r2, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	f007 faf0 	bl	80086f4 <memcpy>
 8001114:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 fa46 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001120:	4c19      	ldr	r4, [pc, #100]	; (8001188 <SSD1306_Init+0x3dc>)
 8001122:	238d      	movs	r3, #141	; 0x8d
 8001124:	9313      	str	r3, [sp, #76]	; 0x4c
 8001126:	4668      	mov	r0, sp
 8001128:	f104 0308 	add.w	r3, r4, #8
 800112c:	224c      	movs	r2, #76	; 0x4c
 800112e:	4619      	mov	r1, r3
 8001130:	f007 fae0 	bl	80086f4 <memcpy>
 8001134:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 fa36 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001140:	4c11      	ldr	r4, [pc, #68]	; (8001188 <SSD1306_Init+0x3dc>)
 8001142:	2314      	movs	r3, #20
 8001144:	9313      	str	r3, [sp, #76]	; 0x4c
 8001146:	4668      	mov	r0, sp
 8001148:	f104 0308 	add.w	r3, r4, #8
 800114c:	224c      	movs	r2, #76	; 0x4c
 800114e:	4619      	mov	r1, r3
 8001150:	f007 fad0 	bl	80086f4 <memcpy>
 8001154:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	; 0x78
 800115c:	f000 fa26 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001160:	4c09      	ldr	r4, [pc, #36]	; (8001188 <SSD1306_Init+0x3dc>)
 8001162:	23af      	movs	r3, #175	; 0xaf
 8001164:	9313      	str	r3, [sp, #76]	; 0x4c
 8001166:	4668      	mov	r0, sp
 8001168:	f104 0308 	add.w	r3, r4, #8
 800116c:	224c      	movs	r2, #76	; 0x4c
 800116e:	4619      	mov	r1, r3
 8001170:	f007 fac0 	bl	80086f4 <memcpy>
 8001174:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fa16 	bl	80015ac <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001180:	4c01      	ldr	r4, [pc, #4]	; (8001188 <SSD1306_Init+0x3dc>)
 8001182:	232e      	movs	r3, #46	; 0x2e
 8001184:	e002      	b.n	800118c <SSD1306_Init+0x3e0>
 8001186:	bf00      	nop
 8001188:	200007d8 	.word	0x200007d8
 800118c:	9313      	str	r3, [sp, #76]	; 0x4c
 800118e:	4668      	mov	r0, sp
 8001190:	f104 0308 	add.w	r3, r4, #8
 8001194:	224c      	movs	r2, #76	; 0x4c
 8001196:	4619      	mov	r1, r3
 8001198:	f007 faac 	bl	80086f4 <memcpy>
 800119c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	; 0x78
 80011a4:	f000 fa02 	bl	80015ac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f865 	bl	8001278 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011ae:	f000 f813 	bl	80011d8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <SSD1306_Init+0x428>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <SSD1306_Init+0x428>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SSD1306_Init+0x428>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011d0:	b004      	add	sp, #16
 80011d2:	4770      	bx	lr
 80011d4:	200005b0 	.word	0x200005b0

080011d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b097      	sub	sp, #92	; 0x5c
 80011dc:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e03d      	b.n	8001260 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3b50      	subs	r3, #80	; 0x50
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4c21      	ldr	r4, [pc, #132]	; (8001270 <SSD1306_UpdateScreen+0x98>)
 80011ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80011ee:	4668      	mov	r0, sp
 80011f0:	f104 0308 	add.w	r3, r4, #8
 80011f4:	224c      	movs	r2, #76	; 0x4c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f007 fa7c 	bl	80086f4 <memcpy>
 80011fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 f9d2 	bl	80015ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001208:	4c19      	ldr	r4, [pc, #100]	; (8001270 <SSD1306_UpdateScreen+0x98>)
 800120a:	2300      	movs	r3, #0
 800120c:	9313      	str	r3, [sp, #76]	; 0x4c
 800120e:	4668      	mov	r0, sp
 8001210:	f104 0308 	add.w	r3, r4, #8
 8001214:	224c      	movs	r2, #76	; 0x4c
 8001216:	4619      	mov	r1, r3
 8001218:	f007 fa6c 	bl	80086f4 <memcpy>
 800121c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001220:	2100      	movs	r1, #0
 8001222:	2078      	movs	r0, #120	; 0x78
 8001224:	f000 f9c2 	bl	80015ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001228:	4c11      	ldr	r4, [pc, #68]	; (8001270 <SSD1306_UpdateScreen+0x98>)
 800122a:	2310      	movs	r3, #16
 800122c:	9313      	str	r3, [sp, #76]	; 0x4c
 800122e:	4668      	mov	r0, sp
 8001230:	f104 0308 	add.w	r3, r4, #8
 8001234:	224c      	movs	r2, #76	; 0x4c
 8001236:	4619      	mov	r1, r3
 8001238:	f007 fa5c 	bl	80086f4 <memcpy>
 800123c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	; 0x78
 8001244:	f000 f9b2 	bl	80015ac <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	01db      	lsls	r3, r3, #7
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <SSD1306_UpdateScreen+0x9c>)
 800124e:	441a      	add	r2, r3
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	2078      	movs	r0, #120	; 0x78
 8001256:	f000 f961 	bl	800151c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	3301      	adds	r3, #1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d9be      	bls.n	80011e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	200007d8 	.word	0x200007d8
 8001274:	200001b0 	.word	0x200001b0

08001278 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <SSD1306_Fill+0x14>
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <SSD1306_Fill+0x16>
 800128c:	23ff      	movs	r3, #255	; 0xff
 800128e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <SSD1306_Fill+0x2c>)
 8001296:	f007 fa3b 	bl	8008710 <memset>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001b0 	.word	0x200001b0

080012a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	70fb      	strb	r3, [r7, #3]
	if (
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2b7f      	cmp	r3, #127	; 0x7f
 80012be:	d848      	bhi.n	8001352 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	2b3f      	cmp	r3, #63	; 0x3f
 80012c4:	d845      	bhi.n	8001352 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <SSD1306_DrawPixel+0xb8>)
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d11a      	bne.n	8001318 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012e2:	88fa      	ldrh	r2, [r7, #6]
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	b298      	uxth	r0, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	4413      	add	r3, r2
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <SSD1306_DrawPixel+0xbc>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	88bb      	ldrh	r3, [r7, #4]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b259      	sxtb	r1, r3
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	4603      	mov	r3, r0
 800130c:	01db      	lsls	r3, r3, #7
 800130e:	4413      	add	r3, r2
 8001310:	b2c9      	uxtb	r1, r1
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <SSD1306_DrawPixel+0xbc>)
 8001314:	54d1      	strb	r1, [r2, r3]
 8001316:	e01d      	b.n	8001354 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	b298      	uxth	r0, r3
 8001320:	4603      	mov	r3, r0
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	4413      	add	r3, r2
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <SSD1306_DrawPixel+0xbc>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	b25a      	sxtb	r2, r3
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	2101      	movs	r1, #1
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4013      	ands	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	4603      	mov	r3, r0
 8001346:	01db      	lsls	r3, r3, #7
 8001348:	4413      	add	r3, r2
 800134a:	b2c9      	uxtb	r1, r1
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SSD1306_DrawPixel+0xbc>)
 800134e:	54d1      	strb	r1, [r2, r3]
 8001350:	e000      	b.n	8001354 <SSD1306_DrawPixel+0xac>
		return;
 8001352:	bf00      	nop
	}
}
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	200005b0 	.word	0x200005b0
 8001364:	200001b0 	.word	0x200001b0

08001368 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	4613      	mov	r3, r2
 8001376:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SSD1306_GotoXY+0x28>)
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <SSD1306_GotoXY+0x28>)
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	8053      	strh	r3, [r2, #2]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	200005b0 	.word	0x200005b0

08001394 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <SSD1306_Putc+0xfc>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
	if (
 80013b0:	2b7f      	cmp	r3, #127	; 0x7f
 80013b2:	dc07      	bgt.n	80013c4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <SSD1306_Putc+0xfc>)
 80013b6:	885b      	ldrh	r3, [r3, #2]
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013c0:	2b3f      	cmp	r3, #63	; 0x3f
 80013c2:	dd01      	ble.n	80013c8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e05e      	b.n	8001486 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e04b      	b.n	8001466 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3b20      	subs	r3, #32
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	7849      	ldrb	r1, [r1, #1]
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	440b      	add	r3, r1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e030      	b.n	8001454 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d010      	beq.n	8001424 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <SSD1306_Putc+0xfc>)
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b298      	uxth	r0, r3
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <SSD1306_Putc+0xfc>)
 8001410:	885a      	ldrh	r2, [r3, #2]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	79ba      	ldrb	r2, [r7, #6]
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff ff43 	bl	80012a8 <SSD1306_DrawPixel>
 8001422:	e014      	b.n	800144e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <SSD1306_Putc+0xfc>)
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4413      	add	r3, r2
 800142e:	b298      	uxth	r0, r3
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <SSD1306_Putc+0xfc>)
 8001432:	885a      	ldrh	r2, [r3, #2]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b299      	uxth	r1, r3
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	f7ff ff2d 	bl	80012a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	3301      	adds	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4293      	cmp	r3, r2
 800145e:	d3c8      	bcc.n	80013f2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	461a      	mov	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4293      	cmp	r3, r2
 8001470:	d3ad      	bcc.n	80013ce <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <SSD1306_Putc+0xfc>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4413      	add	r3, r2
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <SSD1306_Putc+0xfc>)
 8001482:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001484:	79fb      	ldrb	r3, [r7, #7]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200005b0 	.word	0x200005b0

08001494 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014a2:	e012      	b.n	80014ca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff71 	bl	8001394 <SSD1306_Putc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d002      	beq.n	80014c4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	e008      	b.n	80014d6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1e8      	bne.n	80014a4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	781b      	ldrb	r3, [r3, #0]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fec8 	bl	8001278 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014e8:	f7ff fe76 	bl	80011d8 <SSD1306_UpdateScreen>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <ssd1306_I2C_Init+0x28>)
 80014f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fa:	e002      	b.n	8001502 <ssd1306_I2C_Init+0x12>
		p--;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f9      	bne.n	80014fc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	0003d090 	.word	0x0003d090

0800151c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b0c7      	sub	sp, #284	; 0x11c
 8001520:	af02      	add	r7, sp, #8
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4639      	mov	r1, r7
 8001528:	600a      	str	r2, [r1, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	4622      	mov	r2, r4
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	1dbb      	adds	r3, r7, #6
 8001534:	4602      	mov	r2, r0
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	460a      	mov	r2, r1
 800153c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	1dba      	adds	r2, r7, #6
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800154e:	e010      	b.n	8001572 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001550:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001554:	463a      	mov	r2, r7
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	441a      	add	r2, r3
 800155a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800155e:	3301      	adds	r3, #1
 8001560:	7811      	ldrb	r1, [r2, #0]
 8001562:	f107 020c 	add.w	r2, r7, #12
 8001566:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001568:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800156c:	3301      	adds	r3, #1
 800156e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001572:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001576:	b29b      	uxth	r3, r3
 8001578:	1d3a      	adds	r2, r7, #4
 800157a:	8812      	ldrh	r2, [r2, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8e7      	bhi.n	8001550 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b299      	uxth	r1, r3
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	f107 020c 	add.w	r2, r7, #12
 8001592:	200a      	movs	r0, #10
 8001594:	9000      	str	r0, [sp, #0]
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <ssd1306_I2C_WriteMulti+0x8c>)
 8001598:	f000 fe54 	bl	8002244 <HAL_I2C_Master_Transmit>
}
 800159c:	bf00      	nop
 800159e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200007d8 	.word	0x200007d8

080015ac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 80015ac:	b082      	sub	sp, #8
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af02      	add	r7, sp, #8
 80015b4:	f107 0c18 	add.w	ip, r7, #24
 80015b8:	e88c 000c 	stmia.w	ip, {r2, r3}
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	460b      	mov	r3, r1
 80015c2:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015c8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80015cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	b299      	uxth	r1, r3
 80015d2:	f107 020c 	add.w	r2, r7, #12
 80015d6:	230a      	movs	r3, #10
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2302      	movs	r3, #2
 80015dc:	f107 0018 	add.w	r0, r7, #24
 80015e0:	f000 fe30 	bl	8002244 <HAL_I2C_Master_Transmit>
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ee:	b002      	add	sp, #8
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_I2C_MspInit+0x18c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12c      	bne.n	80016c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a59      	ldr	r2, [pc, #356]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001686:	2312      	movs	r3, #18
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001692:	2304      	movs	r3, #4
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	484e      	ldr	r0, [pc, #312]	; (80017d8 <HAL_I2C_MspInit+0x194>)
 800169e:	f000 fabd 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80016be:	e083      	b.n	80017c8 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_I2C_MspInit+0x198>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12d      	bne.n	8001726 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ec:	2312      	movs	r3, #18
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016f8:	2304      	movs	r3, #4
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4835      	ldr	r0, [pc, #212]	; (80017d8 <HAL_I2C_MspInit+0x194>)
 8001704:	f000 fa8a 	bl	8001c1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
}
 8001724:	e050      	b.n	80017c8 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_I2C_MspInit+0x19c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d14b      	bne.n	80017c8 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6313      	str	r3, [r2, #48]	; 0x30
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800177a:	2304      	movs	r3, #4
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <HAL_I2C_MspInit+0x1a0>)
 8001786:	f000 fa49 	bl	8001c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001790:	2312      	movs	r3, #18
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800179c:	2304      	movs	r3, #4
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4810      	ldr	r0, [pc, #64]	; (80017e8 <HAL_I2C_MspInit+0x1a4>)
 80017a8:	f000 fa38 	bl	8001c1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80017b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_I2C_MspInit+0x190>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
}
 80017c8:	bf00      	nop
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40005800 	.word	0x40005800
 80017e0:	40005c00 	.word	0x40005c00
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020000 	.word	0x40020000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 f89a 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <OTG_FS_IRQHandler+0x10>)
 8001846:	f001 fde6 	bl	8003416 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20001e3c 	.word	0x20001e3c

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018a2:	f7ff ffd7 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f006 ff01 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018aa:	f7fe ff55 	bl	8000758 <main>
  bx  lr    
 80018ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80018bc:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 80018c0:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 80018c4:	20002244 	.word	0x20002244

080018c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_Init+0x40>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_Init+0x40>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_Init+0x40>)
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 f94f 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	200f      	movs	r0, #15
 80018fc:	f000 f808 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fe78 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f967 	bl	8001c02 <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194c:	f000 f92f 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000014 	.word	0x20000014
 8001968:	2000001c 	.word	0x2000001c
 800196c:	20000018 	.word	0x20000018

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000001c 	.word	0x2000001c
 8001994:	20000968 	.word	0x20000968

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000968 	.word	0x20000968

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000001c 	.word	0x2000001c

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff29 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff3e 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff8e 	bl	8001aec <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff31 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa2 	bl	8001b54 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e16b      	b.n	8001f10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 815a 	bne.w	8001f0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80b4 	beq.w	8001f0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a5f      	ldr	r2, [pc, #380]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x314>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02b      	beq.n	8001e42 <HAL_GPIO_Init+0x226>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x318>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x222>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x31c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x21e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x216>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x328>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x32c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x330>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x20a>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00e      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e00c      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00a      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e2e:	2305      	movs	r3, #5
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e86:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb0:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f ae90 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e12b      	b.n	8002226 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fb2e 	bl	8001644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002020:	f002 fe4c 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 8002024:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4a81      	ldr	r2, [pc, #516]	; (8002230 <HAL_I2C_Init+0x274>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d807      	bhi.n	8002040 <HAL_I2C_Init+0x84>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a80      	ldr	r2, [pc, #512]	; (8002234 <HAL_I2C_Init+0x278>)
 8002034:	4293      	cmp	r3, r2
 8002036:	bf94      	ite	ls
 8002038:	2301      	movls	r3, #1
 800203a:	2300      	movhi	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e006      	b.n	800204e <HAL_I2C_Init+0x92>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a7d      	ldr	r2, [pc, #500]	; (8002238 <HAL_I2C_Init+0x27c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	bf94      	ite	ls
 8002048:	2301      	movls	r3, #1
 800204a:	2300      	movhi	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0e7      	b.n	8002226 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a78      	ldr	r2, [pc, #480]	; (800223c <HAL_I2C_Init+0x280>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_I2C_Init+0x274>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d802      	bhi.n	8002090 <HAL_I2C_Init+0xd4>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	3301      	adds	r3, #1
 800208e:	e009      	b.n	80020a4 <HAL_I2C_Init+0xe8>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	4a69      	ldr	r2, [pc, #420]	; (8002240 <HAL_I2C_Init+0x284>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	3301      	adds	r3, #1
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	495c      	ldr	r1, [pc, #368]	; (8002230 <HAL_I2C_Init+0x274>)
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d819      	bhi.n	80020f8 <HAL_I2C_Init+0x13c>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e59      	subs	r1, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d2:	1c59      	adds	r1, r3, #1
 80020d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020d8:	400b      	ands	r3, r1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_I2C_Init+0x138>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1e59      	subs	r1, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f2:	e051      	b.n	8002198 <HAL_I2C_Init+0x1dc>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e04f      	b.n	8002198 <HAL_I2C_Init+0x1dc>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d111      	bne.n	8002124 <HAL_I2C_Init+0x168>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	440b      	add	r3, r1
 800210e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e012      	b.n	800214a <HAL_I2C_Init+0x18e>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	0099      	lsls	r1, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Init+0x196>
 800214e:	2301      	movs	r3, #1
 8002150:	e022      	b.n	8002198 <HAL_I2C_Init+0x1dc>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10e      	bne.n	8002178 <HAL_I2C_Init+0x1bc>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1e58      	subs	r0, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6859      	ldr	r1, [r3, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	440b      	add	r3, r1
 8002168:	fbb0 f3f3 	udiv	r3, r0, r3
 800216c:	3301      	adds	r3, #1
 800216e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002176:	e00f      	b.n	8002198 <HAL_I2C_Init+0x1dc>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	0099      	lsls	r1, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	fbb0 f3f3 	udiv	r3, r0, r3
 800218e:	3301      	adds	r3, #1
 8002190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	6809      	ldr	r1, [r1, #0]
 800219c:	4313      	orrs	r3, r2
 800219e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6911      	ldr	r1, [r2, #16]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68d2      	ldr	r2, [r2, #12]
 80021d2:	4311      	orrs	r1, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	430b      	orrs	r3, r1
 80021da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	000186a0 	.word	0x000186a0
 8002234:	001e847f 	.word	0x001e847f
 8002238:	003d08ff 	.word	0x003d08ff
 800223c:	431bde83 	.word	0x431bde83
 8002240:	10624dd3 	.word	0x10624dd3

08002244 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	461a      	mov	r2, r3
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
 8002254:	4613      	mov	r3, r2
 8002256:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fb9e 	bl	8001998 <HAL_GetTick>
 800225c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b20      	cmp	r3, #32
 8002268:	f040 80e0 	bne.w	800242c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	4970      	ldr	r1, [pc, #448]	; (8002438 <HAL_I2C_Master_Transmit+0x1f4>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fda0 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e0d3      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x50>
 8002290:	2302      	movs	r3, #2
 8002292:	e0cc      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ea>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d007      	beq.n	80022ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2210      	movs	r2, #16
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a50      	ldr	r2, [pc, #320]	; (800243c <HAL_I2C_Master_Transmit+0x1f8>)
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6a3a      	ldr	r2, [r7, #32]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fbf0 	bl	8002ae8 <I2C_MasterRequestWrite>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e08d      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002328:	e066      	b.n	80023f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fe1a 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b04      	cmp	r3, #4
 8002340:	d107      	bne.n	8002352 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06b      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d11b      	bne.n	80023cc <HAL_I2C_Master_Transmit+0x188>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	6a39      	ldr	r1, [r7, #32]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fe0a 	bl	8002fea <I2C_WaitOnBTFFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d107      	bne.n	80023f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e01a      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d194      	bne.n	800232a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	00100002 	.word	0x00100002
 800243c:	ffff0000 	.word	0xffff0000

08002440 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245a:	f7ff fa9d 	bl	8001998 <HAL_GetTick>
 800245e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	f040 8208 	bne.w	800287e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	2201      	movs	r2, #1
 8002476:	497b      	ldr	r1, [pc, #492]	; (8002664 <HAL_I2C_Mem_Read+0x224>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fc9f 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
 8002486:	e1fb      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Mem_Read+0x56>
 8002492:	2302      	movs	r3, #2
 8002494:	e1f4      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2222      	movs	r2, #34	; 0x22
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a5b      	ldr	r2, [pc, #364]	; (8002668 <HAL_I2C_Mem_Read+0x228>)
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fe:	88f8      	ldrh	r0, [r7, #6]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fb6c 	bl	8002bec <I2C_RequestMemoryRead>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e1b0      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	2b00      	cmp	r3, #0
 8002524:	d113      	bne.n	800254e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e184      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11b      	bne.n	800258e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e164      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	2b02      	cmp	r3, #2
 8002594:	d11b      	bne.n	80025ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	e144      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025e4:	e138      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	f200 80f1 	bhi.w	80027d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d123      	bne.n	8002640 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fd35 	bl	800306c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e139      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800263e:	e10b      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b02      	cmp	r3, #2
 8002646:	d14e      	bne.n	80026e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	2200      	movs	r2, #0
 8002650:	4906      	ldr	r1, [pc, #24]	; (800266c <HAL_I2C_Mem_Read+0x22c>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fbb2 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e10e      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
 8002662:	bf00      	nop
 8002664:	00100002 	.word	0x00100002
 8002668:	ffff0000 	.word	0xffff0000
 800266c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e4:	e0b8      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2200      	movs	r2, #0
 80026ee:	4966      	ldr	r1, [pc, #408]	; (8002888 <HAL_I2C_Mem_Read+0x448>)
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb63 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0bf      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	2200      	movs	r2, #0
 800274a:	494f      	ldr	r1, [pc, #316]	; (8002888 <HAL_I2C_Mem_Read+0x448>)
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fb35 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e091      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d0:	e042      	b.n	8002858 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fc48 	bl	800306c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e04c      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b04      	cmp	r3, #4
 8002824:	d118      	bne.n	8002858 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	f47f aec2 	bne.w	80025e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	00010004 	.word	0x00010004

0800288c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	460b      	mov	r3, r1
 800289a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff f87c 	bl	8001998 <HAL_GetTick>
 80028a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	f040 8111 	bne.w	8002ad6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2319      	movs	r3, #25
 80028ba:	2201      	movs	r2, #1
 80028bc:	4988      	ldr	r1, [pc, #544]	; (8002ae0 <HAL_I2C_IsDeviceReady+0x254>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa7c 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	e104      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_I2C_IsDeviceReady+0x50>
 80028d8:	2302      	movs	r3, #2
 80028da:	e0fd      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d007      	beq.n	8002902 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2224      	movs	r2, #36	; 0x24
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a70      	ldr	r2, [pc, #448]	; (8002ae4 <HAL_I2C_IsDeviceReady+0x258>)
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa3a 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295c:	d103      	bne.n	8002966 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0b6      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002978:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff f80d 	bl	8001998 <HAL_GetTick>
 800297e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029ae:	e025      	b.n	80029fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029b0:	f7fe fff2 	bl	8001998 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d302      	bcc.n	80029c6 <HAL_I2C_IsDeviceReady+0x13a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	22a0      	movs	r2, #160	; 0xa0
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2ba0      	cmp	r3, #160	; 0xa0
 8002a06:	d005      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0x188>
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_I2C_IsDeviceReady+0x188>
 8002a0e:	7dbb      	ldrb	r3, [r7, #22]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0cd      	beq.n	80029b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d129      	bne.n	8002a7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	4921      	ldr	r1, [pc, #132]	; (8002ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f9ae 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e036      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e02c      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2319      	movs	r3, #25
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	490f      	ldr	r1, [pc, #60]	; (8002ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f98a 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e012      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f4ff af32 	bcc.w	8002926 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	00100002 	.word	0x00100002
 8002ae4:	ffff0000 	.word	0xffff0000

08002ae8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	460b      	mov	r3, r1
 8002af6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d006      	beq.n	8002b12 <I2C_MasterRequestWrite+0x2a>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d003      	beq.n	8002b12 <I2C_MasterRequestWrite+0x2a>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e00b      	b.n	8002b3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	2b12      	cmp	r3, #18
 8002b2a:	d107      	bne.n	8002b3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f937 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b62:	d103      	bne.n	8002b6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e035      	b.n	8002bdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b78:	d108      	bne.n	8002b8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	e01b      	b.n	8002bc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b8c:	897b      	ldrh	r3, [r7, #10]
 8002b8e:	11db      	asrs	r3, r3, #7
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f003 0306 	and.w	r3, r3, #6
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f063 030f 	orn	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <I2C_MasterRequestWrite+0xfc>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f95d 	bl	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e010      	b.n	8002bdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <I2C_MasterRequestWrite+0x100>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f94d 	bl	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	00010008 	.word	0x00010008
 8002be8:	00010002 	.word	0x00010002

08002bec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f8c2 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4c:	d103      	bne.n	8002c56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0aa      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	6a3a      	ldr	r2, [r7, #32]
 8002c6e:	4952      	ldr	r1, [pc, #328]	; (8002db8 <I2C_RequestMemoryRead+0x1cc>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f8fa 	bl	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e097      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f964 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e076      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc8:	893b      	ldrh	r3, [r7, #8]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	e021      	b.n	8002d18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	6a39      	ldr	r1, [r7, #32]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f93e 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d107      	bne.n	8002d0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e050      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d0e:	893b      	ldrh	r3, [r7, #8]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1a:	6a39      	ldr	r1, [r7, #32]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f923 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e035      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f82b 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d103      	bne.n	8002d84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e013      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	4906      	ldr	r1, [pc, #24]	; (8002db8 <I2C_RequestMemoryRead+0x1cc>)
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f863 	bl	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	00010002 	.word	0x00010002

08002dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dcc:	e025      	b.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd4:	d021      	beq.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fddf 	bl	8001998 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e023      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10d      	bne.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	e00c      	b.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d0b6      	beq.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e78:	e051      	b.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d123      	bne.n	8002ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0204 	orr.w	r2, r3, #4
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e046      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed8:	d021      	beq.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe fd5d 	bl	8001998 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d116      	bne.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f043 0220 	orr.w	r2, r3, #32
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e020      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10c      	bne.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e00b      	b.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d18d      	bne.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f74:	e02d      	b.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8ce 	bl	8003118 <I2C_IsAcknowledgeFailed>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8c:	d021      	beq.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe fd03 	bl	8001998 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e007      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b80      	cmp	r3, #128	; 0x80
 8002fde:	d1ca      	bne.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff6:	e02d      	b.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f88d 	bl	8003118 <I2C_IsAcknowledgeFailed>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e02d      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800300e:	d021      	beq.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7fe fcc2 	bl	8001998 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e007      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d1ca      	bne.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003078:	e042      	b.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b10      	cmp	r3, #16
 8003086:	d119      	bne.n	80030bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0210 	mvn.w	r2, #16
 8003090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e029      	b.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030bc:	f7fe fc6c 	bl	8001998 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d116      	bne.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e007      	b.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d1b5      	bne.n	800307a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d11b      	bne.n	8003168 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003138:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003178:	b08f      	sub	sp, #60	; 0x3c
 800317a:	af0a      	add	r7, sp, #40	; 0x28
 800317c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e10f      	b.n	80033a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f004 ff6e 	bl	8008084 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fea1 	bl	8004f0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	687e      	ldr	r6, [r7, #4]
 80031d4:	466d      	mov	r5, sp
 80031d6:	f106 0410 	add.w	r4, r6, #16
 80031da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ea:	1d33      	adds	r3, r6, #4
 80031ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	f001 fd78 	bl	8004ce4 <USB_CoreInit>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0d0      	b.n	80033a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fe8f 	bl	8004f30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
 8003216:	e04a      	b.n	80032ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	333d      	adds	r3, #61	; 0x3d
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	333c      	adds	r3, #60	; 0x3c
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	b298      	uxth	r0, r3
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3342      	adds	r3, #66	; 0x42
 8003254:	4602      	mov	r2, r0
 8003256:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	333f      	adds	r3, #63	; 0x3f
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3344      	adds	r3, #68	; 0x44
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3348      	adds	r3, #72	; 0x48
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3350      	adds	r3, #80	; 0x50
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	3301      	adds	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3af      	bcc.n	8003218 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e044      	b.n	8003348 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	3301      	adds	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3b5      	bcc.n	80032be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	687e      	ldr	r6, [r7, #4]
 800335a:	466d      	mov	r5, sp
 800335c:	f106 0410 	add.w	r4, r6, #16
 8003360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003368:	e894 0003 	ldmia.w	r4, {r0, r1}
 800336c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003370:	1d33      	adds	r3, r6, #4
 8003372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003374:	6838      	ldr	r0, [r7, #0]
 8003376:	f001 fe27 	bl	8004fc8 <USB_DevInit>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e00d      	b.n	80033a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fea3 	bl	80060ec <USB_DevDisconnect>

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_PCD_Start+0x1c>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e020      	b.n	800340e <HAL_PCD_Start+0x5e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d109      	bne.n	80033f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d005      	beq.n	80033f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 fd79 	bl	8004eec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f002 fe53 	bl	80060aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003416:	b590      	push	{r4, r7, lr}
 8003418:	b08d      	sub	sp, #52	; 0x34
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f002 ff11 	bl	8006254 <USB_GetMode>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 839d 	bne.w	8003b74 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f002 fe75 	bl	800612e <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8393 	beq.w	8003b72 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f002 fe6c 	bl	800612e <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d107      	bne.n	8003470 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f002 0202 	and.w	r2, r2, #2
 800346e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f002 fe5a 	bl	800612e <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d161      	bne.n	8003548 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	0c5b      	lsrs	r3, r3, #17
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d124      	bne.n	800350a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d035      	beq.n	8003538 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6a38      	ldr	r0, [r7, #32]
 80034e0:	f002 fc91 	bl	8005e06 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034f0:	441a      	add	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003502:	441a      	add	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	619a      	str	r2, [r3, #24]
 8003508:	e016      	b.n	8003538 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	0c5b      	lsrs	r3, r3, #17
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	2b06      	cmp	r3, #6
 8003514:	d110      	bne.n	8003538 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800351c:	2208      	movs	r2, #8
 800351e:	4619      	mov	r1, r3
 8003520:	6a38      	ldr	r0, [r7, #32]
 8003522:	f002 fc70 	bl	8005e06 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003532:	441a      	add	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0210 	orr.w	r2, r2, #16
 8003546:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f002 fdee 	bl	800612e <USB_ReadInterrupts>
 8003552:	4603      	mov	r3, r0
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800355c:	d16e      	bne.n	800363c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fdf4 	bl	8006154 <USB_ReadDevAllOutEpInterrupt>
 800356c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800356e:	e062      	b.n	8003636 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d057      	beq.n	800362a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fe19 	bl	80061bc <USB_ReadDevOutEPInterrupt>
 800358a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	461a      	mov	r2, r3
 80035a4:	2301      	movs	r3, #1
 80035a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fdb0 	bl	8004110 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c6:	461a      	mov	r2, r3
 80035c8:	2308      	movs	r3, #8
 80035ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 feaa 	bl	8004328 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	2310      	movs	r3, #16
 80035ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	2320      	movs	r3, #32
 800360a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003628:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	3301      	adds	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d199      	bne.n	8003570 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fd74 	bl	800612e <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003650:	f040 80c0 	bne.w	80037d4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f002 fd95 	bl	8006188 <USB_ReadDevAllInEpInterrupt>
 800365e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003664:	e0b2      	b.n	80037cc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a7 	beq.w	80037c0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fdbb 	bl	80061f8 <USB_ReadDevInEPInterrupt>
 8003682:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d057      	beq.n	800373e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	2201      	movs	r2, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ae:	4013      	ands	r3, r2
 80036b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	461a      	mov	r2, r3
 80036c0:	2301      	movs	r3, #1
 80036c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d132      	bne.n	8003732 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3348      	adds	r3, #72	; 0x48
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4403      	add	r3, r0
 80036ec:	3344      	adds	r3, #68	; 0x44
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4419      	add	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4403      	add	r3, r0
 8003700:	3348      	adds	r3, #72	; 0x48
 8003702:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d113      	bne.n	8003732 <HAL_PCD_IRQHandler+0x31c>
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3350      	adds	r3, #80	; 0x50
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d108      	bne.n	8003732 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800372a:	461a      	mov	r2, r3
 800372c:	2101      	movs	r1, #1
 800372e:	f002 fdc3 	bl	80062b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	b2db      	uxtb	r3, r3
 8003736:	4619      	mov	r1, r3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f004 fd24 	bl	8008186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	461a      	mov	r2, r3
 8003756:	2308      	movs	r3, #8
 8003758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	461a      	mov	r2, r3
 8003772:	2310      	movs	r3, #16
 8003774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	461a      	mov	r2, r3
 800378e:	2340      	movs	r3, #64	; 0x40
 8003790:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a8:	461a      	mov	r2, r3
 80037aa:	2302      	movs	r3, #2
 80037ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fc1b 	bl	8003ff6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	3301      	adds	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f47f af49 	bne.w	8003666 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 fca8 	bl	800612e <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e8:	d122      	bne.n	8003830 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003804:	2b01      	cmp	r3, #1
 8003806:	d108      	bne.n	800381a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003810:	2100      	movs	r1, #0
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fe26 	bl	8004464 <HAL_PCDEx_LPM_Callback>
 8003818:	e002      	b.n	8003820 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f004 fd2a 	bl	8008274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800382e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fc7a 	bl	800612e <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003844:	d112      	bne.n	800386c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d102      	bne.n	800385c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f004 fce6 	bl	8008228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800386a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f002 fc5c 	bl	800612e <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	f040 80c7 	bne.w	8003a12 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2110      	movs	r1, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fcf6 	bl	8005290 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	e056      	b.n	8003958 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	461a      	mov	r2, r3
 80038b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ce:	0151      	lsls	r1, r2, #5
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	440a      	add	r2, r1
 80038d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038dc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ee:	0151      	lsls	r1, r2, #5
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	440a      	add	r2, r1
 80038f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003910:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003922:	0151      	lsls	r1, r2, #5
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	440a      	add	r2, r1
 8003928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800392c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003930:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003950:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	3301      	adds	r3, #1
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395e:	429a      	cmp	r2, r3
 8003960:	d3a3      	bcc.n	80038aa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003970:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003974:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800398e:	f043 030b 	orr.w	r3, r3, #11
 8003992:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a4:	f043 030b 	orr.w	r3, r3, #11
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	e015      	b.n	80039d8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80039c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d2:	f043 030b 	orr.w	r3, r3, #11
 80039d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039fc:	461a      	mov	r2, r3
 80039fe:	f002 fc5b 	bl	80062b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f002 fb89 	bl	800612e <USB_ReadInterrupts>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	d124      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 fc1f 	bl	8006270 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 fc87 	bl	800534a <USB_GetDevSpeed>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681c      	ldr	r4, [r3, #0]
 8003a48:	f001 f92c 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	4620      	mov	r0, r4
 8003a58:	f001 f9a6 	bl	8004da8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f004 fbba 	bl	80081d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fb59 	bl	800612e <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d10a      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f004 fb97 	bl	80081ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 0208 	and.w	r2, r2, #8
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f002 fb44 	bl	800612e <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f004 fbf9 	bl	80082b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fb29 	bl	800612e <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae6:	d10f      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f004 fbcc 	bl	8008290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 fb0e 	bl	800612e <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d10a      	bne.n	8003b34 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f004 fbda 	bl	80082d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f002 faf8 	bl	800612e <USB_ReadInterrupts>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d115      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f004 fbca 	bl	80082f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	e000      	b.n	8003b74 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003b72:	bf00      	nop
    }
  }
}
 8003b74:	3734      	adds	r7, #52	; 0x34
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}

08003b7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_PCD_SetAddress+0x1a>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e013      	b.n	8003bbc <HAL_PCD_SetAddress+0x42>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 fa56 	bl	800605e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	70fb      	strb	r3, [r7, #3]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	803b      	strh	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da0f      	bge.n	8003c0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	3338      	adds	r3, #56	; 0x38
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	705a      	strb	r2, [r3, #1]
 8003c08:	e00f      	b.n	8003c2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 020f 	and.w	r2, r3, #15
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3304      	adds	r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c36:	883a      	ldrh	r2, [r7, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	78ba      	ldrb	r2, [r7, #2]
 8003c40:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	785b      	ldrb	r3, [r3, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c54:	78bb      	ldrb	r3, [r7, #2]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d102      	bne.n	8003c60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_PCD_EP_Open+0xaa>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e00e      	b.n	8003c8c <HAL_PCD_EP_Open+0xc8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fb89 	bl	8005394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da0f      	bge.n	8003cc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	3338      	adds	r3, #56	; 0x38
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	705a      	strb	r2, [r3, #1]
 8003cc6:	e00f      	b.n	8003ce8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3304      	adds	r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_PCD_EP_Close+0x6e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e00e      	b.n	8003d20 <HAL_PCD_EP_Close+0x8c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fbc7 	bl	80054a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	460b      	mov	r3, r1
 8003d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d84:	7afb      	ldrb	r3, [r7, #11]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6979      	ldr	r1, [r7, #20]
 8003d9c:	f001 fea2 	bl	8005ae4 <USB_EP0StartXfer>
 8003da0:	e008      	b.n	8003db4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	f001 fc54 	bl	800565c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 020f 	and.w	r2, r3, #15
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003de0:	681b      	ldr	r3, [r3, #0]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
 8003e00:	f003 020f 	and.w	r2, r3, #15
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3338      	adds	r3, #56	; 0x38
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e48:	7afb      	ldrb	r3, [r7, #11]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6979      	ldr	r1, [r7, #20]
 8003e60:	f001 fe40 	bl	8005ae4 <USB_EP0StartXfer>
 8003e64:	e008      	b.n	8003e78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	f001 fbf2 	bl	800565c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 020f 	and.w	r2, r3, #15
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d901      	bls.n	8003ea0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e050      	b.n	8003f42 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da0f      	bge.n	8003ec8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	3338      	adds	r3, #56	; 0x38
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	705a      	strb	r2, [r3, #1]
 8003ec6:	e00d      	b.n	8003ee4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	3304      	adds	r3, #4
 8003edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_PCD_EP_SetStall+0x82>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e01e      	b.n	8003f42 <HAL_PCD_EP_SetStall+0xc0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 ffcf 	bl	8005eb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	b2d9      	uxtb	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f32:	461a      	mov	r2, r3
 8003f34:	f002 f9c0 	bl	80062b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 020f 	and.w	r2, r3, #15
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d901      	bls.n	8003f68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e042      	b.n	8003fee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da0f      	bge.n	8003f90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 020f 	and.w	r2, r3, #15
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	3338      	adds	r3, #56	; 0x38
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	705a      	strb	r2, [r3, #1]
 8003f8e:	e00f      	b.n	8003fb0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_PCD_EP_ClrStall+0x86>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e00e      	b.n	8003fee <HAL_PCD_EP_ClrStall+0xa4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 ffd7 	bl	8005f92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b08a      	sub	sp, #40	; 0x28
 8003ffa:	af02      	add	r7, sp, #8
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	3338      	adds	r3, #56	; 0x38
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	3304      	adds	r3, #4
 800401c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	429a      	cmp	r2, r3
 8004028:	d901      	bls.n	800402e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06c      	b.n	8004108 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	429a      	cmp	r2, r3
 8004042:	d902      	bls.n	800404a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3303      	adds	r3, #3
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004052:	e02b      	b.n	80040ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	429a      	cmp	r2, r3
 8004068:	d902      	bls.n	8004070 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3303      	adds	r3, #3
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68d9      	ldr	r1, [r3, #12]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004088:	b2db      	uxtb	r3, r3
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	6978      	ldr	r0, [r7, #20]
 8004090:	f001 fe7b 	bl	8005d8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	441a      	add	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	441a      	add	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d809      	bhi.n	80040d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d203      	bcs.n	80040d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1be      	bne.n	8004054 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d811      	bhi.n	8004106 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	2201      	movs	r2, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	6939      	ldr	r1, [r7, #16]
 80040fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004102:	4013      	ands	r3, r2
 8004104:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	333c      	adds	r3, #60	; 0x3c
 8004128:	3304      	adds	r3, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b01      	cmp	r3, #1
 8004144:	f040 80a0 	bne.w	8004288 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d015      	beq.n	800417e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a72      	ldr	r2, [pc, #456]	; (8004320 <PCD_EP_OutXfrComplete_int+0x210>)
 8004156:	4293      	cmp	r3, r2
 8004158:	f240 80dd 	bls.w	8004316 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80d7 	beq.w	8004316 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417a:	6093      	str	r3, [r2, #8]
 800417c:	e0cb      	b.n	8004316 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	461a      	mov	r2, r3
 8004196:	2320      	movs	r3, #32
 8004198:	6093      	str	r3, [r2, #8]
 800419a:	e0bc      	b.n	8004316 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 80b7 	bne.w	8004316 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a5d      	ldr	r2, [pc, #372]	; (8004320 <PCD_EP_OutXfrComplete_int+0x210>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d90f      	bls.n	80041d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041cc:	6093      	str	r3, [r2, #8]
 80041ce:	e0a2      	b.n	8004316 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	0159      	lsls	r1, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	440b      	add	r3, r1
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80041f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4403      	add	r3, r0
 8004206:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800420a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4403      	add	r3, r0
 800422e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4419      	add	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4403      	add	r3, r0
 8004244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004248:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d114      	bne.n	800427a <PCD_EP_OutXfrComplete_int+0x16a>
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004272:	461a      	mov	r2, r3
 8004274:	2101      	movs	r1, #1
 8004276:	f002 f81f 	bl	80062b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f003 ff65 	bl	8008150 <HAL_PCD_DataOutStageCallback>
 8004286:	e046      	b.n	8004316 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a26      	ldr	r2, [pc, #152]	; (8004324 <PCD_EP_OutXfrComplete_int+0x214>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d124      	bne.n	80042da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	461a      	mov	r2, r3
 80042a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ac:	6093      	str	r3, [r2, #8]
 80042ae:	e032      	b.n	8004316 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c6:	461a      	mov	r2, r3
 80042c8:	2320      	movs	r3, #32
 80042ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f003 ff3c 	bl	8008150 <HAL_PCD_DataOutStageCallback>
 80042d8:	e01d      	b.n	8004316 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d114      	bne.n	800430a <PCD_EP_OutXfrComplete_int+0x1fa>
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004302:	461a      	mov	r2, r3
 8004304:	2100      	movs	r1, #0
 8004306:	f001 ffd7 	bl	80062b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f003 ff1d 	bl	8008150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	4f54300a 	.word	0x4f54300a
 8004324:	4f54310a 	.word	0x4f54310a

08004328 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	333c      	adds	r3, #60	; 0x3c
 8004340:	3304      	adds	r3, #4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d90e      	bls.n	800437c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	461a      	mov	r2, r3
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f003 fed5 	bl	800812c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d90c      	bls.n	80043a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d108      	bne.n	80043a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800439c:	461a      	mov	r2, r3
 800439e:	2101      	movs	r1, #1
 80043a0:	f001 ff8a 	bl	80062b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	4f54300a 	.word	0x4f54300a

080043b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
 80043c0:	4613      	mov	r3, r2
 80043c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043d2:	883b      	ldrh	r3, [r7, #0]
 80043d4:	0419      	lsls	r1, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	430a      	orrs	r2, r1
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
 80043e0:	e028      	b.n	8004434 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	4413      	add	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	73fb      	strb	r3, [r7, #15]
 80043f4:	e00d      	b.n	8004412 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	3340      	adds	r3, #64	; 0x40
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	4413      	add	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	3301      	adds	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	3b01      	subs	r3, #1
 8004418:	429a      	cmp	r2, r3
 800441a:	d3ec      	bcc.n	80043f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800441c:	883b      	ldrh	r3, [r7, #0]
 800441e:	0418      	lsls	r0, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	3b01      	subs	r3, #1
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4302      	orrs	r2, r0
 800442c:	3340      	adds	r3, #64	; 0x40
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e264      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d075      	beq.n	8004586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449a:	4ba3      	ldr	r3, [pc, #652]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d00c      	beq.n	80044c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a6:	4ba0      	ldr	r3, [pc, #640]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d112      	bne.n	80044d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b2:	4b9d      	ldr	r3, [pc, #628]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044be:	d10b      	bne.n	80044d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	4b99      	ldr	r3, [pc, #612]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05b      	beq.n	8004584 <HAL_RCC_OscConfig+0x108>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d157      	bne.n	8004584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e23f      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e0:	d106      	bne.n	80044f0 <HAL_RCC_OscConfig+0x74>
 80044e2:	4b91      	ldr	r3, [pc, #580]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a90      	ldr	r2, [pc, #576]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e01d      	b.n	800452c <HAL_RCC_OscConfig+0xb0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x98>
 80044fa:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a8a      	ldr	r2, [pc, #552]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a87      	ldr	r2, [pc, #540]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0xb0>
 8004514:	4b84      	ldr	r3, [pc, #528]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a83      	ldr	r2, [pc, #524]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b81      	ldr	r3, [pc, #516]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a80      	ldr	r2, [pc, #512]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd fa30 	bl	8001998 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800453c:	f7fd fa2c 	bl	8001998 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e204      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b76      	ldr	r3, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0xc0>
 800455a:	e014      	b.n	8004586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd fa1c 	bl	8001998 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004564:	f7fd fa18 	bl	8001998 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1f0      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	4b6c      	ldr	r3, [pc, #432]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0xe8>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459e:	4b62      	ldr	r3, [pc, #392]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d11c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	4b5c      	ldr	r3, [pc, #368]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x152>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1c4      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b56      	ldr	r3, [pc, #344]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4952      	ldr	r1, [pc, #328]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	e03a      	b.n	800465a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ec:	4b4f      	ldr	r3, [pc, #316]	; (800472c <HAL_RCC_OscConfig+0x2b0>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd f9d1 	bl	8001998 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fd f9cd 	bl	8001998 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e1a5      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4940      	ldr	r1, [pc, #256]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
 800462c:	e015      	b.n	800465a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_OscConfig+0x2b0>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd f9b0 	bl	8001998 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463c:	f7fd f9ac 	bl	8001998 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e184      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d030      	beq.n	80046c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466e:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_RCC_OscConfig+0x2b4>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fd f990 	bl	8001998 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467c:	f7fd f98c 	bl	8001998 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e164      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x200>
 800469a:	e015      	b.n	80046c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x2b4>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a2:	f7fd f979 	bl	8001998 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fd f975 	bl	8001998 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e14d      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80046be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a0 	beq.w	8004816 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10f      	bne.n	8004706 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6413      	str	r3, [r2, #64]	; 0x40
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_OscConfig+0x2b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d121      	bne.n	8004756 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004712:	4b08      	ldr	r3, [pc, #32]	; (8004734 <HAL_RCC_OscConfig+0x2b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a07      	ldr	r2, [pc, #28]	; (8004734 <HAL_RCC_OscConfig+0x2b8>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fd f93b 	bl	8001998 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e011      	b.n	800474a <HAL_RCC_OscConfig+0x2ce>
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	42470000 	.word	0x42470000
 8004730:	42470e80 	.word	0x42470e80
 8004734:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fd f92e 	bl	8001998 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e106      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b85      	ldr	r3, [pc, #532]	; (8004960 <HAL_RCC_OscConfig+0x4e4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d106      	bne.n	800476c <HAL_RCC_OscConfig+0x2f0>
 800475e:	4b81      	ldr	r3, [pc, #516]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a80      	ldr	r2, [pc, #512]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
 800476a:	e01c      	b.n	80047a6 <HAL_RCC_OscConfig+0x32a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d10c      	bne.n	800478e <HAL_RCC_OscConfig+0x312>
 8004774:	4b7b      	ldr	r3, [pc, #492]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a7a      	ldr	r2, [pc, #488]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
 8004780:	4b78      	ldr	r3, [pc, #480]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a77      	ldr	r2, [pc, #476]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	e00b      	b.n	80047a6 <HAL_RCC_OscConfig+0x32a>
 800478e:	4b75      	ldr	r3, [pc, #468]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a74      	ldr	r2, [pc, #464]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	4b72      	ldr	r3, [pc, #456]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	4a71      	ldr	r2, [pc, #452]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d015      	beq.n	80047da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fd f8f3 	bl	8001998 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fd f8ef 	bl	8001998 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0c5      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ee      	beq.n	80047b6 <HAL_RCC_OscConfig+0x33a>
 80047d8:	e014      	b.n	8004804 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047da:	f7fd f8dd 	bl	8001998 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fd f8d9 	bl	8001998 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0af      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f8:	4b5a      	ldr	r3, [pc, #360]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b56      	ldr	r3, [pc, #344]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	4a55      	ldr	r2, [pc, #340]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 809b 	beq.w	8004956 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 030c 	and.w	r3, r3, #12
 8004828:	2b08      	cmp	r3, #8
 800482a:	d05c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d141      	bne.n	80048b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004834:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <HAL_RCC_OscConfig+0x4ec>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd f8ad 	bl	8001998 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd f8a9 	bl	8001998 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e081      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	3b01      	subs	r3, #1
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	061b      	lsls	r3, r3, #24
 8004884:	4937      	ldr	r1, [pc, #220]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_OscConfig+0x4ec>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd f882 	bl	8001998 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd f87e 	bl	8001998 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e056      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x41c>
 80048b6:	e04e      	b.n	8004956 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_OscConfig+0x4ec>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fd f86b 	bl	8001998 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fd f867 	bl	8001998 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e03f      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d8:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x44a>
 80048e4:	e037      	b.n	8004956 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e032      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048f2:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_RCC_OscConfig+0x4e8>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d028      	beq.n	8004952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d121      	bne.n	8004952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d11a      	bne.n	8004952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004922:	4013      	ands	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004928:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800492a:	4293      	cmp	r3, r2
 800492c:	d111      	bne.n	8004952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d107      	bne.n	8004952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40007000 	.word	0x40007000
 8004964:	40023800 	.word	0x40023800
 8004968:	42470060 	.word	0x42470060

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0cc      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b68      	ldr	r3, [pc, #416]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d90c      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b65      	ldr	r3, [pc, #404]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b63      	ldr	r3, [pc, #396]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b8      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a58      	ldr	r2, [pc, #352]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d8:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a52      	ldr	r2, [pc, #328]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494d      	ldr	r1, [pc, #308]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d044      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e067      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4934      	ldr	r1, [pc, #208]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fc ff9c 	bl	8001998 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fc ff98 	bl	8001998 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20c      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e032      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4916      	ldr	r1, [pc, #88]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490e      	ldr	r1, [pc, #56]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004af2:	f000 f821 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	490a      	ldr	r1, [pc, #40]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	5ccb      	ldrb	r3, [r1, r3]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc fefc 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08009688 	.word	0x08009688
 8004b30:	20000014 	.word	0x20000014
 8004b34:	20000018 	.word	0x20000018

08004b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	b5b0      	push	{r4, r5, r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b3e:	2100      	movs	r1, #0
 8004b40:	6079      	str	r1, [r7, #4]
 8004b42:	2100      	movs	r1, #0
 8004b44:	60f9      	str	r1, [r7, #12]
 8004b46:	2100      	movs	r1, #0
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b4e:	4952      	ldr	r1, [pc, #328]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b50:	6889      	ldr	r1, [r1, #8]
 8004b52:	f001 010c 	and.w	r1, r1, #12
 8004b56:	2908      	cmp	r1, #8
 8004b58:	d00d      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x3e>
 8004b5a:	2908      	cmp	r1, #8
 8004b5c:	f200 8094 	bhi.w	8004c88 <HAL_RCC_GetSysClockFreq+0x150>
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32>
 8004b64:	2904      	cmp	r1, #4
 8004b66:	d003      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x38>
 8004b68:	e08e      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x164>)
 8004b6c:	60bb      	str	r3, [r7, #8]
       break;
 8004b6e:	e08e      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b70:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b72:	60bb      	str	r3, [r7, #8]
      break;
 8004b74:	e08b      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b76:	4948      	ldr	r1, [pc, #288]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b78:	6849      	ldr	r1, [r1, #4]
 8004b7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004b7e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b80:	4945      	ldr	r1, [pc, #276]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b82:	6849      	ldr	r1, [r1, #4]
 8004b84:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	d024      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8c:	4942      	ldr	r1, [pc, #264]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b8e:	6849      	ldr	r1, [r1, #4]
 8004b90:	0989      	lsrs	r1, r1, #6
 8004b92:	4608      	mov	r0, r1
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004b9c:	f04f 0500 	mov.w	r5, #0
 8004ba0:	ea00 0204 	and.w	r2, r0, r4
 8004ba4:	ea01 0305 	and.w	r3, r1, r5
 8004ba8:	493d      	ldr	r1, [pc, #244]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004baa:	fb01 f003 	mul.w	r0, r1, r3
 8004bae:	2100      	movs	r1, #0
 8004bb0:	fb01 f102 	mul.w	r1, r1, r2
 8004bb4:	1844      	adds	r4, r0, r1
 8004bb6:	493a      	ldr	r1, [pc, #232]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bb8:	fba2 0101 	umull	r0, r1, r2, r1
 8004bbc:	1863      	adds	r3, r4, r1
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	f7fb fafe 	bl	80001c8 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e04a      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	ea02 0400 	and.w	r4, r2, r0
 8004bee:	ea03 0501 	and.w	r5, r3, r1
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	014b      	lsls	r3, r1, #5
 8004c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c04:	0142      	lsls	r2, r0, #5
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	1b00      	subs	r0, r0, r4
 8004c0c:	eb61 0105 	sbc.w	r1, r1, r5
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	018b      	lsls	r3, r1, #6
 8004c1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c1e:	0182      	lsls	r2, r0, #6
 8004c20:	1a12      	subs	r2, r2, r0
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	f04f 0000 	mov.w	r0, #0
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	00d9      	lsls	r1, r3, #3
 8004c30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c34:	00d0      	lsls	r0, r2, #3
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	1912      	adds	r2, r2, r4
 8004c3c:	eb45 0303 	adc.w	r3, r5, r3
 8004c40:	f04f 0000 	mov.w	r0, #0
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	0299      	lsls	r1, r3, #10
 8004c4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c4e:	0290      	lsls	r0, r2, #10
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	f7fb fab2 	bl	80001c8 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	3301      	adds	r3, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	60bb      	str	r3, [r7, #8]
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x164>)
 8004c8a:	60bb      	str	r3, [r7, #8]
      break;
 8004c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bdb0      	pop	{r4, r5, r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	017d7840 	.word	0x017d7840

08004ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000014 	.word	0x20000014

08004cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cc0:	f7ff fff0 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0a9b      	lsrs	r3, r3, #10
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4903      	ldr	r1, [pc, #12]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	08009698 	.word	0x08009698

08004ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	f107 001c 	add.w	r0, r7, #28
 8004cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d122      	bne.n	8004d42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f001 fb1c 	bl	8006374 <USB_CoreReset>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e01a      	b.n	8004d78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 fb10 	bl	8006374 <USB_CoreReset>
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
 8004d6a:	e005      	b.n	8004d78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10b      	bne.n	8004d96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f043 0206 	orr.w	r2, r3, #6
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004da2:	b004      	add	sp, #16
 8004da4:	4770      	bx	lr
	...

08004da8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d165      	bne.n	8004e88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a41      	ldr	r2, [pc, #260]	; (8004ec4 <USB_SetTurnaroundTime+0x11c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d906      	bls.n	8004dd2 <USB_SetTurnaroundTime+0x2a>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a40      	ldr	r2, [pc, #256]	; (8004ec8 <USB_SetTurnaroundTime+0x120>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d202      	bcs.n	8004dd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dcc:	230f      	movs	r3, #15
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e062      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <USB_SetTurnaroundTime+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d306      	bcc.n	8004de8 <USB_SetTurnaroundTime+0x40>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <USB_SetTurnaroundTime+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d202      	bcs.n	8004de8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004de2:	230e      	movs	r3, #14
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e057      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <USB_SetTurnaroundTime+0x124>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d306      	bcc.n	8004dfe <USB_SetTurnaroundTime+0x56>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <USB_SetTurnaroundTime+0x128>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d202      	bcs.n	8004dfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004df8:	230d      	movs	r3, #13
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e04c      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a33      	ldr	r2, [pc, #204]	; (8004ed0 <USB_SetTurnaroundTime+0x128>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d306      	bcc.n	8004e14 <USB_SetTurnaroundTime+0x6c>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a32      	ldr	r2, [pc, #200]	; (8004ed4 <USB_SetTurnaroundTime+0x12c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d802      	bhi.n	8004e14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e0e:	230c      	movs	r3, #12
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e041      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <USB_SetTurnaroundTime+0x12c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d906      	bls.n	8004e2a <USB_SetTurnaroundTime+0x82>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <USB_SetTurnaroundTime+0x130>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d802      	bhi.n	8004e2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e24:	230b      	movs	r3, #11
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e036      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <USB_SetTurnaroundTime+0x130>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d906      	bls.n	8004e40 <USB_SetTurnaroundTime+0x98>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4a29      	ldr	r2, [pc, #164]	; (8004edc <USB_SetTurnaroundTime+0x134>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d802      	bhi.n	8004e40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e3a:	230a      	movs	r3, #10
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e02b      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a26      	ldr	r2, [pc, #152]	; (8004edc <USB_SetTurnaroundTime+0x134>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d906      	bls.n	8004e56 <USB_SetTurnaroundTime+0xae>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <USB_SetTurnaroundTime+0x138>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d202      	bcs.n	8004e56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e50:	2309      	movs	r3, #9
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e020      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <USB_SetTurnaroundTime+0x138>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d306      	bcc.n	8004e6c <USB_SetTurnaroundTime+0xc4>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <USB_SetTurnaroundTime+0x13c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d802      	bhi.n	8004e6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e66:	2308      	movs	r3, #8
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e015      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <USB_SetTurnaroundTime+0x13c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d906      	bls.n	8004e82 <USB_SetTurnaroundTime+0xda>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <USB_SetTurnaroundTime+0x140>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d202      	bcs.n	8004e82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e7c:	2307      	movs	r3, #7
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e00a      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e82:	2306      	movs	r3, #6
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e007      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e8e:	2309      	movs	r3, #9
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e001      	b.n	8004e98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e94:	2309      	movs	r3, #9
 8004e96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	029b      	lsls	r3, r3, #10
 8004eac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	00d8acbf 	.word	0x00d8acbf
 8004ec8:	00e4e1c0 	.word	0x00e4e1c0
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	01067380 	.word	0x01067380
 8004ed4:	011a499f 	.word	0x011a499f
 8004ed8:	01312cff 	.word	0x01312cff
 8004edc:	014ca43f 	.word	0x014ca43f
 8004ee0:	016e3600 	.word	0x016e3600
 8004ee4:	01a6ab1f 	.word	0x01a6ab1f
 8004ee8:	01e84800 	.word	0x01e84800

08004eec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 0201 	bic.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d115      	bne.n	8004f7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f5e:	2001      	movs	r0, #1
 8004f60:	f7fc fd26 	bl	80019b0 <HAL_Delay>
      ms++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 f972 	bl	8006254 <USB_GetMode>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d01e      	beq.n	8004fb4 <USB_SetCurrentMode+0x84>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b31      	cmp	r3, #49	; 0x31
 8004f7a:	d9f0      	bls.n	8004f5e <USB_SetCurrentMode+0x2e>
 8004f7c:	e01a      	b.n	8004fb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d115      	bne.n	8004fb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f90:	2001      	movs	r0, #1
 8004f92:	f7fc fd0d 	bl	80019b0 <HAL_Delay>
      ms++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 f959 	bl	8006254 <USB_GetMode>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <USB_SetCurrentMode+0x84>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b31      	cmp	r3, #49	; 0x31
 8004fac:	d9f0      	bls.n	8004f90 <USB_SetCurrentMode+0x60>
 8004fae:	e001      	b.n	8004fb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e005      	b.n	8004fc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b32      	cmp	r3, #50	; 0x32
 8004fb8:	d101      	bne.n	8004fbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc8:	b084      	sub	sp, #16
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b086      	sub	sp, #24
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	e009      	b.n	8004ffc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3340      	adds	r3, #64	; 0x40
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b0e      	cmp	r3, #14
 8005000:	d9f2      	bls.n	8004fe8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11c      	bne.n	8005042 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005016:	f043 0302 	orr.w	r3, r3, #2
 800501a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
 8005040:	e00b      	b.n	800505a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005060:	461a      	mov	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	4619      	mov	r1, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	461a      	mov	r2, r3
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10c      	bne.n	800509a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005086:	2100      	movs	r1, #0
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f945 	bl	8005318 <USB_SetDevSpeed>
 800508e:	e008      	b.n	80050a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005090:	2101      	movs	r1, #1
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f940 	bl	8005318 <USB_SetDevSpeed>
 8005098:	e003      	b.n	80050a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800509a:	2103      	movs	r1, #3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f93b 	bl	8005318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050a2:	2110      	movs	r1, #16
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f8f3 	bl	8005290 <USB_FlushTxFifo>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f90f 	bl	80052d8 <USB_FlushRxFifo>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	461a      	mov	r2, r3
 80050cc:	2300      	movs	r3, #0
 80050ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d6:	461a      	mov	r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e043      	b.n	8005176 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005104:	d118      	bne.n	8005138 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e013      	b.n	800514a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e008      	b.n	800514a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	461a      	mov	r2, r3
 800516a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800516e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	3301      	adds	r3, #1
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3b7      	bcc.n	80050ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	e043      	b.n	800520c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800519a:	d118      	bne.n	80051ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	461a      	mov	r2, r3
 80051b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e013      	b.n	80051e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	461a      	mov	r2, r3
 80051c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e008      	b.n	80051e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	461a      	mov	r2, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	461a      	mov	r2, r3
 8005200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005204:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3301      	adds	r3, #1
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d3b7      	bcc.n	8005184 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005226:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005234:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f043 0210 	orr.w	r2, r3, #16
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699a      	ldr	r2, [r3, #24]
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <USB_DevInit+0x2c4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f043 0208 	orr.w	r2, r3, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d107      	bne.n	800527c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005274:	f043 0304 	orr.w	r3, r3, #4
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005288:	b004      	add	sp, #16
 800528a:	4770      	bx	lr
 800528c:	803c3800 	.word	0x803c3800

08005290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	019b      	lsls	r3, r3, #6
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <USB_FlushTxFifo+0x44>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e006      	b.n	80052c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d0f1      	beq.n	80052aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	00030d40 	.word	0x00030d40

080052d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2210      	movs	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <USB_FlushRxFifo+0x3c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e006      	b.n	8005308 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b10      	cmp	r3, #16
 8005304:	d0f1      	beq.n	80052ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	00030d40 	.word	0x00030d40

08005318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0306 	and.w	r3, r3, #6
 8005362:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
 800536e:	e00a      	b.n	8005386 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d002      	beq.n	800537c <USB_GetDevSpeed+0x32>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b06      	cmp	r3, #6
 800537a:	d102      	bne.n	8005382 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800537c:	2302      	movs	r3, #2
 800537e:	75fb      	strb	r3, [r7, #23]
 8005380:	e001      	b.n	8005386 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005382:	230f      	movs	r3, #15
 8005384:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d13a      	bne.n	8005426 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d155      	bne.n	8005494 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005404:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	059b      	lsls	r3, r3, #22
 800540a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800540c:	4313      	orrs	r3, r2
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e036      	b.n	8005494 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005444:	4313      	orrs	r3, r2
 8005446:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11a      	bne.n	8005494 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800547a:	430b      	orrs	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d161      	bne.n	8005584 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d6:	d11f      	bne.n	8005518 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	2101      	movs	r1, #1
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	b29b      	uxth	r3, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005538:	4013      	ands	r3, r2
 800553a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	2101      	movs	r1, #1
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800555c:	4013      	ands	r3, r2
 800555e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	0159      	lsls	r1, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	440b      	add	r3, r1
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	4619      	mov	r1, r3
 800557c:	4b35      	ldr	r3, [pc, #212]	; (8005654 <USB_DeactivateEndpoint+0x1b0>)
 800557e:	4013      	ands	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
 8005582:	e060      	b.n	8005646 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559a:	d11f      	bne.n	80055dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	43db      	mvns	r3, r3
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fc:	4013      	ands	r3, r2
 80055fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	43db      	mvns	r3, r3
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005620:	4013      	ands	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	0159      	lsls	r1, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	440b      	add	r3, r1
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	4619      	mov	r1, r3
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <USB_DeactivateEndpoint+0x1b4>)
 8005642:	4013      	ands	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	ec337800 	.word	0xec337800
 8005658:	eff37800 	.word	0xeff37800

0800565c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 815c 	bne.w	8005936 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d132      	bne.n	80056ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	0cdb      	lsrs	r3, r3, #19
 80056e6:	04db      	lsls	r3, r3, #19
 80056e8:	6113      	str	r3, [r2, #16]
 80056ea:	e074      	b.n	80057d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	0cdb      	lsrs	r3, r3, #19
 8005708:	04db      	lsls	r3, r3, #19
 800570a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800572e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6959      	ldr	r1, [r3, #20]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	440b      	add	r3, r1
 8005748:	1e59      	subs	r1, r3, #1
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005752:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005754:	4b9d      	ldr	r3, [pc, #628]	; (80059cc <USB_EPStartXfer+0x370>)
 8005756:	400b      	ands	r3, r1
 8005758:	69b9      	ldr	r1, [r7, #24]
 800575a:	0148      	lsls	r0, r1, #5
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	4401      	add	r1, r0
 8005760:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005764:	4313      	orrs	r3, r2
 8005766:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577e:	69b9      	ldr	r1, [r7, #24]
 8005780:	0148      	lsls	r0, r1, #5
 8005782:	69f9      	ldr	r1, [r7, #28]
 8005784:	4401      	add	r1, r0
 8005786:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800578a:	4313      	orrs	r3, r2
 800578c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d11f      	bne.n	80057d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d14b      	bne.n	8005874 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	78db      	ldrb	r3, [r3, #3]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d128      	bne.n	8005852 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e00f      	b.n	8005852 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e12f      	b.n	8005ad4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005892:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d015      	beq.n	80058c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8117 	beq.w	8005ad4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	2101      	movs	r1, #1
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c2:	4313      	orrs	r3, r2
 80058c4:	634b      	str	r3, [r1, #52]	; 0x34
 80058c6:	e105      	b.n	8005ad4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d110      	bne.n	80058fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e00f      	b.n	800591a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005918:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	b298      	uxth	r0, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	4603      	mov	r3, r0
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fa2b 	bl	8005d8a <USB_WritePacket>
 8005934:	e0ce      	b.n	8005ad4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	0cdb      	lsrs	r3, r3, #19
 8005952:	04db      	lsls	r3, r3, #19
 8005954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005978:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d126      	bne.n	80059d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	0148      	lsls	r0, r1, #5
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	4401      	add	r1, r0
 80059a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c6:	6113      	str	r3, [r2, #16]
 80059c8:	e036      	b.n	8005a38 <USB_EPStartXfer+0x3dc>
 80059ca:	bf00      	nop
 80059cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4413      	add	r3, r2
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	8afb      	ldrh	r3, [r7, #22]
 80059f6:	04d9      	lsls	r1, r3, #19
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <USB_EPStartXfer+0x484>)
 80059fa:	400b      	ands	r3, r1
 80059fc:	69b9      	ldr	r1, [r7, #24]
 80059fe:	0148      	lsls	r0, r1, #5
 8005a00:	69f9      	ldr	r1, [r7, #28]
 8005a02:	4401      	add	r1, r0
 8005a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	8af9      	ldrh	r1, [r7, #22]
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	0148      	lsls	r0, r1, #5
 8005a2c:	69f9      	ldr	r1, [r7, #28]
 8005a2e:	4401      	add	r1, r0
 8005a30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d10d      	bne.n	8005a5a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68d9      	ldr	r1, [r3, #12]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	460a      	mov	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d128      	bne.n	8005ab4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d110      	bne.n	8005a94 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00f      	b.n	8005ab4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	1ff80000 	.word	0x1ff80000

08005ae4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 80cd 	bne.w	8005ca0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d132      	bne.n	8005b74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	0cdb      	lsrs	r3, r3, #19
 8005b6e:	04db      	lsls	r3, r3, #19
 8005b70:	6113      	str	r3, [r2, #16]
 8005b72:	e04e      	b.n	8005c12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	0cdb      	lsrs	r3, r3, #19
 8005b90:	04db      	lsls	r3, r3, #19
 8005b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	0148      	lsls	r0, r1, #5
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	4401      	add	r1, r0
 8005c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11e      	bne.n	8005c56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e092      	b.n	8005d7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d07e      	beq.n	8005d7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	2101      	movs	r1, #1
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	634b      	str	r3, [r1, #52]	; 0x34
 8005c9e:	e06d      	b.n	8005d7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	0cdb      	lsrs	r3, r3, #19
 8005cbc:	04db      	lsls	r3, r3, #19
 8005cbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	0148      	lsls	r0, r1, #5
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	4401      	add	r1, r0
 8005d32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d36:	4313      	orrs	r3, r2
 8005d38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10d      	bne.n	8005d5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68d9      	ldr	r1, [r3, #12]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	460a      	mov	r2, r1
 8005d5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b089      	sub	sp, #36	; 0x24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	4611      	mov	r1, r2
 8005d96:	461a      	mov	r2, r3
 8005d98:	460b      	mov	r3, r1
 8005d9a:	71fb      	strb	r3, [r7, #7]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005da8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d123      	bne.n	8005df8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005db0:	88bb      	ldrh	r3, [r7, #4]
 8005db2:	3303      	adds	r3, #3
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e018      	b.n	8005df0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	031a      	lsls	r2, r3, #12
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	461a      	mov	r2, r3
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3301      	adds	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	3301      	adds	r3, #1
 8005de8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3e2      	bcc.n	8005dbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3724      	adds	r7, #36	; 0x24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b08b      	sub	sp, #44	; 0x2c
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	e014      	b.n	8005e5c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	3301      	adds	r3, #1
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	3301      	adds	r3, #1
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	3301      	adds	r3, #1
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d3e6      	bcc.n	8005e32 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e64:	8bfb      	ldrh	r3, [r7, #30]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01e      	beq.n	8005ea8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e74:	461a      	mov	r2, r3
 8005e76:	f107 0310 	add.w	r3, r7, #16
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	701a      	strb	r2, [r3, #0]
      i++;
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	3301      	adds	r3, #1
 8005e94:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	3301      	adds	r3, #1
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e9c:	8bfb      	ldrh	r3, [r7, #30]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ea2:	8bfb      	ldrh	r3, [r7, #30]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1ea      	bne.n	8005e7e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	372c      	adds	r7, #44	; 0x2c
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d12c      	bne.n	8005f2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	db12      	blt.n	8005f0a <USB_EPSetStall+0x54>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00f      	beq.n	8005f0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e02b      	b.n	8005f84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	db12      	blt.n	8005f64 <USB_EPSetStall+0xae>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00f      	beq.n	8005f64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d128      	bne.n	8006000 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	78db      	ldrb	r3, [r3, #3]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d003      	beq.n	8005fde <USB_EPClearStall+0x4c>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	78db      	ldrb	r3, [r3, #3]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d138      	bne.n	8006050 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e027      	b.n	8006050 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800601e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	78db      	ldrb	r3, [r3, #3]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d003      	beq.n	8006030 <USB_EPClearStall+0x9e>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d10f      	bne.n	8006050 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800607c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006080:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006098:	4313      	orrs	r3, r2
 800609a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060c4:	f023 0303 	bic.w	r3, r3, #3
 80060c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d8:	f023 0302 	bic.w	r3, r3, #2
 80060dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006106:	f023 0303 	bic.w	r3, r3, #3
 800610a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4013      	ands	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4013      	ands	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	0c1b      	lsrs	r3, r3, #16
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	b29b      	uxth	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ea:	68bb      	ldr	r3, [r7, #8]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
 8006228:	01db      	lsls	r3, r3, #7
 800622a:	b2db      	uxtb	r3, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4013      	ands	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006246:	68bb      	ldr	r3, [r7, #8]
}
 8006248:	4618      	mov	r0, r3
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0301 	and.w	r3, r3, #1
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	460b      	mov	r3, r1
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	333c      	adds	r3, #60	; 0x3c
 80062ce:	3304      	adds	r3, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <USB_EP0_OutStart+0xb8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d90a      	bls.n	80062f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ec:	d101      	bne.n	80062f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e037      	b.n	8006362 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f8:	461a      	mov	r2, r3
 80062fa:	2300      	movs	r3, #0
 80062fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006320:	f043 0318 	orr.w	r3, r3, #24
 8006324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006334:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006338:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10f      	bne.n	8006360 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800635e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	4f54300a 	.word	0x4f54300a

08006374 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <USB_CoreReset+0x60>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e01a      	b.n	80063c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	daf3      	bge.n	8006380 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f043 0201 	orr.w	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <USB_CoreReset+0x60>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d901      	bls.n	80063b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e006      	b.n	80063c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d0f1      	beq.n	80063a8 <USB_CoreReset+0x34>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	00030d40 	.word	0x00030d40

080063d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063e8:	f002 f91c 	bl	8008624 <USBD_static_malloc>
 80063ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063fc:	2302      	movs	r3, #2
 80063fe:	e066      	b.n	80064ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	7c1b      	ldrb	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d119      	bne.n	8006444 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006414:	2202      	movs	r2, #2
 8006416:	2181      	movs	r1, #129	; 0x81
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 ffe0 	bl	80083de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006428:	2202      	movs	r2, #2
 800642a:	2101      	movs	r1, #1
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 ffd6 	bl	80083de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2210      	movs	r2, #16
 800643e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006442:	e016      	b.n	8006472 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2202      	movs	r2, #2
 8006448:	2181      	movs	r1, #129	; 0x81
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 ffc7 	bl	80083de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	2202      	movs	r2, #2
 800645a:	2101      	movs	r1, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 ffbe 	bl	80083de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2210      	movs	r2, #16
 800646e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006472:	2308      	movs	r3, #8
 8006474:	2203      	movs	r2, #3
 8006476:	2182      	movs	r1, #130	; 0x82
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 ffb0 	bl	80083de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7c1b      	ldrb	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b2:	2101      	movs	r1, #1
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f002 f881 	bl	80085bc <USBD_LL_PrepareReceive>
 80064ba:	e007      	b.n	80064cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	2101      	movs	r1, #1
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 f878 	bl	80085bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064e2:	2181      	movs	r1, #129	; 0x81
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 ffa0 	bl	800842a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064f0:	2101      	movs	r1, #1
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 ff99 	bl	800842a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006500:	2182      	movs	r1, #130	; 0x82
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 ff91 	bl	800842a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00e      	beq.n	8006540 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006532:	4618      	mov	r0, r3
 8006534:	f002 f884 	bl	8008640 <USBD_static_free>
    pdev->pClassData = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800655c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	e0af      	b.n	80066d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800657c:	2b00      	cmp	r3, #0
 800657e:	d03f      	beq.n	8006600 <USBD_CDC_Setup+0xb4>
 8006580:	2b20      	cmp	r3, #32
 8006582:	f040 809f 	bne.w	80066c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	88db      	ldrh	r3, [r3, #6]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02e      	beq.n	80065ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	b25b      	sxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	da16      	bge.n	80065c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80065a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	88d2      	ldrh	r2, [r2, #6]
 80065aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	88db      	ldrh	r3, [r3, #6]
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	bf28      	it	cs
 80065b4:	2307      	movcs	r3, #7
 80065b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	89fa      	ldrh	r2, [r7, #14]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fae9 	bl	8007b96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80065c4:	e085      	b.n	80066d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785a      	ldrb	r2, [r3, #1]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	88db      	ldrh	r3, [r3, #6]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80065dc:	6939      	ldr	r1, [r7, #16]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	88db      	ldrh	r3, [r3, #6]
 80065e2:	461a      	mov	r2, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fb02 	bl	8007bee <USBD_CtlPrepareRx>
      break;
 80065ea:	e072      	b.n	80066d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	7850      	ldrb	r0, [r2, #1]
 80065f8:	2200      	movs	r2, #0
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	4798      	blx	r3
      break;
 80065fe:	e068      	b.n	80066d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b0b      	cmp	r3, #11
 8006606:	d852      	bhi.n	80066ae <USBD_CDC_Setup+0x162>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <USBD_CDC_Setup+0xc4>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006641 	.word	0x08006641
 8006614:	080066bd 	.word	0x080066bd
 8006618:	080066af 	.word	0x080066af
 800661c:	080066af 	.word	0x080066af
 8006620:	080066af 	.word	0x080066af
 8006624:	080066af 	.word	0x080066af
 8006628:	080066af 	.word	0x080066af
 800662c:	080066af 	.word	0x080066af
 8006630:	080066af 	.word	0x080066af
 8006634:	080066af 	.word	0x080066af
 8006638:	0800666b 	.word	0x0800666b
 800663c:	08006695 	.word	0x08006695
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b03      	cmp	r3, #3
 800664a:	d107      	bne.n	800665c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800664c:	f107 030a 	add.w	r3, r7, #10
 8006650:	2202      	movs	r2, #2
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fa9e 	bl	8007b96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800665a:	e032      	b.n	80066c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fa28 	bl	8007ab4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	75fb      	strb	r3, [r7, #23]
          break;
 8006668:	e02b      	b.n	80066c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d107      	bne.n	8006686 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006676:	f107 030d 	add.w	r3, r7, #13
 800667a:	2201      	movs	r2, #1
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fa89 	bl	8007b96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006684:	e01d      	b.n	80066c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fa13 	bl	8007ab4 <USBD_CtlError>
            ret = USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	75fb      	strb	r3, [r7, #23]
          break;
 8006692:	e016      	b.n	80066c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b03      	cmp	r3, #3
 800669e:	d00f      	beq.n	80066c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fa06 	bl	8007ab4 <USBD_CtlError>
            ret = USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066ac:	e008      	b.n	80066c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 f9ff 	bl	8007ab4 <USBD_CtlError>
          ret = USBD_FAIL;
 80066b6:	2303      	movs	r3, #3
 80066b8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ba:	e002      	b.n	80066c2 <USBD_CDC_Setup+0x176>
          break;
 80066bc:	bf00      	nop
 80066be:	e008      	b.n	80066d2 <USBD_CDC_Setup+0x186>
          break;
 80066c0:	bf00      	nop
      }
      break;
 80066c2:	e006      	b.n	80066d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 f9f4 	bl	8007ab4 <USBD_CtlError>
      ret = USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	75fb      	strb	r3, [r7, #23]
      break;
 80066d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e04f      	b.n	800679e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006704:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3318      	adds	r3, #24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d029      	beq.n	8006770 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	3318      	adds	r3, #24
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	78f9      	ldrb	r1, [r7, #3]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	460b      	mov	r3, r1
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	1a5b      	subs	r3, r3, r1
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4403      	add	r3, r0
 800673c:	3344      	adds	r3, #68	; 0x44
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	fbb2 f1f3 	udiv	r1, r2, r3
 8006744:	fb03 f301 	mul.w	r3, r3, r1
 8006748:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800674a:	2b00      	cmp	r3, #0
 800674c:	d110      	bne.n	8006770 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3318      	adds	r3, #24
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006762:	78f9      	ldrb	r1, [r7, #3]
 8006764:	2300      	movs	r3, #0
 8006766:	2200      	movs	r2, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 ff06 	bl	800857a <USBD_LL_Transmit>
 800676e:	e015      	b.n	800679c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e015      	b.n	80067f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 ff16 	bl	80085fe <USBD_LL_GetRxDataSize>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067ee:	4611      	mov	r1, r2
 80067f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800680a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	e01b      	b.n	800684e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <USBD_CDC_EP0_RxReady+0x50>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006826:	2bff      	cmp	r3, #255	; 0xff
 8006828:	d010      	beq.n	800684c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006838:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006840:	b292      	uxth	r2, r2
 8006842:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	22ff      	movs	r2, #255	; 0xff
 8006848:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2243      	movs	r2, #67	; 0x43
 8006864:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006866:	4b03      	ldr	r3, [pc, #12]	; (8006874 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	200000a8 	.word	0x200000a8

08006878 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2243      	movs	r2, #67	; 0x43
 8006884:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006886:	4b03      	ldr	r3, [pc, #12]	; (8006894 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000064 	.word	0x20000064

08006898 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2243      	movs	r2, #67	; 0x43
 80068a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80068a6:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	200000ec 	.word	0x200000ec

080068b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	220a      	movs	r2, #10
 80068c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	20000020 	.word	0x20000020

080068d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e004      	b.n	80068f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006914:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e008      	b.n	8006932 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	e004      	b.n	8006964 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800697e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800698a:	2303      	movs	r3, #3
 800698c:	e016      	b.n	80069bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	7c1b      	ldrb	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800699c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a0:	2101      	movs	r1, #1
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fe0a 	bl	80085bc <USBD_LL_PrepareReceive>
 80069a8:	e007      	b.n	80069ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069b0:	2340      	movs	r3, #64	; 0x40
 80069b2:	2101      	movs	r1, #1
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fe01 	bl	80085bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	e01f      	b.n	8006a1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	79fa      	ldrb	r2, [r7, #7]
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 fc7d 	bl	8008310 <USBD_LL_Init>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e016      	b.n	8006a6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	f107 020e 	add.w	r2, r7, #14
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	4602      	mov	r2, r0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fc94 	bl	80083a8 <USBD_LL_Start>
 8006a80:	4603      	mov	r3, r0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	4611      	mov	r1, r2
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
  }

  return USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 ff90 	bl	8007a40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b3c:	f003 031f 	and.w	r3, r3, #31
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d01a      	beq.n	8006b7a <USBD_LL_SetupStage+0x72>
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d822      	bhi.n	8006b8e <USBD_LL_SetupStage+0x86>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <USBD_LL_SetupStage+0x4a>
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d00a      	beq.n	8006b66 <USBD_LL_SetupStage+0x5e>
 8006b50:	e01d      	b.n	8006b8e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa62 	bl	8007024 <USBD_StdDevReq>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
      break;
 8006b64:	e020      	b.n	8006ba8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fac6 	bl	8007100 <USBD_StdItfReq>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
      break;
 8006b78:	e016      	b.n	8006ba8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb05 	bl	8007192 <USBD_StdEPReq>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b8c:	e00c      	b.n	8006ba8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fc63 	bl	8008468 <USBD_LL_StallEP>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba6:	bf00      	nop
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d138      	bne.n	8006c38 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bcc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d14a      	bne.n	8006c6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d913      	bls.n	8006c0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bf28      	it	cs
 8006bfe:	4613      	movcs	r3, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 f80f 	bl	8007c28 <USBD_CtlContinueRx>
 8006c0a:	e030      	b.n	8006c6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d10b      	bne.n	8006c30 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f001 f80a 	bl	8007c4a <USBD_CtlSendStatus>
 8006c36:	e01a      	b.n	8006c6e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d114      	bne.n	8006c6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	7afa      	ldrb	r2, [r7, #11]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	4798      	blx	r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	e000      	b.n	8006c70 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	460b      	mov	r3, r1
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d16b      	bne.n	8006d64 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d156      	bne.n	8006d4a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d914      	bls.n	8006cd2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 ff84 	bl	8007bcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2100      	movs	r1, #0
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f001 fc76 	bl	80085bc <USBD_LL_PrepareReceive>
 8006cd0:	e03b      	b.n	8006d4a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d11c      	bne.n	8006d18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d316      	bcc.n	8006d18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d20f      	bcs.n	8006d18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 ff65 	bl	8007bcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f001 fc53 	bl	80085bc <USBD_LL_PrepareReceive>
 8006d16:	e018      	b.n	8006d4a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d10b      	bne.n	8006d3c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d3c:	2180      	movs	r1, #128	; 0x80
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f001 fb92 	bl	8008468 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 ff93 	bl	8007c70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d122      	bne.n	8006d9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff fe98 	bl	8006a8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d62:	e01a      	b.n	8006d9a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d114      	bne.n	8006d9a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00e      	beq.n	8006d9a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	7afa      	ldrb	r2, [r7, #11]
 8006d86:	4611      	mov	r1, r2
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	4798      	blx	r3
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	e000      	b.n	8006d9c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e02f      	b.n	8006e38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6852      	ldr	r2, [r2, #4]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fae8 	bl	80083de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2240      	movs	r2, #64	; 0x40
 8006e1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e1e:	2340      	movs	r3, #64	; 0x40
 8006e20:	2200      	movs	r2, #0
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fada 	bl	80083de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2240      	movs	r2, #64	; 0x40
 8006e34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d106      	bne.n	8006eae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e012      	b.n	8006ef8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d10b      	bne.n	8006ef6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e014      	b.n	8006f44 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d10d      	bne.n	8006f42 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e014      	b.n	8006f90 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d10d      	bne.n	8006f8e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6852      	ldr	r2, [r2, #4]
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
  }

  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007004:	8a3b      	ldrh	r3, [r7, #16]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	b21a      	sxth	r2, r3
 800700a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800700e:	4313      	orrs	r3, r2
 8007010:	b21b      	sxth	r3, r3
 8007012:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007014:	89fb      	ldrh	r3, [r7, #14]
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d005      	beq.n	800704a <USBD_StdDevReq+0x26>
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d853      	bhi.n	80070ea <USBD_StdDevReq+0xc6>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <USBD_StdDevReq+0x3a>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d14f      	bne.n	80070ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]
      break;
 800705c:	e04a      	b.n	80070f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b09      	cmp	r3, #9
 8007064:	d83b      	bhi.n	80070de <USBD_StdDevReq+0xba>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_StdDevReq+0x48>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	080070c1 	.word	0x080070c1
 8007070:	080070d5 	.word	0x080070d5
 8007074:	080070df 	.word	0x080070df
 8007078:	080070cb 	.word	0x080070cb
 800707c:	080070df 	.word	0x080070df
 8007080:	0800709f 	.word	0x0800709f
 8007084:	08007095 	.word	0x08007095
 8007088:	080070df 	.word	0x080070df
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070a9 	.word	0x080070a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9de 	bl	8007458 <USBD_GetDescriptor>
          break;
 800709c:	e024      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb43 	bl	800772c <USBD_SetAddress>
          break;
 80070a6:	e01f      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb82 	bl	80077b4 <USBD_SetConfig>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
          break;
 80070b4:	e018      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fc21 	bl	8007900 <USBD_GetConfig>
          break;
 80070be:	e013      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc52 	bl	800796c <USBD_GetStatus>
          break;
 80070c8:	e00e      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc81 	bl	80079d4 <USBD_SetFeature>
          break;
 80070d2:	e009      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fc90 	bl	80079fc <USBD_ClrFeature>
          break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fce7 	bl	8007ab4 <USBD_CtlError>
          break;
 80070e6:	bf00      	nop
      }
      break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fce1 	bl	8007ab4 <USBD_CtlError>
      break;
 80070f2:	bf00      	nop
  }

  return ret;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop

08007100 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d005      	beq.n	8007126 <USBD_StdItfReq+0x26>
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d82f      	bhi.n	800717e <USBD_StdItfReq+0x7e>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <USBD_StdItfReq+0x26>
 8007122:	2b20      	cmp	r3, #32
 8007124:	d12b      	bne.n	800717e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712c:	b2db      	uxtb	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	2b02      	cmp	r3, #2
 8007132:	d81d      	bhi.n	8007170 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	889b      	ldrh	r3, [r3, #4]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d813      	bhi.n	8007166 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	88db      	ldrh	r3, [r3, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d110      	bne.n	800717a <USBD_StdItfReq+0x7a>
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fd73 	bl	8007c4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007164:	e009      	b.n	800717a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fca3 	bl	8007ab4 <USBD_CtlError>
          break;
 800716e:	e004      	b.n	800717a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc9e 	bl	8007ab4 <USBD_CtlError>
          break;
 8007178:	e000      	b.n	800717c <USBD_StdItfReq+0x7c>
          break;
 800717a:	bf00      	nop
      }
      break;
 800717c:	e004      	b.n	8007188 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fc97 	bl	8007ab4 <USBD_CtlError>
      break;
 8007186:	bf00      	nop
  }

  return ret;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	889b      	ldrh	r3, [r3, #4]
 80071a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d007      	beq.n	80071c2 <USBD_StdEPReq+0x30>
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	f200 8145 	bhi.w	8007442 <USBD_StdEPReq+0x2b0>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00c      	beq.n	80071d6 <USBD_StdEPReq+0x44>
 80071bc:	2b20      	cmp	r3, #32
 80071be:	f040 8140 	bne.w	8007442 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
      break;
 80071d4:	e13a      	b.n	800744c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d007      	beq.n	80071ee <USBD_StdEPReq+0x5c>
 80071de:	2b03      	cmp	r3, #3
 80071e0:	f300 8129 	bgt.w	8007436 <USBD_StdEPReq+0x2a4>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d07f      	beq.n	80072e8 <USBD_StdEPReq+0x156>
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d03c      	beq.n	8007266 <USBD_StdEPReq+0xd4>
 80071ec:	e123      	b.n	8007436 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d002      	beq.n	8007200 <USBD_StdEPReq+0x6e>
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d016      	beq.n	800722c <USBD_StdEPReq+0x9a>
 80071fe:	e02c      	b.n	800725a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <USBD_StdEPReq+0x90>
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b80      	cmp	r3, #128	; 0x80
 800720a:	d00a      	beq.n	8007222 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f929 	bl	8008468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007216:	2180      	movs	r1, #128	; 0x80
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f925 	bl	8008468 <USBD_LL_StallEP>
 800721e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007220:	e020      	b.n	8007264 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc45 	bl	8007ab4 <USBD_CtlError>
              break;
 800722a:	e01b      	b.n	8007264 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	885b      	ldrh	r3, [r3, #2]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10e      	bne.n	8007252 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <USBD_StdEPReq+0xc0>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d008      	beq.n	8007252 <USBD_StdEPReq+0xc0>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	88db      	ldrh	r3, [r3, #6]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f90b 	bl	8008468 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fcf9 	bl	8007c4a <USBD_CtlSendStatus>

              break;
 8007258:	e004      	b.n	8007264 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc29 	bl	8007ab4 <USBD_CtlError>
              break;
 8007262:	bf00      	nop
          }
          break;
 8007264:	e0ec      	b.n	8007440 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USBD_StdEPReq+0xe6>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d016      	beq.n	80072a4 <USBD_StdEPReq+0x112>
 8007276:	e030      	b.n	80072da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <USBD_StdEPReq+0x108>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d00a      	beq.n	800729a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f8ed 	bl	8008468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f8e9 	bl	8008468 <USBD_LL_StallEP>
 8007296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007298:	e025      	b.n	80072e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc09 	bl	8007ab4 <USBD_CtlError>
              break;
 80072a2:	e020      	b.n	80072e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11b      	bne.n	80072e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f8f3 	bl	80084a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fcc2 	bl	8007c4a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80072d8:	e004      	b.n	80072e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fbe9 	bl	8007ab4 <USBD_CtlError>
              break;
 80072e2:	e000      	b.n	80072e6 <USBD_StdEPReq+0x154>
              break;
 80072e4:	bf00      	nop
          }
          break;
 80072e6:	e0ab      	b.n	8007440 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d002      	beq.n	80072fa <USBD_StdEPReq+0x168>
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d032      	beq.n	800735e <USBD_StdEPReq+0x1cc>
 80072f8:	e097      	b.n	800742a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <USBD_StdEPReq+0x17e>
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b80      	cmp	r3, #128	; 0x80
 8007304:	d004      	beq.n	8007310 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fbd3 	bl	8007ab4 <USBD_CtlError>
                break;
 800730e:	e091      	b.n	8007434 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007310:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007314:	2b00      	cmp	r3, #0
 8007316:	da0b      	bge.n	8007330 <USBD_StdEPReq+0x19e>
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	3310      	adds	r3, #16
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	4413      	add	r3, r2
 800732c:	3304      	adds	r3, #4
 800732e:	e00b      	b.n	8007348 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	3304      	adds	r3, #4
 8007348:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2202      	movs	r2, #2
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fc1d 	bl	8007b96 <USBD_CtlSendData>
              break;
 800735c:	e06a      	b.n	8007434 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800735e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	da11      	bge.n	800738a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 020f 	and.w	r2, r3, #15
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	440b      	add	r3, r1
 8007378:	3324      	adds	r3, #36	; 0x24
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d117      	bne.n	80073b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fb96 	bl	8007ab4 <USBD_CtlError>
                  break;
 8007388:	e054      	b.n	8007434 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb83 	bl	8007ab4 <USBD_CtlError>
                  break;
 80073ae:	e041      	b.n	8007434 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	da0b      	bge.n	80073d0 <USBD_StdEPReq+0x23e>
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	3310      	adds	r3, #16
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	e00b      	b.n	80073e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4413      	add	r3, r2
 80073e6:	3304      	adds	r3, #4
 80073e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <USBD_StdEPReq+0x264>
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2b80      	cmp	r3, #128	; 0x80
 80073f4:	d103      	bne.n	80073fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e00e      	b.n	800741c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 f86e 	bl	80084e4 <USBD_LL_IsStallEP>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e002      	b.n	800741c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2202      	movs	r2, #2
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fbb7 	bl	8007b96 <USBD_CtlSendData>
              break;
 8007428:	e004      	b.n	8007434 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fb41 	bl	8007ab4 <USBD_CtlError>
              break;
 8007432:	bf00      	nop
          }
          break;
 8007434:	e004      	b.n	8007440 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb3b 	bl	8007ab4 <USBD_CtlError>
          break;
 800743e:	bf00      	nop
      }
      break;
 8007440:	e004      	b.n	800744c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb35 	bl	8007ab4 <USBD_CtlError>
      break;
 800744a:	bf00      	nop
  }

  return ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	2b06      	cmp	r3, #6
 800747a:	f200 8128 	bhi.w	80076ce <USBD_GetDescriptor+0x276>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <USBD_GetDescriptor+0x2c>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	080074a1 	.word	0x080074a1
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080076cf 	.word	0x080076cf
 8007494:	080076cf 	.word	0x080076cf
 8007498:	0800766f 	.word	0x0800766f
 800749c:	0800769b 	.word	0x0800769b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
      break;
 80074b6:	e112      	b.n	80076de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	7c1b      	ldrb	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10d      	bne.n	80074dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f107 0208 	add.w	r2, r7, #8
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3301      	adds	r3, #1
 80074d6:	2202      	movs	r2, #2
 80074d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074da:	e100      	b.n	80076de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	f107 0208 	add.w	r2, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3301      	adds	r3, #1
 80074f2:	2202      	movs	r2, #2
 80074f4:	701a      	strb	r2, [r3, #0]
      break;
 80074f6:	e0f2      	b.n	80076de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b05      	cmp	r3, #5
 8007500:	f200 80ac 	bhi.w	800765c <USBD_GetDescriptor+0x204>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBD_GetDescriptor+0xb4>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007525 	.word	0x08007525
 8007510:	08007559 	.word	0x08007559
 8007514:	0800758d 	.word	0x0800758d
 8007518:	080075c1 	.word	0x080075c1
 800751c:	080075f5 	.word	0x080075f5
 8007520:	08007629 	.word	0x08007629
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7c12      	ldrb	r2, [r2, #16]
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007546:	e091      	b.n	800766c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fab2 	bl	8007ab4 <USBD_CtlError>
            err++;
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	3301      	adds	r3, #1
 8007554:	72fb      	strb	r3, [r7, #11]
          break;
 8007556:	e089      	b.n	800766c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	7c12      	ldrb	r2, [r2, #16]
 8007570:	f107 0108 	add.w	r1, r7, #8
 8007574:	4610      	mov	r0, r2
 8007576:	4798      	blx	r3
 8007578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757a:	e077      	b.n	800766c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa98 	bl	8007ab4 <USBD_CtlError>
            err++;
 8007584:	7afb      	ldrb	r3, [r7, #11]
 8007586:	3301      	adds	r3, #1
 8007588:	72fb      	strb	r3, [r7, #11]
          break;
 800758a:	e06f      	b.n	800766c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7c12      	ldrb	r2, [r2, #16]
 80075a4:	f107 0108 	add.w	r1, r7, #8
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ae:	e05d      	b.n	800766c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa7e 	bl	8007ab4 <USBD_CtlError>
            err++;
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	3301      	adds	r3, #1
 80075bc:	72fb      	strb	r3, [r7, #11]
          break;
 80075be:	e055      	b.n	800766c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	7c12      	ldrb	r2, [r2, #16]
 80075d8:	f107 0108 	add.w	r1, r7, #8
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
 80075e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e2:	e043      	b.n	800766c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa64 	bl	8007ab4 <USBD_CtlError>
            err++;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	3301      	adds	r3, #1
 80075f0:	72fb      	strb	r3, [r7, #11]
          break;
 80075f2:	e03b      	b.n	800766c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007616:	e029      	b.n	800766c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa4a 	bl	8007ab4 <USBD_CtlError>
            err++;
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	3301      	adds	r3, #1
 8007624:	72fb      	strb	r3, [r7, #11]
          break;
 8007626:	e021      	b.n	800766c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	7c12      	ldrb	r2, [r2, #16]
 8007640:	f107 0108 	add.w	r1, r7, #8
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
 8007648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764a:	e00f      	b.n	800766c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa30 	bl	8007ab4 <USBD_CtlError>
            err++;
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	3301      	adds	r3, #1
 8007658:	72fb      	strb	r3, [r7, #11]
          break;
 800765a:	e007      	b.n	800766c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa28 	bl	8007ab4 <USBD_CtlError>
          err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800766a:	bf00      	nop
      }
      break;
 800766c:	e037      	b.n	80076de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7c1b      	ldrb	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767e:	f107 0208 	add.w	r2, r7, #8
 8007682:	4610      	mov	r0, r2
 8007684:	4798      	blx	r3
 8007686:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007688:	e029      	b.n	80076de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa11 	bl	8007ab4 <USBD_CtlError>
        err++;
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	3301      	adds	r3, #1
 8007696:	72fb      	strb	r3, [r7, #11]
      break;
 8007698:	e021      	b.n	80076de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	7c1b      	ldrb	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10d      	bne.n	80076be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f107 0208 	add.w	r2, r7, #8
 80076ae:	4610      	mov	r0, r2
 80076b0:	4798      	blx	r3
 80076b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	2207      	movs	r2, #7
 80076ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076bc:	e00f      	b.n	80076de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9f7 	bl	8007ab4 <USBD_CtlError>
        err++;
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	3301      	adds	r3, #1
 80076ca:	72fb      	strb	r3, [r7, #11]
      break;
 80076cc:	e007      	b.n	80076de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9ef 	bl	8007ab4 <USBD_CtlError>
      err++;
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	3301      	adds	r3, #1
 80076da:	72fb      	strb	r3, [r7, #11]
      break;
 80076dc:	bf00      	nop
  }

  if (err != 0U)
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d11e      	bne.n	8007722 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	88db      	ldrh	r3, [r3, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d016      	beq.n	800771a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076ec:	893b      	ldrh	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	88da      	ldrh	r2, [r3, #6]
 80076f6:	893b      	ldrh	r3, [r7, #8]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	bf28      	it	cs
 80076fc:	4613      	movcs	r3, r2
 80076fe:	b29b      	uxth	r3, r3
 8007700:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	461a      	mov	r2, r3
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa44 	bl	8007b96 <USBD_CtlSendData>
 800770e:	e009      	b.n	8007724 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f9ce 	bl	8007ab4 <USBD_CtlError>
 8007718:	e004      	b.n	8007724 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa95 	bl	8007c4a <USBD_CtlSendStatus>
 8007720:	e000      	b.n	8007724 <USBD_GetDescriptor+0x2cc>
    return;
 8007722:	bf00      	nop
  }
}
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop

0800772c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	889b      	ldrh	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d131      	bne.n	80077a2 <USBD_SetAddress+0x76>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d12d      	bne.n	80077a2 <USBD_SetAddress+0x76>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	2b7f      	cmp	r3, #127	; 0x7f
 800774c:	d829      	bhi.n	80077a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007758:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b03      	cmp	r3, #3
 8007764:	d104      	bne.n	8007770 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f9a3 	bl	8007ab4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776e:	e01d      	b.n	80077ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7bfa      	ldrb	r2, [r7, #15]
 8007774:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fedd 	bl	800853c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa61 	bl	8007c4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	e009      	b.n	80077ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a0:	e004      	b.n	80077ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f985 	bl	8007ab4 <USBD_CtlError>
  }
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	885b      	ldrh	r3, [r3, #2]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	4b4c      	ldr	r3, [pc, #304]	; (80078fc <USBD_SetConfig+0x148>)
 80077ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077cc:	4b4b      	ldr	r3, [pc, #300]	; (80078fc <USBD_SetConfig+0x148>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d905      	bls.n	80077e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f96c 	bl	8007ab4 <USBD_CtlError>
    return USBD_FAIL;
 80077dc:	2303      	movs	r3, #3
 80077de:	e088      	b.n	80078f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d002      	beq.n	80077f2 <USBD_SetConfig+0x3e>
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d025      	beq.n	800783c <USBD_SetConfig+0x88>
 80077f0:	e071      	b.n	80078d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077f2:	4b42      	ldr	r3, [pc, #264]	; (80078fc <USBD_SetConfig+0x148>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01c      	beq.n	8007834 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077fa:	4b40      	ldr	r3, [pc, #256]	; (80078fc <USBD_SetConfig+0x148>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007804:	4b3d      	ldr	r3, [pc, #244]	; (80078fc <USBD_SetConfig+0x148>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff f948 	bl	8006aa0 <USBD_SetClassConfig>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f949 	bl	8007ab4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007822:	e065      	b.n	80078f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa10 	bl	8007c4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2203      	movs	r2, #3
 800782e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007832:	e05d      	b.n	80078f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa08 	bl	8007c4a <USBD_CtlSendStatus>
      break;
 800783a:	e059      	b.n	80078f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800783c:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <USBD_SetConfig+0x148>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d112      	bne.n	800786a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800784c:	4b2b      	ldr	r3, [pc, #172]	; (80078fc <USBD_SetConfig+0x148>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007856:	4b29      	ldr	r3, [pc, #164]	; (80078fc <USBD_SetConfig+0x148>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff f93b 	bl	8006ad8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f9f1 	bl	8007c4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007868:	e042      	b.n	80078f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800786a:	4b24      	ldr	r3, [pc, #144]	; (80078fc <USBD_SetConfig+0x148>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	429a      	cmp	r2, r3
 8007876:	d02a      	beq.n	80078ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff f929 	bl	8006ad8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007886:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <USBD_SetConfig+0x148>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <USBD_SetConfig+0x148>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff f902 	bl	8006aa0 <USBD_SetClassConfig>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f903 	bl	8007ab4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff f90e 	bl	8006ad8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078c4:	e014      	b.n	80078f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9bf 	bl	8007c4a <USBD_CtlSendStatus>
      break;
 80078cc:	e010      	b.n	80078f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9bb 	bl	8007c4a <USBD_CtlSendStatus>
      break;
 80078d4:	e00c      	b.n	80078f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8eb 	bl	8007ab4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <USBD_SetConfig+0x148>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff f8f7 	bl	8006ad8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078ea:	2303      	movs	r3, #3
 80078ec:	73fb      	strb	r3, [r7, #15]
      break;
 80078ee:	bf00      	nop
  }

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200005b6 	.word	0x200005b6

08007900 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	88db      	ldrh	r3, [r3, #6]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d004      	beq.n	800791c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8cd 	bl	8007ab4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800791a:	e023      	b.n	8007964 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	dc02      	bgt.n	800792e <USBD_GetConfig+0x2e>
 8007928:	2b00      	cmp	r3, #0
 800792a:	dc03      	bgt.n	8007934 <USBD_GetConfig+0x34>
 800792c:	e015      	b.n	800795a <USBD_GetConfig+0x5a>
 800792e:	2b03      	cmp	r3, #3
 8007930:	d00b      	beq.n	800794a <USBD_GetConfig+0x4a>
 8007932:	e012      	b.n	800795a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3308      	adds	r3, #8
 800793e:	2201      	movs	r2, #1
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f927 	bl	8007b96 <USBD_CtlSendData>
        break;
 8007948:	e00c      	b.n	8007964 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3304      	adds	r3, #4
 800794e:	2201      	movs	r2, #1
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f91f 	bl	8007b96 <USBD_CtlSendData>
        break;
 8007958:	e004      	b.n	8007964 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8a9 	bl	8007ab4 <USBD_CtlError>
        break;
 8007962:	bf00      	nop
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	b2db      	uxtb	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	2b02      	cmp	r3, #2
 8007982:	d81e      	bhi.n	80079c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	88db      	ldrh	r3, [r3, #6]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d004      	beq.n	8007996 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f890 	bl	8007ab4 <USBD_CtlError>
        break;
 8007994:	e01a      	b.n	80079cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f043 0202 	orr.w	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	330c      	adds	r3, #12
 80079b6:	2202      	movs	r2, #2
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8eb 	bl	8007b96 <USBD_CtlSendData>
      break;
 80079c0:	e004      	b.n	80079cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f875 	bl	8007ab4 <USBD_CtlError>
      break;
 80079ca:	bf00      	nop
  }
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d106      	bne.n	80079f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f92b 	bl	8007c4a <USBD_CtlSendStatus>
  }
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d80b      	bhi.n	8007a2c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	885b      	ldrh	r3, [r3, #2]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d10c      	bne.n	8007a36 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f910 	bl	8007c4a <USBD_CtlSendStatus>
      }
      break;
 8007a2a:	e004      	b.n	8007a36 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f840 	bl	8007ab4 <USBD_CtlError>
      break;
 8007a34:	e000      	b.n	8007a38 <USBD_ClrFeature+0x3c>
      break;
 8007a36:	bf00      	nop
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	781a      	ldrb	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fabb 	bl	8006fe6 <SWAPBYTE>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff faae 	bl	8006fe6 <SWAPBYTE>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff faa1 	bl	8006fe6 <SWAPBYTE>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	80da      	strh	r2, [r3, #6]
}
 8007aac:	bf00      	nop
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fcd1 	bl	8008468 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fccd 	bl	8008468 <USBD_LL_StallEP>
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d036      	beq.n	8007b5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007af0:	6938      	ldr	r0, [r7, #16]
 8007af2:	f000 f836 	bl	8007b62 <USBD_GetLen>
 8007af6:	4603      	mov	r3, r0
 8007af8:	3301      	adds	r3, #1
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4413      	add	r3, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	3301      	adds	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	3301      	adds	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b26:	e013      	b.n	8007b50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	7812      	ldrb	r2, [r2, #0]
 8007b32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	3301      	adds	r3, #1
 8007b38:	613b      	str	r3, [r7, #16]
    idx++;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e7      	bne.n	8007b28 <USBD_GetString+0x52>
 8007b58:	e000      	b.n	8007b5c <USBD_GetString+0x86>
    return;
 8007b5a:	bf00      	nop
  }
}
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b72:	e005      	b.n	8007b80 <USBD_GetLen+0x1e>
  {
    len++;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	3301      	adds	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f5      	bne.n	8007b74 <USBD_GetLen+0x12>
  }

  return len;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	2100      	movs	r1, #0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 fcdc 	bl	800857a <USBD_LL_Transmit>

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fccb 	bl	800857a <USBD_LL_Transmit>

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	2100      	movs	r1, #0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fccf 	bl	80085bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	2100      	movs	r1, #0
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fcbe 	bl	80085bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2204      	movs	r2, #4
 8007c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc8a 	bl	800857a <USBD_LL_Transmit>

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c80:	2300      	movs	r3, #0
 8007c82:	2200      	movs	r2, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fc98 	bl	80085bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4912      	ldr	r1, [pc, #72]	; (8007ce8 <MX_USB_DEVICE_Init+0x50>)
 8007ca0:	4812      	ldr	r0, [pc, #72]	; (8007cec <MX_USB_DEVICE_Init+0x54>)
 8007ca2:	f7fe fe8f 	bl	80069c4 <USBD_Init>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cac:	f7f8 ff96 	bl	8000bdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cb0:	490f      	ldr	r1, [pc, #60]	; (8007cf0 <MX_USB_DEVICE_Init+0x58>)
 8007cb2:	480e      	ldr	r0, [pc, #56]	; (8007cec <MX_USB_DEVICE_Init+0x54>)
 8007cb4:	f7fe feb6 	bl	8006a24 <USBD_RegisterClass>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cbe:	f7f8 ff8d 	bl	8000bdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cc2:	490c      	ldr	r1, [pc, #48]	; (8007cf4 <MX_USB_DEVICE_Init+0x5c>)
 8007cc4:	4809      	ldr	r0, [pc, #36]	; (8007cec <MX_USB_DEVICE_Init+0x54>)
 8007cc6:	f7fe fe07 	bl	80068d8 <USBD_CDC_RegisterInterface>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cd0:	f7f8 ff84 	bl	8000bdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007cd4:	4805      	ldr	r0, [pc, #20]	; (8007cec <MX_USB_DEVICE_Init+0x54>)
 8007cd6:	f7fe fecc 	bl	8006a72 <USBD_Start>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ce0:	f7f8 ff7c 	bl	8000bdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ce4:	bf00      	nop
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000144 	.word	0x20000144
 8007cec:	2000096c 	.word	0x2000096c
 8007cf0:	2000002c 	.word	0x2000002c
 8007cf4:	20000130 	.word	0x20000130

08007cf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4905      	ldr	r1, [pc, #20]	; (8007d14 <CDC_Init_FS+0x1c>)
 8007d00:	4805      	ldr	r0, [pc, #20]	; (8007d18 <CDC_Init_FS+0x20>)
 8007d02:	f7fe fdfe 	bl	8006902 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d06:	4905      	ldr	r1, [pc, #20]	; (8007d1c <CDC_Init_FS+0x24>)
 8007d08:	4803      	ldr	r0, [pc, #12]	; (8007d18 <CDC_Init_FS+0x20>)
 8007d0a:	f7fe fe18 	bl	800693e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	2000143c 	.word	0x2000143c
 8007d18:	2000096c 	.word	0x2000096c
 8007d1c:	20000c3c 	.word	0x20000c3c

08007d20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b23      	cmp	r3, #35	; 0x23
 8007d44:	d84a      	bhi.n	8007ddc <CDC_Control_FS+0xac>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <CDC_Control_FS+0x1c>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007ddd 	.word	0x08007ddd
 8007d50:	08007ddd 	.word	0x08007ddd
 8007d54:	08007ddd 	.word	0x08007ddd
 8007d58:	08007ddd 	.word	0x08007ddd
 8007d5c:	08007ddd 	.word	0x08007ddd
 8007d60:	08007ddd 	.word	0x08007ddd
 8007d64:	08007ddd 	.word	0x08007ddd
 8007d68:	08007ddd 	.word	0x08007ddd
 8007d6c:	08007ddd 	.word	0x08007ddd
 8007d70:	08007ddd 	.word	0x08007ddd
 8007d74:	08007ddd 	.word	0x08007ddd
 8007d78:	08007ddd 	.word	0x08007ddd
 8007d7c:	08007ddd 	.word	0x08007ddd
 8007d80:	08007ddd 	.word	0x08007ddd
 8007d84:	08007ddd 	.word	0x08007ddd
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007ddd 	.word	0x08007ddd
 8007d90:	08007ddd 	.word	0x08007ddd
 8007d94:	08007ddd 	.word	0x08007ddd
 8007d98:	08007ddd 	.word	0x08007ddd
 8007d9c:	08007ddd 	.word	0x08007ddd
 8007da0:	08007ddd 	.word	0x08007ddd
 8007da4:	08007ddd 	.word	0x08007ddd
 8007da8:	08007ddd 	.word	0x08007ddd
 8007dac:	08007ddd 	.word	0x08007ddd
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	08007ddd 	.word	0x08007ddd
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007ddd 	.word	0x08007ddd
 8007dc0:	08007ddd 	.word	0x08007ddd
 8007dc4:	08007ddd 	.word	0x08007ddd
 8007dc8:	08007ddd 	.word	0x08007ddd
 8007dcc:	08007ddd 	.word	0x08007ddd
 8007dd0:	08007ddd 	.word	0x08007ddd
 8007dd4:	08007ddd 	.word	0x08007ddd
 8007dd8:	08007ddd 	.word	0x08007ddd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ddc:	bf00      	nop
  }

  return (USBD_OK);
 8007dde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	480f      	ldr	r0, [pc, #60]	; (8007e38 <CDC_Receive_FS+0x4c>)
 8007dfa:	f7fe fda0 	bl	800693e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dfe:	480e      	ldr	r0, [pc, #56]	; (8007e38 <CDC_Receive_FS+0x4c>)
 8007e00:	f7fe fdb6 	bl	8006970 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8007e04:	2240      	movs	r2, #64	; 0x40
 8007e06:	2100      	movs	r1, #0
 8007e08:	480c      	ldr	r0, [pc, #48]	; (8007e3c <CDC_Receive_FS+0x50>)
 8007e0a:	f000 fc81 	bl	8008710 <memset>
  uint8_t len = (uint8_t)*Len;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4808      	ldr	r0, [pc, #32]	; (8007e3c <CDC_Receive_FS+0x50>)
 8007e1c:	f000 fc6a 	bl	80086f4 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	461a      	mov	r2, r3
 8007e24:	2100      	movs	r1, #0
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fc72 	bl	8008710 <memset>

  return (USBD_OK);
 8007e2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000096c 	.word	0x2000096c
 8007e3c:	20000928 	.word	0x20000928

08007e40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
	...

08007e64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2212      	movs	r2, #18
 8007e74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e76:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	20000160 	.word	0x20000160

08007e88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2204      	movs	r2, #4
 8007e98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	20000174 	.word	0x20000174

08007eac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4907      	ldr	r1, [pc, #28]	; (8007ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ec2:	4808      	ldr	r0, [pc, #32]	; (8007ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ec4:	f7ff fe07 	bl	8007ad6 <USBD_GetString>
 8007ec8:	e004      	b.n	8007ed4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4904      	ldr	r1, [pc, #16]	; (8007ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ece:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ed0:	f7ff fe01 	bl	8007ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ed4:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20001c3c 	.word	0x20001c3c
 8007ee4:	080087e8 	.word	0x080087e8

08007ee8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	4904      	ldr	r1, [pc, #16]	; (8007f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ef8:	4804      	ldr	r0, [pc, #16]	; (8007f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007efa:	f7ff fdec 	bl	8007ad6 <USBD_GetString>
  return USBD_StrDesc;
 8007efe:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20001c3c 	.word	0x20001c3c
 8007f0c:	080087fc 	.word	0x080087fc

08007f10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	221a      	movs	r2, #26
 8007f20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f22:	f000 f843 	bl	8007fac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f26:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000178 	.word	0x20000178

08007f34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	4907      	ldr	r1, [pc, #28]	; (8007f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f4a:	4808      	ldr	r0, [pc, #32]	; (8007f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f4c:	f7ff fdc3 	bl	8007ad6 <USBD_GetString>
 8007f50:	e004      	b.n	8007f5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4904      	ldr	r1, [pc, #16]	; (8007f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f56:	4805      	ldr	r0, [pc, #20]	; (8007f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f58:	f7ff fdbd 	bl	8007ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20001c3c 	.word	0x20001c3c
 8007f6c:	08008810 	.word	0x08008810

08007f70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d105      	bne.n	8007f8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4907      	ldr	r1, [pc, #28]	; (8007fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f86:	4808      	ldr	r0, [pc, #32]	; (8007fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f88:	f7ff fda5 	bl	8007ad6 <USBD_GetString>
 8007f8c:	e004      	b.n	8007f98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4904      	ldr	r1, [pc, #16]	; (8007fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f92:	4805      	ldr	r0, [pc, #20]	; (8007fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f94:	f7ff fd9f 	bl	8007ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f98:	4b02      	ldr	r3, [pc, #8]	; (8007fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20001c3c 	.word	0x20001c3c
 8007fa8:	0800881c 	.word	0x0800881c

08007fac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <Get_SerialNum+0x44>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <Get_SerialNum+0x48>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <Get_SerialNum+0x4c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4413      	add	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	4909      	ldr	r1, [pc, #36]	; (8007ffc <Get_SerialNum+0x50>)
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f814 	bl	8008004 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fdc:	2204      	movs	r2, #4
 8007fde:	4908      	ldr	r1, [pc, #32]	; (8008000 <Get_SerialNum+0x54>)
 8007fe0:	68b8      	ldr	r0, [r7, #8]
 8007fe2:	f000 f80f 	bl	8008004 <IntToUnicode>
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	1fff7a10 	.word	0x1fff7a10
 8007ff4:	1fff7a14 	.word	0x1fff7a14
 8007ff8:	1fff7a18 	.word	0x1fff7a18
 8007ffc:	2000017a 	.word	0x2000017a
 8008000:	2000018a 	.word	0x2000018a

08008004 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
 800801a:	e027      	b.n	800806c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	0f1b      	lsrs	r3, r3, #28
 8008020:	2b09      	cmp	r3, #9
 8008022:	d80b      	bhi.n	800803c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	0f1b      	lsrs	r3, r3, #28
 8008028:	b2da      	uxtb	r2, r3
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	4619      	mov	r1, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	440b      	add	r3, r1
 8008034:	3230      	adds	r2, #48	; 0x30
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e00a      	b.n	8008052 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	0f1b      	lsrs	r3, r3, #28
 8008040:	b2da      	uxtb	r2, r3
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4619      	mov	r1, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	440b      	add	r3, r1
 800804c:	3237      	adds	r2, #55	; 0x37
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	3301      	adds	r3, #1
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	4413      	add	r3, r2
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	3301      	adds	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
 800806c:	7dfa      	ldrb	r2, [r7, #23]
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	429a      	cmp	r2, r3
 8008072:	d3d3      	bcc.n	800801c <IntToUnicode+0x18>
  }
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	; 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800808c:	f107 0314 	add.w	r3, r7, #20
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a4:	d13a      	bne.n	800811c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6313      	str	r3, [r2, #48]	; 0x30
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c8:	2302      	movs	r3, #2
 80080ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080d0:	2303      	movs	r3, #3
 80080d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080d4:	230a      	movs	r3, #10
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d8:	f107 0314 	add.w	r3, r7, #20
 80080dc:	4619      	mov	r1, r3
 80080de:	4812      	ldr	r0, [pc, #72]	; (8008128 <HAL_PCD_MspInit+0xa4>)
 80080e0:	f7f9 fd9c 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	4a0e      	ldr	r2, [pc, #56]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ee:	6353      	str	r3, [r2, #52]	; 0x34
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f8:	4a0a      	ldr	r2, [pc, #40]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 80080fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080fe:	6453      	str	r3, [r2, #68]	; 0x44
 8008100:	4b08      	ldr	r3, [pc, #32]	; (8008124 <HAL_PCD_MspInit+0xa0>)
 8008102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	2100      	movs	r1, #0
 8008110:	2043      	movs	r0, #67	; 0x43
 8008112:	f7f9 fd4c 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008116:	2043      	movs	r0, #67	; 0x43
 8008118:	f7f9 fd65 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800811c:	bf00      	nop
 800811e:	3728      	adds	r7, #40	; 0x28
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40023800 	.word	0x40023800
 8008128:	40020000 	.word	0x40020000

0800812c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fce0 	bl	8006b08 <USBD_LL_SetupStage>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	4619      	mov	r1, r3
 800817a:	f7fe fd1a 	bl	8006bb2 <USBD_LL_DataOutStage>
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	4613      	mov	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	1a9b      	subs	r3, r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	3348      	adds	r3, #72	; 0x48
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe fd63 	bl	8006c78 <USBD_LL_DataInStage>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fe77 	bl	8006ebc <USBD_LL_SOF>
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081de:	2301      	movs	r3, #1
 80081e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
 80081ee:	e008      	b.n	8008202 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d102      	bne.n	80081fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80081f8:	2301      	movs	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]
 80081fc:	e001      	b.n	8008202 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80081fe:	f7f8 fced 	bl	8000bdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008208:	7bfa      	ldrb	r2, [r7, #15]
 800820a:	4611      	mov	r1, r2
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fe17 	bl	8006e40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fdc3 	bl	8006da4 <USBD_LL_Reset>
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fe12 	bl	8006e60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800825c:	4b04      	ldr	r3, [pc, #16]	; (8008270 <HAL_PCD_SuspendCallback+0x48>)
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	4a03      	ldr	r2, [pc, #12]	; (8008270 <HAL_PCD_SuspendCallback+0x48>)
 8008262:	f043 0306 	orr.w	r3, r3, #6
 8008266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	e000ed00 	.word	0xe000ed00

08008274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe fe02 	bl	8006e8c <USBD_LL_Resume>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe fe50 	bl	8006f4c <USBD_LL_IsoOUTIncomplete>
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fe18 	bl	8006f00 <USBD_LL_IsoINIncomplete>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fe56 	bl	8006f98 <USBD_LL_DevConnected>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fe53 	bl	8006fae <USBD_LL_DevDisconnected>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d13c      	bne.n	800839a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008320:	4a20      	ldr	r2, [pc, #128]	; (80083a4 <USBD_LL_Init+0x94>)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <USBD_LL_Init+0x94>)
 800832c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <USBD_LL_Init+0x94>)
 8008332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008338:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <USBD_LL_Init+0x94>)
 800833a:	2204      	movs	r2, #4
 800833c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800833e:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <USBD_LL_Init+0x94>)
 8008340:	2202      	movs	r2, #2
 8008342:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008344:	4b17      	ldr	r3, [pc, #92]	; (80083a4 <USBD_LL_Init+0x94>)
 8008346:	2200      	movs	r2, #0
 8008348:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800834a:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <USBD_LL_Init+0x94>)
 800834c:	2202      	movs	r2, #2
 800834e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008350:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <USBD_LL_Init+0x94>)
 8008352:	2200      	movs	r2, #0
 8008354:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008356:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <USBD_LL_Init+0x94>)
 8008358:	2200      	movs	r2, #0
 800835a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <USBD_LL_Init+0x94>)
 800835e:	2200      	movs	r2, #0
 8008360:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008362:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <USBD_LL_Init+0x94>)
 8008364:	2200      	movs	r2, #0
 8008366:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008368:	4b0e      	ldr	r3, [pc, #56]	; (80083a4 <USBD_LL_Init+0x94>)
 800836a:	2200      	movs	r2, #0
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800836e:	480d      	ldr	r0, [pc, #52]	; (80083a4 <USBD_LL_Init+0x94>)
 8008370:	f7fa ff01 	bl	8003176 <HAL_PCD_Init>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800837a:	f7f8 fc2f 	bl	8000bdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800837e:	2180      	movs	r1, #128	; 0x80
 8008380:	4808      	ldr	r0, [pc, #32]	; (80083a4 <USBD_LL_Init+0x94>)
 8008382:	f7fc f85e 	bl	8004442 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008386:	2240      	movs	r2, #64	; 0x40
 8008388:	2100      	movs	r1, #0
 800838a:	4806      	ldr	r0, [pc, #24]	; (80083a4 <USBD_LL_Init+0x94>)
 800838c:	f7fc f812 	bl	80043b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008390:	2280      	movs	r2, #128	; 0x80
 8008392:	2101      	movs	r1, #1
 8008394:	4803      	ldr	r0, [pc, #12]	; (80083a4 <USBD_LL_Init+0x94>)
 8008396:	f7fc f80d 	bl	80043b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20001e3c 	.word	0x20001e3c

080083a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fa fff6 	bl	80033b0 <HAL_PCD_Start>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f942 	bl	8008654 <USBD_Get_USB_Status>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	4608      	mov	r0, r1
 80083e8:	4611      	mov	r1, r2
 80083ea:	461a      	mov	r2, r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	70fb      	strb	r3, [r7, #3]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70bb      	strb	r3, [r7, #2]
 80083f4:	4613      	mov	r3, r2
 80083f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008406:	78bb      	ldrb	r3, [r7, #2]
 8008408:	883a      	ldrh	r2, [r7, #0]
 800840a:	78f9      	ldrb	r1, [r7, #3]
 800840c:	f7fb fbda 	bl	8003bc4 <HAL_PCD_EP_Open>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f91c 	bl	8008654 <USBD_Get_USB_Status>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008420:	7bbb      	ldrb	r3, [r7, #14]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f7fb fc23 	bl	8003c94 <HAL_PCD_EP_Close>
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 f8fd 	bl	8008654 <USBD_Get_USB_Status>
 800845a:	4603      	mov	r3, r0
 800845c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800845e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7fb fcfb 	bl	8003e82 <HAL_PCD_EP_SetStall>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f8de 	bl	8008654 <USBD_Get_USB_Status>
 8008498:	4603      	mov	r3, r0
 800849a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849c:	7bbb      	ldrb	r3, [r7, #14]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084c0:	78fa      	ldrb	r2, [r7, #3]
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fb fd40 	bl	8003f4a <HAL_PCD_EP_ClrStall>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 f8bf 	bl	8008654 <USBD_Get_USB_Status>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084da:	7bbb      	ldrb	r3, [r7, #14]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da0b      	bge.n	8008518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	4613      	mov	r3, r2
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	333e      	adds	r3, #62	; 0x3e
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	e00b      	b.n	8008530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800851e:	68f9      	ldr	r1, [r7, #12]
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800852e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	4611      	mov	r1, r2
 800855a:	4618      	mov	r0, r3
 800855c:	f7fb fb0d 	bl	8003b7a <HAL_PCD_SetAddress>
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f874 	bl	8008654 <USBD_Get_USB_Status>
 800856c:	4603      	mov	r3, r0
 800856e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008570:	7bbb      	ldrb	r3, [r7, #14]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	460b      	mov	r3, r1
 8008588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008598:	7af9      	ldrb	r1, [r7, #11]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	f7fb fc26 	bl	8003dee <HAL_PCD_EP_Transmit>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f853 	bl	8008654 <USBD_Get_USB_Status>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	460b      	mov	r3, r1
 80085ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085da:	7af9      	ldrb	r1, [r7, #11]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	f7fb fba2 	bl	8003d28 <HAL_PCD_EP_Receive>
 80085e4:	4603      	mov	r3, r0
 80085e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 f832 	bl	8008654 <USBD_Get_USB_Status>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f7fb fbd2 	bl	8003dbe <HAL_PCD_EP_GetRxCount>
 800861a:	4603      	mov	r3, r0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800862c:	4b03      	ldr	r3, [pc, #12]	; (800863c <USBD_static_malloc+0x18>)
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	200005b8 	.word	0x200005b8

08008640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]

}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d817      	bhi.n	8008698 <USBD_Get_USB_Status+0x44>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBD_Get_USB_Status+0x1c>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	08008681 	.word	0x08008681
 8008674:	08008687 	.word	0x08008687
 8008678:	0800868d 	.word	0x0800868d
 800867c:	08008693 	.word	0x08008693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
    break;
 8008684:	e00b      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	73fb      	strb	r3, [r7, #15]
    break;
 800868a:	e008      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
    break;
 8008690:	e005      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008692:	2303      	movs	r3, #3
 8008694:	73fb      	strb	r3, [r7, #15]
    break;
 8008696:	e002      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	73fb      	strb	r3, [r7, #15]
    break;
 800869c:	bf00      	nop
  }
  return usb_status;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f000 f82e 	bl	8008720 <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	080096a8 	.word	0x080096a8
 80086e8:	080096a8 	.word	0x080096a8
 80086ec:	080096a8 	.word	0x080096a8
 80086f0:	080096ac 	.word	0x080096ac

080086f4 <memcpy>:
 80086f4:	440a      	add	r2, r1
 80086f6:	4291      	cmp	r1, r2
 80086f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80086fc:	d100      	bne.n	8008700 <memcpy+0xc>
 80086fe:	4770      	bx	lr
 8008700:	b510      	push	{r4, lr}
 8008702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870a:	4291      	cmp	r1, r2
 800870c:	d1f9      	bne.n	8008702 <memcpy+0xe>
 800870e:	bd10      	pop	{r4, pc}

08008710 <memset>:
 8008710:	4402      	add	r2, r0
 8008712:	4603      	mov	r3, r0
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <memset+0xa>
 8008718:	4770      	bx	lr
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <memset+0x4>

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
