
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af20  0800af20  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  0800af20  0800af20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af28  0800af28  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af28  0800af28  0001af28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800af30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020194  2**0
                  CONTENTS
 10 .bss          00002178  20000194  20000194  00020194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000230c  2000230c  00020194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .debug_info   000262a7  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004367  00000000  00000000  0004646b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0004a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  0004bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000061c4  00000000  00000000  0004d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df6a  00000000  00000000  0005368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d329d  00000000  00000000  000715f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144893  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006400  00000000  00000000  001448e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000194 	.word	0x20000194
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a098 	.word	0x0800a098

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000198 	.word	0x20000198
 80001c4:	0800a098 	.word	0x0800a098

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d8:	f000 b96e 	b.w	8000cb8 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468c      	mov	ip, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f040 8083 	bne.w	8000b0a <__udivmoddi4+0x116>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d947      	bls.n	8000a9a <__udivmoddi4+0xa6>
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	b142      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	f1c2 0020 	rsb	r0, r2, #32
 8000a14:	fa24 f000 	lsr.w	r0, r4, r0
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	4097      	lsls	r7, r2
 8000a1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbbc f6f8 	udiv	r6, ip, r8
 8000a2c:	fa1f fe87 	uxth.w	lr, r7
 8000a30:	fb08 c116 	mls	r1, r8, r6, ip
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f10e 	mul.w	r1, r6, lr
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a46:	f080 8119 	bcs.w	8000c7c <__udivmoddi4+0x288>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8116 	bls.w	8000c7c <__udivmoddi4+0x288>
 8000a50:	3e02      	subs	r6, #2
 8000a52:	443b      	add	r3, r7
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a72:	f080 8105 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	f240 8102 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	443c      	add	r4, r7
 8000a80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a84:	eba4 040e 	sub.w	r4, r4, lr
 8000a88:	2600      	movs	r6, #0
 8000a8a:	b11d      	cbz	r5, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c5 4300 	strd	r4, r3, [r5]
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	b902      	cbnz	r2, 8000a9e <__udivmoddi4+0xaa>
 8000a9c:	deff      	udf	#255	; 0xff
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d150      	bne.n	8000b48 <__udivmoddi4+0x154>
 8000aa6:	1bcb      	subs	r3, r1, r7
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	fa1f f887 	uxth.w	r8, r7
 8000ab0:	2601      	movs	r6, #1
 8000ab2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ab6:	0c21      	lsrs	r1, r4, #16
 8000ab8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000abc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000ac8:	1879      	adds	r1, r7, r1
 8000aca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0xe2>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	f200 80e9 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000ad6:	4684      	mov	ip, r0
 8000ad8:	1ac9      	subs	r1, r1, r3
 8000ada:	b2a3      	uxth	r3, r4
 8000adc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ae4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ae8:	fb08 f800 	mul.w	r8, r8, r0
 8000aec:	45a0      	cmp	r8, r4
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x10c>
 8000af0:	193c      	adds	r4, r7, r4
 8000af2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x10a>
 8000af8:	45a0      	cmp	r8, r4
 8000afa:	f200 80d9 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000afe:	4618      	mov	r0, r3
 8000b00:	eba4 0408 	sub.w	r4, r4, r8
 8000b04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b08:	e7bf      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d909      	bls.n	8000b22 <__udivmoddi4+0x12e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	f000 80b1 	beq.w	8000c76 <__udivmoddi4+0x282>
 8000b14:	2600      	movs	r6, #0
 8000b16:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	4631      	mov	r1, r6
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	fab3 f683 	clz	r6, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d14a      	bne.n	8000bc0 <__udivmoddi4+0x1cc>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0x140>
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	f200 80b8 	bhi.w	8000ca4 <__udivmoddi4+0x2b0>
 8000b34:	1a84      	subs	r4, r0, r2
 8000b36:	eb61 0103 	sbc.w	r1, r1, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d0a8      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000b42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b46:	e7a5      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000b48:	f1c2 0320 	rsb	r3, r2, #32
 8000b4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b50:	4097      	lsls	r7, r2
 8000b52:	fa01 f002 	lsl.w	r0, r1, r2
 8000b56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	4330      	orrs	r0, r6
 8000b5e:	0c03      	lsrs	r3, r0, #16
 8000b60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f108 	mul.w	r1, r6, r8
 8000b74:	4299      	cmp	r1, r3
 8000b76:	fa04 f402 	lsl.w	r4, r4, r2
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x19c>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b82:	f080 808d 	bcs.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 808a 	bls.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b281      	uxth	r1, r0
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba0:	fb00 f308 	mul.w	r3, r0, r8
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x1c4>
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bae:	d273      	bcs.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d971      	bls.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4439      	add	r1, r7
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bbe:	e778      	b.n	8000ab2 <__udivmoddi4+0xbe>
 8000bc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bcc:	431c      	orrs	r4, r3
 8000bce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bde:	431f      	orrs	r7, r3
 8000be0:	0c3b      	lsrs	r3, r7, #16
 8000be2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000be6:	fa1f f884 	uxth.w	r8, r4
 8000bea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bf2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bf6:	458a      	cmp	sl, r1
 8000bf8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x220>
 8000c02:	1861      	adds	r1, r4, r1
 8000c04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c08:	d248      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0a:	458a      	cmp	sl, r1
 8000c0c:	d946      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c12:	4421      	add	r1, r4
 8000c14:	eba1 010a 	sub.w	r1, r1, sl
 8000c18:	b2bf      	uxth	r7, r7
 8000c1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c26:	fb00 f808 	mul.w	r8, r0, r8
 8000c2a:	45b8      	cmp	r8, r7
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x24a>
 8000c2e:	19e7      	adds	r7, r4, r7
 8000c30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c34:	d22e      	bcs.n	8000c94 <__udivmoddi4+0x2a0>
 8000c36:	45b8      	cmp	r8, r7
 8000c38:	d92c      	bls.n	8000c94 <__udivmoddi4+0x2a0>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4427      	add	r7, r4
 8000c3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c42:	eba7 0708 	sub.w	r7, r7, r8
 8000c46:	fba0 8902 	umull	r8, r9, r0, r2
 8000c4a:	454f      	cmp	r7, r9
 8000c4c:	46c6      	mov	lr, r8
 8000c4e:	4649      	mov	r1, r9
 8000c50:	d31a      	bcc.n	8000c88 <__udivmoddi4+0x294>
 8000c52:	d017      	beq.n	8000c84 <__udivmoddi4+0x290>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x27a>
 8000c56:	ebb3 020e 	subs.w	r2, r3, lr
 8000c5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c62:	40f2      	lsrs	r2, r6
 8000c64:	ea4c 0202 	orr.w	r2, ip, r2
 8000c68:	40f7      	lsrs	r7, r6
 8000c6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e70b      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e9      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6fd      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c84:	4543      	cmp	r3, r8
 8000c86:	d2e5      	bcs.n	8000c54 <__udivmoddi4+0x260>
 8000c88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7df      	b.n	8000c54 <__udivmoddi4+0x260>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7d2      	b.n	8000c3e <__udivmoddi4+0x24a>
 8000c98:	4660      	mov	r0, ip
 8000c9a:	e78d      	b.n	8000bb8 <__udivmoddi4+0x1c4>
 8000c9c:	4681      	mov	r9, r0
 8000c9e:	e7b9      	b.n	8000c14 <__udivmoddi4+0x220>
 8000ca0:	4666      	mov	r6, ip
 8000ca2:	e775      	b.n	8000b90 <__udivmoddi4+0x19c>
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	e74a      	b.n	8000b3e <__udivmoddi4+0x14a>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	4439      	add	r1, r7
 8000cae:	e713      	b.n	8000ad8 <__udivmoddi4+0xe4>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	e724      	b.n	8000b00 <__udivmoddi4+0x10c>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
#if defined(MLX90614) || defined(MLX90632)
int8_t mlx90614_mode = 0;
int8_t tim_wait_segment = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a65      	ldr	r2, [pc, #404]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f040 80c3 	bne.w	8000e56 <HAL_TIM_PeriodElapsedCallback+0x19a>
	{
		// Check all time if button is pressed
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4864      	ldr	r0, [pc, #400]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000cd4:	f001 fdae 	bl	8002834 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d032      	beq.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			// Wait untill time ends
			if (tim_wait_segment == 100)
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ce4:	2b64      	cmp	r3, #100	; 0x64
 8000ce6:	d10f      	bne.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				// crutch
				if (mlx90614_mode)
 8000ce8:	4b60      	ldr	r3, [pc, #384]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000cea:	f993 3000 	ldrsb.w	r3, [r3]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x3e>
					mlx90614_mode = 0;
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e002      	b.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x44>
				else
					mlx90614_mode = 1;
 8000cfa:	4b5c      	ldr	r3, [pc, #368]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]

				tim_wait_segment = 0;
 8000d00:	4b59      	ldr	r3, [pc, #356]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e0a3      	b.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x194>
			}
			else
			{
				if (tim_wait_segment > 100)
 8000d08:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d0e:	2b64      	cmp	r3, #100	; 0x64
 8000d10:	dd0e      	ble.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000d12:	e002      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x5e>
							HAL_Delay(100);
 8000d14:	2064      	movs	r0, #100	; 0x64
 8000d16:	f001 fa29 	bl	800216c <HAL_Delay>
						while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4851      	ldr	r0, [pc, #324]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000d1e:	f001 fd89 	bl	8002834 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f5      	bne.n	8000d14 <HAL_TIM_PeriodElapsedCallback+0x58>
						tim_wait_segment = 0;
 8000d28:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e08f      	b.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x194>
					}
				else
				tim_wait_segment++;
 8000d30:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d32:	f993 3000 	ldrsb.w	r3, [r3]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	b25a      	sxtb	r2, r3
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e085      	b.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x194>
			}
		}
		else
		{
			if (tim_wait_segment > 4)
 8000d44:	4b48      	ldr	r3, [pc, #288]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d46:	f993 3000 	ldrsb.w	r3, [r3]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	dd7d      	ble.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
#				ifdef SSD1306_DISPLAY
				float_temp_to_char_temp(float_temp_1, char_temp_1);
 8000d4e:	4b48      	ldr	r3, [pc, #288]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fba4 	bl	80004a0 <__aeabi_f2d>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4845      	ldr	r0, [pc, #276]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d5e:	ec43 2b10 	vmov	d0, r2, r3
 8000d62:	f000 f899 	bl	8000e98 <float_temp_to_char_temp>
				float_temp_to_char_temp(float_temp_2, char_temp_2);
 8000d66:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb98 	bl	80004a0 <__aeabi_f2d>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4841      	ldr	r0, [pc, #260]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d76:	ec43 2b10 	vmov	d0, r2, r3
 8000d7a:	f000 f88d 	bl	8000e98 <float_temp_to_char_temp>

				SSD1306_GotoXY(0, 0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 fe4b 	bl	8001a1c <SSD1306_GotoXY>
				SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	493d      	ldr	r1, [pc, #244]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d8a:	483a      	ldr	r0, [pc, #232]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d8c:	f000 fedc 	bl	8001b48 <SSD1306_Puts>

				SSD1306_GotoXY(70, 0);
 8000d90:	2100      	movs	r1, #0
 8000d92:	2046      	movs	r0, #70	; 0x46
 8000d94:	f000 fe42 	bl	8001a1c <SSD1306_GotoXY>
				SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4939      	ldr	r1, [pc, #228]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d9c:	4837      	ldr	r0, [pc, #220]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d9e:	f000 fed3 	bl	8001b48 <SSD1306_Puts>
#	 		    endif

#			    ifdef USB_SEND
				HAL_UART_Transmit_IT(&huart2, cap_mess_1, strlen(cap_mess_1));
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000da4:	681c      	ldr	r4, [r3, #0]
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa0c 	bl	80001c8 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4621      	mov	r1, r4
 8000db8:	4833      	ldr	r0, [pc, #204]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000dba:	f004 fd9a 	bl	80058f2 <HAL_UART_Transmit_IT>
//				HAL_UART_Transmit_IT(&huart2, hello, strlen(hello));

				CDC_Transmit_FS(cap_mess_1, strlen(cap_mess_1));
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000dc0:	681c      	ldr	r4, [r3, #0]
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff f9fe 	bl	80001c8 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f008 fcca 	bl	800976c <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t*)char_temp_1, strlen((uint8_t*)char_temp_1));
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000dda:	f7ff f9f5 	bl	80001c8 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000de6:	f008 fcc1 	bl	800976c <CDC_Transmit_FS>
				CDC_Transmit_FS(end, strlen(end));
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000dec:	681c      	ldr	r4, [r3, #0]
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9e8 	bl	80001c8 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f008 fcb4 	bl	800976c <CDC_Transmit_FS>

				CDC_Transmit_FS(cap_mess_2, strlen(cap_mess_2));
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000e06:	681c      	ldr	r4, [r3, #0]
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9db 	bl	80001c8 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f008 fca7 	bl	800976c <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t*)char_temp_2, strlen((uint8_t*)char_temp_2));
 8000e1e:	4817      	ldr	r0, [pc, #92]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e20:	f7ff f9d2 	bl	80001c8 <strlen>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4814      	ldr	r0, [pc, #80]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e2c:	f008 fc9e 	bl	800976c <CDC_Transmit_FS>
				CDC_Transmit_FS(end, strlen(end));
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000e32:	681c      	ldr	r4, [r3, #0]
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f9c5 	bl	80001c8 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	4620      	mov	r0, r4
 8000e46:	f008 fc91 	bl	800976c <CDC_Transmit_FS>
#  		   		endif
			}

			tim_wait_segment = 0;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_IRQHandler(&htim1);
 8000e50:	4810      	ldr	r0, [pc, #64]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000e52:	f004 f93f 	bl	80050d4 <HAL_TIM_IRQHandler>
	}
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	200001b9 	.word	0x200001b9
 8000e6c:	200001b8 	.word	0x200001b8
 8000e70:	200001b0 	.word	0x200001b0
 8000e74:	20000934 	.word	0x20000934
 8000e78:	200001b4 	.word	0x200001b4
 8000e7c:	20000a28 	.word	0x20000a28
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	20000000 	.word	0x20000000
 8000e88:	2000098c 	.word	0x2000098c
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000004 	.word	0x20000004
 8000e94:	2000093c 	.word	0x2000093c

08000e98 <float_temp_to_char_temp>:

void float_temp_to_char_temp(double digit, char* arr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ea2:	6078      	str	r0, [r7, #4]
    int l_digit = digit * 100.0;
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <float_temp_to_char_temp+0x110>)
 8000eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eae:	f7ff fb4f 	bl	8000550 <__aeabi_dmul>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fd5b 	bl	8000974 <__aeabi_d2iz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	617b      	str	r3, [r7, #20]
    arr[7] = '\0';
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    arr[6] = '\0';
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3306      	adds	r3, #6
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    arr[5] = '\0';
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
    arr[4] = l_digit % 10 + '0';
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000ede:	fb83 1302 	smull	r1, r3, r3, r2
 8000ee2:	1099      	asrs	r1, r3, #2
 8000ee4:	17d3      	asrs	r3, r2, #31
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	460b      	mov	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	1ad1      	subs	r1, r2, r3
 8000ef2:	b2ca      	uxtb	r2, r1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	3230      	adds	r2, #48	; 0x30
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f02:	fb82 1203 	smull	r1, r2, r2, r3
 8000f06:	1092      	asrs	r2, r2, #2
 8000f08:	17db      	asrs	r3, r3, #31
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    arr[3] = l_digit % 10 + '0';
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f12:	fb83 1302 	smull	r1, r3, r3, r2
 8000f16:	1099      	asrs	r1, r3, #2
 8000f18:	17d3      	asrs	r3, r2, #31
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1ad1      	subs	r1, r2, r3
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3303      	adds	r3, #3
 8000f2c:	3230      	adds	r2, #48	; 0x30
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1092      	asrs	r2, r2, #2
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    arr[2] = ',';
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3302      	adds	r3, #2
 8000f46:	222c      	movs	r2, #44	; 0x2c
 8000f48:	701a      	strb	r2, [r3, #0]
    arr[1] = l_digit % 10 + '0';
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f52:	1099      	asrs	r1, r3, #2
 8000f54:	17d3      	asrs	r3, r2, #31
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	1ad1      	subs	r1, r2, r3
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	3230      	adds	r2, #48	; 0x30
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f72:	fb82 1203 	smull	r1, r2, r2, r3
 8000f76:	1092      	asrs	r2, r2, #2
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    arr[0] = l_digit % 10 + '0';
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f82:	fb83 1302 	smull	r1, r3, r3, r2
 8000f86:	1099      	asrs	r1, r3, #2
 8000f88:	17d3      	asrs	r3, r2, #31
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1ad1      	subs	r1, r2, r3
 8000f96:	b2cb      	uxtb	r3, r1
 8000f98:	3330      	adds	r3, #48	; 0x30
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40590000 	.word	0x40590000
 8000fac:	66666667 	.word	0x66666667

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b095      	sub	sp, #84	; 0x54
 8000fb4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f001 f867 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f85d 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbe:	f000 f9cd 	bl	800135c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fc2:	f000 f8c5 	bl	8001150 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fc6:	f000 f8f1 	bl	80011ac <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000fca:	f008 fafb 	bl	80095c4 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000fce:	f000 f91b 	bl	8001208 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000fd2:	f000 f947 	bl	8001264 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 f997 	bl	8001308 <MX_USART2_UART_Init>
     * Temp sensor 1 - I2C1, temp sensor 2 - I2C2, Display - I2C3
     */

  // Initialize Display
#ifdef SSD1306_DISPLAY
    if (SSD1306_Init(hi2c3) != 1)
 8000fda:	4c1f      	ldr	r4, [pc, #124]	; (8001058 <main+0xa8>)
 8000fdc:	4668      	mov	r0, sp
 8000fde:	f104 0310 	add.w	r3, r4, #16
 8000fe2:	2244      	movs	r2, #68	; 0x44
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f009 f841 	bl	800a06c <memcpy>
 8000fea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fee:	f000 fa37 	bl	8001460 <SSD1306_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d00d      	beq.n	8001014 <main+0x64>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <main+0xac>)
 8000ffe:	f001 fc4a 	bl	8002896 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001006:	f001 f8b1 	bl	800216c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <main+0xac>)
 8001010:	f001 fc41 	bl	8002896 <HAL_GPIO_TogglePin>
    }

    SSD1306_GotoXY (0,0);
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fd00 	bl	8001a1c <SSD1306_GotoXY>
    SSD1306_Puts ("initialize", &Font_11x18, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	4910      	ldr	r1, [pc, #64]	; (8001060 <main+0xb0>)
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <main+0xb4>)
 8001022:	f000 fd91 	bl	8001b48 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001026:	f000 fc31 	bl	800188c <SSD1306_UpdateScreen>
#elif defined(MLX90632_DEBUG_MODE)
    mlx90632_start_debugging(mlx_addr_1, hi2c1);
#endif


    HAL_TIM_Base_Start_IT(&htim1);
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <main+0xb8>)
 800102c:	f003 ffe2 	bl	8004ff4 <HAL_TIM_Base_Start_IT>

    char* hello = "Hello world!\n\0";
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <main+0xbc>)
 8001032:	607b      	str	r3, [r7, #4]

    // main cycle
    while(1)
    {
//    	HAL_UART_Transmit(&huart2, hello, strlen(hello), 100);
    	HAL_UART_Transmit_IT(&huart2, cap_mess_1, strlen(cap_mess_1));
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <main+0xc0>)
 8001036:	681c      	ldr	r4, [r3, #0]
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <main+0xc0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8c3 	bl	80001c8 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29b      	uxth	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	4621      	mov	r1, r4
 800104a:	480a      	ldr	r0, [pc, #40]	; (8001074 <main+0xc4>)
 800104c:	f004 fc51 	bl	80058f2 <HAL_UART_Transmit_IT>
    	HAL_Delay(100);
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	f001 f88b 	bl	800216c <HAL_Delay>
    	HAL_UART_Transmit_IT(&huart2, cap_mess_1, strlen(cap_mess_1));
 8001056:	e7ed      	b.n	8001034 <main+0x84>
 8001058:	200007e4 	.word	0x200007e4
 800105c:	40020c00 	.word	0x40020c00
 8001060:	2000000c 	.word	0x2000000c
 8001064:	0800a14c 	.word	0x0800a14c
 8001068:	2000093c 	.word	0x2000093c
 800106c:	0800a158 	.word	0x0800a158
 8001070:	20000000 	.word	0x20000000
 8001074:	2000098c 	.word	0x2000098c

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f008 fffe 	bl	800a088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a28      	ldr	r2, [pc, #160]	; (8001148 <SystemClock_Config+0xd0>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <SystemClock_Config+0xd0>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <SystemClock_Config+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a22      	ldr	r2, [pc, #136]	; (800114c <SystemClock_Config+0xd4>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <SystemClock_Config+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010de:	2301      	movs	r3, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e2:	2310      	movs	r3, #16
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010f0:	230f      	movs	r3, #15
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010f4:	2390      	movs	r3, #144	; 0x90
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010fc:	2305      	movs	r3, #5
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fadd 	bl	80046c4 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001110:	f000 f9a0 	bl	8001454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fd40 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800113a:	f000 f98b 	bl	8001454 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f001 fb9d 	bl	80028cc <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f95c 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000083c 	.word	0x2000083c
 80011a4:	40005400 	.word	0x40005400
 80011a8:	000186a0 	.word	0x000186a0

080011ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C2_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_I2C2_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C2_Init+0x50>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_I2C2_Init+0x58>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C2_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_I2C2_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_I2C2_Init+0x50>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_I2C2_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_I2C2_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_I2C2_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_I2C2_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_I2C2_Init+0x50>)
 80011ea:	f001 fb6f 	bl	80028cc <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f000 f92e 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000894 	.word	0x20000894
 8001200:	40005800 	.word	0x40005800
 8001204:	000186a0 	.word	0x000186a0

08001208 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C3_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C3_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C3_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C3_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C3_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C3_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C3_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C3_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C3_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C3_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C3_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C3_Init+0x50>)
 8001246:	f001 fb41 	bl	80028cc <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 f900 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200007e4 	.word	0x200007e4
 800125c:	40005c00 	.word	0x40005c00
 8001260:	00061a80 	.word	0x00061a80

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_TIM1_Init+0x9c>)
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001284:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM1_Init+0x9c>)
 8001288:	f242 720f 	movw	r2, #9999	; 0x270f
 800128c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM1_Init+0x9c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM1_Init+0x9c>)
 8001296:	2227      	movs	r2, #39	; 0x27
 8001298:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM1_Init+0x9c>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_TIM1_Init+0x9c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM1_Init+0x9c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_TIM1_Init+0x9c>)
 80012b0:	f003 fe50 	bl	8004f54 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012ba:	f000 f8cb 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM1_Init+0x9c>)
 80012cc:	f004 f80a 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012d6:	f000 f8bd 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM1_Init+0x9c>)
 80012e8:	f004 fa26 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012f2:	f000 f8af 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000093c 	.word	0x2000093c
 8001304:	40010000 	.word	0x40010000

08001308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART2_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART2_UART_Init+0x4c>)
 8001340:	f004 fa8a 	bl	8005858 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 f883 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000098c 	.word	0x2000098c
 8001358:	40004400 	.word	0x40004400

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <MX_GPIO_Init+0xec>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a33      	ldr	r2, [pc, #204]	; (8001448 <MX_GPIO_Init+0xec>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <MX_GPIO_Init+0xec>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <MX_GPIO_Init+0xec>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a2c      	ldr	r2, [pc, #176]	; (8001448 <MX_GPIO_Init+0xec>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_GPIO_Init+0xec>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <MX_GPIO_Init+0xec>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <MX_GPIO_Init+0xec>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <MX_GPIO_Init+0xec>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_GPIO_Init+0xec>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <MX_GPIO_Init+0xec>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_GPIO_Init+0xec>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_GPIO_Init+0xec>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_GPIO_Init+0xec>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_GPIO_Init+0xec>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <MX_GPIO_Init+0xf0>)
 8001406:	f001 fa2d 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800140a:	2301      	movs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_GPIO_Init+0xf4>)
 800141e:	f001 f86d 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001422:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_GPIO_Init+0xf0>)
 800143c:	f001 f85e 	bl	80024fc <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020000 	.word	0x40020000

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8001460:	b084      	sub	sp, #16
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b097      	sub	sp, #92	; 0x5c
 8001466:	af14      	add	r7, sp, #80	; 0x50
 8001468:	f107 0418 	add.w	r4, r7, #24
 800146c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8001470:	f000 fb90 	bl	8001b94 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <SSD1306_Init+0x44>)
 8001476:	4618      	mov	r0, r3
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	2254      	movs	r2, #84	; 0x54
 800147e:	4619      	mov	r1, r3
 8001480:	f008 fdf4 	bl	800a06c <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001484:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001488:	2201      	movs	r2, #1
 800148a:	2178      	movs	r1, #120	; 0x78
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <SSD1306_Init+0x44>)
 800148e:	f001 fc5f 	bl	8002d50 <HAL_I2C_IsDeviceReady>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8001498:	2300      	movs	r3, #0
 800149a:	e1ee      	b.n	800187a <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 800149c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014a2:	e004      	b.n	80014ae <SSD1306_Init+0x4e>
 80014a4:	200009d0 	.word	0x200009d0
		p--;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f9      	bne.n	80014a8 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014b4:	4ce1      	ldr	r4, [pc, #900]	; (800183c <SSD1306_Init+0x3dc>)
 80014b6:	23ae      	movs	r3, #174	; 0xae
 80014b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80014ba:	4668      	mov	r0, sp
 80014bc:	f104 0308 	add.w	r3, r4, #8
 80014c0:	224c      	movs	r2, #76	; 0x4c
 80014c2:	4619      	mov	r1, r3
 80014c4:	f008 fdd2 	bl	800a06c <memcpy>
 80014c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fbbe 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80014d4:	4cd9      	ldr	r4, [pc, #868]	; (800183c <SSD1306_Init+0x3dc>)
 80014d6:	2320      	movs	r3, #32
 80014d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80014da:	4668      	mov	r0, sp
 80014dc:	f104 0308 	add.w	r3, r4, #8
 80014e0:	224c      	movs	r2, #76	; 0x4c
 80014e2:	4619      	mov	r1, r3
 80014e4:	f008 fdc2 	bl	800a06c <memcpy>
 80014e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014ec:	2100      	movs	r1, #0
 80014ee:	2078      	movs	r0, #120	; 0x78
 80014f0:	f000 fbae 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014f4:	4cd1      	ldr	r4, [pc, #836]	; (800183c <SSD1306_Init+0x3dc>)
 80014f6:	2310      	movs	r3, #16
 80014f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80014fa:	4668      	mov	r0, sp
 80014fc:	f104 0308 	add.w	r3, r4, #8
 8001500:	224c      	movs	r2, #76	; 0x4c
 8001502:	4619      	mov	r1, r3
 8001504:	f008 fdb2 	bl	800a06c <memcpy>
 8001508:	e894 000c 	ldmia.w	r4, {r2, r3}
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fb9e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001514:	4cc9      	ldr	r4, [pc, #804]	; (800183c <SSD1306_Init+0x3dc>)
 8001516:	23b0      	movs	r3, #176	; 0xb0
 8001518:	9313      	str	r3, [sp, #76]	; 0x4c
 800151a:	4668      	mov	r0, sp
 800151c:	f104 0308 	add.w	r3, r4, #8
 8001520:	224c      	movs	r2, #76	; 0x4c
 8001522:	4619      	mov	r1, r3
 8001524:	f008 fda2 	bl	800a06c <memcpy>
 8001528:	e894 000c 	ldmia.w	r4, {r2, r3}
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 fb8e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001534:	4cc1      	ldr	r4, [pc, #772]	; (800183c <SSD1306_Init+0x3dc>)
 8001536:	23c8      	movs	r3, #200	; 0xc8
 8001538:	9313      	str	r3, [sp, #76]	; 0x4c
 800153a:	4668      	mov	r0, sp
 800153c:	f104 0308 	add.w	r3, r4, #8
 8001540:	224c      	movs	r2, #76	; 0x4c
 8001542:	4619      	mov	r1, r3
 8001544:	f008 fd92 	bl	800a06c <memcpy>
 8001548:	e894 000c 	ldmia.w	r4, {r2, r3}
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fb7e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001554:	4cb9      	ldr	r4, [pc, #740]	; (800183c <SSD1306_Init+0x3dc>)
 8001556:	2300      	movs	r3, #0
 8001558:	9313      	str	r3, [sp, #76]	; 0x4c
 800155a:	4668      	mov	r0, sp
 800155c:	f104 0308 	add.w	r3, r4, #8
 8001560:	224c      	movs	r2, #76	; 0x4c
 8001562:	4619      	mov	r1, r3
 8001564:	f008 fd82 	bl	800a06c <memcpy>
 8001568:	e894 000c 	ldmia.w	r4, {r2, r3}
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	; 0x78
 8001570:	f000 fb6e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001574:	4cb1      	ldr	r4, [pc, #708]	; (800183c <SSD1306_Init+0x3dc>)
 8001576:	2310      	movs	r3, #16
 8001578:	9313      	str	r3, [sp, #76]	; 0x4c
 800157a:	4668      	mov	r0, sp
 800157c:	f104 0308 	add.w	r3, r4, #8
 8001580:	224c      	movs	r2, #76	; 0x4c
 8001582:	4619      	mov	r1, r3
 8001584:	f008 fd72 	bl	800a06c <memcpy>
 8001588:	e894 000c 	ldmia.w	r4, {r2, r3}
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 fb5e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001594:	4ca9      	ldr	r4, [pc, #676]	; (800183c <SSD1306_Init+0x3dc>)
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	9313      	str	r3, [sp, #76]	; 0x4c
 800159a:	4668      	mov	r0, sp
 800159c:	f104 0308 	add.w	r3, r4, #8
 80015a0:	224c      	movs	r2, #76	; 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	f008 fd62 	bl	800a06c <memcpy>
 80015a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 fb4e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015b4:	4ca1      	ldr	r4, [pc, #644]	; (800183c <SSD1306_Init+0x3dc>)
 80015b6:	2381      	movs	r3, #129	; 0x81
 80015b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80015ba:	4668      	mov	r0, sp
 80015bc:	f104 0308 	add.w	r3, r4, #8
 80015c0:	224c      	movs	r2, #76	; 0x4c
 80015c2:	4619      	mov	r1, r3
 80015c4:	f008 fd52 	bl	800a06c <memcpy>
 80015c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015cc:	2100      	movs	r1, #0
 80015ce:	2078      	movs	r0, #120	; 0x78
 80015d0:	f000 fb3e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015d4:	4c99      	ldr	r4, [pc, #612]	; (800183c <SSD1306_Init+0x3dc>)
 80015d6:	23ff      	movs	r3, #255	; 0xff
 80015d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80015da:	4668      	mov	r0, sp
 80015dc:	f104 0308 	add.w	r3, r4, #8
 80015e0:	224c      	movs	r2, #76	; 0x4c
 80015e2:	4619      	mov	r1, r3
 80015e4:	f008 fd42 	bl	800a06c <memcpy>
 80015e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 fb2e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015f4:	4c91      	ldr	r4, [pc, #580]	; (800183c <SSD1306_Init+0x3dc>)
 80015f6:	23a1      	movs	r3, #161	; 0xa1
 80015f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80015fa:	4668      	mov	r0, sp
 80015fc:	f104 0308 	add.w	r3, r4, #8
 8001600:	224c      	movs	r2, #76	; 0x4c
 8001602:	4619      	mov	r1, r3
 8001604:	f008 fd32 	bl	800a06c <memcpy>
 8001608:	e894 000c 	ldmia.w	r4, {r2, r3}
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f000 fb1e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001614:	4c89      	ldr	r4, [pc, #548]	; (800183c <SSD1306_Init+0x3dc>)
 8001616:	23a6      	movs	r3, #166	; 0xa6
 8001618:	9313      	str	r3, [sp, #76]	; 0x4c
 800161a:	4668      	mov	r0, sp
 800161c:	f104 0308 	add.w	r3, r4, #8
 8001620:	224c      	movs	r2, #76	; 0x4c
 8001622:	4619      	mov	r1, r3
 8001624:	f008 fd22 	bl	800a06c <memcpy>
 8001628:	e894 000c 	ldmia.w	r4, {r2, r3}
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	; 0x78
 8001630:	f000 fb0e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001634:	4c81      	ldr	r4, [pc, #516]	; (800183c <SSD1306_Init+0x3dc>)
 8001636:	23a8      	movs	r3, #168	; 0xa8
 8001638:	9313      	str	r3, [sp, #76]	; 0x4c
 800163a:	4668      	mov	r0, sp
 800163c:	f104 0308 	add.w	r3, r4, #8
 8001640:	224c      	movs	r2, #76	; 0x4c
 8001642:	4619      	mov	r1, r3
 8001644:	f008 fd12 	bl	800a06c <memcpy>
 8001648:	e894 000c 	ldmia.w	r4, {r2, r3}
 800164c:	2100      	movs	r1, #0
 800164e:	2078      	movs	r0, #120	; 0x78
 8001650:	f000 fafe 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001654:	4c79      	ldr	r4, [pc, #484]	; (800183c <SSD1306_Init+0x3dc>)
 8001656:	233f      	movs	r3, #63	; 0x3f
 8001658:	9313      	str	r3, [sp, #76]	; 0x4c
 800165a:	4668      	mov	r0, sp
 800165c:	f104 0308 	add.w	r3, r4, #8
 8001660:	224c      	movs	r2, #76	; 0x4c
 8001662:	4619      	mov	r1, r3
 8001664:	f008 fd02 	bl	800a06c <memcpy>
 8001668:	e894 000c 	ldmia.w	r4, {r2, r3}
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	; 0x78
 8001670:	f000 faee 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001674:	4c71      	ldr	r4, [pc, #452]	; (800183c <SSD1306_Init+0x3dc>)
 8001676:	23a4      	movs	r3, #164	; 0xa4
 8001678:	9313      	str	r3, [sp, #76]	; 0x4c
 800167a:	4668      	mov	r0, sp
 800167c:	f104 0308 	add.w	r3, r4, #8
 8001680:	224c      	movs	r2, #76	; 0x4c
 8001682:	4619      	mov	r1, r3
 8001684:	f008 fcf2 	bl	800a06c <memcpy>
 8001688:	e894 000c 	ldmia.w	r4, {r2, r3}
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f000 fade 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001694:	4c69      	ldr	r4, [pc, #420]	; (800183c <SSD1306_Init+0x3dc>)
 8001696:	23d3      	movs	r3, #211	; 0xd3
 8001698:	9313      	str	r3, [sp, #76]	; 0x4c
 800169a:	4668      	mov	r0, sp
 800169c:	f104 0308 	add.w	r3, r4, #8
 80016a0:	224c      	movs	r2, #76	; 0x4c
 80016a2:	4619      	mov	r1, r3
 80016a4:	f008 fce2 	bl	800a06c <memcpy>
 80016a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	; 0x78
 80016b0:	f000 face 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016b4:	4c61      	ldr	r4, [pc, #388]	; (800183c <SSD1306_Init+0x3dc>)
 80016b6:	2300      	movs	r3, #0
 80016b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80016ba:	4668      	mov	r0, sp
 80016bc:	f104 0308 	add.w	r3, r4, #8
 80016c0:	224c      	movs	r2, #76	; 0x4c
 80016c2:	4619      	mov	r1, r3
 80016c4:	f008 fcd2 	bl	800a06c <memcpy>
 80016c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f000 fabe 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016d4:	4c59      	ldr	r4, [pc, #356]	; (800183c <SSD1306_Init+0x3dc>)
 80016d6:	23d5      	movs	r3, #213	; 0xd5
 80016d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80016da:	4668      	mov	r0, sp
 80016dc:	f104 0308 	add.w	r3, r4, #8
 80016e0:	224c      	movs	r2, #76	; 0x4c
 80016e2:	4619      	mov	r1, r3
 80016e4:	f008 fcc2 	bl	800a06c <memcpy>
 80016e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016ec:	2100      	movs	r1, #0
 80016ee:	2078      	movs	r0, #120	; 0x78
 80016f0:	f000 faae 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016f4:	4c51      	ldr	r4, [pc, #324]	; (800183c <SSD1306_Init+0x3dc>)
 80016f6:	23f0      	movs	r3, #240	; 0xf0
 80016f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80016fa:	4668      	mov	r0, sp
 80016fc:	f104 0308 	add.w	r3, r4, #8
 8001700:	224c      	movs	r2, #76	; 0x4c
 8001702:	4619      	mov	r1, r3
 8001704:	f008 fcb2 	bl	800a06c <memcpy>
 8001708:	e894 000c 	ldmia.w	r4, {r2, r3}
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 fa9e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001714:	4c49      	ldr	r4, [pc, #292]	; (800183c <SSD1306_Init+0x3dc>)
 8001716:	23d9      	movs	r3, #217	; 0xd9
 8001718:	9313      	str	r3, [sp, #76]	; 0x4c
 800171a:	4668      	mov	r0, sp
 800171c:	f104 0308 	add.w	r3, r4, #8
 8001720:	224c      	movs	r2, #76	; 0x4c
 8001722:	4619      	mov	r1, r3
 8001724:	f008 fca2 	bl	800a06c <memcpy>
 8001728:	e894 000c 	ldmia.w	r4, {r2, r3}
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 fa8e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001734:	4c41      	ldr	r4, [pc, #260]	; (800183c <SSD1306_Init+0x3dc>)
 8001736:	2322      	movs	r3, #34	; 0x22
 8001738:	9313      	str	r3, [sp, #76]	; 0x4c
 800173a:	4668      	mov	r0, sp
 800173c:	f104 0308 	add.w	r3, r4, #8
 8001740:	224c      	movs	r2, #76	; 0x4c
 8001742:	4619      	mov	r1, r3
 8001744:	f008 fc92 	bl	800a06c <memcpy>
 8001748:	e894 000c 	ldmia.w	r4, {r2, r3}
 800174c:	2100      	movs	r1, #0
 800174e:	2078      	movs	r0, #120	; 0x78
 8001750:	f000 fa7e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001754:	4c39      	ldr	r4, [pc, #228]	; (800183c <SSD1306_Init+0x3dc>)
 8001756:	23da      	movs	r3, #218	; 0xda
 8001758:	9313      	str	r3, [sp, #76]	; 0x4c
 800175a:	4668      	mov	r0, sp
 800175c:	f104 0308 	add.w	r3, r4, #8
 8001760:	224c      	movs	r2, #76	; 0x4c
 8001762:	4619      	mov	r1, r3
 8001764:	f008 fc82 	bl	800a06c <memcpy>
 8001768:	e894 000c 	ldmia.w	r4, {r2, r3}
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	; 0x78
 8001770:	f000 fa6e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001774:	4c31      	ldr	r4, [pc, #196]	; (800183c <SSD1306_Init+0x3dc>)
 8001776:	2312      	movs	r3, #18
 8001778:	9313      	str	r3, [sp, #76]	; 0x4c
 800177a:	4668      	mov	r0, sp
 800177c:	f104 0308 	add.w	r3, r4, #8
 8001780:	224c      	movs	r2, #76	; 0x4c
 8001782:	4619      	mov	r1, r3
 8001784:	f008 fc72 	bl	800a06c <memcpy>
 8001788:	e894 000c 	ldmia.w	r4, {r2, r3}
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fa5e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001794:	4c29      	ldr	r4, [pc, #164]	; (800183c <SSD1306_Init+0x3dc>)
 8001796:	23db      	movs	r3, #219	; 0xdb
 8001798:	9313      	str	r3, [sp, #76]	; 0x4c
 800179a:	4668      	mov	r0, sp
 800179c:	f104 0308 	add.w	r3, r4, #8
 80017a0:	224c      	movs	r2, #76	; 0x4c
 80017a2:	4619      	mov	r1, r3
 80017a4:	f008 fc62 	bl	800a06c <memcpy>
 80017a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fa4e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017b4:	4c21      	ldr	r4, [pc, #132]	; (800183c <SSD1306_Init+0x3dc>)
 80017b6:	2320      	movs	r3, #32
 80017b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80017ba:	4668      	mov	r0, sp
 80017bc:	f104 0308 	add.w	r3, r4, #8
 80017c0:	224c      	movs	r2, #76	; 0x4c
 80017c2:	4619      	mov	r1, r3
 80017c4:	f008 fc52 	bl	800a06c <memcpy>
 80017c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	; 0x78
 80017d0:	f000 fa3e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017d4:	4c19      	ldr	r4, [pc, #100]	; (800183c <SSD1306_Init+0x3dc>)
 80017d6:	238d      	movs	r3, #141	; 0x8d
 80017d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80017da:	4668      	mov	r0, sp
 80017dc:	f104 0308 	add.w	r3, r4, #8
 80017e0:	224c      	movs	r2, #76	; 0x4c
 80017e2:	4619      	mov	r1, r3
 80017e4:	f008 fc42 	bl	800a06c <memcpy>
 80017e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017ec:	2100      	movs	r1, #0
 80017ee:	2078      	movs	r0, #120	; 0x78
 80017f0:	f000 fa2e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017f4:	4c11      	ldr	r4, [pc, #68]	; (800183c <SSD1306_Init+0x3dc>)
 80017f6:	2314      	movs	r3, #20
 80017f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80017fa:	4668      	mov	r0, sp
 80017fc:	f104 0308 	add.w	r3, r4, #8
 8001800:	224c      	movs	r2, #76	; 0x4c
 8001802:	4619      	mov	r1, r3
 8001804:	f008 fc32 	bl	800a06c <memcpy>
 8001808:	e894 000c 	ldmia.w	r4, {r2, r3}
 800180c:	2100      	movs	r1, #0
 800180e:	2078      	movs	r0, #120	; 0x78
 8001810:	f000 fa1e 	bl	8001c50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001814:	4c09      	ldr	r4, [pc, #36]	; (800183c <SSD1306_Init+0x3dc>)
 8001816:	23af      	movs	r3, #175	; 0xaf
 8001818:	9313      	str	r3, [sp, #76]	; 0x4c
 800181a:	4668      	mov	r0, sp
 800181c:	f104 0308 	add.w	r3, r4, #8
 8001820:	224c      	movs	r2, #76	; 0x4c
 8001822:	4619      	mov	r1, r3
 8001824:	f008 fc22 	bl	800a06c <memcpy>
 8001828:	e894 000c 	ldmia.w	r4, {r2, r3}
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 fa0e 	bl	8001c50 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001834:	4c01      	ldr	r4, [pc, #4]	; (800183c <SSD1306_Init+0x3dc>)
 8001836:	232e      	movs	r3, #46	; 0x2e
 8001838:	e002      	b.n	8001840 <SSD1306_Init+0x3e0>
 800183a:	bf00      	nop
 800183c:	200009d0 	.word	0x200009d0
 8001840:	9313      	str	r3, [sp, #76]	; 0x4c
 8001842:	4668      	mov	r0, sp
 8001844:	f104 0308 	add.w	r3, r4, #8
 8001848:	224c      	movs	r2, #76	; 0x4c
 800184a:	4619      	mov	r1, r3
 800184c:	f008 fc0e 	bl	800a06c <memcpy>
 8001850:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	; 0x78
 8001858:	f000 f9fa 	bl	8001c50 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800185c:	2000      	movs	r0, #0
 800185e:	f000 f865 	bl	800192c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001862:	f000 f813 	bl	800188c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <SSD1306_Init+0x428>)
 8001868:	2200      	movs	r2, #0
 800186a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SSD1306_Init+0x428>)
 800186e:	2200      	movs	r2, #0
 8001870:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SSD1306_Init+0x428>)
 8001874:	2201      	movs	r2, #1
 8001876:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001884:	b004      	add	sp, #16
 8001886:	4770      	bx	lr
 8001888:	200005bc 	.word	0x200005bc

0800188c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b097      	sub	sp, #92	; 0x5c
 8001890:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001892:	2300      	movs	r3, #0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e03d      	b.n	8001914 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	3b50      	subs	r3, #80	; 0x50
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4c21      	ldr	r4, [pc, #132]	; (8001924 <SSD1306_UpdateScreen+0x98>)
 80018a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80018a2:	4668      	mov	r0, sp
 80018a4:	f104 0308 	add.w	r3, r4, #8
 80018a8:	224c      	movs	r2, #76	; 0x4c
 80018aa:	4619      	mov	r1, r3
 80018ac:	f008 fbde 	bl	800a06c <memcpy>
 80018b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	; 0x78
 80018b8:	f000 f9ca 	bl	8001c50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018bc:	4c19      	ldr	r4, [pc, #100]	; (8001924 <SSD1306_UpdateScreen+0x98>)
 80018be:	2300      	movs	r3, #0
 80018c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80018c2:	4668      	mov	r0, sp
 80018c4:	f104 0308 	add.w	r3, r4, #8
 80018c8:	224c      	movs	r2, #76	; 0x4c
 80018ca:	4619      	mov	r1, r3
 80018cc:	f008 fbce 	bl	800a06c <memcpy>
 80018d0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018d4:	2100      	movs	r1, #0
 80018d6:	2078      	movs	r0, #120	; 0x78
 80018d8:	f000 f9ba 	bl	8001c50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018dc:	4c11      	ldr	r4, [pc, #68]	; (8001924 <SSD1306_UpdateScreen+0x98>)
 80018de:	2310      	movs	r3, #16
 80018e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80018e2:	4668      	mov	r0, sp
 80018e4:	f104 0308 	add.w	r3, r4, #8
 80018e8:	224c      	movs	r2, #76	; 0x4c
 80018ea:	4619      	mov	r1, r3
 80018ec:	f008 fbbe 	bl	800a06c <memcpy>
 80018f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018f4:	2100      	movs	r1, #0
 80018f6:	2078      	movs	r0, #120	; 0x78
 80018f8:	f000 f9aa 	bl	8001c50 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <SSD1306_UpdateScreen+0x9c>)
 8001902:	441a      	add	r2, r3
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	2078      	movs	r0, #120	; 0x78
 800190a:	f000 f959 	bl	8001bc0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	3301      	adds	r3, #1
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d9be      	bls.n	8001898 <SSD1306_UpdateScreen+0xc>
	}
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	200009d0 	.word	0x200009d0
 8001928:	200001bc 	.word	0x200001bc

0800192c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <SSD1306_Fill+0x14>
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <SSD1306_Fill+0x16>
 8001940:	23ff      	movs	r3, #255	; 0xff
 8001942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001946:	4619      	mov	r1, r3
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <SSD1306_Fill+0x2c>)
 800194a:	f008 fb9d 	bl	800a088 <memset>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001bc 	.word	0x200001bc

0800195c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	460b      	mov	r3, r1
 8001968:	80bb      	strh	r3, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	70fb      	strb	r3, [r7, #3]
	if (
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b7f      	cmp	r3, #127	; 0x7f
 8001972:	d848      	bhi.n	8001a06 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	2b3f      	cmp	r3, #63	; 0x3f
 8001978:	d845      	bhi.n	8001a06 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <SSD1306_DrawPixel+0xb8>)
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d11a      	bne.n	80019cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	b298      	uxth	r0, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	01db      	lsls	r3, r3, #7
 80019a2:	4413      	add	r3, r2
 80019a4:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <SSD1306_DrawPixel+0xbc>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	b25a      	sxtb	r2, r3
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b259      	sxtb	r1, r3
 80019bc:	88fa      	ldrh	r2, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	01db      	lsls	r3, r3, #7
 80019c2:	4413      	add	r3, r2
 80019c4:	b2c9      	uxtb	r1, r1
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <SSD1306_DrawPixel+0xbc>)
 80019c8:	54d1      	strb	r1, [r2, r3]
 80019ca:	e01d      	b.n	8001a08 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	b298      	uxth	r0, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	01db      	lsls	r3, r3, #7
 80019d8:	4413      	add	r3, r2
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <SSD1306_DrawPixel+0xbc>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	4013      	ands	r3, r2
 80019f4:	b259      	sxtb	r1, r3
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	4603      	mov	r3, r0
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	4413      	add	r3, r2
 80019fe:	b2c9      	uxtb	r1, r1
 8001a00:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <SSD1306_DrawPixel+0xbc>)
 8001a02:	54d1      	strb	r1, [r2, r3]
 8001a04:	e000      	b.n	8001a08 <SSD1306_DrawPixel+0xac>
		return;
 8001a06:	bf00      	nop
	}
}
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200005bc 	.word	0x200005bc
 8001a18:	200001bc 	.word	0x200001bc

08001a1c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	80fb      	strh	r3, [r7, #6]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <SSD1306_GotoXY+0x28>)
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <SSD1306_GotoXY+0x28>)
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	8053      	strh	r3, [r2, #2]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	200005bc 	.word	0x200005bc

08001a48 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a58:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
	if (
 8001a64:	2b7f      	cmp	r3, #127	; 0x7f
 8001a66:	dc07      	bgt.n	8001a78 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a74:	2b3f      	cmp	r3, #63	; 0x3f
 8001a76:	dd01      	ble.n	8001a7c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e05e      	b.n	8001b3a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e04b      	b.n	8001b1a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	3b20      	subs	r3, #32
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	7849      	ldrb	r1, [r1, #1]
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	440b      	add	r3, r1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e030      	b.n	8001b08 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001ac4:	885a      	ldrh	r2, [r3, #2]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	79ba      	ldrb	r2, [r7, #6]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff ff43 	bl	800195c <SSD1306_DrawPixel>
 8001ad6:	e014      	b.n	8001b02 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b298      	uxth	r0, r3
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001ae6:	885a      	ldrh	r2, [r3, #2]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b299      	uxth	r1, r3
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7ff ff2d 	bl	800195c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	3301      	adds	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d3c8      	bcc.n	8001aa6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d3ad      	bcc.n	8001a82 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <SSD1306_Putc+0xfc>)
 8001b36:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200005bc 	.word	0x200005bc

08001b48 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	4613      	mov	r3, r2
 8001b54:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b56:	e012      	b.n	8001b7e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff71 	bl	8001a48 <SSD1306_Putc>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d002      	beq.n	8001b78 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	e008      	b.n	8001b8a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e8      	bne.n	8001b58 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	781b      	ldrb	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <ssd1306_I2C_Init+0x28>)
 8001b9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b9e:	e002      	b.n	8001ba6 <ssd1306_I2C_Init+0x12>
		p--;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	0003d090 	.word	0x0003d090

08001bc0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b0c7      	sub	sp, #284	; 0x11c
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4639      	mov	r1, r7
 8001bcc:	600a      	str	r2, [r1, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	1dfb      	adds	r3, r7, #7
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	4602      	mov	r2, r0
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	460a      	mov	r2, r1
 8001be0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	1dba      	adds	r2, r7, #6
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001bf2:	e010      	b.n	8001c16 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001bf4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bf8:	463a      	mov	r2, r7
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c02:	3301      	adds	r3, #1
 8001c04:	7811      	ldrb	r1, [r2, #0]
 8001c06:	f107 020c 	add.w	r2, r7, #12
 8001c0a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001c0c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c10:	3301      	adds	r3, #1
 8001c12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	1d3a      	adds	r2, r7, #4
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8e7      	bhi.n	8001bf4 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	200a      	movs	r0, #10
 8001c38:	9000      	str	r0, [sp, #0]
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <ssd1306_I2C_WriteMulti+0x8c>)
 8001c3c:	f000 ff8a 	bl	8002b54 <HAL_I2C_Master_Transmit>
}
 8001c40:	bf00      	nop
 8001c42:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200009d0 	.word	0x200009d0

08001c50 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8001c50:	b082      	sub	sp, #8
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af02      	add	r7, sp, #8
 8001c58:	f107 0c18 	add.w	ip, r7, #24
 8001c5c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	460b      	mov	r3, r1
 8001c66:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c6c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001c70:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	b299      	uxth	r1, r3
 8001c76:	f107 020c 	add.w	r2, r7, #12
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f107 0018 	add.w	r0, r7, #24
 8001c84:	f000 ff66 	bl	8002b54 <HAL_I2C_Master_Transmit>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c92:	b002      	add	sp, #8
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_I2C_MspInit+0x18c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12c      	bne.n	8001d64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a59      	ldr	r2, [pc, #356]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2a:	2312      	movs	r3, #18
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d36:	2304      	movs	r3, #4
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	484e      	ldr	r0, [pc, #312]	; (8001e7c <HAL_I2C_MspInit+0x194>)
 8001d42:	f000 fbdb 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d62:	e083      	b.n	8001e6c <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_I2C_MspInit+0x198>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d12d      	bne.n	8001dca <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d90:	2312      	movs	r3, #18
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	4835      	ldr	r0, [pc, #212]	; (8001e7c <HAL_I2C_MspInit+0x194>)
 8001da8:	f000 fba8 	bl	80024fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
}
 8001dc8:	e050      	b.n	8001e6c <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_I2C_MspInit+0x19c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d14b      	bne.n	8001e6c <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e12:	2312      	movs	r3, #18
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	4817      	ldr	r0, [pc, #92]	; (8001e88 <HAL_I2C_MspInit+0x1a0>)
 8001e2a:	f000 fb67 	bl	80024fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e34:	2312      	movs	r3, #18
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e40:	2304      	movs	r3, #4
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4810      	ldr	r0, [pc, #64]	; (8001e8c <HAL_I2C_MspInit+0x1a4>)
 8001e4c:	f000 fb56 	bl	80024fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_I2C_MspInit+0x190>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	; 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40005400 	.word	0x40005400
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40005800 	.word	0x40005800
 8001e84:	40005c00 	.word	0x40005c00
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_TIM_Base_MspInit+0x48>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d115      	bne.n	8001ece <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_TIM_Base_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_TIM_Base_MspInit+0x4c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_TIM_Base_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2019      	movs	r0, #25
 8001ec4:	f000 fa51 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ec8:	2019      	movs	r0, #25
 8001eca:	f000 fa6a 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d133      	bne.n	8001f6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_UART_MspInit+0x9c>)
 8001f56:	f000 fad1 	bl	80024fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2026      	movs	r0, #38	; 0x26
 8001f60:	f000 fa03 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f64:	2026      	movs	r0, #38	; 0x26
 8001f66:	f000 fa1c 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40004400 	.word	0x40004400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <NMI_Handler+0x4>

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f8ae 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fda:	f003 f87b 	bl	80050d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000093c 	.word	0x2000093c

08001fe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART2_IRQHandler+0x10>)
 8001fee:	f003 fcc5 	bl	800597c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000098c 	.word	0x2000098c

08001ffc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <OTG_FS_IRQHandler+0x10>)
 8002002:	f001 fb2c 	bl	800365e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20001f04 	.word	0x20001f04

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002050:	4c0b      	ldr	r4, [pc, #44]	; (8002080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800205e:	f7ff ffd7 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002062:	f007 ffdf 	bl	800a024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002066:	f7fe ffa3 	bl	8000fb0 <main>
  bx  lr    
 800206a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800206c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002078:	0800af30 	.word	0x0800af30
  ldr r2, =_sbss
 800207c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002080:	2000230c 	.word	0x2000230c

08002084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_Init+0x40>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_Init+0x40>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x40>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 f94f 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	200f      	movs	r0, #15
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fdec 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f967 	bl	80023be <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002108:	f000 f92f 	bl	800236a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000014 	.word	0x20000014
 8002124:	2000001c 	.word	0x2000001c
 8002128:	20000018 	.word	0x20000018

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	2000001c 	.word	0x2000001c
 8002150:	20000a30 	.word	0x20000a30

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000a30 	.word	0x20000a30

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000001c 	.word	0x2000001c

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff29 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff3e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff8e 	bl	80022a8 <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5d 	bl	8002254 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff31 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa2 	bl	8002310 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff feb6 	bl	8002154 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e052      	b.n	80024ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0216 	bic.w	r2, r2, #22
 8002416:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002426:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <HAL_DMA_Abort+0x62>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0208 	bic.w	r2, r2, #8
 8002446:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	e013      	b.n	8002482 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245a:	f7ff fe7b 	bl	8002154 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b05      	cmp	r3, #5
 8002466:	d90c      	bls.n	8002482 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e015      	b.n	80024ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e4      	bne.n	800245a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00c      	b.n	80024ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e16b      	b.n	80027f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	f040 815a 	bne.w	80027ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d005      	beq.n	800254e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	2b02      	cmp	r3, #2
 800254c:	d130      	bne.n	80025b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0201 	and.w	r2, r3, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d017      	beq.n	80025ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d123      	bne.n	8002640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80b4 	beq.w	80027ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_GPIO_Init+0x30c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <HAL_GPIO_Init+0x30c>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_GPIO_Init+0x310>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	220f      	movs	r2, #15
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_GPIO_Init+0x314>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x226>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_GPIO_Init+0x318>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x222>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_GPIO_Init+0x31c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4f      	ldr	r2, [pc, #316]	; (800281c <HAL_GPIO_Init+0x320>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x21a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4e      	ldr	r2, [pc, #312]	; (8002820 <HAL_GPIO_Init+0x324>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x216>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <HAL_GPIO_Init+0x328>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x212>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4b      	ldr	r2, [pc, #300]	; (800282c <HAL_GPIO_Init+0x330>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x20a>
 8002702:	2307      	movs	r3, #7
 8002704:	e00e      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002706:	2308      	movs	r3, #8
 8002708:	e00c      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800270a:	2306      	movs	r3, #6
 800270c:	e00a      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800270e:	2305      	movs	r3, #5
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002712:	2304      	movs	r3, #4
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x310>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002766:	4a32      	ldr	r2, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_GPIO_Init+0x334>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e4:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f ae90 	bls.w	8002518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40021c00 	.word	0x40021c00
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a8:	887a      	ldrh	r2, [r7, #2]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	041a      	lsls	r2, r3, #16
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	400b      	ands	r3, r1
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e12b      	b.n	8002b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff f9f8 	bl	8001ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002930:	f002 fae8 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8002934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a81      	ldr	r2, [pc, #516]	; (8002b40 <HAL_I2C_Init+0x274>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d807      	bhi.n	8002950 <HAL_I2C_Init+0x84>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a80      	ldr	r2, [pc, #512]	; (8002b44 <HAL_I2C_Init+0x278>)
 8002944:	4293      	cmp	r3, r2
 8002946:	bf94      	ite	ls
 8002948:	2301      	movls	r3, #1
 800294a:	2300      	movhi	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e006      	b.n	800295e <HAL_I2C_Init+0x92>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a7d      	ldr	r2, [pc, #500]	; (8002b48 <HAL_I2C_Init+0x27c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0e7      	b.n	8002b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a78      	ldr	r2, [pc, #480]	; (8002b4c <HAL_I2C_Init+0x280>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a6a      	ldr	r2, [pc, #424]	; (8002b40 <HAL_I2C_Init+0x274>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d802      	bhi.n	80029a0 <HAL_I2C_Init+0xd4>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	e009      	b.n	80029b4 <HAL_I2C_Init+0xe8>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_I2C_Init+0x284>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	3301      	adds	r3, #1
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	495c      	ldr	r1, [pc, #368]	; (8002b40 <HAL_I2C_Init+0x274>)
 80029d0:	428b      	cmp	r3, r1
 80029d2:	d819      	bhi.n	8002a08 <HAL_I2C_Init+0x13c>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e59      	subs	r1, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e8:	400b      	ands	r3, r1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_I2C_Init+0x138>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e59      	subs	r1, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a02:	e051      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a04:	2304      	movs	r3, #4
 8002a06:	e04f      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <HAL_I2C_Init+0x168>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e58      	subs	r0, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e012      	b.n	8002a5a <HAL_I2C_Init+0x18e>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	0099      	lsls	r1, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Init+0x196>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e022      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_I2C_Init+0x1bc>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e58      	subs	r0, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	e00f      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	6809      	ldr	r1, [r1, #0]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6911      	ldr	r1, [r2, #16]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	000186a0 	.word	0x000186a0
 8002b44:	001e847f 	.word	0x001e847f
 8002b48:	003d08ff 	.word	0x003d08ff
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	460b      	mov	r3, r1
 8002b62:	817b      	strh	r3, [r7, #10]
 8002b64:	4613      	mov	r3, r2
 8002b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff faf4 	bl	8002154 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	f040 80e0 	bne.w	8002d3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2319      	movs	r3, #25
 8002b82:	2201      	movs	r2, #1
 8002b84:	4970      	ldr	r1, [pc, #448]	; (8002d48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa92 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0d3      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_I2C_Master_Transmit+0x50>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0cc      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d007      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2210      	movs	r2, #16
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	893a      	ldrh	r2, [r7, #8]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c0c:	8979      	ldrh	r1, [r7, #10]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f9ca 	bl	8002fac <I2C_MasterRequestWrite>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e08d      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c38:	e066      	b.n	8002d08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fb0c 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x188>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fafc 	bl	80032de <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e01a      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d194      	bne.n	8002c3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	00100002 	.word	0x00100002
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff f9f8 	bl	8002154 <HAL_GetTick>
 8002d64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 8111 	bne.w	8002f9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2319      	movs	r3, #25
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4988      	ldr	r1, [pc, #544]	; (8002fa4 <HAL_I2C_IsDeviceReady+0x254>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f994 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e104      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2C_IsDeviceReady+0x50>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0fd      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d007      	beq.n	8002dc6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2224      	movs	r2, #36	; 0x24
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a70      	ldr	r2, [pc, #448]	; (8002fa8 <HAL_I2C_IsDeviceReady+0x258>)
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f952 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e20:	d103      	bne.n	8002e2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0b6      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7ff f989 	bl	8002154 <HAL_GetTick>
 8002e42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e72:	e025      	b.n	8002ec0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e74:	f7ff f96e 	bl	8002154 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d302      	bcc.n	8002e8a <HAL_I2C_IsDeviceReady+0x13a>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	22a0      	movs	r2, #160	; 0xa0
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2ba0      	cmp	r3, #160	; 0xa0
 8002eca:	d005      	beq.n	8002ed8 <HAL_I2C_IsDeviceReady+0x188>
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_I2C_IsDeviceReady+0x188>
 8002ed2:	7dbb      	ldrb	r3, [r7, #22]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0cd      	beq.n	8002e74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d129      	bne.n	8002f42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2319      	movs	r3, #25
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4921      	ldr	r1, [pc, #132]	; (8002fa4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8c6 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e036      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e02c      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2319      	movs	r3, #25
 8002f62:	2201      	movs	r2, #1
 8002f64:	490f      	ldr	r1, [pc, #60]	; (8002fa4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f8a2 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e012      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f4ff af32 	bcc.w	8002dea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00100002 	.word	0x00100002
 8002fa8:	ffff0000 	.word	0xffff0000

08002fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d006      	beq.n	8002fd6 <I2C_MasterRequestWrite+0x2a>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d003      	beq.n	8002fd6 <I2C_MasterRequestWrite+0x2a>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fd4:	d108      	bne.n	8002fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e00b      	b.n	8003000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	2b12      	cmp	r3, #18
 8002fee:	d107      	bne.n	8003000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f84f 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003026:	d103      	bne.n	8003030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e035      	b.n	80030a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303c:	d108      	bne.n	8003050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304c:	611a      	str	r2, [r3, #16]
 800304e:	e01b      	b.n	8003088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003050:	897b      	ldrh	r3, [r7, #10]
 8003052:	11db      	asrs	r3, r3, #7
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 0306 	and.w	r3, r3, #6
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f063 030f 	orn	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	490e      	ldr	r1, [pc, #56]	; (80030a8 <I2C_MasterRequestWrite+0xfc>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f875 	bl	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e010      	b.n	80030a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4907      	ldr	r1, [pc, #28]	; (80030ac <I2C_MasterRequestWrite+0x100>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f865 	bl	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	00010008 	.word	0x00010008
 80030ac:	00010002 	.word	0x00010002

080030b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c0:	e025      	b.n	800310e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c8:	d021      	beq.n	800310e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ca:	f7ff f843 	bl	8002154 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d116      	bne.n	800310e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f043 0220 	orr.w	r2, r3, #32
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e023      	b.n	8003156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4013      	ands	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	e00c      	b.n	800314e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	429a      	cmp	r2, r3
 8003152:	d0b6      	beq.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800316c:	e051      	b.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d123      	bne.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0204 	orr.w	r2, r3, #4
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e046      	b.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031cc:	d021      	beq.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fe ffc1 	bl	8002154 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d116      	bne.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e020      	b.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10c      	bne.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf14      	ite	ne
 800322e:	2301      	movne	r3, #1
 8003230:	2300      	moveq	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	e00b      	b.n	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	43da      	mvns	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d18d      	bne.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003268:	e02d      	b.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f878 	bl	8003360 <I2C_IsAcknowledgeFailed>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e02d      	b.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003280:	d021      	beq.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7fe ff67 	bl	8002154 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d116      	bne.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d1ca      	bne.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ea:	e02d      	b.n	8003348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f837 	bl	8003360 <I2C_IsAcknowledgeFailed>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e02d      	b.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003302:	d021      	beq.n	8003348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7fe ff26 	bl	8002154 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e007      	b.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d1ca      	bne.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d11b      	bne.n	80033b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c0:	b08f      	sub	sp, #60	; 0x3c
 80033c2:	af0a      	add	r7, sp, #40	; 0x28
 80033c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e10f      	b.n	80035f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f006 fb06 	bl	80099fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f003 f9e3 	bl	80067da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	687e      	ldr	r6, [r7, #4]
 800341c:	466d      	mov	r5, sp
 800341e:	f106 0410 	add.w	r4, r6, #16
 8003422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800342a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800342e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003432:	1d33      	adds	r3, r6, #4
 8003434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003436:	6838      	ldr	r0, [r7, #0]
 8003438:	f003 f8ba 	bl	80065b0 <USB_CoreInit>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0d0      	b.n	80035f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f003 f9d1 	bl	80067fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e04a      	b.n	80034f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	333d      	adds	r3, #61	; 0x3d
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	333c      	adds	r3, #60	; 0x3c
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	b298      	uxth	r0, r3
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3342      	adds	r3, #66	; 0x42
 800349c:	4602      	mov	r2, r0
 800349e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	333f      	adds	r3, #63	; 0x3f
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3344      	adds	r3, #68	; 0x44
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3348      	adds	r3, #72	; 0x48
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3350      	adds	r3, #80	; 0x50
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	3301      	adds	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d3af      	bcc.n	8003460 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e044      	b.n	8003590 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	3301      	adds	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	d3b5      	bcc.n	8003506 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	687e      	ldr	r6, [r7, #4]
 80035a2:	466d      	mov	r5, sp
 80035a4:	f106 0410 	add.w	r4, r6, #16
 80035a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80035b8:	1d33      	adds	r3, r6, #4
 80035ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	f003 f969 	bl	8006894 <USB_DevInit>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e00d      	b.n	80035f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f004 f9e5 	bl	80079b8 <USB_DevDisconnect>

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_PCD_Start+0x1c>
 8003610:	2302      	movs	r3, #2
 8003612:	e020      	b.n	8003656 <HAL_PCD_Start+0x5e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	2b01      	cmp	r3, #1
 8003622:	d109      	bne.n	8003638 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003628:	2b01      	cmp	r3, #1
 800362a:	d005      	beq.n	8003638 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 f8bb 	bl	80067b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 f995 	bl	8007976 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800365e:	b590      	push	{r4, r7, lr}
 8003660:	b08d      	sub	sp, #52	; 0x34
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f004 fa53 	bl	8007b20 <USB_GetMode>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 839d 	bne.w	8003dbc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f004 f9b7 	bl	80079fa <USB_ReadInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8393 	beq.w	8003dba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f004 f9ae 	bl	80079fa <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d107      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f002 0202 	and.w	r2, r2, #2
 80036b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f004 f99c 	bl	80079fa <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d161      	bne.n	8003790 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0210 	bic.w	r2, r2, #16
 80036da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	0c5b      	lsrs	r3, r3, #17
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	2b02      	cmp	r3, #2
 8003706:	d124      	bne.n	8003752 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d035      	beq.n	8003780 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800371e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	6a38      	ldr	r0, [r7, #32]
 8003728:	f003 ffd3 	bl	80076d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003738:	441a      	add	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800374a:	441a      	add	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	619a      	str	r2, [r3, #24]
 8003750:	e016      	b.n	8003780 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	0c5b      	lsrs	r3, r3, #17
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	2b06      	cmp	r3, #6
 800375c:	d110      	bne.n	8003780 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003764:	2208      	movs	r2, #8
 8003766:	4619      	mov	r1, r3
 8003768:	6a38      	ldr	r0, [r7, #32]
 800376a:	f003 ffb2 	bl	80076d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377a:	441a      	add	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0210 	orr.w	r2, r2, #16
 800378e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 f930 	bl	80079fa <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037a4:	d16e      	bne.n	8003884 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 f936 	bl	8007a20 <USB_ReadDevAllOutEpInterrupt>
 80037b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037b6:	e062      	b.n	800387e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d057      	beq.n	8003872 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 f95b 	bl	8007a88 <USB_ReadDevOutEPInterrupt>
 80037d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00c      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	2301      	movs	r3, #1
 80037ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fdb0 	bl	8004358 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380e:	461a      	mov	r2, r3
 8003810:	2308      	movs	r3, #8
 8003812:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 feaa 	bl	8004570 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	461a      	mov	r2, r3
 8003834:	2310      	movs	r3, #16
 8003836:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	2320      	movs	r3, #32
 8003852:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	461a      	mov	r2, r3
 800386c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003870:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	3301      	adds	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d199      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f004 f8b6 	bl	80079fa <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003898:	f040 80c0 	bne.w	8003a1c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 f8d7 	bl	8007a54 <USB_ReadDevAllInEpInterrupt>
 80038a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038ac:	e0b2      	b.n	8003a14 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a7 	beq.w	8003a08 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f004 f8fd 	bl	8007ac4 <USB_ReadDevInEPInterrupt>
 80038ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d057      	beq.n	8003986 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	2201      	movs	r2, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f6:	4013      	ands	r3, r2
 80038f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003906:	461a      	mov	r2, r3
 8003908:	2301      	movs	r3, #1
 800390a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d132      	bne.n	800397a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3348      	adds	r3, #72	; 0x48
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4403      	add	r3, r0
 8003934:	3344      	adds	r3, #68	; 0x44
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4419      	add	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4403      	add	r3, r0
 8003948:	3348      	adds	r3, #72	; 0x48
 800394a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d113      	bne.n	800397a <HAL_PCD_IRQHandler+0x31c>
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3350      	adds	r3, #80	; 0x50
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003972:	461a      	mov	r2, r3
 8003974:	2101      	movs	r1, #1
 8003976:	f004 f905 	bl	8007b84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f006 f8bc 	bl	8009afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399c:	461a      	mov	r2, r3
 800399e:	2308      	movs	r3, #8
 80039a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	461a      	mov	r2, r3
 80039ba:	2310      	movs	r3, #16
 80039bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	461a      	mov	r2, r3
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f0:	461a      	mov	r2, r3
 80039f2:	2302      	movs	r3, #2
 80039f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fc1b 	bl	800423e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f47f af49 	bne.w	80038ae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f003 ffea 	bl	80079fa <USB_ReadInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a30:	d122      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d108      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a58:	2100      	movs	r1, #0
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fe26 	bl	80046ac <HAL_PCDEx_LPM_Callback>
 8003a60:	e002      	b.n	8003a68 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f006 f8c2 	bl	8009bec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 ffbc 	bl	80079fa <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d112      	bne.n	8003ab4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f006 f87e 	bl	8009ba0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ab2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 ff9e 	bl	80079fa <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	f040 80c7 	bne.w	8003c5a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2110      	movs	r1, #16
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f838 	bl	8006b5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af0:	e056      	b.n	8003ba0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afe:	461a      	mov	r2, r3
 8003b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b24:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	461a      	mov	r2, r3
 8003b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3a3      	bcc.n	8003af2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd6:	f043 030b 	orr.w	r3, r3, #11
 8003bda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bec:	f043 030b 	orr.w	r3, r3, #11
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	e015      	b.n	8003c20 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1a:	f043 030b 	orr.w	r3, r3, #11
 8003c1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c44:	461a      	mov	r2, r3
 8003c46:	f003 ff9d 	bl	8007b84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fecb 	bl	80079fa <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	d124      	bne.n	8003cba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f003 ff61 	bl	8007b3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 ffc9 	bl	8006c16 <USB_GetDevSpeed>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681c      	ldr	r4, [r3, #0]
 8003c90:	f001 f92c 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8003c94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f002 fce8 	bl	8006674 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f005 ff52 	bl	8009b4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fe9b 	bl	80079fa <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f005 ff2f 	bl	8009b32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f002 0208 	and.w	r2, r2, #8
 8003ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 fe86 	bl	80079fa <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf8:	d10f      	bne.n	8003d1a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f005 ff91 	bl	8009c2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 fe6b 	bl	80079fa <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2e:	d10f      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f005 ff64 	bl	8009c08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 fe50 	bl	80079fa <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d10a      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f005 ff72 	bl	8009c50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 fe3a 	bl	80079fa <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d115      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f005 ff62 	bl	8009c6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	e000      	b.n	8003dbc <HAL_PCD_IRQHandler+0x75e>
      return;
 8003dba:	bf00      	nop
    }
  }
}
 8003dbc:	3734      	adds	r7, #52	; 0x34
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}

08003dc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_SetAddress+0x1a>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e013      	b.n	8003e04 <HAL_PCD_SetAddress+0x42>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fd98 	bl	800792a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	70fb      	strb	r3, [r7, #3]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	803b      	strh	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da0f      	bge.n	8003e52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3338      	adds	r3, #56	; 0x38
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	705a      	strb	r2, [r3, #1]
 8003e50:	e00f      	b.n	8003e72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	3304      	adds	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e7e:	883a      	ldrh	r2, [r7, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	78ba      	ldrb	r2, [r7, #2]
 8003e88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e9c:	78bb      	ldrb	r3, [r7, #2]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d102      	bne.n	8003ea8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_PCD_EP_Open+0xaa>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e00e      	b.n	8003ed4 <HAL_PCD_EP_Open+0xc8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f002 fecb 	bl	8006c60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da0f      	bge.n	8003f10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3338      	adds	r3, #56	; 0x38
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	705a      	strb	r2, [r3, #1]
 8003f0e:	e00f      	b.n	8003f30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_PCD_EP_Close+0x6e>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e00e      	b.n	8003f68 <HAL_PCD_EP_Close+0x8c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 ff09 	bl	8006d70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	7afb      	ldrb	r3, [r7, #11]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6979      	ldr	r1, [r7, #20]
 8003fe4:	f003 f9e4 	bl	80073b0 <USB_EP0StartXfer>
 8003fe8:	e008      	b.n	8003ffc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	f002 ff96 	bl	8006f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004028:	681b      	ldr	r3, [r3, #0]
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	460b      	mov	r3, r1
 8004044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	f003 020f 	and.w	r2, r3, #15
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2201      	movs	r2, #1
 8004074:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	b2da      	uxtb	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	f003 f982 	bl	80073b0 <USB_EP0StartXfer>
 80040ac:	e008      	b.n	80040c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	f002 ff34 	bl	8006f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d901      	bls.n	80040e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e050      	b.n	800418a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	da0f      	bge.n	8004110 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	3338      	adds	r3, #56	; 0x38
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	705a      	strb	r2, [r3, #1]
 800410e:	e00d      	b.n	800412c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_PCD_EP_SetStall+0x82>
 8004148:	2302      	movs	r3, #2
 800414a:	e01e      	b.n	800418a <HAL_PCD_EP_SetStall+0xc0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 fb11 	bl	8007782 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	b2d9      	uxtb	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800417a:	461a      	mov	r2, r3
 800417c:	f003 fd02 	bl	8007b84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d901      	bls.n	80041b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e042      	b.n	8004236 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da0f      	bge.n	80041d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 020f 	and.w	r2, r3, #15
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	3338      	adds	r3, #56	; 0x38
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	705a      	strb	r2, [r3, #1]
 80041d6:	e00f      	b.n	80041f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 020f 	and.w	r2, r3, #15
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_PCD_EP_ClrStall+0x86>
 8004214:	2302      	movs	r3, #2
 8004216:	e00e      	b.n	8004236 <HAL_PCD_EP_ClrStall+0xa4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68f9      	ldr	r1, [r7, #12]
 8004226:	4618      	mov	r0, r3
 8004228:	f003 fb19 	bl	800785e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08a      	sub	sp, #40	; 0x28
 8004242:	af02      	add	r7, sp, #8
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3338      	adds	r3, #56	; 0x38
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	429a      	cmp	r2, r3
 8004270:	d901      	bls.n	8004276 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06c      	b.n	8004350 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	429a      	cmp	r2, r3
 800428a:	d902      	bls.n	8004292 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3303      	adds	r3, #3
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800429a:	e02b      	b.n	80042f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d902      	bls.n	80042b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3303      	adds	r3, #3
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68d9      	ldr	r1, [r3, #12]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4603      	mov	r3, r0
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f003 f9bd 	bl	8007656 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	441a      	add	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	b29b      	uxth	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	429a      	cmp	r2, r3
 8004308:	d809      	bhi.n	800431e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004312:	429a      	cmp	r2, r3
 8004314:	d203      	bcs.n	800431e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1be      	bne.n	800429c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	429a      	cmp	r2, r3
 8004328:	d811      	bhi.n	800434e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2201      	movs	r2, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	43db      	mvns	r3, r3
 8004344:	6939      	ldr	r1, [r7, #16]
 8004346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434a:	4013      	ands	r3, r2
 800434c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	333c      	adds	r3, #60	; 0x3c
 8004370:	3304      	adds	r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	f040 80a0 	bne.w	80044d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d015      	beq.n	80043c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a72      	ldr	r2, [pc, #456]	; (8004568 <PCD_EP_OutXfrComplete_int+0x210>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f240 80dd 	bls.w	800455e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80d7 	beq.w	800455e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	6093      	str	r3, [r2, #8]
 80043c4:	e0cb      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	2320      	movs	r3, #32
 80043e0:	6093      	str	r3, [r2, #8]
 80043e2:	e0bc      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 80b7 	bne.w	800455e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <PCD_EP_OutXfrComplete_int+0x210>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d90f      	bls.n	8004418 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	461a      	mov	r2, r3
 8004410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	e0a2      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800442a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	0159      	lsls	r1, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	440b      	add	r3, r1
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800443e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4403      	add	r3, r0
 800444e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004452:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4403      	add	r3, r0
 8004476:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4419      	add	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004490:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d114      	bne.n	80044c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044ba:	461a      	mov	r2, r3
 80044bc:	2101      	movs	r1, #1
 80044be:	f003 fb61 	bl	8007b84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f005 fafd 	bl	8009ac8 <HAL_PCD_DataOutStageCallback>
 80044ce:	e046      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <PCD_EP_OutXfrComplete_int+0x214>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d124      	bne.n	8004522 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	461a      	mov	r2, r3
 80044f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f4:	6093      	str	r3, [r2, #8]
 80044f6:	e032      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	461a      	mov	r2, r3
 8004510:	2320      	movs	r3, #32
 8004512:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f005 fad4 	bl	8009ac8 <HAL_PCD_DataOutStageCallback>
 8004520:	e01d      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d114      	bne.n	8004552 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d108      	bne.n	8004552 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800454a:	461a      	mov	r2, r3
 800454c:	2100      	movs	r1, #0
 800454e:	f003 fb19 	bl	8007b84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f005 fab5 	bl	8009ac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	4f54300a 	.word	0x4f54300a
 800456c:	4f54310a 	.word	0x4f54310a

08004570 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	333c      	adds	r3, #60	; 0x3c
 8004588:	3304      	adds	r3, #4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d90e      	bls.n	80045c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f005 fa6d 	bl	8009aa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d90c      	bls.n	80045ec <PCD_EP_OutSetupPacket_int+0x7c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045e4:	461a      	mov	r2, r3
 80045e6:	2101      	movs	r1, #1
 80045e8:	f003 facc 	bl	8007b84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	4f54300a 	.word	0x4f54300a

080045fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
 8004608:	4613      	mov	r3, r2
 800460a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800461a:	883b      	ldrh	r3, [r7, #0]
 800461c:	0419      	lsls	r1, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	430a      	orrs	r2, r1
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e028      	b.n	800467c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e00d      	b.n	800465a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	3340      	adds	r3, #64	; 0x40
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	3301      	adds	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	3b01      	subs	r3, #1
 8004660:	429a      	cmp	r2, r3
 8004662:	d3ec      	bcc.n	800463e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004664:	883b      	ldrh	r3, [r7, #0]
 8004666:	0418      	lsls	r0, r3, #16
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	3b01      	subs	r3, #1
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	4302      	orrs	r2, r0
 8004674:	3340      	adds	r3, #64	; 0x40
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e264      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d075      	beq.n	80047ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046e2:	4ba3      	ldr	r3, [pc, #652]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d00c      	beq.n	8004708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4ba0      	ldr	r3, [pc, #640]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d112      	bne.n	8004720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fa:	4b9d      	ldr	r3, [pc, #628]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004706:	d10b      	bne.n	8004720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	4b99      	ldr	r3, [pc, #612]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05b      	beq.n	80047cc <HAL_RCC_OscConfig+0x108>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d157      	bne.n	80047cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e23f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004728:	d106      	bne.n	8004738 <HAL_RCC_OscConfig+0x74>
 800472a:	4b91      	ldr	r3, [pc, #580]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a90      	ldr	r2, [pc, #576]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e01d      	b.n	8004774 <HAL_RCC_OscConfig+0xb0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x98>
 8004742:	4b8b      	ldr	r3, [pc, #556]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a8a      	ldr	r2, [pc, #552]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b88      	ldr	r3, [pc, #544]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a87      	ldr	r2, [pc, #540]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0xb0>
 800475c:	4b84      	ldr	r3, [pc, #528]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a83      	ldr	r2, [pc, #524]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4b81      	ldr	r3, [pc, #516]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a80      	ldr	r2, [pc, #512]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 800476e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd fcea 	bl	8002154 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7fd fce6 	bl	8002154 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e204      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b76      	ldr	r3, [pc, #472]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0xc0>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd fcd6 	bl	8002154 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd fcd2 	bl	8002154 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1f0      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	4b6c      	ldr	r3, [pc, #432]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0xe8>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047da:	4b65      	ldr	r3, [pc, #404]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b62      	ldr	r3, [pc, #392]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f2:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d116      	bne.n	800482c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	4b5c      	ldr	r3, [pc, #368]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x152>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1c4      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	4b56      	ldr	r3, [pc, #344]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4952      	ldr	r1, [pc, #328]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	e03a      	b.n	80048a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004834:	4b4f      	ldr	r3, [pc, #316]	; (8004974 <HAL_RCC_OscConfig+0x2b0>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fd fc8b 	bl	8002154 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd fc87 	bl	8002154 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1a5      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	4b46      	ldr	r3, [pc, #280]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b43      	ldr	r3, [pc, #268]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4940      	ldr	r1, [pc, #256]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	e015      	b.n	80048a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004876:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <HAL_RCC_OscConfig+0x2b0>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd fc6a 	bl	8002154 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004884:	f7fd fc66 	bl	8002154 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e184      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	4b36      	ldr	r3, [pc, #216]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d030      	beq.n	8004910 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_RCC_OscConfig+0x2b4>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fd fc4a 	bl	8002154 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fd fc46 	bl	8002154 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e164      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	4b26      	ldr	r3, [pc, #152]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x200>
 80048e2:	e015      	b.n	8004910 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e4:	4b24      	ldr	r3, [pc, #144]	; (8004978 <HAL_RCC_OscConfig+0x2b4>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7fd fc33 	bl	8002154 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fd fc2f 	bl	8002154 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e14d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a0 	beq.w	8004a5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	4a0e      	ldr	r2, [pc, #56]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	; 0x40
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_OscConfig+0x2b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d121      	bne.n	800499e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_RCC_OscConfig+0x2b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <HAL_RCC_OscConfig+0x2b8>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fd fbf5 	bl	8002154 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e011      	b.n	8004992 <HAL_RCC_OscConfig+0x2ce>
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	42470000 	.word	0x42470000
 8004978:	42470e80 	.word	0x42470e80
 800497c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fd fbe8 	bl	8002154 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e106      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004992:	4b85      	ldr	r3, [pc, #532]	; (8004ba8 <HAL_RCC_OscConfig+0x4e4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x2f0>
 80049a6:	4b81      	ldr	r3, [pc, #516]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a80      	ldr	r2, [pc, #512]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
 80049b2:	e01c      	b.n	80049ee <HAL_RCC_OscConfig+0x32a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_OscConfig+0x312>
 80049bc:	4b7b      	ldr	r3, [pc, #492]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a7a      	ldr	r2, [pc, #488]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	4b78      	ldr	r3, [pc, #480]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a77      	ldr	r2, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e00b      	b.n	80049ee <HAL_RCC_OscConfig+0x32a>
 80049d6:	4b75      	ldr	r3, [pc, #468]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a74      	ldr	r2, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a71      	ldr	r2, [pc, #452]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fd fbad 	bl	8002154 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fd fba9 	bl	8002154 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0c5      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ee      	beq.n	80049fe <HAL_RCC_OscConfig+0x33a>
 8004a20:	e014      	b.n	8004a4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fd fb97 	bl	8002154 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fd fb93 	bl	8002154 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0af      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a40:	4b5a      	ldr	r3, [pc, #360]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ee      	bne.n	8004a2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	4b56      	ldr	r3, [pc, #344]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	4a55      	ldr	r2, [pc, #340]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 809b 	beq.w	8004b9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a68:	4b50      	ldr	r3, [pc, #320]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d05c      	beq.n	8004b2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d141      	bne.n	8004b00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_OscConfig+0x4ec>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fd fb67 	bl	8002154 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fd fb63 	bl	8002154 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e081      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	019b      	lsls	r3, r3, #6
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	4937      	ldr	r1, [pc, #220]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x4ec>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fb3c 	bl	8002154 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fb38 	bl	8002154 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e056      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x41c>
 8004afe:	e04e      	b.n	8004b9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCC_OscConfig+0x4ec>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fd fb25 	bl	8002154 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fd fb21 	bl	8002154 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e03f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b20:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x44a>
 8004b2c:	e037      	b.n	8004b9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e032      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b3a:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <HAL_RCC_OscConfig+0x4e8>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d028      	beq.n	8004b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d11a      	bne.n	8004b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d111      	bne.n	8004b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	3b01      	subs	r3, #1
 8004b84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d001      	beq.n	8004b9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	42470060 	.word	0x42470060

08004bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0cc      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d90c      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b65      	ldr	r3, [pc, #404]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0b8      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c08:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a58      	ldr	r2, [pc, #352]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	494d      	ldr	r1, [pc, #308]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d044      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d119      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e07f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e067      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4934      	ldr	r1, [pc, #208]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fa56 	bl	8002154 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fd fa52 	bl	8002154 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e04f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20c      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e032      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	490e      	ldr	r1, [pc, #56]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d3a:	f000 f821 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	490a      	ldr	r1, [pc, #40]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	5ccb      	ldrb	r3, [r1, r3]
 8004d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd f9b6 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023c00 	.word	0x40023c00
 8004d70:	40023800 	.word	0x40023800
 8004d74:	0800af08 	.word	0x0800af08
 8004d78:	20000014 	.word	0x20000014
 8004d7c:	20000018 	.word	0x20000018

08004d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	b5b0      	push	{r4, r5, r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d86:	2100      	movs	r1, #0
 8004d88:	6079      	str	r1, [r7, #4]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	60f9      	str	r1, [r7, #12]
 8004d8e:	2100      	movs	r1, #0
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d92:	2100      	movs	r1, #0
 8004d94:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d96:	4952      	ldr	r1, [pc, #328]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d98:	6889      	ldr	r1, [r1, #8]
 8004d9a:	f001 010c 	and.w	r1, r1, #12
 8004d9e:	2908      	cmp	r1, #8
 8004da0:	d00d      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x3e>
 8004da2:	2908      	cmp	r1, #8
 8004da4:	f200 8094 	bhi.w	8004ed0 <HAL_RCC_GetSysClockFreq+0x150>
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x32>
 8004dac:	2904      	cmp	r1, #4
 8004dae:	d003      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x38>
 8004db0:	e08e      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db2:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004db4:	60bb      	str	r3, [r7, #8]
       break;
 8004db6:	e08e      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db8:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004dba:	60bb      	str	r3, [r7, #8]
      break;
 8004dbc:	e08b      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dbe:	4948      	ldr	r1, [pc, #288]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dc0:	6849      	ldr	r1, [r1, #4]
 8004dc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004dc6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc8:	4945      	ldr	r1, [pc, #276]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dca:	6849      	ldr	r1, [r1, #4]
 8004dcc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	d024      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd4:	4942      	ldr	r1, [pc, #264]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dd6:	6849      	ldr	r1, [r1, #4]
 8004dd8:	0989      	lsrs	r1, r1, #6
 8004dda:	4608      	mov	r0, r1
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004de4:	f04f 0500 	mov.w	r5, #0
 8004de8:	ea00 0204 	and.w	r2, r0, r4
 8004dec:	ea01 0305 	and.w	r3, r1, r5
 8004df0:	493d      	ldr	r1, [pc, #244]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004df2:	fb01 f003 	mul.w	r0, r1, r3
 8004df6:	2100      	movs	r1, #0
 8004df8:	fb01 f102 	mul.w	r1, r1, r2
 8004dfc:	1844      	adds	r4, r0, r1
 8004dfe:	493a      	ldr	r1, [pc, #232]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e00:	fba2 0101 	umull	r0, r1, r2, r1
 8004e04:	1863      	adds	r3, r4, r1
 8004e06:	4619      	mov	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	f7fb fdd8 	bl	80009c4 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e04a      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	461a      	mov	r2, r3
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	ea02 0400 	and.w	r4, r2, r0
 8004e36:	ea03 0501 	and.w	r5, r3, r1
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	014b      	lsls	r3, r1, #5
 8004e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e4c:	0142      	lsls	r2, r0, #5
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	1b00      	subs	r0, r0, r4
 8004e54:	eb61 0105 	sbc.w	r1, r1, r5
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	018b      	lsls	r3, r1, #6
 8004e62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e66:	0182      	lsls	r2, r0, #6
 8004e68:	1a12      	subs	r2, r2, r0
 8004e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6e:	f04f 0000 	mov.w	r0, #0
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	00d9      	lsls	r1, r3, #3
 8004e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e7c:	00d0      	lsls	r0, r2, #3
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	1912      	adds	r2, r2, r4
 8004e84:	eb45 0303 	adc.w	r3, r5, r3
 8004e88:	f04f 0000 	mov.w	r0, #0
 8004e8c:	f04f 0100 	mov.w	r1, #0
 8004e90:	0299      	lsls	r1, r3, #10
 8004e92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e96:	0290      	lsls	r0, r2, #10
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	f7fb fd8c 	bl	80009c4 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	60bb      	str	r3, [r7, #8]
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ed2:	60bb      	str	r3, [r7, #8]
      break;
 8004ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	017d7840 	.word	0x017d7840

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000014 	.word	0x20000014

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f08:	f7ff fff0 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0a9b      	lsrs	r3, r3, #10
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	0800af18 	.word	0x0800af18

08004f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f30:	f7ff ffdc 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0b5b      	lsrs	r3, r3, #13
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4903      	ldr	r1, [pc, #12]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	0800af18 	.word	0x0800af18

08004f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e041      	b.n	8004fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc ff88 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f000 fa96 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e04e      	b.n	80050aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d01d      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_TIM_Base_Start_IT+0xc8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d010      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005096:	e007      	b.n	80050a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40001800 	.word	0x40001800

080050d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0202 	mvn.w	r2, #2
 8005100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9b5 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9a7 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f9b8 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d122      	bne.n	8005184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0204 	mvn.w	r2, #4
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f98b 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f97d 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f98e 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b08      	cmp	r3, #8
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0208 	mvn.w	r2, #8
 80051a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f961 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f953 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f964 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0210 	mvn.w	r2, #16
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2208      	movs	r2, #8
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f937 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f929 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f93a 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb fd32 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d10e      	bne.n	8005284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d107      	bne.n	8005284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fae0 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8ff 	bl	80054ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0220 	mvn.w	r2, #32
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 faaa 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIM_ConfigClockSource+0x1c>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e0b4      	b.n	800546a <HAL_TIM_ConfigClockSource+0x186>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800531e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005338:	d03e      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0xd4>
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	f200 8087 	bhi.w	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	f000 8086 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x172>
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534e:	d87f      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b70      	cmp	r3, #112	; 0x70
 8005352:	d01a      	beq.n	800538a <HAL_TIM_ConfigClockSource+0xa6>
 8005354:	2b70      	cmp	r3, #112	; 0x70
 8005356:	d87b      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b60      	cmp	r3, #96	; 0x60
 800535a:	d050      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x11a>
 800535c:	2b60      	cmp	r3, #96	; 0x60
 800535e:	d877      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b50      	cmp	r3, #80	; 0x50
 8005362:	d03c      	beq.n	80053de <HAL_TIM_ConfigClockSource+0xfa>
 8005364:	2b50      	cmp	r3, #80	; 0x50
 8005366:	d873      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d058      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x13a>
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d86f      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d064      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	2b30      	cmp	r3, #48	; 0x30
 8005376:	d86b      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d060      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d867      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05c      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b10      	cmp	r3, #16
 8005386:	d05a      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 8005388:	e062      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6899      	ldr	r1, [r3, #8]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f000 f9ad 	bl	80056f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
      break;
 80053b6:	e04f      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6899      	ldr	r1, [r3, #8]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f000 f996 	bl	80056f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053da:	609a      	str	r2, [r3, #8]
      break;
 80053dc:	e03c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 f90a 	bl	8005604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2150      	movs	r1, #80	; 0x50
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f963 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 80053fc:	e02c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	f000 f929 	bl	8005662 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2160      	movs	r1, #96	; 0x60
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f953 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800541c:	e01c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	461a      	mov	r2, r3
 800542c:	f000 f8ea 	bl	8005604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f943 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800543c:	e00c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 f93a 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800544e:	e003      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
      break;
 8005454:	e000      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a40      	ldr	r2, [pc, #256]	; (80055d8 <TIM_Base_SetConfig+0x114>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d00f      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a3d      	ldr	r2, [pc, #244]	; (80055dc <TIM_Base_SetConfig+0x118>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00b      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a3c      	ldr	r2, [pc, #240]	; (80055e0 <TIM_Base_SetConfig+0x11c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a3b      	ldr	r2, [pc, #236]	; (80055e4 <TIM_Base_SetConfig+0x120>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a3a      	ldr	r2, [pc, #232]	; (80055e8 <TIM_Base_SetConfig+0x124>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <TIM_Base_SetConfig+0x114>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d02b      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005524:	d027      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2c      	ldr	r2, [pc, #176]	; (80055dc <TIM_Base_SetConfig+0x118>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d023      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2b      	ldr	r2, [pc, #172]	; (80055e0 <TIM_Base_SetConfig+0x11c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d01f      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <TIM_Base_SetConfig+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01b      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a29      	ldr	r2, [pc, #164]	; (80055e8 <TIM_Base_SetConfig+0x124>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d017      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a28      	ldr	r2, [pc, #160]	; (80055ec <TIM_Base_SetConfig+0x128>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <TIM_Base_SetConfig+0x12c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00f      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a26      	ldr	r2, [pc, #152]	; (80055f4 <TIM_Base_SetConfig+0x130>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00b      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <TIM_Base_SetConfig+0x134>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a24      	ldr	r2, [pc, #144]	; (80055fc <TIM_Base_SetConfig+0x138>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a23      	ldr	r2, [pc, #140]	; (8005600 <TIM_Base_SetConfig+0x13c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d108      	bne.n	8005588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a0a      	ldr	r2, [pc, #40]	; (80055d8 <TIM_Base_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0xf8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a0c      	ldr	r2, [pc, #48]	; (80055e8 <TIM_Base_SetConfig+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d103      	bne.n	80055c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	615a      	str	r2, [r3, #20]
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800
 80055e4:	40000c00 	.word	0x40000c00
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40001800 	.word	0x40001800
 80055fc:	40001c00 	.word	0x40001c00
 8005600:	40002000 	.word	0x40002000

08005604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 030a 	bic.w	r3, r3, #10
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800568c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 0307 	orr.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e05a      	b.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d01d      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a18      	ldr	r2, [pc, #96]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a17      	ldr	r2, [pc, #92]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10c      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40010400 	.word	0x40010400
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03f      	b.n	80058ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc fb2e 	bl	8001ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fcbf 	bl	8006220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b20      	cmp	r3, #32
 800590a:	d130      	bne.n	800596e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_UART_Transmit_IT+0x26>
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e029      	b.n	8005970 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit_IT+0x38>
 8005926:	2302      	movs	r3, #2
 8005928:	e022      	b.n	8005970 <HAL_UART_Transmit_IT+0x7e>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2221      	movs	r2, #33	; 0x21
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005968:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e000      	b.n	8005970 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
  }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b0ba      	sub	sp, #232	; 0xe8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_UART_IRQHandler+0x66>
 80059ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fb65 	bl	80060aa <UART_Receive_IT>
      return;
 80059e0:	e256      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80de 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x22c>
 80059ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80d1 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_UART_IRQHandler+0xae>
 8005a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0201 	orr.w	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_UART_IRQHandler+0xd2>
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0202 	orr.w	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_UART_IRQHandler+0xf6>
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x126>
 8005a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0208 	orr.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 81ed 	beq.w	8005e86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_UART_IRQHandler+0x14e>
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 faf0 	bl	80060aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <HAL_UART_IRQHandler+0x17a>
 8005aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04f      	beq.n	8005b96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9f8 	bl	8005eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d141      	bne.n	8005b8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3314      	adds	r3, #20
 8005b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1d9      	bne.n	8005b0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	4a7d      	ldr	r2, [pc, #500]	; (8005d58 <HAL_UART_IRQHandler+0x3dc>)
 8005b64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fc fca3 	bl	80024b6 <HAL_DMA_Abort_IT>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e00e      	b.n	8005ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f99a 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00a      	b.n	8005ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f996 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e006      	b.n	8005ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f992 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ba2:	e170      	b.n	8005e86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	bf00      	nop
    return;
 8005ba6:	e16e      	b.n	8005e86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	f040 814a 	bne.w	8005e46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8143 	beq.w	8005e46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 813c 	beq.w	8005e46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	f040 80b4 	bne.w	8005d5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8140 	beq.w	8005e8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f080 8139 	bcs.w	8005e8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2a:	f000 8088 	beq.w	8005d3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1d9      	bne.n	8005c2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e1      	bne.n	8005c7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3314      	adds	r3, #20
 8005cbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e3      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d20:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e3      	bne.n	8005cfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fc fb4c 	bl	80023d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f8c0 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d54:	e099      	b.n	8005e8a <HAL_UART_IRQHandler+0x50e>
 8005d56:	bf00      	nop
 8005d58:	08005fb3 	.word	0x08005fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 808b 	beq.w	8005e8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005da6:	647a      	str	r2, [r7, #68]	; 0x44
 8005da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e3      	bne.n	8005d82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dde:	633a      	str	r2, [r7, #48]	; 0x30
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	69b9      	ldr	r1, [r7, #24]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	617b      	str	r3, [r7, #20]
   return(result);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f848 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e44:	e023      	b.n	8005e8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_UART_IRQHandler+0x4ea>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8bb 	bl	8005fda <UART_Transmit_IT>
    return;
 8005e64:	e014      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <HAL_UART_IRQHandler+0x514>
 8005e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8fb 	bl	800607a <UART_EndTransmit_IT>
    return;
 8005e84:	e004      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
    return;
 8005e86:	bf00      	nop
 8005e88:	e002      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
      return;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <HAL_UART_IRQHandler+0x514>
      return;
 8005e8e:	bf00      	nop
  }
}
 8005e90:	37e8      	adds	r7, #232	; 0xe8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop

08005e98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b095      	sub	sp, #84	; 0x54
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f14:	643a      	str	r2, [r7, #64]	; 0x40
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3314      	adds	r3, #20
 8005f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e5      	bne.n	8005f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d119      	bne.n	8005f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f84:	61ba      	str	r2, [r7, #24]
 8005f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6979      	ldr	r1, [r7, #20]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	613b      	str	r3, [r7, #16]
   return(result);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fa6:	bf00      	nop
 8005fa8:	3754      	adds	r7, #84	; 0x54
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff ff77 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b21      	cmp	r3, #33	; 0x21
 8005fec:	d13e      	bne.n	800606c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	d114      	bne.n	8006022 <UART_Transmit_IT+0x48>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d110      	bne.n	8006022 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	1c9a      	adds	r2, r3, #2
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]
 8006020:	e008      	b.n	8006034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6211      	str	r1, [r2, #32]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29b      	uxth	r3, r3
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4619      	mov	r1, r3
 8006042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10f      	bne.n	8006068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fefc 	bl	8005e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b08c      	sub	sp, #48	; 0x30
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b22      	cmp	r3, #34	; 0x22
 80060bc:	f040 80ab 	bne.w	8006216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d117      	bne.n	80060fa <UART_Receive_IT+0x50>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d113      	bne.n	80060fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
 80060f8:	e026      	b.n	8006148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	d007      	beq.n	800611e <UART_Receive_IT+0x74>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <UART_Receive_IT+0x82>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e008      	b.n	800613e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4619      	mov	r1, r3
 8006156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006158:	2b00      	cmp	r3, #0
 800615a:	d15a      	bne.n	8006212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0220 	bic.w	r2, r2, #32
 800616a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800617a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	2b01      	cmp	r3, #1
 800619a:	d135      	bne.n	8006208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	613b      	str	r3, [r7, #16]
   return(result);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f023 0310 	bic.w	r3, r3, #16
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c2:	623a      	str	r2, [r7, #32]
 80061c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	69f9      	ldr	r1, [r7, #28]
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d10a      	bne.n	80061fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fe67 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
 8006206:	e002      	b.n	800620e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff fe4f 	bl	8005eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e002      	b.n	8006218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3730      	adds	r7, #48	; 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	b09f      	sub	sp, #124	; 0x7c
 8006226:	af00      	add	r7, sp, #0
 8006228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	68d9      	ldr	r1, [r3, #12]
 8006238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	ea40 0301 	orr.w	r3, r0, r1
 8006240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	431a      	orrs	r2, r3
 800624c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	431a      	orrs	r2, r3
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4313      	orrs	r3, r2
 8006258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800625a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006264:	f021 010c 	bic.w	r1, r1, #12
 8006268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800626e:	430b      	orrs	r3, r1
 8006270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	6999      	ldr	r1, [r3, #24]
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	ea40 0301 	orr.w	r3, r0, r1
 8006288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800628a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4bc5      	ldr	r3, [pc, #788]	; (80065a4 <UART_SetConfig+0x384>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d004      	beq.n	800629e <UART_SetConfig+0x7e>
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4bc3      	ldr	r3, [pc, #780]	; (80065a8 <UART_SetConfig+0x388>)
 800629a:	429a      	cmp	r2, r3
 800629c:	d103      	bne.n	80062a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800629e:	f7fe fe45 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 80062a2:	6778      	str	r0, [r7, #116]	; 0x74
 80062a4:	e002      	b.n	80062ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062a6:	f7fe fe2d 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 80062aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	f040 80b6 	bne.w	8006424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ba:	461c      	mov	r4, r3
 80062bc:	f04f 0500 	mov.w	r5, #0
 80062c0:	4622      	mov	r2, r4
 80062c2:	462b      	mov	r3, r5
 80062c4:	1891      	adds	r1, r2, r2
 80062c6:	6439      	str	r1, [r7, #64]	; 0x40
 80062c8:	415b      	adcs	r3, r3
 80062ca:	647b      	str	r3, [r7, #68]	; 0x44
 80062cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062d0:	1912      	adds	r2, r2, r4
 80062d2:	eb45 0303 	adc.w	r3, r5, r3
 80062d6:	f04f 0000 	mov.w	r0, #0
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	00d9      	lsls	r1, r3, #3
 80062e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062e4:	00d0      	lsls	r0, r2, #3
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	1911      	adds	r1, r2, r4
 80062ec:	6639      	str	r1, [r7, #96]	; 0x60
 80062ee:	416b      	adcs	r3, r5
 80062f0:	667b      	str	r3, [r7, #100]	; 0x64
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006300:	415b      	adcs	r3, r3
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800630c:	f7fa fb5a 	bl	80009c4 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4ba5      	ldr	r3, [pc, #660]	; (80065ac <UART_SetConfig+0x38c>)
 8006316:	fba3 2302 	umull	r2, r3, r3, r2
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	011e      	lsls	r6, r3, #4
 800631e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006320:	461c      	mov	r4, r3
 8006322:	f04f 0500 	mov.w	r5, #0
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	1891      	adds	r1, r2, r2
 800632c:	6339      	str	r1, [r7, #48]	; 0x30
 800632e:	415b      	adcs	r3, r3
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006336:	1912      	adds	r2, r2, r4
 8006338:	eb45 0303 	adc.w	r3, r5, r3
 800633c:	f04f 0000 	mov.w	r0, #0
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	00d9      	lsls	r1, r3, #3
 8006346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800634a:	00d0      	lsls	r0, r2, #3
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	1911      	adds	r1, r2, r4
 8006352:	65b9      	str	r1, [r7, #88]	; 0x58
 8006354:	416b      	adcs	r3, r5
 8006356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	461a      	mov	r2, r3
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	1891      	adds	r1, r2, r2
 8006364:	62b9      	str	r1, [r7, #40]	; 0x28
 8006366:	415b      	adcs	r3, r3
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800636e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006372:	f7fa fb27 	bl	80009c4 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4b8c      	ldr	r3, [pc, #560]	; (80065ac <UART_SetConfig+0x38c>)
 800637c:	fba3 1302 	umull	r1, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	2164      	movs	r1, #100	; 0x64
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	3332      	adds	r3, #50	; 0x32
 800638e:	4a87      	ldr	r2, [pc, #540]	; (80065ac <UART_SetConfig+0x38c>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800639c:	441e      	add	r6, r3
 800639e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a0:	4618      	mov	r0, r3
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	1894      	adds	r4, r2, r2
 80063ac:	623c      	str	r4, [r7, #32]
 80063ae:	415b      	adcs	r3, r3
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
 80063b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063b6:	1812      	adds	r2, r2, r0
 80063b8:	eb41 0303 	adc.w	r3, r1, r3
 80063bc:	f04f 0400 	mov.w	r4, #0
 80063c0:	f04f 0500 	mov.w	r5, #0
 80063c4:	00dd      	lsls	r5, r3, #3
 80063c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063ca:	00d4      	lsls	r4, r2, #3
 80063cc:	4622      	mov	r2, r4
 80063ce:	462b      	mov	r3, r5
 80063d0:	1814      	adds	r4, r2, r0
 80063d2:	653c      	str	r4, [r7, #80]	; 0x50
 80063d4:	414b      	adcs	r3, r1
 80063d6:	657b      	str	r3, [r7, #84]	; 0x54
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	461a      	mov	r2, r3
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	1891      	adds	r1, r2, r2
 80063e4:	61b9      	str	r1, [r7, #24]
 80063e6:	415b      	adcs	r3, r3
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063f2:	f7fa fae7 	bl	80009c4 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4b6c      	ldr	r3, [pc, #432]	; (80065ac <UART_SetConfig+0x38c>)
 80063fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	2164      	movs	r1, #100	; 0x64
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	3332      	adds	r3, #50	; 0x32
 800640e:	4a67      	ldr	r2, [pc, #412]	; (80065ac <UART_SetConfig+0x38c>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 0207 	and.w	r2, r3, #7
 800641a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4432      	add	r2, r6
 8006420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006422:	e0b9      	b.n	8006598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006426:	461c      	mov	r4, r3
 8006428:	f04f 0500 	mov.w	r5, #0
 800642c:	4622      	mov	r2, r4
 800642e:	462b      	mov	r3, r5
 8006430:	1891      	adds	r1, r2, r2
 8006432:	6139      	str	r1, [r7, #16]
 8006434:	415b      	adcs	r3, r3
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800643c:	1912      	adds	r2, r2, r4
 800643e:	eb45 0303 	adc.w	r3, r5, r3
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	00d9      	lsls	r1, r3, #3
 800644c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006450:	00d0      	lsls	r0, r2, #3
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	eb12 0804 	adds.w	r8, r2, r4
 800645a:	eb43 0905 	adc.w	r9, r3, r5
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	008b      	lsls	r3, r1, #2
 8006472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006476:	0082      	lsls	r2, r0, #2
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa faa2 	bl	80009c4 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4b49      	ldr	r3, [pc, #292]	; (80065ac <UART_SetConfig+0x38c>)
 8006486:	fba3 2302 	umull	r2, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	011e      	lsls	r6, r3, #4
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	4618      	mov	r0, r3
 8006492:	f04f 0100 	mov.w	r1, #0
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	1894      	adds	r4, r2, r2
 800649c:	60bc      	str	r4, [r7, #8]
 800649e:	415b      	adcs	r3, r3
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a6:	1812      	adds	r2, r2, r0
 80064a8:	eb41 0303 	adc.w	r3, r1, r3
 80064ac:	f04f 0400 	mov.w	r4, #0
 80064b0:	f04f 0500 	mov.w	r5, #0
 80064b4:	00dd      	lsls	r5, r3, #3
 80064b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064ba:	00d4      	lsls	r4, r2, #3
 80064bc:	4622      	mov	r2, r4
 80064be:	462b      	mov	r3, r5
 80064c0:	1814      	adds	r4, r2, r0
 80064c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80064c4:	414b      	adcs	r3, r1
 80064c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f04f 0100 	mov.w	r1, #0
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	008b      	lsls	r3, r1, #2
 80064dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064e0:	0082      	lsls	r2, r0, #2
 80064e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064e6:	f7fa fa6d 	bl	80009c4 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <UART_SetConfig+0x38c>)
 80064f0:	fba3 1302 	umull	r1, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	2164      	movs	r1, #100	; 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	3332      	adds	r3, #50	; 0x32
 8006502:	4a2a      	ldr	r2, [pc, #168]	; (80065ac <UART_SetConfig+0x38c>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650e:	441e      	add	r6, r3
 8006510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006512:	4618      	mov	r0, r3
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	1894      	adds	r4, r2, r2
 800651e:	603c      	str	r4, [r7, #0]
 8006520:	415b      	adcs	r3, r3
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006528:	1812      	adds	r2, r2, r0
 800652a:	eb41 0303 	adc.w	r3, r1, r3
 800652e:	f04f 0400 	mov.w	r4, #0
 8006532:	f04f 0500 	mov.w	r5, #0
 8006536:	00dd      	lsls	r5, r3, #3
 8006538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800653c:	00d4      	lsls	r4, r2, #3
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	eb12 0a00 	adds.w	sl, r2, r0
 8006546:	eb43 0b01 	adc.w	fp, r3, r1
 800654a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	f04f 0100 	mov.w	r1, #0
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	008b      	lsls	r3, r1, #2
 800655e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006562:	0082      	lsls	r2, r0, #2
 8006564:	4650      	mov	r0, sl
 8006566:	4659      	mov	r1, fp
 8006568:	f7fa fa2c 	bl	80009c4 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <UART_SetConfig+0x38c>)
 8006572:	fba3 1302 	umull	r1, r3, r3, r2
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	2164      	movs	r1, #100	; 0x64
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	3332      	adds	r3, #50	; 0x32
 8006584:	4a09      	ldr	r2, [pc, #36]	; (80065ac <UART_SetConfig+0x38c>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4432      	add	r2, r6
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	377c      	adds	r7, #124	; 0x7c
 800659c:	46bd      	mov	sp, r7
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	bf00      	nop
 80065a4:	40011000 	.word	0x40011000
 80065a8:	40011400 	.word	0x40011400
 80065ac:	51eb851f 	.word	0x51eb851f

080065b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b0:	b084      	sub	sp, #16
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	f107 001c 	add.w	r0, r7, #28
 80065be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d122      	bne.n	800660e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 fb1c 	bl	8007c40 <USB_CoreReset>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e01a      	b.n	8006644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fb10 	bl	8007c40 <USB_CoreReset>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
 8006636:	e005      	b.n	8006644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10b      	bne.n	8006662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f043 0206 	orr.w	r2, r3, #6
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800666e:	b004      	add	sp, #16
 8006670:	4770      	bx	lr
	...

08006674 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d165      	bne.n	8006754 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4a41      	ldr	r2, [pc, #260]	; (8006790 <USB_SetTurnaroundTime+0x11c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d906      	bls.n	800669e <USB_SetTurnaroundTime+0x2a>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4a40      	ldr	r2, [pc, #256]	; (8006794 <USB_SetTurnaroundTime+0x120>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d202      	bcs.n	800669e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006698:	230f      	movs	r3, #15
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e062      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4a3c      	ldr	r2, [pc, #240]	; (8006794 <USB_SetTurnaroundTime+0x120>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d306      	bcc.n	80066b4 <USB_SetTurnaroundTime+0x40>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4a3b      	ldr	r2, [pc, #236]	; (8006798 <USB_SetTurnaroundTime+0x124>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d202      	bcs.n	80066b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066ae:	230e      	movs	r3, #14
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	e057      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4a38      	ldr	r2, [pc, #224]	; (8006798 <USB_SetTurnaroundTime+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d306      	bcc.n	80066ca <USB_SetTurnaroundTime+0x56>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4a37      	ldr	r2, [pc, #220]	; (800679c <USB_SetTurnaroundTime+0x128>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d202      	bcs.n	80066ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066c4:	230d      	movs	r3, #13
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	e04c      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4a33      	ldr	r2, [pc, #204]	; (800679c <USB_SetTurnaroundTime+0x128>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d306      	bcc.n	80066e0 <USB_SetTurnaroundTime+0x6c>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a32      	ldr	r2, [pc, #200]	; (80067a0 <USB_SetTurnaroundTime+0x12c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d802      	bhi.n	80066e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066da:	230c      	movs	r3, #12
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	e041      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <USB_SetTurnaroundTime+0x12c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d906      	bls.n	80066f6 <USB_SetTurnaroundTime+0x82>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a2e      	ldr	r2, [pc, #184]	; (80067a4 <USB_SetTurnaroundTime+0x130>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d802      	bhi.n	80066f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066f0:	230b      	movs	r3, #11
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e036      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <USB_SetTurnaroundTime+0x130>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d906      	bls.n	800670c <USB_SetTurnaroundTime+0x98>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a29      	ldr	r2, [pc, #164]	; (80067a8 <USB_SetTurnaroundTime+0x134>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d802      	bhi.n	800670c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006706:	230a      	movs	r3, #10
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e02b      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <USB_SetTurnaroundTime+0x134>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d906      	bls.n	8006722 <USB_SetTurnaroundTime+0xae>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a25      	ldr	r2, [pc, #148]	; (80067ac <USB_SetTurnaroundTime+0x138>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d202      	bcs.n	8006722 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800671c:	2309      	movs	r3, #9
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	e020      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4a21      	ldr	r2, [pc, #132]	; (80067ac <USB_SetTurnaroundTime+0x138>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d306      	bcc.n	8006738 <USB_SetTurnaroundTime+0xc4>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a20      	ldr	r2, [pc, #128]	; (80067b0 <USB_SetTurnaroundTime+0x13c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d802      	bhi.n	8006738 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006732:	2308      	movs	r3, #8
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e015      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4a1d      	ldr	r2, [pc, #116]	; (80067b0 <USB_SetTurnaroundTime+0x13c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d906      	bls.n	800674e <USB_SetTurnaroundTime+0xda>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <USB_SetTurnaroundTime+0x140>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d202      	bcs.n	800674e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006748:	2307      	movs	r3, #7
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	e00a      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800674e:	2306      	movs	r3, #6
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e007      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800675a:	2309      	movs	r3, #9
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e001      	b.n	8006764 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006760:	2309      	movs	r3, #9
 8006762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	029b      	lsls	r3, r3, #10
 8006778:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800677c:	431a      	orrs	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	00d8acbf 	.word	0x00d8acbf
 8006794:	00e4e1c0 	.word	0x00e4e1c0
 8006798:	00f42400 	.word	0x00f42400
 800679c:	01067380 	.word	0x01067380
 80067a0:	011a499f 	.word	0x011a499f
 80067a4:	01312cff 	.word	0x01312cff
 80067a8:	014ca43f 	.word	0x014ca43f
 80067ac:	016e3600 	.word	0x016e3600
 80067b0:	01a6ab1f 	.word	0x01a6ab1f
 80067b4:	01e84800 	.word	0x01e84800

080067b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f043 0201 	orr.w	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d115      	bne.n	800684a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800682a:	2001      	movs	r0, #1
 800682c:	f7fb fc9e 	bl	800216c <HAL_Delay>
      ms++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 f972 	bl	8007b20 <USB_GetMode>
 800683c:	4603      	mov	r3, r0
 800683e:	2b01      	cmp	r3, #1
 8006840:	d01e      	beq.n	8006880 <USB_SetCurrentMode+0x84>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b31      	cmp	r3, #49	; 0x31
 8006846:	d9f0      	bls.n	800682a <USB_SetCurrentMode+0x2e>
 8006848:	e01a      	b.n	8006880 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d115      	bne.n	800687c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800685c:	2001      	movs	r0, #1
 800685e:	f7fb fc85 	bl	800216c <HAL_Delay>
      ms++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f959 	bl	8007b20 <USB_GetMode>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <USB_SetCurrentMode+0x84>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b31      	cmp	r3, #49	; 0x31
 8006878:	d9f0      	bls.n	800685c <USB_SetCurrentMode+0x60>
 800687a:	e001      	b.n	8006880 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e005      	b.n	800688c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b32      	cmp	r3, #50	; 0x32
 8006884:	d101      	bne.n	800688a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006894:	b084      	sub	sp, #16
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	e009      	b.n	80068c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3340      	adds	r3, #64	; 0x40
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3301      	adds	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b0e      	cmp	r3, #14
 80068cc:	d9f2      	bls.n	80068b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11c      	bne.n	800690e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e2:	f043 0302 	orr.w	r3, r3, #2
 80068e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
 800690c:	e00b      	b.n	8006926 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006938:	4619      	mov	r1, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	461a      	mov	r2, r3
 8006942:	680b      	ldr	r3, [r1, #0]
 8006944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	2b01      	cmp	r3, #1
 800694a:	d10c      	bne.n	8006966 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f945 	bl	8006be4 <USB_SetDevSpeed>
 800695a:	e008      	b.n	800696e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800695c:	2101      	movs	r1, #1
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f940 	bl	8006be4 <USB_SetDevSpeed>
 8006964:	e003      	b.n	800696e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006966:	2103      	movs	r1, #3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f93b 	bl	8006be4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800696e:	2110      	movs	r1, #16
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8f3 	bl	8006b5c <USB_FlushTxFifo>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f90f 	bl	8006ba4 <USB_FlushRxFifo>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	461a      	mov	r2, r3
 8006998:	2300      	movs	r3, #0
 800699a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	461a      	mov	r2, r3
 80069a4:	2300      	movs	r3, #0
 80069a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	461a      	mov	r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	e043      	b.n	8006a42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d0:	d118      	bne.n	8006a04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	461a      	mov	r2, r3
 80069e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e013      	b.n	8006a16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	461a      	mov	r2, r3
 80069fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e008      	b.n	8006a16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	461a      	mov	r2, r3
 8006a12:	2300      	movs	r3, #0
 8006a14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a22:	461a      	mov	r2, r3
 8006a24:	2300      	movs	r3, #0
 8006a26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d3b7      	bcc.n	80069ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e043      	b.n	8006ad8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a66:	d118      	bne.n	8006a9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e013      	b.n	8006aac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e008      	b.n	8006aac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2300      	movs	r3, #0
 8006abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	461a      	mov	r2, r3
 8006acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d3b7      	bcc.n	8006a50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	f043 0210 	orr.w	r2, r3, #16
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <USB_DevInit+0x2c4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f043 0208 	orr.w	r2, r3, #8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d107      	bne.n	8006b48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr
 8006b58:	803c3800 	.word	0x803c3800

08006b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	019b      	lsls	r3, r3, #6
 8006b6e:	f043 0220 	orr.w	r2, r3, #32
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <USB_FlushTxFifo+0x44>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d901      	bls.n	8006b86 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e006      	b.n	8006b94 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d0f1      	beq.n	8006b76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	00030d40 	.word	0x00030d40

08006ba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2210      	movs	r2, #16
 8006bb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <USB_FlushRxFifo+0x3c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e006      	b.n	8006bd4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d0f1      	beq.n	8006bb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	00030d40 	.word	0x00030d40

08006be4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4313      	orrs	r3, r2
 8006c06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b087      	sub	sp, #28
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0306 	and.w	r3, r3, #6
 8006c2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]
 8006c3a:	e00a      	b.n	8006c52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d002      	beq.n	8006c48 <USB_GetDevSpeed+0x32>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b06      	cmp	r3, #6
 8006c46:	d102      	bne.n	8006c4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	75fb      	strb	r3, [r7, #23]
 8006c4c:	e001      	b.n	8006c52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c4e:	230f      	movs	r3, #15
 8006c50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d13a      	bne.n	8006cf2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d155      	bne.n	8006d60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	78db      	ldrb	r3, [r3, #3]
 8006cce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	059b      	lsls	r3, r3, #22
 8006cd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e036      	b.n	8006d60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	2101      	movs	r1, #1
 8006d04:	fa01 f303 	lsl.w	r3, r1, r3
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d11a      	bne.n	8006d60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	78db      	ldrb	r3, [r3, #3]
 8006d44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d46:	430b      	orrs	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d161      	bne.n	8006e50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da2:	d11f      	bne.n	8006de4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006de2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e04:	4013      	ands	r3, r2
 8006e06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	2101      	movs	r1, #1
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e28:	4013      	ands	r3, r2
 8006e2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	0159      	lsls	r1, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	440b      	add	r3, r1
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	4619      	mov	r1, r3
 8006e48:	4b35      	ldr	r3, [pc, #212]	; (8006f20 <USB_DeactivateEndpoint+0x1b0>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	600b      	str	r3, [r1, #0]
 8006e4e:	e060      	b.n	8006f12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e66:	d11f      	bne.n	8006ea8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	2101      	movs	r1, #1
 8006eba:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec8:	4013      	ands	r3, r2
 8006eca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2101      	movs	r1, #1
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	68f9      	ldr	r1, [r7, #12]
 8006ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eec:	4013      	ands	r3, r2
 8006eee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	0159      	lsls	r1, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	440b      	add	r3, r1
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <USB_DeactivateEndpoint+0x1b4>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	ec337800 	.word	0xec337800
 8006f24:	eff37800 	.word	0xeff37800

08006f28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	f040 815c 	bne.w	8007202 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d132      	bne.n	8006fb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	0151      	lsls	r1, r2, #5
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	440a      	add	r2, r1
 8006f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	0cdb      	lsrs	r3, r3, #19
 8006fb2:	04db      	lsls	r3, r3, #19
 8006fb4:	6113      	str	r3, [r2, #16]
 8006fb6:	e074      	b.n	80070a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd2:	0cdb      	lsrs	r3, r3, #19
 8006fd4:	04db      	lsls	r3, r3, #19
 8006fd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ff6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6959      	ldr	r1, [r3, #20]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	440b      	add	r3, r1
 8007014:	1e59      	subs	r1, r3, #1
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	fbb1 f3f3 	udiv	r3, r1, r3
 800701e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007020:	4b9d      	ldr	r3, [pc, #628]	; (8007298 <USB_EPStartXfer+0x370>)
 8007022:	400b      	ands	r3, r1
 8007024:	69b9      	ldr	r1, [r7, #24]
 8007026:	0148      	lsls	r0, r1, #5
 8007028:	69f9      	ldr	r1, [r7, #28]
 800702a:	4401      	add	r1, r0
 800702c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007030:	4313      	orrs	r3, r2
 8007032:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	691a      	ldr	r2, [r3, #16]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704a:	69b9      	ldr	r1, [r7, #24]
 800704c:	0148      	lsls	r0, r1, #5
 800704e:	69f9      	ldr	r1, [r7, #28]
 8007050:	4401      	add	r1, r0
 8007052:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007056:	4313      	orrs	r3, r2
 8007058:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	78db      	ldrb	r3, [r3, #3]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d11f      	bne.n	80070a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007080:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d14b      	bne.n	8007140 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	461a      	mov	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	78db      	ldrb	r3, [r3, #3]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d128      	bne.n	800711e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d110      	bne.n	80070fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	e00f      	b.n	800711e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	e12f      	b.n	80073a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800715e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	78db      	ldrb	r3, [r3, #3]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d015      	beq.n	8007194 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8117 	beq.w	80073a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	2101      	movs	r1, #1
 8007184:	fa01 f303 	lsl.w	r3, r1, r3
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800718e:	4313      	orrs	r3, r2
 8007190:	634b      	str	r3, [r1, #52]	; 0x34
 8007192:	e105      	b.n	80073a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d110      	bne.n	80071c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	e00f      	b.n	80071e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	68d9      	ldr	r1, [r3, #12]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	781a      	ldrb	r2, [r3, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	b298      	uxth	r0, r3
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4603      	mov	r3, r0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fa2b 	bl	8007656 <USB_WritePacket>
 8007200:	e0ce      	b.n	80073a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721c:	0cdb      	lsrs	r3, r3, #19
 800721e:	04db      	lsls	r3, r3, #19
 8007220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007244:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d126      	bne.n	800729c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007264:	69b9      	ldr	r1, [r7, #24]
 8007266:	0148      	lsls	r0, r1, #5
 8007268:	69f9      	ldr	r1, [r7, #28]
 800726a:	4401      	add	r1, r0
 800726c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007270:	4313      	orrs	r3, r2
 8007272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007292:	6113      	str	r3, [r2, #16]
 8007294:	e036      	b.n	8007304 <USB_EPStartXfer+0x3dc>
 8007296:	bf00      	nop
 8007298:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4413      	add	r3, r2
 80072a6:	1e5a      	subs	r2, r3, #1
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	8afb      	ldrh	r3, [r7, #22]
 80072c2:	04d9      	lsls	r1, r3, #19
 80072c4:	4b39      	ldr	r3, [pc, #228]	; (80073ac <USB_EPStartXfer+0x484>)
 80072c6:	400b      	ands	r3, r1
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	0148      	lsls	r0, r1, #5
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	4401      	add	r1, r0
 80072d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072d4:	4313      	orrs	r3, r2
 80072d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	8af9      	ldrh	r1, [r7, #22]
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	0148      	lsls	r0, r1, #5
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	4401      	add	r1, r0
 80072fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007300:	4313      	orrs	r3, r2
 8007302:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d10d      	bne.n	8007326 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	460a      	mov	r2, r1
 8007324:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d128      	bne.n	8007380 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d110      	bne.n	8007360 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e00f      	b.n	8007380 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800739e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	1ff80000 	.word	0x1ff80000

080073b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 80cd 	bne.w	800756c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d132      	bne.n	8007440 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	440a      	add	r2, r1
 8007414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800741c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	440a      	add	r2, r1
 8007434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007438:	0cdb      	lsrs	r3, r3, #19
 800743a:	04db      	lsls	r3, r3, #19
 800743c:	6113      	str	r3, [r2, #16]
 800743e:	e04e      	b.n	80074de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	440a      	add	r2, r1
 8007456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745a:	0cdb      	lsrs	r3, r3, #19
 800745c:	04db      	lsls	r3, r3, #19
 800745e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800747e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007482:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	429a      	cmp	r2, r3
 800748e:	d903      	bls.n	8007498 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ce:	6939      	ldr	r1, [r7, #16]
 80074d0:	0148      	lsls	r0, r1, #5
 80074d2:	6979      	ldr	r1, [r7, #20]
 80074d4:	4401      	add	r1, r0
 80074d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074da:	4313      	orrs	r3, r2
 80074dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d11e      	bne.n	8007522 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	461a      	mov	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e092      	b.n	8007648 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007540:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d07e      	beq.n	8007648 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	2101      	movs	r1, #1
 800755c:	fa01 f303 	lsl.w	r3, r1, r3
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007566:	4313      	orrs	r3, r2
 8007568:	634b      	str	r3, [r1, #52]	; 0x34
 800756a:	e06d      	b.n	8007648 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007586:	0cdb      	lsrs	r3, r3, #19
 8007588:	04db      	lsls	r3, r3, #19
 800758a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f6:	6939      	ldr	r1, [r7, #16]
 80075f8:	0148      	lsls	r0, r1, #5
 80075fa:	6979      	ldr	r1, [r7, #20]
 80075fc:	4401      	add	r1, r0
 80075fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007602:	4313      	orrs	r3, r2
 8007604:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10d      	bne.n	8007628 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68d9      	ldr	r1, [r3, #12]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007624:	460a      	mov	r2, r1
 8007626:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007656:	b480      	push	{r7}
 8007658:	b089      	sub	sp, #36	; 0x24
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	4611      	mov	r1, r2
 8007662:	461a      	mov	r2, r3
 8007664:	460b      	mov	r3, r1
 8007666:	71fb      	strb	r3, [r7, #7]
 8007668:	4613      	mov	r3, r2
 800766a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007678:	2b00      	cmp	r3, #0
 800767a:	d123      	bne.n	80076c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800767c:	88bb      	ldrh	r3, [r7, #4]
 800767e:	3303      	adds	r3, #3
 8007680:	089b      	lsrs	r3, r3, #2
 8007682:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	e018      	b.n	80076bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	031a      	lsls	r2, r3, #12
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007696:	461a      	mov	r2, r3
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	3301      	adds	r3, #1
 80076a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	3301      	adds	r3, #1
 80076a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3301      	adds	r3, #1
 80076ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	3301      	adds	r3, #1
 80076b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	3301      	adds	r3, #1
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d3e2      	bcc.n	800768a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3724      	adds	r7, #36	; 0x24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b08b      	sub	sp, #44	; 0x2c
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	4613      	mov	r3, r2
 80076de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	089b      	lsrs	r3, r3, #2
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	623b      	str	r3, [r7, #32]
 80076fc:	e014      	b.n	8007728 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	601a      	str	r2, [r3, #0]
    pDest++;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	3301      	adds	r3, #1
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	3301      	adds	r3, #1
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	3301      	adds	r3, #1
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	3301      	adds	r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	3301      	adds	r3, #1
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	6a3a      	ldr	r2, [r7, #32]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	429a      	cmp	r2, r3
 800772e:	d3e6      	bcc.n	80076fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007730:	8bfb      	ldrh	r3, [r7, #30]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01e      	beq.n	8007774 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007740:	461a      	mov	r2, r3
 8007742:	f107 0310 	add.w	r3, r7, #16
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	b2da      	uxtb	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	701a      	strb	r2, [r3, #0]
      i++;
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	3301      	adds	r3, #1
 8007760:	623b      	str	r3, [r7, #32]
      pDest++;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	3301      	adds	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007768:	8bfb      	ldrh	r3, [r7, #30]
 800776a:	3b01      	subs	r3, #1
 800776c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800776e:	8bfb      	ldrh	r3, [r7, #30]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1ea      	bne.n	800774a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007776:	4618      	mov	r0, r3
 8007778:	372c      	adds	r7, #44	; 0x2c
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d12c      	bne.n	80077f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	db12      	blt.n	80077d6 <USB_EPSetStall+0x54>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00f      	beq.n	80077d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	0151      	lsls	r1, r2, #5
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	440a      	add	r2, r1
 80077ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	e02b      	b.n	8007850 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	db12      	blt.n	8007830 <USB_EPSetStall+0xae>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800782e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800784e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d128      	bne.n	80078cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007898:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	78db      	ldrb	r3, [r3, #3]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d003      	beq.n	80078aa <USB_EPClearStall+0x4c>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	78db      	ldrb	r3, [r3, #3]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d138      	bne.n	800791c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e027      	b.n	800791c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d003      	beq.n	80078fc <USB_EPClearStall+0x9e>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	78db      	ldrb	r3, [r3, #3]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d10f      	bne.n	800791c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800791a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007948:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800794c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007964:	4313      	orrs	r3, r2
 8007966:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007990:	f023 0303 	bic.w	r3, r3, #3
 8007994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a4:	f023 0302 	bic.w	r3, r3, #2
 80079a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e6:	f043 0302 	orr.w	r3, r3, #2
 80079ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4013      	ands	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	0c1b      	lsrs	r3, r3, #16
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	b29b      	uxth	r3, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
 8007af4:	01db      	lsls	r3, r3, #7
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b12:	68bb      	ldr	r3, [r7, #8]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	333c      	adds	r3, #60	; 0x3c
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4a26      	ldr	r2, [pc, #152]	; (8007c3c <USB_EP0_OutStart+0xb8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d90a      	bls.n	8007bbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb8:	d101      	bne.n	8007bbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e037      	b.n	8007c2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f043 0318 	orr.w	r3, r3, #24
 8007bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d10f      	bne.n	8007c2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	4f54300a 	.word	0x4f54300a

08007c40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <USB_CoreReset+0x60>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d901      	bls.n	8007c5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e01a      	b.n	8007c92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	daf3      	bge.n	8007c4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	f043 0201 	orr.w	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <USB_CoreReset+0x60>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d901      	bls.n	8007c84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e006      	b.n	8007c92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d0f1      	beq.n	8007c74 <USB_CoreReset+0x34>

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	00030d40 	.word	0x00030d40

08007ca4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cb4:	f002 f972 	bl	8009f9c <USBD_static_malloc>
 8007cb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e066      	b.n	8007d9a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7c1b      	ldrb	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d119      	bne.n	8007d10 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	2181      	movs	r1, #129	; 0x81
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f002 f836 	bl	8009d56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 f82c 	bl	8009d56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2210      	movs	r2, #16
 8007d0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007d0e:	e016      	b.n	8007d3e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d10:	2340      	movs	r3, #64	; 0x40
 8007d12:	2202      	movs	r2, #2
 8007d14:	2181      	movs	r1, #129	; 0x81
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f002 f81d 	bl	8009d56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	2202      	movs	r2, #2
 8007d26:	2101      	movs	r1, #1
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f002 f814 	bl	8009d56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2210      	movs	r2, #16
 8007d3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d3e:	2308      	movs	r3, #8
 8007d40:	2203      	movs	r2, #3
 8007d42:	2182      	movs	r1, #130	; 0x82
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 f806 	bl	8009d56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7c1b      	ldrb	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f002 f8d7 	bl	8009f34 <USBD_LL_PrepareReceive>
 8007d86:	e007      	b.n	8007d98 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d8e:	2340      	movs	r3, #64	; 0x40
 8007d90:	2101      	movs	r1, #1
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f002 f8ce 	bl	8009f34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007dae:	2181      	movs	r1, #129	; 0x81
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fff6 	bl	8009da2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 ffef 	bl	8009da2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007dcc:	2182      	movs	r1, #130	; 0x82
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 ffe7 	bl	8009da2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 f8da 	bl	8009fb8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0af      	b.n	8007fa0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d03f      	beq.n	8007ecc <USBD_CDC_Setup+0xb4>
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	f040 809f 	bne.w	8007f90 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	88db      	ldrh	r3, [r3, #6]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d02e      	beq.n	8007eb8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b25b      	sxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da16      	bge.n	8007e92 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007e70:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	88d2      	ldrh	r2, [r2, #6]
 8007e76:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	88db      	ldrh	r3, [r3, #6]
 8007e7c:	2b07      	cmp	r3, #7
 8007e7e:	bf28      	it	cs
 8007e80:	2307      	movcs	r3, #7
 8007e82:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	89fa      	ldrh	r2, [r7, #14]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fb19 	bl	80094c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007e90:	e085      	b.n	8007f9e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	785a      	ldrb	r2, [r3, #1]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ea8:	6939      	ldr	r1, [r7, #16]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fb32 	bl	800951a <USBD_CtlPrepareRx>
      break;
 8007eb6:	e072      	b.n	8007f9e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	7850      	ldrb	r0, [r2, #1]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	4798      	blx	r3
      break;
 8007eca:	e068      	b.n	8007f9e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b0b      	cmp	r3, #11
 8007ed2:	d852      	bhi.n	8007f7a <USBD_CDC_Setup+0x162>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <USBD_CDC_Setup+0xc4>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f0d 	.word	0x08007f0d
 8007ee0:	08007f89 	.word	0x08007f89
 8007ee4:	08007f7b 	.word	0x08007f7b
 8007ee8:	08007f7b 	.word	0x08007f7b
 8007eec:	08007f7b 	.word	0x08007f7b
 8007ef0:	08007f7b 	.word	0x08007f7b
 8007ef4:	08007f7b 	.word	0x08007f7b
 8007ef8:	08007f7b 	.word	0x08007f7b
 8007efc:	08007f7b 	.word	0x08007f7b
 8007f00:	08007f7b 	.word	0x08007f7b
 8007f04:	08007f37 	.word	0x08007f37
 8007f08:	08007f61 	.word	0x08007f61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d107      	bne.n	8007f28 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f18:	f107 030a 	add.w	r3, r7, #10
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 face 	bl	80094c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f26:	e032      	b.n	8007f8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fa58 	bl	80093e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f30:	2303      	movs	r3, #3
 8007f32:	75fb      	strb	r3, [r7, #23]
          break;
 8007f34:	e02b      	b.n	8007f8e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d107      	bne.n	8007f52 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f42:	f107 030d 	add.w	r3, r7, #13
 8007f46:	2201      	movs	r2, #1
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fab9 	bl	80094c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f50:	e01d      	b.n	8007f8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fa43 	bl	80093e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5e:	e016      	b.n	8007f8e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d00f      	beq.n	8007f8c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fa36 	bl	80093e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f74:	2303      	movs	r3, #3
 8007f76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f78:	e008      	b.n	8007f8c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 fa2f 	bl	80093e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f82:	2303      	movs	r3, #3
 8007f84:	75fb      	strb	r3, [r7, #23]
          break;
 8007f86:	e002      	b.n	8007f8e <USBD_CDC_Setup+0x176>
          break;
 8007f88:	bf00      	nop
 8007f8a:	e008      	b.n	8007f9e <USBD_CDC_Setup+0x186>
          break;
 8007f8c:	bf00      	nop
      }
      break;
 8007f8e:	e006      	b.n	8007f9e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 fa24 	bl	80093e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e04f      	b.n	800806a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3318      	adds	r3, #24
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d029      	beq.n	800803c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fe8:	78fa      	ldrb	r2, [r7, #3]
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	3318      	adds	r3, #24
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	78f9      	ldrb	r1, [r7, #3]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	460b      	mov	r3, r1
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4403      	add	r3, r0
 8008008:	3344      	adds	r3, #68	; 0x44
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008010:	fb03 f301 	mul.w	r3, r3, r1
 8008014:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008016:	2b00      	cmp	r3, #0
 8008018:	d110      	bne.n	800803c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	3318      	adds	r3, #24
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800802e:	78f9      	ldrb	r1, [r7, #3]
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 ff5c 	bl	8009ef2 <USBD_LL_Transmit>
 800803a:	e015      	b.n	8008068 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008084:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	e015      	b.n	80080c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 ff6c 	bl	8009f76 <USBD_LL_GetRxDataSize>
 800809e:	4602      	mov	r2, r0
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080ba:	4611      	mov	r1, r2
 80080bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	e01b      	b.n	800811a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d015      	beq.n	8008118 <USBD_CDC_EP0_RxReady+0x50>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080f2:	2bff      	cmp	r3, #255	; 0xff
 80080f4:	d010      	beq.n	8008118 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008104:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800810c:	b292      	uxth	r2, r2
 800810e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	22ff      	movs	r2, #255	; 0xff
 8008114:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2243      	movs	r2, #67	; 0x43
 8008130:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	200000a8 	.word	0x200000a8

08008144 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2243      	movs	r2, #67	; 0x43
 8008150:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008152:	4b03      	ldr	r3, [pc, #12]	; (8008160 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20000064 	.word	0x20000064

08008164 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2243      	movs	r2, #67	; 0x43
 8008170:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008172:	4b03      	ldr	r3, [pc, #12]	; (8008180 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	200000ec 	.word	0x200000ec

08008184 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220a      	movs	r2, #10
 8008190:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008192:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20000020 	.word	0x20000020

080081a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e004      	b.n	80081c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b087      	sub	sp, #28
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e008      	b.n	80081fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	e004      	b.n	8008230 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800824a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800825a:	2303      	movs	r3, #3
 800825c:	e01a      	b.n	8008294 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008264:	2b00      	cmp	r3, #0
 8008266:	d114      	bne.n	8008292 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2201      	movs	r2, #1
 800826c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008286:	2181      	movs	r1, #129	; 0x81
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fe32 	bl	8009ef2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e016      	b.n	80082e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7c1b      	ldrb	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082cc:	2101      	movs	r1, #1
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fe30 	bl	8009f34 <USBD_LL_PrepareReceive>
 80082d4:	e007      	b.n	80082e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	2101      	movs	r1, #1
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fe27 	bl	8009f34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008304:	2303      	movs	r3, #3
 8008306:	e01f      	b.n	8008348 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	79fa      	ldrb	r2, [r7, #7]
 800833a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f001 fca3 	bl	8009c88 <USBD_LL_Init>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	e016      	b.n	8008396 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	f107 020e 	add.w	r2, r7, #14
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	4602      	mov	r2, r0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fcba 	bl	8009d20 <USBD_LL_Start>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	4611      	mov	r1, r2
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
  }

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 ff90 	bl	800936c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800845a:	461a      	mov	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	2b02      	cmp	r3, #2
 800846e:	d01a      	beq.n	80084a6 <USBD_LL_SetupStage+0x72>
 8008470:	2b02      	cmp	r3, #2
 8008472:	d822      	bhi.n	80084ba <USBD_LL_SetupStage+0x86>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <USBD_LL_SetupStage+0x4a>
 8008478:	2b01      	cmp	r3, #1
 800847a:	d00a      	beq.n	8008492 <USBD_LL_SetupStage+0x5e>
 800847c:	e01d      	b.n	80084ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa62 	bl	8008950 <USBD_StdDevReq>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]
      break;
 8008490:	e020      	b.n	80084d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fac6 	bl	8008a2c <USBD_StdItfReq>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
      break;
 80084a4:	e016      	b.n	80084d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fb05 	bl	8008abe <USBD_StdEPReq>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
      break;
 80084b8:	e00c      	b.n	80084d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 fc89 	bl	8009de0 <USBD_LL_StallEP>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
      break;
 80084d2:	bf00      	nop
  }

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	460b      	mov	r3, r1
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d138      	bne.n	8008564 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008500:	2b03      	cmp	r3, #3
 8008502:	d14a      	bne.n	800859a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	429a      	cmp	r2, r3
 800850e:	d913      	bls.n	8008538 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	1ad2      	subs	r2, r2, r3
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	4293      	cmp	r3, r2
 8008528:	bf28      	it	cs
 800852a:	4613      	movcs	r3, r2
 800852c:	461a      	mov	r2, r3
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f001 f80f 	bl	8009554 <USBD_CtlContinueRx>
 8008536:	e030      	b.n	800859a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b03      	cmp	r3, #3
 8008542:	d10b      	bne.n	800855c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f001 f80a 	bl	8009576 <USBD_CtlSendStatus>
 8008562:	e01a      	b.n	800859a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b03      	cmp	r3, #3
 800856e:	d114      	bne.n	800859a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00e      	beq.n	800859a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	7afa      	ldrb	r2, [r7, #11]
 8008586:	4611      	mov	r1, r2
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	4798      	blx	r3
 800858c:	4603      	mov	r3, r0
 800858e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	e000      	b.n	800859c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	460b      	mov	r3, r1
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d16b      	bne.n	8008690 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3314      	adds	r3, #20
 80085bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d156      	bne.n	8008676 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d914      	bls.n	80085fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	1ad2      	subs	r2, r2, r3
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	461a      	mov	r2, r3
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 ff84 	bl	80094f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f0:	2300      	movs	r3, #0
 80085f2:	2200      	movs	r2, #0
 80085f4:	2100      	movs	r1, #0
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f001 fc9c 	bl	8009f34 <USBD_LL_PrepareReceive>
 80085fc:	e03b      	b.n	8008676 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	429a      	cmp	r2, r3
 8008608:	d11c      	bne.n	8008644 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008612:	429a      	cmp	r2, r3
 8008614:	d316      	bcc.n	8008644 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008620:	429a      	cmp	r2, r3
 8008622:	d20f      	bcs.n	8008644 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 ff65 	bl	80094f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	2100      	movs	r1, #0
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f001 fc79 	bl	8009f34 <USBD_LL_PrepareReceive>
 8008642:	e018      	b.n	8008676 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b03      	cmp	r3, #3
 800864e:	d10b      	bne.n	8008668 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008668:	2180      	movs	r1, #128	; 0x80
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f001 fbb8 	bl	8009de0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 ff93 	bl	800959c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800867c:	2b01      	cmp	r3, #1
 800867e:	d122      	bne.n	80086c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff fe98 	bl	80083b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800868e:	e01a      	b.n	80086c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b03      	cmp	r3, #3
 800869a:	d114      	bne.n	80086c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	7afa      	ldrb	r2, [r7, #11]
 80086b2:	4611      	mov	r1, r2
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	4798      	blx	r3
 80086b8:	4603      	mov	r3, r0
 80086ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	e000      	b.n	80086c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008700:	2303      	movs	r3, #3
 8008702:	e02f      	b.n	8008764 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00f      	beq.n	800872e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6852      	ldr	r2, [r2, #4]
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	4611      	mov	r1, r2
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800872e:	2340      	movs	r3, #64	; 0x40
 8008730:	2200      	movs	r2, #0
 8008732:	2100      	movs	r1, #0
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 fb0e 	bl	8009d56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2240      	movs	r2, #64	; 0x40
 8008746:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800874a:	2340      	movs	r3, #64	; 0x40
 800874c:	2200      	movs	r2, #0
 800874e:	2180      	movs	r1, #128	; 0x80
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 fb00 	bl	8009d56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2240      	movs	r2, #64	; 0x40
 8008760:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879a:	b2da      	uxtb	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2204      	movs	r2, #4
 80087a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d106      	bne.n	80087da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e012      	b.n	8008824 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b03      	cmp	r3, #3
 8008808:	d10b      	bne.n	8008822 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008842:	2303      	movs	r3, #3
 8008844:	e014      	b.n	8008870 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b03      	cmp	r3, #3
 8008850:	d10d      	bne.n	800886e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	4611      	mov	r1, r2
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	e014      	b.n	80088bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b03      	cmp	r3, #3
 800889c:	d10d      	bne.n	80088ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d007      	beq.n	80088ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	4611      	mov	r1, r2
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d009      	beq.n	8008908 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6852      	ldr	r2, [r2, #4]
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	4611      	mov	r1, r2
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
  }

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008912:	b480      	push	{r7}
 8008914:	b087      	sub	sp, #28
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	3301      	adds	r3, #1
 8008928:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008930:	8a3b      	ldrh	r3, [r7, #16]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	b21a      	sxth	r2, r3
 8008936:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800893a:	4313      	orrs	r3, r2
 800893c:	b21b      	sxth	r3, r3
 800893e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008940:	89fb      	ldrh	r3, [r7, #14]
}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d005      	beq.n	8008976 <USBD_StdDevReq+0x26>
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d853      	bhi.n	8008a16 <USBD_StdDevReq+0xc6>
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <USBD_StdDevReq+0x3a>
 8008972:	2b20      	cmp	r3, #32
 8008974:	d14f      	bne.n	8008a16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
      break;
 8008988:	e04a      	b.n	8008a20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	2b09      	cmp	r3, #9
 8008990:	d83b      	bhi.n	8008a0a <USBD_StdDevReq+0xba>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <USBD_StdDevReq+0x48>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	080089ed 	.word	0x080089ed
 800899c:	08008a01 	.word	0x08008a01
 80089a0:	08008a0b 	.word	0x08008a0b
 80089a4:	080089f7 	.word	0x080089f7
 80089a8:	08008a0b 	.word	0x08008a0b
 80089ac:	080089cb 	.word	0x080089cb
 80089b0:	080089c1 	.word	0x080089c1
 80089b4:	08008a0b 	.word	0x08008a0b
 80089b8:	080089e3 	.word	0x080089e3
 80089bc:	080089d5 	.word	0x080089d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f9de 	bl	8008d84 <USBD_GetDescriptor>
          break;
 80089c8:	e024      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fb43 	bl	8009058 <USBD_SetAddress>
          break;
 80089d2:	e01f      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fb82 	bl	80090e0 <USBD_SetConfig>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
          break;
 80089e0:	e018      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fc21 	bl	800922c <USBD_GetConfig>
          break;
 80089ea:	e013      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fc52 	bl	8009298 <USBD_GetStatus>
          break;
 80089f4:	e00e      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fc81 	bl	8009300 <USBD_SetFeature>
          break;
 80089fe:	e009      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fc90 	bl	8009328 <USBD_ClrFeature>
          break;
 8008a08:	e004      	b.n	8008a14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fce7 	bl	80093e0 <USBD_CtlError>
          break;
 8008a12:	bf00      	nop
      }
      break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fce1 	bl	80093e0 <USBD_CtlError>
      break;
 8008a1e:	bf00      	nop
  }

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop

08008a2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	d005      	beq.n	8008a52 <USBD_StdItfReq+0x26>
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d82f      	bhi.n	8008aaa <USBD_StdItfReq+0x7e>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <USBD_StdItfReq+0x26>
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d12b      	bne.n	8008aaa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d81d      	bhi.n	8008a9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	889b      	ldrh	r3, [r3, #4]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d813      	bhi.n	8008a92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	4798      	blx	r3
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	88db      	ldrh	r3, [r3, #6]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d110      	bne.n	8008aa6 <USBD_StdItfReq+0x7a>
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10d      	bne.n	8008aa6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fd73 	bl	8009576 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a90:	e009      	b.n	8008aa6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fca3 	bl	80093e0 <USBD_CtlError>
          break;
 8008a9a:	e004      	b.n	8008aa6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc9e 	bl	80093e0 <USBD_CtlError>
          break;
 8008aa4:	e000      	b.n	8008aa8 <USBD_StdItfReq+0x7c>
          break;
 8008aa6:	bf00      	nop
      }
      break;
 8008aa8:	e004      	b.n	8008ab4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc97 	bl	80093e0 <USBD_CtlError>
      break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	889b      	ldrh	r3, [r3, #4]
 8008ad0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d007      	beq.n	8008aee <USBD_StdEPReq+0x30>
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	f200 8145 	bhi.w	8008d6e <USBD_StdEPReq+0x2b0>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00c      	beq.n	8008b02 <USBD_StdEPReq+0x44>
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	f040 8140 	bne.w	8008d6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
      break;
 8008b00:	e13a      	b.n	8008d78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d007      	beq.n	8008b1a <USBD_StdEPReq+0x5c>
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	f300 8129 	bgt.w	8008d62 <USBD_StdEPReq+0x2a4>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d07f      	beq.n	8008c14 <USBD_StdEPReq+0x156>
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d03c      	beq.n	8008b92 <USBD_StdEPReq+0xd4>
 8008b18:	e123      	b.n	8008d62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d002      	beq.n	8008b2c <USBD_StdEPReq+0x6e>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d016      	beq.n	8008b58 <USBD_StdEPReq+0x9a>
 8008b2a:	e02c      	b.n	8008b86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <USBD_StdEPReq+0x90>
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b80      	cmp	r3, #128	; 0x80
 8008b36:	d00a      	beq.n	8008b4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f94f 	bl	8009de0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f94b 	bl	8009de0 <USBD_LL_StallEP>
 8008b4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b4c:	e020      	b.n	8008b90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fc45 	bl	80093e0 <USBD_CtlError>
              break;
 8008b56:	e01b      	b.n	8008b90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	885b      	ldrh	r3, [r3, #2]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10e      	bne.n	8008b7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00b      	beq.n	8008b7e <USBD_StdEPReq+0xc0>
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b80      	cmp	r3, #128	; 0x80
 8008b6a:	d008      	beq.n	8008b7e <USBD_StdEPReq+0xc0>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	88db      	ldrh	r3, [r3, #6]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 f931 	bl	8009de0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fcf9 	bl	8009576 <USBD_CtlSendStatus>

              break;
 8008b84:	e004      	b.n	8008b90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fc29 	bl	80093e0 <USBD_CtlError>
              break;
 8008b8e:	bf00      	nop
          }
          break;
 8008b90:	e0ec      	b.n	8008d6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d002      	beq.n	8008ba4 <USBD_StdEPReq+0xe6>
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d016      	beq.n	8008bd0 <USBD_StdEPReq+0x112>
 8008ba2:	e030      	b.n	8008c06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00d      	beq.n	8008bc6 <USBD_StdEPReq+0x108>
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b80      	cmp	r3, #128	; 0x80
 8008bae:	d00a      	beq.n	8008bc6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 f913 	bl	8009de0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bba:	2180      	movs	r1, #128	; 0x80
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 f90f 	bl	8009de0 <USBD_LL_StallEP>
 8008bc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bc4:	e025      	b.n	8008c12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc09 	bl	80093e0 <USBD_CtlError>
              break;
 8008bce:	e020      	b.n	8008c12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	885b      	ldrh	r3, [r3, #2]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d11b      	bne.n	8008c10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 f919 	bl	8009e1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fcc2 	bl	8009576 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	4798      	blx	r3
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c04:	e004      	b.n	8008c10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fbe9 	bl	80093e0 <USBD_CtlError>
              break;
 8008c0e:	e000      	b.n	8008c12 <USBD_StdEPReq+0x154>
              break;
 8008c10:	bf00      	nop
          }
          break;
 8008c12:	e0ab      	b.n	8008d6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <USBD_StdEPReq+0x168>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d032      	beq.n	8008c8a <USBD_StdEPReq+0x1cc>
 8008c24:	e097      	b.n	8008d56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d007      	beq.n	8008c3c <USBD_StdEPReq+0x17e>
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d004      	beq.n	8008c3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fbd3 	bl	80093e0 <USBD_CtlError>
                break;
 8008c3a:	e091      	b.n	8008d60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da0b      	bge.n	8008c5c <USBD_StdEPReq+0x19e>
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	3310      	adds	r3, #16
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	3304      	adds	r3, #4
 8008c5a:	e00b      	b.n	8008c74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	3304      	adds	r3, #4
 8008c74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fc1d 	bl	80094c2 <USBD_CtlSendData>
              break;
 8008c88:	e06a      	b.n	8008d60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da11      	bge.n	8008cb6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3324      	adds	r3, #36	; 0x24
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d117      	bne.n	8008cdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fb96 	bl	80093e0 <USBD_CtlError>
                  break;
 8008cb4:	e054      	b.n	8008d60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	f003 020f 	and.w	r2, r3, #15
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb83 	bl	80093e0 <USBD_CtlError>
                  break;
 8008cda:	e041      	b.n	8008d60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da0b      	bge.n	8008cfc <USBD_StdEPReq+0x23e>
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	e00b      	b.n	8008d14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	3304      	adds	r3, #4
 8008d14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <USBD_StdEPReq+0x264>
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b80      	cmp	r3, #128	; 0x80
 8008d20:	d103      	bne.n	8008d2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	e00e      	b.n	8008d48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f894 	bl	8009e5c <USBD_LL_IsStallEP>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e002      	b.n	8008d48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fbb7 	bl	80094c2 <USBD_CtlSendData>
              break;
 8008d54:	e004      	b.n	8008d60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fb41 	bl	80093e0 <USBD_CtlError>
              break;
 8008d5e:	bf00      	nop
          }
          break;
 8008d60:	e004      	b.n	8008d6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fb3b 	bl	80093e0 <USBD_CtlError>
          break;
 8008d6a:	bf00      	nop
      }
      break;
 8008d6c:	e004      	b.n	8008d78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb35 	bl	80093e0 <USBD_CtlError>
      break;
 8008d76:	bf00      	nop
  }

  return ret;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	885b      	ldrh	r3, [r3, #2]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	f200 8128 	bhi.w	8008ffa <USBD_GetDescriptor+0x276>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_GetDescriptor+0x2c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008ffb 	.word	0x08008ffb
 8008dc0:	08008ffb 	.word	0x08008ffb
 8008dc4:	08008f9b 	.word	0x08008f9b
 8008dc8:	08008fc7 	.word	0x08008fc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
      break;
 8008de2:	e112      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7c1b      	ldrb	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10d      	bne.n	8008e08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df4:	f107 0208 	add.w	r2, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	2202      	movs	r2, #2
 8008e04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e06:	e100      	b.n	800900a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	f107 0208 	add.w	r2, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      break;
 8008e22:	e0f2      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	f200 80ac 	bhi.w	8008f88 <USBD_GetDescriptor+0x204>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBD_GetDescriptor+0xb4>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008eb9 	.word	0x08008eb9
 8008e44:	08008eed 	.word	0x08008eed
 8008e48:	08008f21 	.word	0x08008f21
 8008e4c:	08008f55 	.word	0x08008f55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e72:	e091      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fab2 	bl	80093e0 <USBD_CtlError>
            err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
          break;
 8008e82:	e089      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea6:	e077      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa98 	bl	80093e0 <USBD_CtlError>
            err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb6:	e06f      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eda:	e05d      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa7e 	bl	80093e0 <USBD_CtlError>
            err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eea:	e055      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0e:	e043      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa64 	bl	80093e0 <USBD_CtlError>
            err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1e:	e03b      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e029      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa4a 	bl	80093e0 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e021      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e00f      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa30 	bl	80093e0 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e007      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa28 	bl	80093e0 <USBD_CtlError>
          err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008f96:	bf00      	nop
      }
      break;
 8008f98:	e037      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7c1b      	ldrb	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	f107 0208 	add.w	r2, r7, #8
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3
 8008fb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb4:	e029      	b.n	800900a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fa11 	bl	80093e0 <USBD_CtlError>
        err++;
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc4:	e021      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7c1b      	ldrb	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10d      	bne.n	8008fea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f107 0208 	add.w	r2, r7, #8
 8008fda:	4610      	mov	r0, r2
 8008fdc:	4798      	blx	r3
 8008fde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	2207      	movs	r2, #7
 8008fe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe8:	e00f      	b.n	800900a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f9f7 	bl	80093e0 <USBD_CtlError>
        err++;
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff8:	e007      	b.n	800900a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f9ef 	bl	80093e0 <USBD_CtlError>
      err++;
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	3301      	adds	r3, #1
 8009006:	72fb      	strb	r3, [r7, #11]
      break;
 8009008:	bf00      	nop
  }

  if (err != 0U)
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11e      	bne.n	800904e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	88db      	ldrh	r3, [r3, #6]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d016      	beq.n	8009046 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88da      	ldrh	r2, [r3, #6]
 8009022:	893b      	ldrh	r3, [r7, #8]
 8009024:	4293      	cmp	r3, r2
 8009026:	bf28      	it	cs
 8009028:	4613      	movcs	r3, r2
 800902a:	b29b      	uxth	r3, r3
 800902c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800902e:	893b      	ldrh	r3, [r7, #8]
 8009030:	461a      	mov	r2, r3
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fa44 	bl	80094c2 <USBD_CtlSendData>
 800903a:	e009      	b.n	8009050 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9ce 	bl	80093e0 <USBD_CtlError>
 8009044:	e004      	b.n	8009050 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa95 	bl	8009576 <USBD_CtlSendStatus>
 800904c:	e000      	b.n	8009050 <USBD_GetDescriptor+0x2cc>
    return;
 800904e:	bf00      	nop
  }
}
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop

08009058 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	889b      	ldrh	r3, [r3, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d131      	bne.n	80090ce <USBD_SetAddress+0x76>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	88db      	ldrh	r3, [r3, #6]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d12d      	bne.n	80090ce <USBD_SetAddress+0x76>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	2b7f      	cmp	r3, #127	; 0x7f
 8009078:	d829      	bhi.n	80090ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b03      	cmp	r3, #3
 8009090:	d104      	bne.n	800909c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f9a3 	bl	80093e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909a:	e01d      	b.n	80090d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7bfa      	ldrb	r2, [r7, #15]
 80090a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 ff03 	bl	8009eb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa61 	bl	8009576 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c2:	e009      	b.n	80090d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090cc:	e004      	b.n	80090d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f985 	bl	80093e0 <USBD_CtlError>
  }
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	4b4c      	ldr	r3, [pc, #304]	; (8009228 <USBD_SetConfig+0x148>)
 80090f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090f8:	4b4b      	ldr	r3, [pc, #300]	; (8009228 <USBD_SetConfig+0x148>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d905      	bls.n	800910c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f96c 	bl	80093e0 <USBD_CtlError>
    return USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	e088      	b.n	800921e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d002      	beq.n	800911e <USBD_SetConfig+0x3e>
 8009118:	2b03      	cmp	r3, #3
 800911a:	d025      	beq.n	8009168 <USBD_SetConfig+0x88>
 800911c:	e071      	b.n	8009202 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800911e:	4b42      	ldr	r3, [pc, #264]	; (8009228 <USBD_SetConfig+0x148>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d01c      	beq.n	8009160 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009126:	4b40      	ldr	r3, [pc, #256]	; (8009228 <USBD_SetConfig+0x148>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009130:	4b3d      	ldr	r3, [pc, #244]	; (8009228 <USBD_SetConfig+0x148>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff f948 	bl	80083cc <USBD_SetClassConfig>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f949 	bl	80093e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800914e:	e065      	b.n	800921c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fa10 	bl	8009576 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2203      	movs	r2, #3
 800915a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800915e:	e05d      	b.n	800921c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa08 	bl	8009576 <USBD_CtlSendStatus>
      break;
 8009166:	e059      	b.n	800921c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009168:	4b2f      	ldr	r3, [pc, #188]	; (8009228 <USBD_SetConfig+0x148>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d112      	bne.n	8009196 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009178:	4b2b      	ldr	r3, [pc, #172]	; (8009228 <USBD_SetConfig+0x148>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009182:	4b29      	ldr	r3, [pc, #164]	; (8009228 <USBD_SetConfig+0x148>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff f93b 	bl	8008404 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9f1 	bl	8009576 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009194:	e042      	b.n	800921c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009196:	4b24      	ldr	r3, [pc, #144]	; (8009228 <USBD_SetConfig+0x148>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d02a      	beq.n	80091fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff f929 	bl	8008404 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091b2:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <USBD_SetConfig+0x148>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091bc:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <USBD_SetConfig+0x148>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff f902 	bl	80083cc <USBD_SetClassConfig>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00f      	beq.n	80091f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f903 	bl	80093e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7ff f90e 	bl	8008404 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091f0:	e014      	b.n	800921c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f9bf 	bl	8009576 <USBD_CtlSendStatus>
      break;
 80091f8:	e010      	b.n	800921c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9bb 	bl	8009576 <USBD_CtlSendStatus>
      break;
 8009200:	e00c      	b.n	800921c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f8eb 	bl	80093e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <USBD_SetConfig+0x148>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff f8f7 	bl	8008404 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	73fb      	strb	r3, [r7, #15]
      break;
 800921a:	bf00      	nop
  }

  return ret;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200005c2 	.word	0x200005c2

0800922c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	88db      	ldrh	r3, [r3, #6]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d004      	beq.n	8009248 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f8cd 	bl	80093e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009246:	e023      	b.n	8009290 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	dc02      	bgt.n	800925a <USBD_GetConfig+0x2e>
 8009254:	2b00      	cmp	r3, #0
 8009256:	dc03      	bgt.n	8009260 <USBD_GetConfig+0x34>
 8009258:	e015      	b.n	8009286 <USBD_GetConfig+0x5a>
 800925a:	2b03      	cmp	r3, #3
 800925c:	d00b      	beq.n	8009276 <USBD_GetConfig+0x4a>
 800925e:	e012      	b.n	8009286 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3308      	adds	r3, #8
 800926a:	2201      	movs	r2, #1
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f927 	bl	80094c2 <USBD_CtlSendData>
        break;
 8009274:	e00c      	b.n	8009290 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	2201      	movs	r2, #1
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f91f 	bl	80094c2 <USBD_CtlSendData>
        break;
 8009284:	e004      	b.n	8009290 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8a9 	bl	80093e0 <USBD_CtlError>
        break;
 800928e:	bf00      	nop
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d81e      	bhi.n	80092ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	88db      	ldrh	r3, [r3, #6]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d004      	beq.n	80092c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f890 	bl	80093e0 <USBD_CtlError>
        break;
 80092c0:	e01a      	b.n	80092f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f043 0202 	orr.w	r2, r3, #2
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	330c      	adds	r3, #12
 80092e2:	2202      	movs	r2, #2
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8eb 	bl	80094c2 <USBD_CtlSendData>
      break;
 80092ec:	e004      	b.n	80092f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f875 	bl	80093e0 <USBD_CtlError>
      break;
 80092f6:	bf00      	nop
  }
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	885b      	ldrh	r3, [r3, #2]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d106      	bne.n	8009320 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f92b 	bl	8009576 <USBD_CtlSendStatus>
  }
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	2b02      	cmp	r3, #2
 800933e:	d80b      	bhi.n	8009358 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	885b      	ldrh	r3, [r3, #2]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d10c      	bne.n	8009362 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f910 	bl	8009576 <USBD_CtlSendStatus>
      }
      break;
 8009356:	e004      	b.n	8009362 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f840 	bl	80093e0 <USBD_CtlError>
      break;
 8009360:	e000      	b.n	8009364 <USBD_ClrFeature+0x3c>
      break;
 8009362:	bf00      	nop
  }
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3301      	adds	r3, #1
 8009386:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff fabb 	bl	8008912 <SWAPBYTE>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3301      	adds	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3301      	adds	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7ff faae 	bl	8008912 <SWAPBYTE>
 80093b6:	4603      	mov	r3, r0
 80093b8:	461a      	mov	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff faa1 	bl	8008912 <SWAPBYTE>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	80da      	strh	r2, [r3, #6]
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ea:	2180      	movs	r1, #128	; 0x80
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fcf7 	bl	8009de0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093f2:	2100      	movs	r1, #0
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fcf3 	bl	8009de0 <USBD_LL_StallEP>
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b086      	sub	sp, #24
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d036      	beq.n	8009486 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800941c:	6938      	ldr	r0, [r7, #16]
 800941e:	f000 f836 	bl	800948e <USBD_GetLen>
 8009422:	4603      	mov	r3, r0
 8009424:	3301      	adds	r3, #1
 8009426:	b29b      	uxth	r3, r3
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	4413      	add	r3, r2
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	701a      	strb	r2, [r3, #0]
  idx++;
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	3301      	adds	r3, #1
 8009440:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	4413      	add	r3, r2
 8009448:	2203      	movs	r2, #3
 800944a:	701a      	strb	r2, [r3, #0]
  idx++;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	3301      	adds	r3, #1
 8009450:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009452:	e013      	b.n	800947c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	4413      	add	r3, r2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	7812      	ldrb	r2, [r2, #0]
 800945e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	3301      	adds	r3, #1
 8009464:	613b      	str	r3, [r7, #16]
    idx++;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	3301      	adds	r3, #1
 800946a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
    idx++;
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	3301      	adds	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e7      	bne.n	8009454 <USBD_GetString+0x52>
 8009484:	e000      	b.n	8009488 <USBD_GetString+0x86>
    return;
 8009486:	bf00      	nop
  }
}
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800949e:	e005      	b.n	80094ac <USBD_GetLen+0x1e>
  {
    len++;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	3301      	adds	r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	3301      	adds	r3, #1
 80094aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1f5      	bne.n	80094a0 <USBD_GetLen+0x12>
  }

  return len;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2202      	movs	r2, #2
 80094d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	2100      	movs	r1, #0
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fd02 	bl	8009ef2 <USBD_LL_Transmit>

  return USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	2100      	movs	r1, #0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fcf1 	bl	8009ef2 <USBD_LL_Transmit>

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2203      	movs	r2, #3
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	2100      	movs	r1, #0
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fcf5 	bl	8009f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fce4 	bl	8009f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2204      	movs	r2, #4
 8009582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009586:	2300      	movs	r3, #0
 8009588:	2200      	movs	r2, #0
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fcb0 	bl	8009ef2 <USBD_LL_Transmit>

  return USBD_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2205      	movs	r2, #5
 80095a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ac:	2300      	movs	r3, #0
 80095ae:	2200      	movs	r2, #0
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fcbe 	bl	8009f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095c8:	2200      	movs	r2, #0
 80095ca:	4912      	ldr	r1, [pc, #72]	; (8009614 <MX_USB_DEVICE_Init+0x50>)
 80095cc:	4812      	ldr	r0, [pc, #72]	; (8009618 <MX_USB_DEVICE_Init+0x54>)
 80095ce:	f7fe fe8f 	bl	80082f0 <USBD_Init>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80095d8:	f7f7 ff3c 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095dc:	490f      	ldr	r1, [pc, #60]	; (800961c <MX_USB_DEVICE_Init+0x58>)
 80095de:	480e      	ldr	r0, [pc, #56]	; (8009618 <MX_USB_DEVICE_Init+0x54>)
 80095e0:	f7fe feb6 	bl	8008350 <USBD_RegisterClass>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095ea:	f7f7 ff33 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095ee:	490c      	ldr	r1, [pc, #48]	; (8009620 <MX_USB_DEVICE_Init+0x5c>)
 80095f0:	4809      	ldr	r0, [pc, #36]	; (8009618 <MX_USB_DEVICE_Init+0x54>)
 80095f2:	f7fe fdd7 	bl	80081a4 <USBD_CDC_RegisterInterface>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095fc:	f7f7 ff2a 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009600:	4805      	ldr	r0, [pc, #20]	; (8009618 <MX_USB_DEVICE_Init+0x54>)
 8009602:	f7fe fecc 	bl	800839e <USBD_Start>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800960c:	f7f7 ff22 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009610:	bf00      	nop
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000144 	.word	0x20000144
 8009618:	20000a34 	.word	0x20000a34
 800961c:	2000002c 	.word	0x2000002c
 8009620:	20000130 	.word	0x20000130

08009624 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009628:	2200      	movs	r2, #0
 800962a:	4905      	ldr	r1, [pc, #20]	; (8009640 <CDC_Init_FS+0x1c>)
 800962c:	4805      	ldr	r0, [pc, #20]	; (8009644 <CDC_Init_FS+0x20>)
 800962e:	f7fe fdce 	bl	80081ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009632:	4905      	ldr	r1, [pc, #20]	; (8009648 <CDC_Init_FS+0x24>)
 8009634:	4803      	ldr	r0, [pc, #12]	; (8009644 <CDC_Init_FS+0x20>)
 8009636:	f7fe fde8 	bl	800820a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800963a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800963c:	4618      	mov	r0, r3
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001504 	.word	0x20001504
 8009644:	20000a34 	.word	0x20000a34
 8009648:	20000d04 	.word	0x20000d04

0800964c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009650:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009652:	4618      	mov	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	6039      	str	r1, [r7, #0]
 8009666:	71fb      	strb	r3, [r7, #7]
 8009668:	4613      	mov	r3, r2
 800966a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	2b23      	cmp	r3, #35	; 0x23
 8009670:	d84a      	bhi.n	8009708 <CDC_Control_FS+0xac>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <CDC_Control_FS+0x1c>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	08009709 	.word	0x08009709
 800967c:	08009709 	.word	0x08009709
 8009680:	08009709 	.word	0x08009709
 8009684:	08009709 	.word	0x08009709
 8009688:	08009709 	.word	0x08009709
 800968c:	08009709 	.word	0x08009709
 8009690:	08009709 	.word	0x08009709
 8009694:	08009709 	.word	0x08009709
 8009698:	08009709 	.word	0x08009709
 800969c:	08009709 	.word	0x08009709
 80096a0:	08009709 	.word	0x08009709
 80096a4:	08009709 	.word	0x08009709
 80096a8:	08009709 	.word	0x08009709
 80096ac:	08009709 	.word	0x08009709
 80096b0:	08009709 	.word	0x08009709
 80096b4:	08009709 	.word	0x08009709
 80096b8:	08009709 	.word	0x08009709
 80096bc:	08009709 	.word	0x08009709
 80096c0:	08009709 	.word	0x08009709
 80096c4:	08009709 	.word	0x08009709
 80096c8:	08009709 	.word	0x08009709
 80096cc:	08009709 	.word	0x08009709
 80096d0:	08009709 	.word	0x08009709
 80096d4:	08009709 	.word	0x08009709
 80096d8:	08009709 	.word	0x08009709
 80096dc:	08009709 	.word	0x08009709
 80096e0:	08009709 	.word	0x08009709
 80096e4:	08009709 	.word	0x08009709
 80096e8:	08009709 	.word	0x08009709
 80096ec:	08009709 	.word	0x08009709
 80096f0:	08009709 	.word	0x08009709
 80096f4:	08009709 	.word	0x08009709
 80096f8:	08009709 	.word	0x08009709
 80096fc:	08009709 	.word	0x08009709
 8009700:	08009709 	.word	0x08009709
 8009704:	08009709 	.word	0x08009709
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009708:	bf00      	nop
  }

  return (USBD_OK);
 800970a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	480f      	ldr	r0, [pc, #60]	; (8009764 <CDC_Receive_FS+0x4c>)
 8009726:	f7fe fd70 	bl	800820a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800972a:	480e      	ldr	r0, [pc, #56]	; (8009764 <CDC_Receive_FS+0x4c>)
 800972c:	f7fe fdb6 	bl	800829c <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8009730:	2240      	movs	r2, #64	; 0x40
 8009732:	2100      	movs	r1, #0
 8009734:	480c      	ldr	r0, [pc, #48]	; (8009768 <CDC_Receive_FS+0x50>)
 8009736:	f000 fca7 	bl	800a088 <memset>
  uint8_t len = (uint8_t)*Len;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	461a      	mov	r2, r3
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4808      	ldr	r0, [pc, #32]	; (8009768 <CDC_Receive_FS+0x50>)
 8009748:	f000 fc90 	bl	800a06c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	461a      	mov	r2, r3
 8009750:	2100      	movs	r1, #0
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fc98 	bl	800a088 <memset>

  return (USBD_OK);
 8009758:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000a34 	.word	0x20000a34
 8009768:	200008f0 	.word	0x200008f0

0800976c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <CDC_Transmit_FS+0x48>)
 800977e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009782:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800978e:	2301      	movs	r3, #1
 8009790:	e00b      	b.n	80097aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009792:	887b      	ldrh	r3, [r7, #2]
 8009794:	461a      	mov	r2, r3
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4806      	ldr	r0, [pc, #24]	; (80097b4 <CDC_Transmit_FS+0x48>)
 800979a:	f7fe fd18 	bl	80081ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800979e:	4805      	ldr	r0, [pc, #20]	; (80097b4 <CDC_Transmit_FS+0x48>)
 80097a0:	f7fe fd4c 	bl	800823c <USBD_CDC_TransmitPacket>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000a34 	.word	0x20000a34

080097b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2212      	movs	r2, #18
 80097ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097ee:	4b03      	ldr	r3, [pc, #12]	; (80097fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000160 	.word	0x20000160

08009800 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2204      	movs	r2, #4
 8009810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000174 	.word	0x20000174

08009824 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4907      	ldr	r1, [pc, #28]	; (8009858 <USBD_FS_ProductStrDescriptor+0x34>)
 800983a:	4808      	ldr	r0, [pc, #32]	; (800985c <USBD_FS_ProductStrDescriptor+0x38>)
 800983c:	f7ff fde1 	bl	8009402 <USBD_GetString>
 8009840:	e004      	b.n	800984c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4904      	ldr	r1, [pc, #16]	; (8009858 <USBD_FS_ProductStrDescriptor+0x34>)
 8009846:	4805      	ldr	r0, [pc, #20]	; (800985c <USBD_FS_ProductStrDescriptor+0x38>)
 8009848:	f7ff fddb 	bl	8009402 <USBD_GetString>
  }
  return USBD_StrDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	; (8009858 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001d04 	.word	0x20001d04
 800985c:	0800a168 	.word	0x0800a168

08009860 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	4904      	ldr	r1, [pc, #16]	; (8009880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009870:	4804      	ldr	r0, [pc, #16]	; (8009884 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009872:	f7ff fdc6 	bl	8009402 <USBD_GetString>
  return USBD_StrDesc;
 8009876:	4b02      	ldr	r3, [pc, #8]	; (8009880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20001d04 	.word	0x20001d04
 8009884:	0800a17c 	.word	0x0800a17c

08009888 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	221a      	movs	r2, #26
 8009898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800989a:	f000 f843 	bl	8009924 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800989e:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20000178 	.word	0x20000178

080098ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d105      	bne.n	80098ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	4907      	ldr	r1, [pc, #28]	; (80098e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098c2:	4808      	ldr	r0, [pc, #32]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098c4:	f7ff fd9d 	bl	8009402 <USBD_GetString>
 80098c8:	e004      	b.n	80098d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	4904      	ldr	r1, [pc, #16]	; (80098e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098ce:	4805      	ldr	r0, [pc, #20]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098d0:	f7ff fd97 	bl	8009402 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20001d04 	.word	0x20001d04
 80098e4:	0800a190 	.word	0x0800a190

080098e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4907      	ldr	r1, [pc, #28]	; (800991c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098fe:	4808      	ldr	r0, [pc, #32]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009900:	f7ff fd7f 	bl	8009402 <USBD_GetString>
 8009904:	e004      	b.n	8009910 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	4904      	ldr	r1, [pc, #16]	; (800991c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800990c:	f7ff fd79 	bl	8009402 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20001d04 	.word	0x20001d04
 8009920:	0800a19c 	.word	0x0800a19c

08009924 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <Get_SerialNum+0x44>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009930:	4b0e      	ldr	r3, [pc, #56]	; (800996c <Get_SerialNum+0x48>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <Get_SerialNum+0x4c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4413      	add	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d009      	beq.n	800995e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800994a:	2208      	movs	r2, #8
 800994c:	4909      	ldr	r1, [pc, #36]	; (8009974 <Get_SerialNum+0x50>)
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 f814 	bl	800997c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009954:	2204      	movs	r2, #4
 8009956:	4908      	ldr	r1, [pc, #32]	; (8009978 <Get_SerialNum+0x54>)
 8009958:	68b8      	ldr	r0, [r7, #8]
 800995a:	f000 f80f 	bl	800997c <IntToUnicode>
  }
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	1fff7a10 	.word	0x1fff7a10
 800996c:	1fff7a14 	.word	0x1fff7a14
 8009970:	1fff7a18 	.word	0x1fff7a18
 8009974:	2000017a 	.word	0x2000017a
 8009978:	2000018a 	.word	0x2000018a

0800997c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800998e:	2300      	movs	r3, #0
 8009990:	75fb      	strb	r3, [r7, #23]
 8009992:	e027      	b.n	80099e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	0f1b      	lsrs	r3, r3, #28
 8009998:	2b09      	cmp	r3, #9
 800999a:	d80b      	bhi.n	80099b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	0f1b      	lsrs	r3, r3, #28
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	4619      	mov	r1, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	440b      	add	r3, r1
 80099ac:	3230      	adds	r2, #48	; 0x30
 80099ae:	b2d2      	uxtb	r2, r2
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e00a      	b.n	80099ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0f1b      	lsrs	r3, r3, #28
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4619      	mov	r1, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	440b      	add	r3, r1
 80099c4:	3237      	adds	r2, #55	; 0x37
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	3301      	adds	r3, #1
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	4413      	add	r3, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	3301      	adds	r3, #1
 80099e2:	75fb      	strb	r3, [r7, #23]
 80099e4:	7dfa      	ldrb	r2, [r7, #23]
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d3d3      	bcc.n	8009994 <IntToUnicode+0x18>
  }
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a04:	f107 0314 	add.w	r3, r7, #20
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	605a      	str	r2, [r3, #4]
 8009a0e:	609a      	str	r2, [r3, #8]
 8009a10:	60da      	str	r2, [r3, #12]
 8009a12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a1c:	d13a      	bne.n	8009a94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a1e:	2300      	movs	r3, #0
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	4b1e      	ldr	r3, [pc, #120]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a26:	4a1d      	ldr	r2, [pc, #116]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a28:	f043 0301 	orr.w	r3, r3, #1
 8009a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a2e:	4b1b      	ldr	r3, [pc, #108]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a40:	2302      	movs	r3, #2
 8009a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a44:	2300      	movs	r3, #0
 8009a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a4c:	230a      	movs	r3, #10
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a50:	f107 0314 	add.w	r3, r7, #20
 8009a54:	4619      	mov	r1, r3
 8009a56:	4812      	ldr	r0, [pc, #72]	; (8009aa0 <HAL_PCD_MspInit+0xa4>)
 8009a58:	f7f8 fd50 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a60:	4a0e      	ldr	r2, [pc, #56]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a66:	6353      	str	r3, [r2, #52]	; 0x34
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a76:	6453      	str	r3, [r2, #68]	; 0x44
 8009a78:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <HAL_PCD_MspInit+0xa0>)
 8009a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2043      	movs	r0, #67	; 0x43
 8009a8a:	f7f8 fc6e 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a8e:	2043      	movs	r0, #67	; 0x43
 8009a90:	f7f8 fc87 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a94:	bf00      	nop
 8009a96:	3728      	adds	r7, #40	; 0x28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	40023800 	.word	0x40023800
 8009aa0:	40020000 	.word	0x40020000

08009aa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f7fe fcba 	bl	8008434 <USBD_LL_SetupStage>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	6879      	ldr	r1, [r7, #4]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	1a9b      	subs	r3, r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	4619      	mov	r1, r3
 8009af2:	f7fe fcf4 	bl	80084de <USBD_LL_DataOutStage>
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	460b      	mov	r3, r1
 8009b08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b10:	78fa      	ldrb	r2, [r7, #3]
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	3348      	adds	r3, #72	; 0x48
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	4619      	mov	r1, r3
 8009b26:	f7fe fd3d 	bl	80085a4 <USBD_LL_DataInStage>
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fe51 	bl	80087e8 <USBD_LL_SOF>
}
 8009b46:	bf00      	nop
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b56:	2301      	movs	r3, #1
 8009b58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
 8009b66:	e008      	b.n	8009b7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d102      	bne.n	8009b76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009b70:	2301      	movs	r3, #1
 8009b72:	73fb      	strb	r3, [r7, #15]
 8009b74:	e001      	b.n	8009b7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009b76:	f7f7 fc6d 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b80:	7bfa      	ldrb	r2, [r7, #15]
 8009b82:	4611      	mov	r1, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fe fdf1 	bl	800876c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fd9d 	bl	80086d0 <USBD_LL_Reset>
}
 8009b96:	bf00      	nop
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fdec 	bl	800878c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	6812      	ldr	r2, [r2, #0]
 8009bc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bc6:	f043 0301 	orr.w	r3, r3, #1
 8009bca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bd4:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <HAL_PCD_SuspendCallback+0x48>)
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	4a03      	ldr	r2, [pc, #12]	; (8009be8 <HAL_PCD_SuspendCallback+0x48>)
 8009bda:	f043 0306 	orr.w	r3, r3, #6
 8009bde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	e000ed00 	.word	0xe000ed00

08009bec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe fddc 	bl	80087b8 <USBD_LL_Resume>
}
 8009c00:	bf00      	nop
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fe2a 	bl	8008878 <USBD_LL_IsoOUTIncomplete>
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	4611      	mov	r1, r2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fdf2 	bl	800882c <USBD_LL_IsoINIncomplete>
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fe30 	bl	80088c4 <USBD_LL_DevConnected>
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fe2d 	bl	80088da <USBD_LL_DevDisconnected>
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d13c      	bne.n	8009d12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c98:	4a20      	ldr	r2, [pc, #128]	; (8009d1c <USBD_LL_Init+0x94>)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	; (8009d1c <USBD_LL_Init+0x94>)
 8009ca4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ca8:	4b1c      	ldr	r3, [pc, #112]	; (8009d1c <USBD_LL_Init+0x94>)
 8009caa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cb2:	2204      	movs	r2, #4
 8009cb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cb6:	4b19      	ldr	r3, [pc, #100]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cb8:	2202      	movs	r2, #2
 8009cba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cbc:	4b17      	ldr	r3, [pc, #92]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cc2:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cc8:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009cd4:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009cda:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <USBD_LL_Init+0x94>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ce6:	480d      	ldr	r0, [pc, #52]	; (8009d1c <USBD_LL_Init+0x94>)
 8009ce8:	f7f9 fb69 	bl	80033be <HAL_PCD_Init>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009cf2:	f7f7 fbaf 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009cf6:	2180      	movs	r1, #128	; 0x80
 8009cf8:	4808      	ldr	r0, [pc, #32]	; (8009d1c <USBD_LL_Init+0x94>)
 8009cfa:	f7fa fcc6 	bl	800468a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009cfe:	2240      	movs	r2, #64	; 0x40
 8009d00:	2100      	movs	r1, #0
 8009d02:	4806      	ldr	r0, [pc, #24]	; (8009d1c <USBD_LL_Init+0x94>)
 8009d04:	f7fa fc7a 	bl	80045fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d08:	2280      	movs	r2, #128	; 0x80
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4803      	ldr	r0, [pc, #12]	; (8009d1c <USBD_LL_Init+0x94>)
 8009d0e:	f7fa fc75 	bl	80045fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20001f04 	.word	0x20001f04

08009d20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f9 fc5e 	bl	80035f8 <HAL_PCD_Start>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f942 	bl	8009fcc <USBD_Get_USB_Status>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	4608      	mov	r0, r1
 8009d60:	4611      	mov	r1, r2
 8009d62:	461a      	mov	r2, r3
 8009d64:	4603      	mov	r3, r0
 8009d66:	70fb      	strb	r3, [r7, #3]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70bb      	strb	r3, [r7, #2]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d7e:	78bb      	ldrb	r3, [r7, #2]
 8009d80:	883a      	ldrh	r2, [r7, #0]
 8009d82:	78f9      	ldrb	r1, [r7, #3]
 8009d84:	f7fa f842 	bl	8003e0c <HAL_PCD_EP_Open>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f91c 	bl	8009fcc <USBD_Get_USB_Status>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fa f88b 	bl	8003edc <HAL_PCD_EP_Close>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 f8fd 	bl	8009fcc <USBD_Get_USB_Status>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fa f963 	bl	80040ca <HAL_PCD_EP_SetStall>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f8de 	bl	8009fcc <USBD_Get_USB_Status>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e38:	78fa      	ldrb	r2, [r7, #3]
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fa f9a8 	bl	8004192 <HAL_PCD_EP_ClrStall>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 f8bf 	bl	8009fcc <USBD_Get_USB_Status>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	da0b      	bge.n	8009e90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e78:	78fb      	ldrb	r3, [r7, #3]
 8009e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e7e:	68f9      	ldr	r1, [r7, #12]
 8009e80:	4613      	mov	r3, r2
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	1a9b      	subs	r3, r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	440b      	add	r3, r1
 8009e8a:	333e      	adds	r3, #62	; 0x3e
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	e00b      	b.n	8009ea8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	440b      	add	r3, r1
 8009ea2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ea6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7f9 ff75 	bl	8003dc2 <HAL_PCD_SetAddress>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 f874 	bl	8009fcc <USBD_Get_USB_Status>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
 8009efe:	460b      	mov	r3, r1
 8009f00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f10:	7af9      	ldrb	r1, [r7, #11]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	f7fa f88e 	bl	8004036 <HAL_PCD_EP_Transmit>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f853 	bl	8009fcc <USBD_Get_USB_Status>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	607a      	str	r2, [r7, #4]
 8009f3e:	603b      	str	r3, [r7, #0]
 8009f40:	460b      	mov	r3, r1
 8009f42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f52:	7af9      	ldrb	r1, [r7, #11]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	f7fa f80a 	bl	8003f70 <HAL_PCD_EP_Receive>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f832 	bl	8009fcc <USBD_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3718      	adds	r7, #24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f88:	78fa      	ldrb	r2, [r7, #3]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fa f83a 	bl	8004006 <HAL_PCD_EP_GetRxCount>
 8009f92:	4603      	mov	r3, r0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fa4:	4b03      	ldr	r3, [pc, #12]	; (8009fb4 <USBD_static_malloc+0x18>)
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	200005c4 	.word	0x200005c4

08009fb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d817      	bhi.n	800a010 <USBD_Get_USB_Status+0x44>
 8009fe0:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <USBD_Get_USB_Status+0x1c>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	08009ff9 	.word	0x08009ff9
 8009fec:	08009fff 	.word	0x08009fff
 8009ff0:	0800a005 	.word	0x0800a005
 8009ff4:	0800a00b 	.word	0x0800a00b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffc:	e00b      	b.n	800a016 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ffe:	2303      	movs	r3, #3
 800a000:	73fb      	strb	r3, [r7, #15]
    break;
 800a002:	e008      	b.n	800a016 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a004:	2301      	movs	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
    break;
 800a008:	e005      	b.n	800a016 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a00a:	2303      	movs	r3, #3
 800a00c:	73fb      	strb	r3, [r7, #15]
    break;
 800a00e:	e002      	b.n	800a016 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a010:	2303      	movs	r3, #3
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	bf00      	nop
  }
  return usb_status;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <__libc_init_array>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	4d0d      	ldr	r5, [pc, #52]	; (800a05c <__libc_init_array+0x38>)
 800a028:	4c0d      	ldr	r4, [pc, #52]	; (800a060 <__libc_init_array+0x3c>)
 800a02a:	1b64      	subs	r4, r4, r5
 800a02c:	10a4      	asrs	r4, r4, #2
 800a02e:	2600      	movs	r6, #0
 800a030:	42a6      	cmp	r6, r4
 800a032:	d109      	bne.n	800a048 <__libc_init_array+0x24>
 800a034:	4d0b      	ldr	r5, [pc, #44]	; (800a064 <__libc_init_array+0x40>)
 800a036:	4c0c      	ldr	r4, [pc, #48]	; (800a068 <__libc_init_array+0x44>)
 800a038:	f000 f82e 	bl	800a098 <_init>
 800a03c:	1b64      	subs	r4, r4, r5
 800a03e:	10a4      	asrs	r4, r4, #2
 800a040:	2600      	movs	r6, #0
 800a042:	42a6      	cmp	r6, r4
 800a044:	d105      	bne.n	800a052 <__libc_init_array+0x2e>
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04c:	4798      	blx	r3
 800a04e:	3601      	adds	r6, #1
 800a050:	e7ee      	b.n	800a030 <__libc_init_array+0xc>
 800a052:	f855 3b04 	ldr.w	r3, [r5], #4
 800a056:	4798      	blx	r3
 800a058:	3601      	adds	r6, #1
 800a05a:	e7f2      	b.n	800a042 <__libc_init_array+0x1e>
 800a05c:	0800af28 	.word	0x0800af28
 800a060:	0800af28 	.word	0x0800af28
 800a064:	0800af28 	.word	0x0800af28
 800a068:	0800af2c 	.word	0x0800af2c

0800a06c <memcpy>:
 800a06c:	440a      	add	r2, r1
 800a06e:	4291      	cmp	r1, r2
 800a070:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a074:	d100      	bne.n	800a078 <memcpy+0xc>
 800a076:	4770      	bx	lr
 800a078:	b510      	push	{r4, lr}
 800a07a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a082:	4291      	cmp	r1, r2
 800a084:	d1f9      	bne.n	800a07a <memcpy+0xe>
 800a086:	bd10      	pop	{r4, pc}

0800a088 <memset>:
 800a088:	4402      	add	r2, r0
 800a08a:	4603      	mov	r3, r0
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d100      	bne.n	800a092 <memset+0xa>
 800a090:	4770      	bx	lr
 800a092:	f803 1b01 	strb.w	r1, [r3], #1
 800a096:	e7f9      	b.n	800a08c <memset+0x4>

0800a098 <_init>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr

0800a0a4 <_fini>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	bf00      	nop
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr
