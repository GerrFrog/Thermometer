
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001090  0800c4e4  0800c4e4  0001c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d574  0800d574  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800d574  0800d574  0001d574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d57c  0800d57c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d57c  0800d57c  0001d57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d580  0800d580  0001d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00002198  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000239c  2000239c  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029c1c  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048f6  00000000  00000000  00049e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  0004e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019e0  00000000  00000000  00050220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000854f  00000000  00000000  00051c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000210bd  00000000  00000000  0005a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5fdf  00000000  00000000  0007b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001511eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dfc  00000000  00000000  00151240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4cc 	.word	0x0800c4cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800c4cc 	.word	0x0800c4cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <cJSON_strdup+0x1c>
    {
        return NULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e015      	b.n	8000ee8 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff f987 	bl	80001d0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	4798      	blx	r3
 8000ed0:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <cJSON_strdup+0x3c>
    {
        return NULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e005      	b.n	8000ee8 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f00a f9f1 	bl	800b2c8 <memcpy>

    return copy;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	4798      	blx	r3
 8000f00:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f08:	2228      	movs	r2, #40	; 0x28
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f00a f9e9 	bl	800b2e4 <memset>
    }

    return node;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f28:	e037      	b.n	8000f9a <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d108      	bne.n	8000f4e <cJSON_Delete+0x32>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffe7 	bl	8000f1c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <cJSON_Delete+0x52>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <cJSON_Delete+0x90>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6912      	ldr	r2, [r2, #16]
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <cJSON_Delete+0x72>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <cJSON_Delete+0x90>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6a12      	ldr	r2, [r2, #32]
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <cJSON_Delete+0x90>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	4798      	blx	r3
        item = next;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1c4      	bne.n	8000f2a <cJSON_Delete+0xe>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000

08000fb0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000fb4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <ensure+0x20>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <ensure+0x24>
    {
        return NULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e083      	b.n	80010ec <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <ensure+0x3c>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d301      	bcc.n	8000ffc <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e077      	b.n	80010ec <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da01      	bge.n	8001006 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001002:	2300      	movs	r3, #0
 8001004:	e072      	b.n	80010ec <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	3301      	adds	r3, #1
 8001010:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d805      	bhi.n	8001028 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4413      	add	r3, r2
 8001026:	e061      	b.n	80010ec <ensure+0x12c>
    }

    if (p->noalloc) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <ensure+0x74>
        return NULL;
 8001030:	2300      	movs	r3, #0
 8001032:	e05b      	b.n	80010ec <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800103a:	d308      	bcc.n	800104e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db03      	blt.n	800104a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001042:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	e004      	b.n	8001054 <ensure+0x94>
        }
        else
        {
            return NULL;
 800104a:	2300      	movs	r3, #0
 800104c:	e04e      	b.n	80010ec <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d018      	beq.n	800108e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4610      	mov	r0, r2
 8001068:	4798      	blx	r3
 800106a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d132      	bne.n	80010d8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	4610      	mov	r0, r2
 800107c:	4798      	blx	r3
            p->length = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]

            return NULL;
 800108a:	2300      	movs	r3, #0
 800108c:	e02e      	b.n	80010ec <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	4798      	blx	r3
 8001096:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10d      	bne.n	80010ba <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	4610      	mov	r0, r2
 80010a8:	4798      	blx	r3
            p->length = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

            return NULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e018      	b.n	80010ec <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	461a      	mov	r2, r3
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f00a f8fe 	bl	800b2c8 <memcpy>
        p->hooks.deallocate(p->buffer);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	4798      	blx	r3
    }
    p->length = newsize;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d013      	beq.n	800112e <update_offset+0x3a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00f      	beq.n	800112e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689c      	ldr	r4, [r3, #8]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff f856 	bl	80001d0 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	18e2      	adds	r2, r4, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	e000      	b.n	8001130 <update_offset+0x3c>
        return;
 800112e:	bf00      	nop
}
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
	...

08001138 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800113c:	b087      	sub	sp, #28
 800113e:	af00      	add	r7, sp, #0
 8001140:	ed87 0b02 	vstr	d0, [r7, #8]
 8001144:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	68fe      	ldr	r6, [r7, #12]
 800114c:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	687e      	ldr	r6, [r7, #4]
 8001154:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8001158:	f7ff fcde 	bl	8000b18 <__aeabi_dcmpgt>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <compare_double+0x34>
 8001162:	68bc      	ldr	r4, [r7, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116a:	e003      	b.n	8001174 <compare_double+0x3c>
 800116c:	683c      	ldr	r4, [r7, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001174:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800117c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001180:	f7ff f882 	bl	8000288 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4690      	mov	r8, r2
 800118a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <compare_double+0x8c>)
 8001194:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	2101      	movs	r1, #1
 80011a2:	460c      	mov	r4, r1
 80011a4:	4640      	mov	r0, r8
 80011a6:	4649      	mov	r1, r9
 80011a8:	f7ff fca2 	bl	8000af0 <__aeabi_dcmple>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <compare_double+0x7e>
 80011b2:	2300      	movs	r3, #0
 80011b4:	461c      	mov	r4, r3
 80011b6:	b2e3      	uxtb	r3, r4
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011c2:	bf00      	nop
 80011c4:	3cb00000 	.word	0x3cb00000

080011c8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b093      	sub	sp, #76	; 0x4c
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 80011fe:	f7ff fed7 	bl	8000fb0 <get_decimal_point>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <print_number+0x56>
    {
        return false;
 800121a:	2300      	movs	r3, #0
 800121c:	e0b4      	b.n	8001388 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800121e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001222:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001226:	f7ff fc81 	bl	8000b2c <__aeabi_dcmpun>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d121      	bne.n	8001274 <print_number+0xac>
 8001230:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001238:	2301      	movs	r3, #1
 800123a:	461e      	mov	r6, r3
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <print_number+0x1c8>)
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7ff fc71 	bl	8000b2c <__aeabi_dcmpun>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10b      	bne.n	8001268 <print_number+0xa0>
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001254:	4b4e      	ldr	r3, [pc, #312]	; (8001390 <print_number+0x1c8>)
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff fc49 	bl	8000af0 <__aeabi_dcmple>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <print_number+0xa0>
 8001264:	2300      	movs	r3, #0
 8001266:	461e      	mov	r6, r3
 8001268:	b2f3      	uxtb	r3, r6
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4946      	ldr	r1, [pc, #280]	; (8001394 <print_number+0x1cc>)
 800127a:	4618      	mov	r0, r3
 800127c:	f00a f8fc 	bl	800b478 <siprintf>
 8001280:	6478      	str	r0, [r7, #68]	; 0x44
 8001282:	e03f      	b.n	8001304 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f94b 	bl	8000524 <__aeabi_i2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001296:	f7ff fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d009      	beq.n	80012b4 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	493b      	ldr	r1, [pc, #236]	; (8001398 <print_number+0x1d0>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00a f8e4 	bl	800b478 <siprintf>
 80012b0:	6478      	str	r0, [r7, #68]	; 0x44
 80012b2:	e027      	b.n	8001304 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80012b4:	f107 0014 	add.w	r0, r7, #20
 80012b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012bc:	4937      	ldr	r1, [pc, #220]	; (800139c <print_number+0x1d4>)
 80012be:	f00a f8db 	bl	800b478 <siprintf>
 80012c2:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80012c4:	f107 0208 	add.w	r2, r7, #8
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4934      	ldr	r1, [pc, #208]	; (80013a0 <print_number+0x1d8>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00a f8f2 	bl	800b4b8 <siscanf>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10c      	bne.n	80012f4 <print_number+0x12c>
 80012da:	ed97 7b02 	vldr	d7, [r7, #8]
 80012de:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80012e2:	eeb0 0a47 	vmov.f32	s0, s14
 80012e6:	eef0 0a67 	vmov.f32	s1, s15
 80012ea:	f7ff ff25 	bl	8001138 <compare_double>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80012f4:	f107 0014 	add.w	r0, r7, #20
 80012f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012fc:	4929      	ldr	r1, [pc, #164]	; (80013a4 <print_number+0x1dc>)
 80012fe:	f00a f8bb 	bl	800b478 <siprintf>
 8001302:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001306:	2b00      	cmp	r3, #0
 8001308:	db02      	blt.n	8001310 <print_number+0x148>
 800130a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800130c:	2b19      	cmp	r3, #25
 800130e:	dd01      	ble.n	8001314 <print_number+0x14c>
    {
        return false;
 8001310:	2300      	movs	r3, #0
 8001312:	e039      	b.n	8001388 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001316:	3301      	adds	r3, #1
 8001318:	4619      	mov	r1, r3
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f7ff fe50 	bl	8000fc0 <ensure>
 8001320:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <print_number+0x164>
    {
        return false;
 8001328:	2300      	movs	r3, #0
 800132a:	e02d      	b.n	8001388 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800132c:	2300      	movs	r3, #0
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
 8001330:	e01a      	b.n	8001368 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001332:	f107 0214 	add.w	r2, r7, #20
 8001336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001340:	429a      	cmp	r2, r3
 8001342:	d105      	bne.n	8001350 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001348:	4413      	add	r3, r2
 800134a:	222e      	movs	r2, #46	; 0x2e
 800134c:	701a      	strb	r2, [r3, #0]
            continue;
 800134e:	e008      	b.n	8001362 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001354:	4413      	add	r3, r2
 8001356:	f107 0114 	add.w	r1, r7, #20
 800135a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800135c:	440a      	add	r2, r1
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001364:	3301      	adds	r3, #1
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
 8001368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800136a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800136c:	429a      	cmp	r2, r3
 800136e:	d3e0      	bcc.n	8001332 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001374:	4413      	add	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	441a      	add	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	609a      	str	r2, [r3, #8]

    return true;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	374c      	adds	r7, #76	; 0x4c
 800138c:	46bd      	mov	sp, r7
 800138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001390:	7fefffff 	.word	0x7fefffff
 8001394:	0800c4f0 	.word	0x0800c4f0
 8001398:	0800c4f8 	.word	0x0800c4f8
 800139c:	0800c4fc 	.word	0x0800c4fc
 80013a0:	0800c504 	.word	0x0800c504
 80013a4:	0800c508 	.word	0x0800c508

080013a8 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <print_string_ptr+0x28>
    {
        return false;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e110      	b.n	80015f2 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d111      	bne.n	80013fa <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80013d6:	2103      	movs	r1, #3
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f7ff fdf1 	bl	8000fc0 <ensure>
 80013de:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <print_string_ptr+0x42>
        {
            return false;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e103      	b.n	80015f2 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4a83      	ldr	r2, [pc, #524]	; (80015fc <print_string_ptr+0x254>)
 80013ee:	8811      	ldrh	r1, [r2, #0]
 80013f0:	7892      	ldrb	r2, [r2, #2]
 80013f2:	8019      	strh	r1, [r3, #0]
 80013f4:	709a      	strb	r2, [r3, #2]

        return true;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0fb      	b.n	80015f2 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e023      	b.n	8001448 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b22      	cmp	r3, #34	; 0x22
 8001406:	dc0e      	bgt.n	8001426 <print_string_ptr+0x7e>
 8001408:	2b08      	cmp	r3, #8
 800140a:	db12      	blt.n	8001432 <print_string_ptr+0x8a>
 800140c:	3b08      	subs	r3, #8
 800140e:	2201      	movs	r2, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	4b7b      	ldr	r3, [pc, #492]	; (8001600 <print_string_ptr+0x258>)
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2301      	movne	r3, #1
 800141c:	2300      	moveq	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <print_string_ptr+0x82>
 8001424:	e005      	b.n	8001432 <print_string_ptr+0x8a>
 8001426:	2b5c      	cmp	r3, #92	; 0x5c
 8001428:	d103      	bne.n	8001432 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
                break;
 8001430:	e007      	b.n	8001442 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	d802      	bhi.n	8001440 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3305      	adds	r3, #5
 800143e:	617b      	str	r3, [r7, #20]
                }
                break;
 8001440:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1d7      	bne.n	8001400 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	461a      	mov	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3303      	adds	r3, #3
 8001462:	4619      	mov	r1, r3
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f7ff fdab 	bl	8000fc0 <ensure>
 800146a:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <print_string_ptr+0xce>
    {
        return false;
 8001472:	2300      	movs	r3, #0
 8001474:	e0bd      	b.n	80015f2 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d117      	bne.n	80014ac <print_string_ptr+0x104>
    {
        output[0] = '\"';
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2222      	movs	r2, #34	; 0x22
 8001480:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3301      	adds	r3, #1
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f009 ff1c 	bl	800b2c8 <memcpy>
        output[output_length + 1] = '\"';
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4413      	add	r3, r2
 8001498:	2222      	movs	r2, #34	; 0x22
 800149a:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3302      	adds	r3, #2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]

        return true;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0a2      	b.n	80015f2 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2222      	movs	r2, #34	; 0x22
 80014b0:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e087      	b.n	80015ce <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b1f      	cmp	r3, #31
 80014c4:	d90c      	bls.n	80014e0 <print_string_ptr+0x138>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b22      	cmp	r3, #34	; 0x22
 80014cc:	d008      	beq.n	80014e0 <print_string_ptr+0x138>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b5c      	cmp	r3, #92	; 0x5c
 80014d4:	d004      	beq.n	80014e0 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e070      	b.n	80015c2 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	61ba      	str	r2, [r7, #24]
 80014e6:	225c      	movs	r2, #92	; 0x5c
 80014e8:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b22      	cmp	r3, #34	; 0x22
 80014f0:	dc3e      	bgt.n	8001570 <print_string_ptr+0x1c8>
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	db5a      	blt.n	80015ac <print_string_ptr+0x204>
 80014f6:	3b08      	subs	r3, #8
 80014f8:	2b1a      	cmp	r3, #26
 80014fa:	d857      	bhi.n	80015ac <print_string_ptr+0x204>
 80014fc:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <print_string_ptr+0x15c>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001585 	.word	0x08001585
 8001508:	080015a5 	.word	0x080015a5
 800150c:	08001595 	.word	0x08001595
 8001510:	080015ad 	.word	0x080015ad
 8001514:	0800158d 	.word	0x0800158d
 8001518:	0800159d 	.word	0x0800159d
 800151c:	080015ad 	.word	0x080015ad
 8001520:	080015ad 	.word	0x080015ad
 8001524:	080015ad 	.word	0x080015ad
 8001528:	080015ad 	.word	0x080015ad
 800152c:	080015ad 	.word	0x080015ad
 8001530:	080015ad 	.word	0x080015ad
 8001534:	080015ad 	.word	0x080015ad
 8001538:	080015ad 	.word	0x080015ad
 800153c:	080015ad 	.word	0x080015ad
 8001540:	080015ad 	.word	0x080015ad
 8001544:	080015ad 	.word	0x080015ad
 8001548:	080015ad 	.word	0x080015ad
 800154c:	080015ad 	.word	0x080015ad
 8001550:	080015ad 	.word	0x080015ad
 8001554:	080015ad 	.word	0x080015ad
 8001558:	080015ad 	.word	0x080015ad
 800155c:	080015ad 	.word	0x080015ad
 8001560:	080015ad 	.word	0x080015ad
 8001564:	080015ad 	.word	0x080015ad
 8001568:	080015ad 	.word	0x080015ad
 800156c:	0800157d 	.word	0x0800157d
 8001570:	2b5c      	cmp	r3, #92	; 0x5c
 8001572:	d11b      	bne.n	80015ac <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	225c      	movs	r2, #92	; 0x5c
 8001578:	701a      	strb	r2, [r3, #0]
                    break;
 800157a:	e022      	b.n	80015c2 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2222      	movs	r2, #34	; 0x22
 8001580:	701a      	strb	r2, [r3, #0]
                    break;
 8001582:	e01e      	b.n	80015c2 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2262      	movs	r2, #98	; 0x62
 8001588:	701a      	strb	r2, [r3, #0]
                    break;
 800158a:	e01a      	b.n	80015c2 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2266      	movs	r2, #102	; 0x66
 8001590:	701a      	strb	r2, [r3, #0]
                    break;
 8001592:	e016      	b.n	80015c2 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	226e      	movs	r2, #110	; 0x6e
 8001598:	701a      	strb	r2, [r3, #0]
                    break;
 800159a:	e012      	b.n	80015c2 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2272      	movs	r2, #114	; 0x72
 80015a0:	701a      	strb	r2, [r3, #0]
                    break;
 80015a2:	e00e      	b.n	80015c2 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2274      	movs	r2, #116	; 0x74
 80015a8:	701a      	strb	r2, [r3, #0]
                    break;
 80015aa:	e00a      	b.n	80015c2 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4914      	ldr	r1, [pc, #80]	; (8001604 <print_string_ptr+0x25c>)
 80015b4:	69b8      	ldr	r0, [r7, #24]
 80015b6:	f009 ff5f 	bl	800b478 <siprintf>
                    output_pointer += 4;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	3304      	adds	r3, #4
 80015be:	61bb      	str	r3, [r7, #24]
                    break;
 80015c0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f af73 	bne.w	80014be <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4413      	add	r3, r2
 80015e0:	2222      	movs	r2, #34	; 0x22
 80015e2:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3302      	adds	r3, #2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4413      	add	r3, r2
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

    return true;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	0800c510 	.word	0x0800c510
 8001600:	04000037 	.word	0x04000037
 8001604:	0800c514 	.word	0x0800c514

08001608 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	6839      	ldr	r1, [r7, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fec5 	bl	80013a8 <print_string_ptr>
 800161e:	4603      	mov	r3, r0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001634:	2300      	movs	r3, #0
 8001636:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2224      	movs	r2, #36	; 0x24
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f009 fe4f 	bl	800b2e4 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a38      	ldr	r2, [pc, #224]	; (800172c <print+0x104>)
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	4610      	mov	r0, r2
 8001650:	4798      	blx	r3
 8001652:	4603      	mov	r3, r0
 8001654:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8001656:	4b35      	ldr	r3, [pc, #212]	; (800172c <print+0x104>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	ca07      	ldmia	r2, {r0, r1, r2}
 8001668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d040      	beq.n	80016f4 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f869 	bl	8001750 <print_value>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d039      	beq.n	80016f8 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fd33 	bl	80010f4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	6938      	ldr	r0, [r7, #16]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	3201      	adds	r2, #1
 80016a0:	4611      	mov	r1, r2
 80016a2:	4798      	blx	r3
 80016a4:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d027      	beq.n	80016fc <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	e01e      	b.n	80016f0 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	3201      	adds	r2, #1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4798      	blx	r3
 80016be:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80016c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	bf28      	it	cs
 80016d2:	4613      	movcs	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016d8:	f009 fdf6 	bl	800b2c8 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016e0:	4413      	add	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4610      	mov	r0, r2
 80016ee:	4798      	blx	r3
    }

    return printed;
 80016f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f2:	e016      	b.n	8001722 <print+0xfa>
        goto fail;
 80016f4:	bf00      	nop
 80016f6:	e004      	b.n	8001702 <print+0xda>
        goto fail;
 80016f8:	bf00      	nop
 80016fa:	e002      	b.n	8001702 <print+0xda>
            goto fail;
 80016fc:	bf00      	nop
 80016fe:	e000      	b.n	8001702 <print+0xda>
            goto fail;
 8001700:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4610      	mov	r0, r2
 8001710:	4798      	blx	r3
    }

    if (printed != NULL)
 8001712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <print+0xf8>
    {
        hooks->deallocate(printed);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800171e:	4798      	blx	r3
    }

    return NULL;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3738      	adds	r7, #56	; 0x38
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	0800c64c 	.word	0x0800c64c

08001730 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <cJSON_PrintUnformatted+0x1c>)
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff73 	bl	8001628 <print>
 8001742:	4603      	mov	r3, r0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000000 	.word	0x20000000

08001750 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <print_value+0x1a>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <print_value+0x1e>
    {
        return false;
 800176a:	2300      	movs	r3, #0
 800176c:	e0c9      	b.n	8001902 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b80      	cmp	r3, #128	; 0x80
 8001776:	f000 808e 	beq.w	8001896 <print_value+0x146>
 800177a:	2b80      	cmp	r3, #128	; 0x80
 800177c:	f300 80c0 	bgt.w	8001900 <print_value+0x1b0>
 8001780:	2b20      	cmp	r3, #32
 8001782:	dc49      	bgt.n	8001818 <print_value+0xc8>
 8001784:	2b00      	cmp	r3, #0
 8001786:	f340 80bb 	ble.w	8001900 <print_value+0x1b0>
 800178a:	3b01      	subs	r3, #1
 800178c:	2b1f      	cmp	r3, #31
 800178e:	f200 80b7 	bhi.w	8001900 <print_value+0x1b0>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <print_value+0x48>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	08001843 	.word	0x08001843
 800179c:	08001867 	.word	0x08001867
 80017a0:	08001901 	.word	0x08001901
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	08001901 	.word	0x08001901
 80017ac:	08001901 	.word	0x08001901
 80017b0:	08001901 	.word	0x08001901
 80017b4:	0800188b 	.word	0x0800188b
 80017b8:	08001901 	.word	0x08001901
 80017bc:	08001901 	.word	0x08001901
 80017c0:	08001901 	.word	0x08001901
 80017c4:	08001901 	.word	0x08001901
 80017c8:	08001901 	.word	0x08001901
 80017cc:	08001901 	.word	0x08001901
 80017d0:	08001901 	.word	0x08001901
 80017d4:	080018dd 	.word	0x080018dd
 80017d8:	08001901 	.word	0x08001901
 80017dc:	08001901 	.word	0x08001901
 80017e0:	08001901 	.word	0x08001901
 80017e4:	08001901 	.word	0x08001901
 80017e8:	08001901 	.word	0x08001901
 80017ec:	08001901 	.word	0x08001901
 80017f0:	08001901 	.word	0x08001901
 80017f4:	08001901 	.word	0x08001901
 80017f8:	08001901 	.word	0x08001901
 80017fc:	08001901 	.word	0x08001901
 8001800:	08001901 	.word	0x08001901
 8001804:	08001901 	.word	0x08001901
 8001808:	08001901 	.word	0x08001901
 800180c:	08001901 	.word	0x08001901
 8001810:	08001901 	.word	0x08001901
 8001814:	080018e9 	.word	0x080018e9
 8001818:	2b40      	cmp	r3, #64	; 0x40
 800181a:	d06b      	beq.n	80018f4 <print_value+0x1a4>
 800181c:	e070      	b.n	8001900 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800181e:	2105      	movs	r1, #5
 8001820:	6838      	ldr	r0, [r7, #0]
 8001822:	f7ff fbcd 	bl	8000fc0 <ensure>
 8001826:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <print_value+0xe2>
            {
                return false;
 800182e:	2300      	movs	r3, #0
 8001830:	e067      	b.n	8001902 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a35      	ldr	r2, [pc, #212]	; (800190c <print_value+0x1bc>)
 8001836:	6810      	ldr	r0, [r2, #0]
 8001838:	6018      	str	r0, [r3, #0]
 800183a:	7912      	ldrb	r2, [r2, #4]
 800183c:	711a      	strb	r2, [r3, #4]
            return true;
 800183e:	2301      	movs	r3, #1
 8001840:	e05f      	b.n	8001902 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001842:	2106      	movs	r1, #6
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f7ff fbbb 	bl	8000fc0 <ensure>
 800184a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <print_value+0x106>
            {
                return false;
 8001852:	2300      	movs	r3, #0
 8001854:	e055      	b.n	8001902 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <print_value+0x1c0>)
 800185a:	6810      	ldr	r0, [r2, #0]
 800185c:	6018      	str	r0, [r3, #0]
 800185e:	8892      	ldrh	r2, [r2, #4]
 8001860:	809a      	strh	r2, [r3, #4]
            return true;
 8001862:	2301      	movs	r3, #1
 8001864:	e04d      	b.n	8001902 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8001866:	2105      	movs	r1, #5
 8001868:	6838      	ldr	r0, [r7, #0]
 800186a:	f7ff fba9 	bl	8000fc0 <ensure>
 800186e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <print_value+0x12a>
            {
                return false;
 8001876:	2300      	movs	r3, #0
 8001878:	e043      	b.n	8001902 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a25      	ldr	r2, [pc, #148]	; (8001914 <print_value+0x1c4>)
 800187e:	6810      	ldr	r0, [r2, #0]
 8001880:	6018      	str	r0, [r3, #0]
 8001882:	7912      	ldrb	r2, [r2, #4]
 8001884:	711a      	strb	r2, [r3, #4]
            return true;
 8001886:	2301      	movs	r3, #1
 8001888:	e03b      	b.n	8001902 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fc9b 	bl	80011c8 <print_number>
 8001892:	4603      	mov	r3, r0
 8001894:	e035      	b.n	8001902 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <print_value+0x156>
            {
                return false;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02d      	b.n	8001902 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fc90 	bl	80001d0 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	3301      	adds	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f7ff fb81 	bl	8000fc0 <ensure>
 80018be:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <print_value+0x17a>
            {
                return false;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e01b      	b.n	8001902 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4619      	mov	r1, r3
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f009 fcf8 	bl	800b2c8 <memcpy>
            return true;
 80018d8:	2301      	movs	r3, #1
 80018da:	e012      	b.n	8001902 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fe92 	bl	8001608 <print_string>
 80018e4:	4603      	mov	r3, r0
 80018e6:	e00c      	b.n	8001902 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f814 	bl	8001918 <print_array>
 80018f0:	4603      	mov	r3, r0
 80018f2:	e006      	b.n	8001902 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f894 	bl	8001a24 <print_object>
 80018fc:	4603      	mov	r3, r0
 80018fe:	e000      	b.n	8001902 <print_value+0x1b2>

        default:
            return false;
 8001900:	2300      	movs	r3, #0
    }
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	0800c4f0 	.word	0x0800c4f0
 8001910:	0800c520 	.word	0x0800c520
 8001914:	0800c528 	.word	0x0800c528

08001918 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <print_array+0x22>
    {
        return false;
 8001936:	2300      	movs	r3, #0
 8001938:	e070      	b.n	8001a1c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800193a:	2101      	movs	r1, #1
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f7ff fb3f 	bl	8000fc0 <ensure>
 8001942:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <print_array+0x36>
    {
        return false;
 800194a:	2300      	movs	r3, #0
 800194c:	e066      	b.n	8001a1c <print_array+0x104>
    }

    *output_pointer = '[';
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	225b      	movs	r2, #91	; 0x5b
 8001952:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001968:	e03d      	b.n	80019e6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	6938      	ldr	r0, [r7, #16]
 800196e:	f7ff feef 	bl	8001750 <print_value>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <print_array+0x64>
        {
            return false;
 8001978:	2300      	movs	r3, #0
 800197a:	e04f      	b.n	8001a1c <print_array+0x104>
        }
        update_offset(output_buffer);
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f7ff fbb9 	bl	80010f4 <update_offset>
        if (current_element->next)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d02a      	beq.n	80019e0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <print_array+0x7e>
 8001992:	2302      	movs	r3, #2
 8001994:	e000      	b.n	8001998 <print_array+0x80>
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	4619      	mov	r1, r3
 80019a0:	6838      	ldr	r0, [r7, #0]
 80019a2:	f7ff fb0d 	bl	8000fc0 <ensure>
 80019a6:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <print_array+0x9a>
            {
                return false;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e034      	b.n	8001a1c <print_array+0x104>
            }
            *output_pointer++ = ',';
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	617a      	str	r2, [r7, #20]
 80019b8:	222c      	movs	r2, #44	; 0x2c
 80019ba:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	617a      	str	r2, [r7, #20]
 80019ca:	2220      	movs	r2, #32
 80019cc:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	441a      	add	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1be      	bne.n	800196a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80019ec:	2102      	movs	r1, #2
 80019ee:	6838      	ldr	r0, [r7, #0]
 80019f0:	f7ff fae6 	bl	8000fc0 <ensure>
 80019f4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <print_array+0xe8>
    {
        return false;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e00d      	b.n	8001a1c <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	617a      	str	r2, [r7, #20]
 8001a06:	225d      	movs	r2, #93	; 0x5d
 8001a08:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	60da      	str	r2, [r3, #12]

    return true;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <print_object+0x22>
    {
        return false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e108      	b.n	8001c58 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <print_object+0x2e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e000      	b.n	8001a54 <print_object+0x30>
 8001a52:	2301      	movs	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7ff faaf 	bl	8000fc0 <ensure>
 8001a62:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <print_object+0x4a>
    {
        return false;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e0f4      	b.n	8001c58 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	61fa      	str	r2, [r7, #28]
 8001a74:	227b      	movs	r2, #123	; 0x7b
 8001a76:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	61fa      	str	r2, [r7, #28]
 8001a90:	220a      	movs	r2, #10
 8001a92:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	441a      	add	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001aa0:	e0a0      	b.n	8001be4 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d022      	beq.n	8001af0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7ff fa85 	bl	8000fc0 <ensure>
 8001ab6:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <print_object+0x9e>
            {
                return false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e0ca      	b.n	8001c58 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e007      	b.n	8001ad8 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	61fa      	str	r2, [r7, #28]
 8001ace:	2209      	movs	r2, #9
 8001ad0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3f2      	bcc.n	8001ac8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	441a      	add	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	6839      	ldr	r1, [r7, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc56 	bl	80013a8 <print_string_ptr>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <print_object+0xe2>
        {
            return false;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e0a8      	b.n	8001c58 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b06:	6838      	ldr	r0, [r7, #0]
 8001b08:	f7ff faf4 	bl	80010f4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <print_object+0xf4>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e000      	b.n	8001b1a <print_object+0xf6>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	f7ff fa4e 	bl	8000fc0 <ensure>
 8001b24:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <print_object+0x10c>
        {
            return false;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e093      	b.n	8001c58 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	61fa      	str	r2, [r7, #28]
 8001b36:	223a      	movs	r2, #58	; 0x3a
 8001b38:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	61fa      	str	r2, [r7, #28]
 8001b48:	2209      	movs	r2, #9
 8001b4a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	441a      	add	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	69b8      	ldr	r0, [r7, #24]
 8001b5c:	f7ff fdf8 	bl	8001750 <print_value>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <print_object+0x146>
        {
            return false;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e076      	b.n	8001c58 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f7ff fac2 	bl	80010f4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <print_object+0x158>
 8001b78:	2201      	movs	r2, #1
 8001b7a:	e000      	b.n	8001b7e <print_object+0x15a>
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <print_object+0x166>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <print_object+0x168>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4619      	mov	r1, r3
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	f7ff fa12 	bl	8000fc0 <ensure>
 8001b9c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <print_object+0x184>
        {
            return false;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e057      	b.n	8001c58 <print_object+0x234>
        }
        if (current_item->next)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	61fa      	str	r2, [r7, #28]
 8001bb6:	222c      	movs	r2, #44	; 0x2c
 8001bb8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	61fa      	str	r2, [r7, #28]
 8001bc8:	220a      	movs	r2, #10
 8001bca:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	441a      	add	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f af5b 	bne.w	8001aa2 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <print_object+0x1d8>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	e000      	b.n	8001bfe <print_object+0x1da>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6838      	ldr	r0, [r7, #0]
 8001c02:	f7ff f9dd 	bl	8000fc0 <ensure>
 8001c06:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <print_object+0x1ee>
    {
        return false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e022      	b.n	8001c58 <print_object+0x234>
    }
    if (output_buffer->format)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d010      	beq.n	8001c3c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e007      	b.n	8001c30 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	61fa      	str	r2, [r7, #28]
 8001c26:	2209      	movs	r2, #9
 8001c28:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3f1      	bcc.n	8001c20 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	61fa      	str	r2, [r7, #28]
 8001c42:	227d      	movs	r2, #125	; 0x7d
 8001c44:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	60da      	str	r2, [r3, #12]

    return true;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	605a      	str	r2, [r3, #4]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <add_item_to_array+0x22>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <add_item_to_array+0x22>
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d101      	bne.n	8001ca8 <add_item_to_array+0x26>
    {
        return false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e01e      	b.n	8001ce6 <add_item_to_array+0x64>
    }

    child = array->child;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e00d      	b.n	8001ce4 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d009      	beq.n	8001ce4 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffc2 	bl	8001c60 <suffix_object>
            array->child->prev = item;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <add_item_to_object+0x30>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <add_item_to_object+0x30>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <add_item_to_object+0x30>
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d101      	bne.n	8001d38 <add_item_to_object+0x34>
    {
        return false;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e036      	b.n	8001da6 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001d3e:	68b8      	ldr	r0, [r7, #8]
 8001d40:	f7ff ffd5 	bl	8001cee <cast_away_const>
 8001d44:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	e00e      	b.n	8001d70 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff f8a3 	bl	8000ea0 <cJSON_strdup>
 8001d5a:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <add_item_to_object+0x62>
        {
            return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e01f      	b.n	8001da6 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d6e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <add_item_to_object+0x8c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6a12      	ldr	r2, [r2, #32]
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4798      	blx	r3
    }

    item->string = new_key;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff ff6f 	bl	8001c82 <add_item_to_array>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <cJSON_AddStringToObject>:
    cJSON_Delete(number_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f819 	bl	8001df4 <cJSON_CreateString>
 8001dc2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <cJSON_AddStringToObject+0x40>)
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff ff98 	bl	8001d04 <add_item_to_object>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	e003      	b.n	8001de6 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff f89c 	bl	8000f1c <cJSON_Delete>
    return NULL;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001dfc:	480f      	ldr	r0, [pc, #60]	; (8001e3c <cJSON_CreateString+0x48>)
 8001dfe:	f7ff f877 	bl	8000ef0 <cJSON_New_Item>
 8001e02:	60f8      	str	r0, [r7, #12]
    if(item)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001e10:	490a      	ldr	r1, [pc, #40]	; (8001e3c <cJSON_CreateString+0x48>)
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff f844 	bl	8000ea0 <cJSON_strdup>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d104      	bne.n	8001e30 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff f878 	bl	8000f1c <cJSON_Delete>
            return NULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001e30:	68fb      	ldr	r3, [r7, #12]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000

08001e40 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e46:	4807      	ldr	r0, [pc, #28]	; (8001e64 <cJSON_CreateObject+0x24>)
 8001e48:	f7ff f852 	bl	8000ef0 <cJSON_New_Item>
 8001e4c:	6078      	str	r0, [r7, #4]
    if (item)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000000 	.word	0x20000000

08001e68 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
#if defined(MLX90614) || defined(MLX90632)
int8_t mlx90614_mode = 0;
int8_t tim_wait_segment = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f040 80c3 	bne.w	8002002 <HAL_TIM_PeriodElapsedCallback+0x19a>
	{
		// Check all time if button is pressed
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4864      	ldr	r0, [pc, #400]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e80:	f001 fdf0 	bl	8003a64 <HAL_GPIO_ReadPin>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d032      	beq.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			// Wait untill time ends
			if (tim_wait_segment == 100)
 8001e8a:	4b62      	ldr	r3, [pc, #392]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d10f      	bne.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				// crutch
				if (mlx90614_mode)
 8001e94:	4b60      	ldr	r3, [pc, #384]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001e96:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0x3e>
					mlx90614_mode = 0;
 8001e9e:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e002      	b.n	8001eac <HAL_TIM_PeriodElapsedCallback+0x44>
				else
					mlx90614_mode = 1;
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]

				tim_wait_segment = 0;
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e0a3      	b.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x194>
			}
			else
			{
				if (tim_wait_segment > 100)
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001eb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	dd0e      	ble.n	8001edc <HAL_TIM_PeriodElapsedCallback+0x74>
					{
						while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8001ebe:	e002      	b.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x5e>
							HAL_Delay(100);
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	f001 fa6b 	bl	800339c <HAL_Delay>
						while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4851      	ldr	r0, [pc, #324]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001eca:	f001 fdcb 	bl	8003a64 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f5      	bne.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x58>
						tim_wait_segment = 0;
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e08f      	b.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x194>
					}
				else
				tim_wait_segment++;
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ede:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e085      	b.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x194>
			}
		}
		else
		{
			if (tim_wait_segment > 4)
 8001ef0:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	dd7d      	ble.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
#				ifdef SSD1306_DISPLAY
				float_temp_to_char_temp(float_temp_1, char_temp_1);
 8001efa:	4b48      	ldr	r3, [pc, #288]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb22 	bl	8000548 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4845      	ldr	r0, [pc, #276]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001f0a:	ec43 2b10 	vmov	d0, r2, r3
 8001f0e:	f000 f899 	bl	8002044 <float_temp_to_char_temp>
				float_temp_to_char_temp(float_temp_2, char_temp_2);
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb16 	bl	8000548 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4841      	ldr	r0, [pc, #260]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001f22:	ec43 2b10 	vmov	d0, r2, r3
 8001f26:	f000 f88d 	bl	8002044 <float_temp_to_char_temp>

				SSD1306_GotoXY(0, 0);
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 fe57 	bl	8002be0 <SSD1306_GotoXY>
				SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8001f32:	2201      	movs	r2, #1
 8001f34:	493d      	ldr	r1, [pc, #244]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001f36:	483a      	ldr	r0, [pc, #232]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001f38:	f000 fee8 	bl	8002d0c <SSD1306_Puts>

				SSD1306_GotoXY(70, 0);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2046      	movs	r0, #70	; 0x46
 8001f40:	f000 fe4e 	bl	8002be0 <SSD1306_GotoXY>
				SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001f44:	2201      	movs	r2, #1
 8001f46:	4939      	ldr	r1, [pc, #228]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001f48:	4837      	ldr	r0, [pc, #220]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001f4a:	f000 fedf 	bl	8002d0c <SSD1306_Puts>
#	 		    endif

#			    ifdef USB_SEND
				HAL_UART_Transmit_IT(&huart2, cap_mess_1, strlen(cap_mess_1));
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001f50:	681c      	ldr	r4, [r3, #0]
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f93a 	bl	80001d0 <strlen>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4621      	mov	r1, r4
 8001f64:	4833      	ldr	r0, [pc, #204]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001f66:	f004 fddc 	bl	8006b22 <HAL_UART_Transmit_IT>
//				HAL_UART_Transmit_IT(&huart2, hello, strlen(hello));

				CDC_Transmit_FS(cap_mess_1, strlen(cap_mess_1));
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001f6c:	681c      	ldr	r4, [r3, #0]
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe f92c 	bl	80001d0 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f008 fd0c 	bl	800a99c <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t*)char_temp_1, strlen((uint8_t*)char_temp_1));
 8001f84:	4826      	ldr	r0, [pc, #152]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001f86:	f7fe f923 	bl	80001d0 <strlen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4823      	ldr	r0, [pc, #140]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001f92:	f008 fd03 	bl	800a99c <CDC_Transmit_FS>
				CDC_Transmit_FS(end, strlen(end));
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001f98:	681c      	ldr	r4, [r3, #0]
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f916 	bl	80001d0 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4620      	mov	r0, r4
 8001fac:	f008 fcf6 	bl	800a99c <CDC_Transmit_FS>

				CDC_Transmit_FS(cap_mess_2, strlen(cap_mess_2));
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001fb2:	681c      	ldr	r4, [r3, #0]
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f909 	bl	80001d0 <strlen>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f008 fce9 	bl	800a99c <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t*)char_temp_2, strlen((uint8_t*)char_temp_2));
 8001fca:	4817      	ldr	r0, [pc, #92]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fcc:	f7fe f900 	bl	80001d0 <strlen>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fd8:	f008 fce0 	bl	800a99c <CDC_Transmit_FS>
				CDC_Transmit_FS(end, strlen(end));
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001fde:	681c      	ldr	r4, [r3, #0]
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f8f3 	bl	80001d0 <strlen>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f008 fcd3 	bl	800a99c <CDC_Transmit_FS>
#  		   		endif
			}

			tim_wait_segment = 0;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_IRQHandler(&htim1);
 8001ffc:	4810      	ldr	r0, [pc, #64]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ffe:	f004 f981 	bl	8006304 <HAL_TIM_IRQHandler>
	}
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40020000 	.word	0x40020000
 8002014:	20000229 	.word	0x20000229
 8002018:	20000228 	.word	0x20000228
 800201c:	20000220 	.word	0x20000220
 8002020:	200009b4 	.word	0x200009b4
 8002024:	20000224 	.word	0x20000224
 8002028:	20000aa8 	.word	0x20000aa8
 800202c:	20000018 	.word	0x20000018
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000a0c 	.word	0x20000a0c
 8002038:	20000014 	.word	0x20000014
 800203c:	20000010 	.word	0x20000010
 8002040:	200009bc 	.word	0x200009bc

08002044 <float_temp_to_char_temp>:

void float_temp_to_char_temp(double digit, char* arr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	ed87 0b02 	vstr	d0, [r7, #8]
 800204e:	6078      	str	r0, [r7, #4]
    int l_digit = digit * 100.0;
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <float_temp_to_char_temp+0x110>)
 8002056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205a:	f7fe facd 	bl	80005f8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd77 	bl	8000b58 <__aeabi_d2iz>
 800206a:	4603      	mov	r3, r0
 800206c:	617b      	str	r3, [r7, #20]
    arr[7] = '\0';
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3307      	adds	r3, #7
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
    arr[6] = '\0';
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3306      	adds	r3, #6
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    arr[5] = '\0';
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3305      	adds	r3, #5
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    arr[4] = l_digit % 10 + '0';
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <float_temp_to_char_temp+0x114>)
 800208a:	fb83 1302 	smull	r1, r3, r3, r2
 800208e:	1099      	asrs	r1, r3, #2
 8002090:	17d3      	asrs	r3, r2, #31
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	460b      	mov	r3, r1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	1ad1      	subs	r1, r2, r3
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	3230      	adds	r2, #48	; 0x30
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <float_temp_to_char_temp+0x114>)
 80020ae:	fb82 1203 	smull	r1, r2, r2, r3
 80020b2:	1092      	asrs	r2, r2, #2
 80020b4:	17db      	asrs	r3, r3, #31
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    arr[3] = l_digit % 10 + '0';
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <float_temp_to_char_temp+0x114>)
 80020be:	fb83 1302 	smull	r1, r3, r3, r2
 80020c2:	1099      	asrs	r1, r3, #2
 80020c4:	17d3      	asrs	r3, r2, #31
 80020c6:	1ac9      	subs	r1, r1, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	1ad1      	subs	r1, r2, r3
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3303      	adds	r3, #3
 80020d8:	3230      	adds	r2, #48	; 0x30
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <float_temp_to_char_temp+0x114>)
 80020e2:	fb82 1203 	smull	r1, r2, r2, r3
 80020e6:	1092      	asrs	r2, r2, #2
 80020e8:	17db      	asrs	r3, r3, #31
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    arr[2] = ',';
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3302      	adds	r3, #2
 80020f2:	222c      	movs	r2, #44	; 0x2c
 80020f4:	701a      	strb	r2, [r3, #0]
    arr[1] = l_digit % 10 + '0';
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <float_temp_to_char_temp+0x114>)
 80020fa:	fb83 1302 	smull	r1, r3, r3, r2
 80020fe:	1099      	asrs	r1, r3, #2
 8002100:	17d3      	asrs	r3, r2, #31
 8002102:	1ac9      	subs	r1, r1, r3
 8002104:	460b      	mov	r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	1ad1      	subs	r1, r2, r3
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	3230      	adds	r2, #48	; 0x30
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <float_temp_to_char_temp+0x114>)
 800211e:	fb82 1203 	smull	r1, r2, r2, r3
 8002122:	1092      	asrs	r2, r2, #2
 8002124:	17db      	asrs	r3, r3, #31
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
    arr[0] = l_digit % 10 + '0';
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <float_temp_to_char_temp+0x114>)
 800212e:	fb83 1302 	smull	r1, r3, r3, r2
 8002132:	1099      	asrs	r1, r3, #2
 8002134:	17d3      	asrs	r3, r2, #31
 8002136:	1ac9      	subs	r1, r1, r3
 8002138:	460b      	mov	r3, r1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	1ad1      	subs	r1, r2, r3
 8002142:	b2cb      	uxtb	r3, r1
 8002144:	3330      	adds	r3, #48	; 0x30
 8002146:	b2da      	uxtb	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	701a      	strb	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40590000 	.word	0x40590000
 8002158:	66666667 	.word	0x66666667

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b097      	sub	sp, #92	; 0x5c
 8002160:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002162:	f001 f8a9 	bl	80032b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002166:	f000 f869 	bl	800223c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216a:	f000 f9d9 	bl	8002520 <MX_GPIO_Init>
  MX_I2C1_Init();
 800216e:	f000 f8d1 	bl	8002314 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002172:	f000 f8fd 	bl	8002370 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8002176:	f008 fb3d 	bl	800a7f4 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 800217a:	f000 f927 	bl	80023cc <MX_I2C3_Init>
  MX_TIM1_Init();
 800217e:	f000 f953 	bl	8002428 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002182:	f000 f9a3 	bl	80024cc <MX_USART2_UART_Init>
     * Temp sensor 1 - I2C1, temp sensor 2 - I2C2, Display - I2C3
     */

  // Initialize Display
#ifdef SSD1306_DISPLAY
    if (SSD1306_Init(hi2c3) != 1)
 8002186:	4c24      	ldr	r4, [pc, #144]	; (8002218 <main+0xbc>)
 8002188:	4668      	mov	r0, sp
 800218a:	f104 0310 	add.w	r3, r4, #16
 800218e:	2244      	movs	r2, #68	; 0x44
 8002190:	4619      	mov	r1, r3
 8002192:	f009 f899 	bl	800b2c8 <memcpy>
 8002196:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800219a:	f000 fa43 	bl	8002624 <SSD1306_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d00d      	beq.n	80021c0 <main+0x64>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80021a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a8:	481c      	ldr	r0, [pc, #112]	; (800221c <main+0xc0>)
 80021aa:	f001 fc8c 	bl	8003ac6 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 80021ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b2:	f001 f8f3 	bl	800339c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80021b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ba:	4818      	ldr	r0, [pc, #96]	; (800221c <main+0xc0>)
 80021bc:	f001 fc83 	bl	8003ac6 <HAL_GPIO_TogglePin>
    }

    SSD1306_GotoXY (0,0);
 80021c0:	2100      	movs	r1, #0
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 fd0c 	bl	8002be0 <SSD1306_GotoXY>
    SSD1306_Puts ("initialize", &Font_11x18, 1);
 80021c8:	2201      	movs	r2, #1
 80021ca:	4915      	ldr	r1, [pc, #84]	; (8002220 <main+0xc4>)
 80021cc:	4815      	ldr	r0, [pc, #84]	; (8002224 <main+0xc8>)
 80021ce:	f000 fd9d 	bl	8002d0c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80021d2:	f000 fc3d 	bl	8002a50 <SSD1306_UpdateScreen>
#elif defined(MLX90632_DEBUG_MODE)
    mlx90632_start_debugging(mlx_addr_1, hi2c1);
#endif


    HAL_TIM_Base_Start_IT(&htim1);
 80021d6:	4814      	ldr	r0, [pc, #80]	; (8002228 <main+0xcc>)
 80021d8:	f004 f824 	bl	8006224 <HAL_TIM_Base_Start_IT>

    char* hello = "Hello world!\n\0";
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <main+0xd0>)
 80021de:	60fb      	str	r3, [r7, #12]

   cJSON* root = cJSON_CreateObject();
 80021e0:	f7ff fe2e 	bl	8001e40 <cJSON_CreateObject>
 80021e4:	60b8      	str	r0, [r7, #8]
   cJSON_AddStringToObject(root, "name", "Hello world");
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <main+0xd4>)
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <main+0xd8>)
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f7ff fde0 	bl	8001db0 <cJSON_AddStringToObject>
   char* string = cJSON_PrintUnformatted(root);
 80021f0:	68b8      	ldr	r0, [r7, #8]
 80021f2:	f7ff fa9d 	bl	8001730 <cJSON_PrintUnformatted>
 80021f6:	6078      	str	r0, [r7, #4]

    // main cycle
    while(1)
    {
//    	HAL_UART_Transmit(&huart2, hello, strlen(hello), 100);
    	HAL_UART_Transmit_IT(&huart2, string, strlen(string) + 1);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7fd ffe9 	bl	80001d0 <strlen>
 80021fe:	4603      	mov	r3, r0
 8002200:	b29b      	uxth	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <main+0xdc>)
 800220c:	f004 fc89 	bl	8006b22 <HAL_UART_Transmit_IT>
//    	HAL_UART_Transmit_IT(&huart2, hello, strlen(hello) + 1);
    	HAL_Delay(100);
 8002210:	2064      	movs	r0, #100	; 0x64
 8002212:	f001 f8c3 	bl	800339c <HAL_Delay>
    	HAL_UART_Transmit_IT(&huart2, string, strlen(string) + 1);
 8002216:	e7ef      	b.n	80021f8 <main+0x9c>
 8002218:	20000864 	.word	0x20000864
 800221c:	40020c00 	.word	0x40020c00
 8002220:	20000018 	.word	0x20000018
 8002224:	0800c5cc 	.word	0x0800c5cc
 8002228:	200009bc 	.word	0x200009bc
 800222c:	0800c5d8 	.word	0x0800c5d8
 8002230:	0800c5e8 	.word	0x0800c5e8
 8002234:	0800c5f4 	.word	0x0800c5f4
 8002238:	20000a0c 	.word	0x20000a0c

0800223c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b094      	sub	sp, #80	; 0x50
 8002240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002242:	f107 0320 	add.w	r3, r7, #32
 8002246:	2230      	movs	r2, #48	; 0x30
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f009 f84a 	bl	800b2e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <SystemClock_Config+0xd0>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <SystemClock_Config+0xd0>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <SystemClock_Config+0xd0>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <SystemClock_Config+0xd4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <SystemClock_Config+0xd4>)
 8002286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <SystemClock_Config+0xd4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a2:	2301      	movs	r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a6:	2310      	movs	r3, #16
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022aa:	2302      	movs	r3, #2
 80022ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80022b4:	230f      	movs	r3, #15
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80022b8:	2390      	movs	r3, #144	; 0x90
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022bc:	2302      	movs	r3, #2
 80022be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80022c0:	2305      	movs	r3, #5
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fb13 	bl	80058f4 <HAL_RCC_OscConfig>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80022d4:	f000 f9a0 	bl	8002618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d8:	230f      	movs	r3, #15
 80022da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fd76 	bl	8005de4 <HAL_RCC_ClockConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80022fe:	f000 f98b 	bl	8002618 <Error_Handler>
  }
}
 8002302:	bf00      	nop
 8002304:	3750      	adds	r7, #80	; 0x50
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000

08002314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <MX_I2C1_Init+0x50>)
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <MX_I2C1_Init+0x54>)
 800231c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <MX_I2C1_Init+0x50>)
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <MX_I2C1_Init+0x58>)
 8002322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_I2C1_Init+0x50>)
 8002332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <MX_I2C1_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_I2C1_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <MX_I2C1_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_I2C1_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002350:	4804      	ldr	r0, [pc, #16]	; (8002364 <MX_I2C1_Init+0x50>)
 8002352:	f001 fbd3 	bl	8003afc <HAL_I2C_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800235c:	f000 f95c 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200008bc 	.word	0x200008bc
 8002368:	40005400 	.word	0x40005400
 800236c:	000186a0 	.word	0x000186a0

08002370 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MX_I2C2_Init+0x50>)
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <MX_I2C2_Init+0x54>)
 8002378:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_I2C2_Init+0x50>)
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_I2C2_Init+0x58>)
 800237e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <MX_I2C2_Init+0x50>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_I2C2_Init+0x50>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_I2C2_Init+0x50>)
 800238e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002392:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <MX_I2C2_Init+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_I2C2_Init+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <MX_I2C2_Init+0x50>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_I2C2_Init+0x50>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <MX_I2C2_Init+0x50>)
 80023ae:	f001 fba5 	bl	8003afc <HAL_I2C_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023b8:	f000 f92e 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000914 	.word	0x20000914
 80023c4:	40005800 	.word	0x40005800
 80023c8:	000186a0 	.word	0x000186a0

080023cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_I2C3_Init+0x50>)
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <MX_I2C3_Init+0x54>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_I2C3_Init+0x50>)
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_I2C3_Init+0x58>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_I2C3_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_I2C3_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_I2C3_Init+0x50>)
 80023ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_I2C3_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_I2C3_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <MX_I2C3_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_I2C3_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MX_I2C3_Init+0x50>)
 800240a:	f001 fb77 	bl	8003afc <HAL_I2C_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002414:	f000 f900 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000864 	.word	0x20000864
 8002420:	40005c00 	.word	0x40005c00
 8002424:	00061a80 	.word	0x00061a80

08002428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <MX_TIM1_Init+0x9c>)
 8002446:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <MX_TIM1_Init+0xa0>)
 8002448:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <MX_TIM1_Init+0x9c>)
 800244c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002450:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <MX_TIM1_Init+0x9c>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_TIM1_Init+0x9c>)
 800245a:	2227      	movs	r2, #39	; 0x27
 800245c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <MX_TIM1_Init+0x9c>)
 8002460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_TIM1_Init+0x9c>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MX_TIM1_Init+0x9c>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002472:	4814      	ldr	r0, [pc, #80]	; (80024c4 <MX_TIM1_Init+0x9c>)
 8002474:	f003 fe86 	bl	8006184 <HAL_TIM_Base_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800247e:	f000 f8cb 	bl	8002618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	4619      	mov	r1, r3
 800248e:	480d      	ldr	r0, [pc, #52]	; (80024c4 <MX_TIM1_Init+0x9c>)
 8002490:	f004 f840 	bl	8006514 <HAL_TIM_ConfigClockSource>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800249a:	f000 f8bd 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_TIM1_Init+0x9c>)
 80024ac:	f004 fa5c 	bl	8006968 <HAL_TIMEx_MasterConfigSynchronization>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80024b6:	f000 f8af 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200009bc 	.word	0x200009bc
 80024c8:	40010000 	.word	0x40010000

080024cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <MX_USART2_UART_Init+0x50>)
 80024d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024f2:	220c      	movs	r2, #12
 80024f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 8002504:	f004 fac0 	bl	8006a88 <HAL_UART_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800250e:	f000 f883 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000a0c 	.word	0x20000a0c
 800251c:	40004400 	.word	0x40004400

08002520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <MX_GPIO_Init+0xec>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a33      	ldr	r2, [pc, #204]	; (800260c <MX_GPIO_Init+0xec>)
 8002540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <MX_GPIO_Init+0xec>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <MX_GPIO_Init+0xec>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a2c      	ldr	r2, [pc, #176]	; (800260c <MX_GPIO_Init+0xec>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <MX_GPIO_Init+0xec>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <MX_GPIO_Init+0xec>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <MX_GPIO_Init+0xec>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <MX_GPIO_Init+0xec>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_GPIO_Init+0xec>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a1e      	ldr	r2, [pc, #120]	; (800260c <MX_GPIO_Init+0xec>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_GPIO_Init+0xec>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_GPIO_Init+0xec>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a17      	ldr	r2, [pc, #92]	; (800260c <MX_GPIO_Init+0xec>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_GPIO_Init+0xec>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <MX_GPIO_Init+0xf0>)
 80025ca:	f001 fa63 	bl	8003a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ce:	2301      	movs	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <MX_GPIO_Init+0xf4>)
 80025e2:	f001 f8a3 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80025ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <MX_GPIO_Init+0xf0>)
 8002600:	f001 f894 	bl	800372c <HAL_GPIO_Init>

}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40020000 	.word	0x40020000

08002618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002620:	e7fe      	b.n	8002620 <Error_Handler+0x8>
	...

08002624 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8002624:	b084      	sub	sp, #16
 8002626:	b590      	push	{r4, r7, lr}
 8002628:	b097      	sub	sp, #92	; 0x5c
 800262a:	af14      	add	r7, sp, #80	; 0x50
 800262c:	f107 0418 	add.w	r4, r7, #24
 8002630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8002634:	f000 fb90 	bl	8002d58 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <SSD1306_Init+0x44>)
 800263a:	4618      	mov	r0, r3
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	2254      	movs	r2, #84	; 0x54
 8002642:	4619      	mov	r1, r3
 8002644:	f008 fe40 	bl	800b2c8 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002648:	f644 6320 	movw	r3, #20000	; 0x4e20
 800264c:	2201      	movs	r2, #1
 800264e:	2178      	movs	r1, #120	; 0x78
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <SSD1306_Init+0x44>)
 8002652:	f001 fc95 	bl	8003f80 <HAL_I2C_IsDeviceReady>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 800265c:	2300      	movs	r3, #0
 800265e:	e1ee      	b.n	8002a3e <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002660:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002664:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002666:	e004      	b.n	8002672 <SSD1306_Init+0x4e>
 8002668:	20000a50 	.word	0x20000a50
		p--;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002678:	4ce1      	ldr	r4, [pc, #900]	; (8002a00 <SSD1306_Init+0x3dc>)
 800267a:	23ae      	movs	r3, #174	; 0xae
 800267c:	9313      	str	r3, [sp, #76]	; 0x4c
 800267e:	4668      	mov	r0, sp
 8002680:	f104 0308 	add.w	r3, r4, #8
 8002684:	224c      	movs	r2, #76	; 0x4c
 8002686:	4619      	mov	r1, r3
 8002688:	f008 fe1e 	bl	800b2c8 <memcpy>
 800268c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002690:	2100      	movs	r1, #0
 8002692:	2078      	movs	r0, #120	; 0x78
 8002694:	f000 fbbe 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002698:	4cd9      	ldr	r4, [pc, #868]	; (8002a00 <SSD1306_Init+0x3dc>)
 800269a:	2320      	movs	r3, #32
 800269c:	9313      	str	r3, [sp, #76]	; 0x4c
 800269e:	4668      	mov	r0, sp
 80026a0:	f104 0308 	add.w	r3, r4, #8
 80026a4:	224c      	movs	r2, #76	; 0x4c
 80026a6:	4619      	mov	r1, r3
 80026a8:	f008 fe0e 	bl	800b2c8 <memcpy>
 80026ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026b0:	2100      	movs	r1, #0
 80026b2:	2078      	movs	r0, #120	; 0x78
 80026b4:	f000 fbae 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80026b8:	4cd1      	ldr	r4, [pc, #836]	; (8002a00 <SSD1306_Init+0x3dc>)
 80026ba:	2310      	movs	r3, #16
 80026bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80026be:	4668      	mov	r0, sp
 80026c0:	f104 0308 	add.w	r3, r4, #8
 80026c4:	224c      	movs	r2, #76	; 0x4c
 80026c6:	4619      	mov	r1, r3
 80026c8:	f008 fdfe 	bl	800b2c8 <memcpy>
 80026cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026d0:	2100      	movs	r1, #0
 80026d2:	2078      	movs	r0, #120	; 0x78
 80026d4:	f000 fb9e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80026d8:	4cc9      	ldr	r4, [pc, #804]	; (8002a00 <SSD1306_Init+0x3dc>)
 80026da:	23b0      	movs	r3, #176	; 0xb0
 80026dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80026de:	4668      	mov	r0, sp
 80026e0:	f104 0308 	add.w	r3, r4, #8
 80026e4:	224c      	movs	r2, #76	; 0x4c
 80026e6:	4619      	mov	r1, r3
 80026e8:	f008 fdee 	bl	800b2c8 <memcpy>
 80026ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026f0:	2100      	movs	r1, #0
 80026f2:	2078      	movs	r0, #120	; 0x78
 80026f4:	f000 fb8e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80026f8:	4cc1      	ldr	r4, [pc, #772]	; (8002a00 <SSD1306_Init+0x3dc>)
 80026fa:	23c8      	movs	r3, #200	; 0xc8
 80026fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80026fe:	4668      	mov	r0, sp
 8002700:	f104 0308 	add.w	r3, r4, #8
 8002704:	224c      	movs	r2, #76	; 0x4c
 8002706:	4619      	mov	r1, r3
 8002708:	f008 fdde 	bl	800b2c8 <memcpy>
 800270c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002710:	2100      	movs	r1, #0
 8002712:	2078      	movs	r0, #120	; 0x78
 8002714:	f000 fb7e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002718:	4cb9      	ldr	r4, [pc, #740]	; (8002a00 <SSD1306_Init+0x3dc>)
 800271a:	2300      	movs	r3, #0
 800271c:	9313      	str	r3, [sp, #76]	; 0x4c
 800271e:	4668      	mov	r0, sp
 8002720:	f104 0308 	add.w	r3, r4, #8
 8002724:	224c      	movs	r2, #76	; 0x4c
 8002726:	4619      	mov	r1, r3
 8002728:	f008 fdce 	bl	800b2c8 <memcpy>
 800272c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002730:	2100      	movs	r1, #0
 8002732:	2078      	movs	r0, #120	; 0x78
 8002734:	f000 fb6e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002738:	4cb1      	ldr	r4, [pc, #708]	; (8002a00 <SSD1306_Init+0x3dc>)
 800273a:	2310      	movs	r3, #16
 800273c:	9313      	str	r3, [sp, #76]	; 0x4c
 800273e:	4668      	mov	r0, sp
 8002740:	f104 0308 	add.w	r3, r4, #8
 8002744:	224c      	movs	r2, #76	; 0x4c
 8002746:	4619      	mov	r1, r3
 8002748:	f008 fdbe 	bl	800b2c8 <memcpy>
 800274c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002750:	2100      	movs	r1, #0
 8002752:	2078      	movs	r0, #120	; 0x78
 8002754:	f000 fb5e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002758:	4ca9      	ldr	r4, [pc, #676]	; (8002a00 <SSD1306_Init+0x3dc>)
 800275a:	2340      	movs	r3, #64	; 0x40
 800275c:	9313      	str	r3, [sp, #76]	; 0x4c
 800275e:	4668      	mov	r0, sp
 8002760:	f104 0308 	add.w	r3, r4, #8
 8002764:	224c      	movs	r2, #76	; 0x4c
 8002766:	4619      	mov	r1, r3
 8002768:	f008 fdae 	bl	800b2c8 <memcpy>
 800276c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002770:	2100      	movs	r1, #0
 8002772:	2078      	movs	r0, #120	; 0x78
 8002774:	f000 fb4e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002778:	4ca1      	ldr	r4, [pc, #644]	; (8002a00 <SSD1306_Init+0x3dc>)
 800277a:	2381      	movs	r3, #129	; 0x81
 800277c:	9313      	str	r3, [sp, #76]	; 0x4c
 800277e:	4668      	mov	r0, sp
 8002780:	f104 0308 	add.w	r3, r4, #8
 8002784:	224c      	movs	r2, #76	; 0x4c
 8002786:	4619      	mov	r1, r3
 8002788:	f008 fd9e 	bl	800b2c8 <memcpy>
 800278c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002790:	2100      	movs	r1, #0
 8002792:	2078      	movs	r0, #120	; 0x78
 8002794:	f000 fb3e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002798:	4c99      	ldr	r4, [pc, #612]	; (8002a00 <SSD1306_Init+0x3dc>)
 800279a:	23ff      	movs	r3, #255	; 0xff
 800279c:	9313      	str	r3, [sp, #76]	; 0x4c
 800279e:	4668      	mov	r0, sp
 80027a0:	f104 0308 	add.w	r3, r4, #8
 80027a4:	224c      	movs	r2, #76	; 0x4c
 80027a6:	4619      	mov	r1, r3
 80027a8:	f008 fd8e 	bl	800b2c8 <memcpy>
 80027ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027b0:	2100      	movs	r1, #0
 80027b2:	2078      	movs	r0, #120	; 0x78
 80027b4:	f000 fb2e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80027b8:	4c91      	ldr	r4, [pc, #580]	; (8002a00 <SSD1306_Init+0x3dc>)
 80027ba:	23a1      	movs	r3, #161	; 0xa1
 80027bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80027be:	4668      	mov	r0, sp
 80027c0:	f104 0308 	add.w	r3, r4, #8
 80027c4:	224c      	movs	r2, #76	; 0x4c
 80027c6:	4619      	mov	r1, r3
 80027c8:	f008 fd7e 	bl	800b2c8 <memcpy>
 80027cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027d0:	2100      	movs	r1, #0
 80027d2:	2078      	movs	r0, #120	; 0x78
 80027d4:	f000 fb1e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80027d8:	4c89      	ldr	r4, [pc, #548]	; (8002a00 <SSD1306_Init+0x3dc>)
 80027da:	23a6      	movs	r3, #166	; 0xa6
 80027dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80027de:	4668      	mov	r0, sp
 80027e0:	f104 0308 	add.w	r3, r4, #8
 80027e4:	224c      	movs	r2, #76	; 0x4c
 80027e6:	4619      	mov	r1, r3
 80027e8:	f008 fd6e 	bl	800b2c8 <memcpy>
 80027ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027f0:	2100      	movs	r1, #0
 80027f2:	2078      	movs	r0, #120	; 0x78
 80027f4:	f000 fb0e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80027f8:	4c81      	ldr	r4, [pc, #516]	; (8002a00 <SSD1306_Init+0x3dc>)
 80027fa:	23a8      	movs	r3, #168	; 0xa8
 80027fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80027fe:	4668      	mov	r0, sp
 8002800:	f104 0308 	add.w	r3, r4, #8
 8002804:	224c      	movs	r2, #76	; 0x4c
 8002806:	4619      	mov	r1, r3
 8002808:	f008 fd5e 	bl	800b2c8 <memcpy>
 800280c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002810:	2100      	movs	r1, #0
 8002812:	2078      	movs	r0, #120	; 0x78
 8002814:	f000 fafe 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002818:	4c79      	ldr	r4, [pc, #484]	; (8002a00 <SSD1306_Init+0x3dc>)
 800281a:	233f      	movs	r3, #63	; 0x3f
 800281c:	9313      	str	r3, [sp, #76]	; 0x4c
 800281e:	4668      	mov	r0, sp
 8002820:	f104 0308 	add.w	r3, r4, #8
 8002824:	224c      	movs	r2, #76	; 0x4c
 8002826:	4619      	mov	r1, r3
 8002828:	f008 fd4e 	bl	800b2c8 <memcpy>
 800282c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002830:	2100      	movs	r1, #0
 8002832:	2078      	movs	r0, #120	; 0x78
 8002834:	f000 faee 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002838:	4c71      	ldr	r4, [pc, #452]	; (8002a00 <SSD1306_Init+0x3dc>)
 800283a:	23a4      	movs	r3, #164	; 0xa4
 800283c:	9313      	str	r3, [sp, #76]	; 0x4c
 800283e:	4668      	mov	r0, sp
 8002840:	f104 0308 	add.w	r3, r4, #8
 8002844:	224c      	movs	r2, #76	; 0x4c
 8002846:	4619      	mov	r1, r3
 8002848:	f008 fd3e 	bl	800b2c8 <memcpy>
 800284c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002850:	2100      	movs	r1, #0
 8002852:	2078      	movs	r0, #120	; 0x78
 8002854:	f000 fade 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002858:	4c69      	ldr	r4, [pc, #420]	; (8002a00 <SSD1306_Init+0x3dc>)
 800285a:	23d3      	movs	r3, #211	; 0xd3
 800285c:	9313      	str	r3, [sp, #76]	; 0x4c
 800285e:	4668      	mov	r0, sp
 8002860:	f104 0308 	add.w	r3, r4, #8
 8002864:	224c      	movs	r2, #76	; 0x4c
 8002866:	4619      	mov	r1, r3
 8002868:	f008 fd2e 	bl	800b2c8 <memcpy>
 800286c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002870:	2100      	movs	r1, #0
 8002872:	2078      	movs	r0, #120	; 0x78
 8002874:	f000 face 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002878:	4c61      	ldr	r4, [pc, #388]	; (8002a00 <SSD1306_Init+0x3dc>)
 800287a:	2300      	movs	r3, #0
 800287c:	9313      	str	r3, [sp, #76]	; 0x4c
 800287e:	4668      	mov	r0, sp
 8002880:	f104 0308 	add.w	r3, r4, #8
 8002884:	224c      	movs	r2, #76	; 0x4c
 8002886:	4619      	mov	r1, r3
 8002888:	f008 fd1e 	bl	800b2c8 <memcpy>
 800288c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002890:	2100      	movs	r1, #0
 8002892:	2078      	movs	r0, #120	; 0x78
 8002894:	f000 fabe 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002898:	4c59      	ldr	r4, [pc, #356]	; (8002a00 <SSD1306_Init+0x3dc>)
 800289a:	23d5      	movs	r3, #213	; 0xd5
 800289c:	9313      	str	r3, [sp, #76]	; 0x4c
 800289e:	4668      	mov	r0, sp
 80028a0:	f104 0308 	add.w	r3, r4, #8
 80028a4:	224c      	movs	r2, #76	; 0x4c
 80028a6:	4619      	mov	r1, r3
 80028a8:	f008 fd0e 	bl	800b2c8 <memcpy>
 80028ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028b0:	2100      	movs	r1, #0
 80028b2:	2078      	movs	r0, #120	; 0x78
 80028b4:	f000 faae 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80028b8:	4c51      	ldr	r4, [pc, #324]	; (8002a00 <SSD1306_Init+0x3dc>)
 80028ba:	23f0      	movs	r3, #240	; 0xf0
 80028bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80028be:	4668      	mov	r0, sp
 80028c0:	f104 0308 	add.w	r3, r4, #8
 80028c4:	224c      	movs	r2, #76	; 0x4c
 80028c6:	4619      	mov	r1, r3
 80028c8:	f008 fcfe 	bl	800b2c8 <memcpy>
 80028cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028d0:	2100      	movs	r1, #0
 80028d2:	2078      	movs	r0, #120	; 0x78
 80028d4:	f000 fa9e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80028d8:	4c49      	ldr	r4, [pc, #292]	; (8002a00 <SSD1306_Init+0x3dc>)
 80028da:	23d9      	movs	r3, #217	; 0xd9
 80028dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80028de:	4668      	mov	r0, sp
 80028e0:	f104 0308 	add.w	r3, r4, #8
 80028e4:	224c      	movs	r2, #76	; 0x4c
 80028e6:	4619      	mov	r1, r3
 80028e8:	f008 fcee 	bl	800b2c8 <memcpy>
 80028ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028f0:	2100      	movs	r1, #0
 80028f2:	2078      	movs	r0, #120	; 0x78
 80028f4:	f000 fa8e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80028f8:	4c41      	ldr	r4, [pc, #260]	; (8002a00 <SSD1306_Init+0x3dc>)
 80028fa:	2322      	movs	r3, #34	; 0x22
 80028fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80028fe:	4668      	mov	r0, sp
 8002900:	f104 0308 	add.w	r3, r4, #8
 8002904:	224c      	movs	r2, #76	; 0x4c
 8002906:	4619      	mov	r1, r3
 8002908:	f008 fcde 	bl	800b2c8 <memcpy>
 800290c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002910:	2100      	movs	r1, #0
 8002912:	2078      	movs	r0, #120	; 0x78
 8002914:	f000 fa7e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002918:	4c39      	ldr	r4, [pc, #228]	; (8002a00 <SSD1306_Init+0x3dc>)
 800291a:	23da      	movs	r3, #218	; 0xda
 800291c:	9313      	str	r3, [sp, #76]	; 0x4c
 800291e:	4668      	mov	r0, sp
 8002920:	f104 0308 	add.w	r3, r4, #8
 8002924:	224c      	movs	r2, #76	; 0x4c
 8002926:	4619      	mov	r1, r3
 8002928:	f008 fcce 	bl	800b2c8 <memcpy>
 800292c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002930:	2100      	movs	r1, #0
 8002932:	2078      	movs	r0, #120	; 0x78
 8002934:	f000 fa6e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002938:	4c31      	ldr	r4, [pc, #196]	; (8002a00 <SSD1306_Init+0x3dc>)
 800293a:	2312      	movs	r3, #18
 800293c:	9313      	str	r3, [sp, #76]	; 0x4c
 800293e:	4668      	mov	r0, sp
 8002940:	f104 0308 	add.w	r3, r4, #8
 8002944:	224c      	movs	r2, #76	; 0x4c
 8002946:	4619      	mov	r1, r3
 8002948:	f008 fcbe 	bl	800b2c8 <memcpy>
 800294c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002950:	2100      	movs	r1, #0
 8002952:	2078      	movs	r0, #120	; 0x78
 8002954:	f000 fa5e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002958:	4c29      	ldr	r4, [pc, #164]	; (8002a00 <SSD1306_Init+0x3dc>)
 800295a:	23db      	movs	r3, #219	; 0xdb
 800295c:	9313      	str	r3, [sp, #76]	; 0x4c
 800295e:	4668      	mov	r0, sp
 8002960:	f104 0308 	add.w	r3, r4, #8
 8002964:	224c      	movs	r2, #76	; 0x4c
 8002966:	4619      	mov	r1, r3
 8002968:	f008 fcae 	bl	800b2c8 <memcpy>
 800296c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002970:	2100      	movs	r1, #0
 8002972:	2078      	movs	r0, #120	; 0x78
 8002974:	f000 fa4e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002978:	4c21      	ldr	r4, [pc, #132]	; (8002a00 <SSD1306_Init+0x3dc>)
 800297a:	2320      	movs	r3, #32
 800297c:	9313      	str	r3, [sp, #76]	; 0x4c
 800297e:	4668      	mov	r0, sp
 8002980:	f104 0308 	add.w	r3, r4, #8
 8002984:	224c      	movs	r2, #76	; 0x4c
 8002986:	4619      	mov	r1, r3
 8002988:	f008 fc9e 	bl	800b2c8 <memcpy>
 800298c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002990:	2100      	movs	r1, #0
 8002992:	2078      	movs	r0, #120	; 0x78
 8002994:	f000 fa3e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002998:	4c19      	ldr	r4, [pc, #100]	; (8002a00 <SSD1306_Init+0x3dc>)
 800299a:	238d      	movs	r3, #141	; 0x8d
 800299c:	9313      	str	r3, [sp, #76]	; 0x4c
 800299e:	4668      	mov	r0, sp
 80029a0:	f104 0308 	add.w	r3, r4, #8
 80029a4:	224c      	movs	r2, #76	; 0x4c
 80029a6:	4619      	mov	r1, r3
 80029a8:	f008 fc8e 	bl	800b2c8 <memcpy>
 80029ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029b0:	2100      	movs	r1, #0
 80029b2:	2078      	movs	r0, #120	; 0x78
 80029b4:	f000 fa2e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80029b8:	4c11      	ldr	r4, [pc, #68]	; (8002a00 <SSD1306_Init+0x3dc>)
 80029ba:	2314      	movs	r3, #20
 80029bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80029be:	4668      	mov	r0, sp
 80029c0:	f104 0308 	add.w	r3, r4, #8
 80029c4:	224c      	movs	r2, #76	; 0x4c
 80029c6:	4619      	mov	r1, r3
 80029c8:	f008 fc7e 	bl	800b2c8 <memcpy>
 80029cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029d0:	2100      	movs	r1, #0
 80029d2:	2078      	movs	r0, #120	; 0x78
 80029d4:	f000 fa1e 	bl	8002e14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80029d8:	4c09      	ldr	r4, [pc, #36]	; (8002a00 <SSD1306_Init+0x3dc>)
 80029da:	23af      	movs	r3, #175	; 0xaf
 80029dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80029de:	4668      	mov	r0, sp
 80029e0:	f104 0308 	add.w	r3, r4, #8
 80029e4:	224c      	movs	r2, #76	; 0x4c
 80029e6:	4619      	mov	r1, r3
 80029e8:	f008 fc6e 	bl	800b2c8 <memcpy>
 80029ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029f0:	2100      	movs	r1, #0
 80029f2:	2078      	movs	r0, #120	; 0x78
 80029f4:	f000 fa0e 	bl	8002e14 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80029f8:	4c01      	ldr	r4, [pc, #4]	; (8002a00 <SSD1306_Init+0x3dc>)
 80029fa:	232e      	movs	r3, #46	; 0x2e
 80029fc:	e002      	b.n	8002a04 <SSD1306_Init+0x3e0>
 80029fe:	bf00      	nop
 8002a00:	20000a50 	.word	0x20000a50
 8002a04:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a06:	4668      	mov	r0, sp
 8002a08:	f104 0308 	add.w	r3, r4, #8
 8002a0c:	224c      	movs	r2, #76	; 0x4c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f008 fc5a 	bl	800b2c8 <memcpy>
 8002a14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2078      	movs	r0, #120	; 0x78
 8002a1c:	f000 f9fa 	bl	8002e14 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f000 f865 	bl	8002af0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002a26:	f000 f813 	bl	8002a50 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <SSD1306_Init+0x428>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <SSD1306_Init+0x428>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SSD1306_Init+0x428>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a48:	b004      	add	sp, #16
 8002a4a:	4770      	bx	lr
 8002a4c:	2000062c 	.word	0x2000062c

08002a50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b097      	sub	sp, #92	; 0x5c
 8002a54:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002a56:	2300      	movs	r3, #0
 8002a58:	71fb      	strb	r3, [r7, #7]
 8002a5a:	e03d      	b.n	8002ad8 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	3b50      	subs	r3, #80	; 0x50
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4c21      	ldr	r4, [pc, #132]	; (8002ae8 <SSD1306_UpdateScreen+0x98>)
 8002a64:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a66:	4668      	mov	r0, sp
 8002a68:	f104 0308 	add.w	r3, r4, #8
 8002a6c:	224c      	movs	r2, #76	; 0x4c
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f008 fc2a 	bl	800b2c8 <memcpy>
 8002a74:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2078      	movs	r0, #120	; 0x78
 8002a7c:	f000 f9ca 	bl	8002e14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002a80:	4c19      	ldr	r4, [pc, #100]	; (8002ae8 <SSD1306_UpdateScreen+0x98>)
 8002a82:	2300      	movs	r3, #0
 8002a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a86:	4668      	mov	r0, sp
 8002a88:	f104 0308 	add.w	r3, r4, #8
 8002a8c:	224c      	movs	r2, #76	; 0x4c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f008 fc1a 	bl	800b2c8 <memcpy>
 8002a94:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2078      	movs	r0, #120	; 0x78
 8002a9c:	f000 f9ba 	bl	8002e14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002aa0:	4c11      	ldr	r4, [pc, #68]	; (8002ae8 <SSD1306_UpdateScreen+0x98>)
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002aa6:	4668      	mov	r0, sp
 8002aa8:	f104 0308 	add.w	r3, r4, #8
 8002aac:	224c      	movs	r2, #76	; 0x4c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f008 fc0a 	bl	800b2c8 <memcpy>
 8002ab4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2078      	movs	r0, #120	; 0x78
 8002abc:	f000 f9aa 	bl	8002e14 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	01db      	lsls	r3, r3, #7
 8002ac4:	4a09      	ldr	r2, [pc, #36]	; (8002aec <SSD1306_UpdateScreen+0x9c>)
 8002ac6:	441a      	add	r2, r3
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	2078      	movs	r0, #120	; 0x78
 8002ace:	f000 f959 	bl	8002d84 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	71fb      	strb	r3, [r7, #7]
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	2b07      	cmp	r3, #7
 8002adc:	d9be      	bls.n	8002a5c <SSD1306_UpdateScreen+0xc>
	}
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	20000a50 	.word	0x20000a50
 8002aec:	2000022c 	.word	0x2000022c

08002af0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <SSD1306_Fill+0x14>
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <SSD1306_Fill+0x16>
 8002b04:	23ff      	movs	r3, #255	; 0xff
 8002b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4803      	ldr	r0, [pc, #12]	; (8002b1c <SSD1306_Fill+0x2c>)
 8002b0e:	f008 fbe9 	bl	800b2e4 <memset>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000022c 	.word	0x2000022c

08002b20 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	80bb      	strh	r3, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	70fb      	strb	r3, [r7, #3]
	if (
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b7f      	cmp	r3, #127	; 0x7f
 8002b36:	d848      	bhi.n	8002bca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002b38:	88bb      	ldrh	r3, [r7, #4]
 8002b3a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b3c:	d845      	bhi.n	8002bca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <SSD1306_DrawPixel+0xb8>)
 8002b40:	791b      	ldrb	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d11a      	bne.n	8002b90 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	88bb      	ldrh	r3, [r7, #4]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	b298      	uxth	r0, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	01db      	lsls	r3, r3, #7
 8002b66:	4413      	add	r3, r2
 8002b68:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <SSD1306_DrawPixel+0xbc>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	88bb      	ldrh	r3, [r7, #4]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b259      	sxtb	r1, r3
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	4603      	mov	r3, r0
 8002b84:	01db      	lsls	r3, r3, #7
 8002b86:	4413      	add	r3, r2
 8002b88:	b2c9      	uxtb	r1, r1
 8002b8a:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <SSD1306_DrawPixel+0xbc>)
 8002b8c:	54d1      	strb	r1, [r2, r3]
 8002b8e:	e01d      	b.n	8002bcc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	88bb      	ldrh	r3, [r7, #4]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	b298      	uxth	r0, r3
 8002b98:	4603      	mov	r3, r0
 8002b9a:	01db      	lsls	r3, r3, #7
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <SSD1306_DrawPixel+0xbc>)
 8002ba0:	5cd3      	ldrb	r3, [r2, r3]
 8002ba2:	b25a      	sxtb	r2, r3
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b259      	sxtb	r1, r3
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	01db      	lsls	r3, r3, #7
 8002bc0:	4413      	add	r3, r2
 8002bc2:	b2c9      	uxtb	r1, r1
 8002bc4:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <SSD1306_DrawPixel+0xbc>)
 8002bc6:	54d1      	strb	r1, [r2, r3]
 8002bc8:	e000      	b.n	8002bcc <SSD1306_DrawPixel+0xac>
		return;
 8002bca:	bf00      	nop
	}
}
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	2000062c 	.word	0x2000062c
 8002bdc:	2000022c 	.word	0x2000022c

08002be0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	460a      	mov	r2, r1
 8002bea:	80fb      	strh	r3, [r7, #6]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <SSD1306_GotoXY+0x28>)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <SSD1306_GotoXY+0x28>)
 8002bf8:	88bb      	ldrh	r3, [r7, #4]
 8002bfa:	8053      	strh	r3, [r2, #2]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	2000062c 	.word	0x2000062c

08002c0c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
	if (
 8002c28:	2b7f      	cmp	r3, #127	; 0x7f
 8002c2a:	dc07      	bgt.n	8002c3c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002c2e:	885b      	ldrh	r3, [r3, #2]
 8002c30:	461a      	mov	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002c38:	2b3f      	cmp	r3, #63	; 0x3f
 8002c3a:	dd01      	ble.n	8002c40 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e05e      	b.n	8002cfe <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e04b      	b.n	8002cde <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	3b20      	subs	r3, #32
 8002c4e:	6839      	ldr	r1, [r7, #0]
 8002c50:	7849      	ldrb	r1, [r1, #1]
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4619      	mov	r1, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	440b      	add	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e030      	b.n	8002ccc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	b298      	uxth	r0, r3
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002c88:	885a      	ldrh	r2, [r3, #2]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	79ba      	ldrb	r2, [r7, #6]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7ff ff43 	bl	8002b20 <SSD1306_DrawPixel>
 8002c9a:	e014      	b.n	8002cc6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b298      	uxth	r0, r3
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002caa:	885a      	ldrh	r2, [r3, #2]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b299      	uxth	r1, r3
 8002cb4:	79bb      	ldrb	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f7ff ff2d 	bl	8002b20 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d3c8      	bcc.n	8002c6a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d3ad      	bcc.n	8002c46 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <SSD1306_Putc+0xfc>)
 8002cfa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000062c 	.word	0x2000062c

08002d0c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002d1a:	e012      	b.n	8002d42 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff71 	bl	8002c0c <SSD1306_Putc>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d002      	beq.n	8002d3c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	e008      	b.n	8002d4e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e8      	bne.n	8002d1c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <ssd1306_I2C_Init+0x28>)
 8002d60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d62:	e002      	b.n	8002d6a <ssd1306_I2C_Init+0x12>
		p--;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f9      	bne.n	8002d64 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	0003d090 	.word	0x0003d090

08002d84 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b0c7      	sub	sp, #284	; 0x11c
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4639      	mov	r1, r7
 8002d90:	600a      	str	r2, [r1, #0]
 8002d92:	4619      	mov	r1, r3
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	4622      	mov	r2, r4
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	1dbb      	adds	r3, r7, #6
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	460a      	mov	r2, r1
 8002da4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	1dba      	adds	r2, r7, #6
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002db6:	e010      	b.n	8002dda <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8002db8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	441a      	add	r2, r3
 8002dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	7811      	ldrb	r1, [r2, #0]
 8002dca:	f107 020c 	add.w	r2, r7, #12
 8002dce:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002dd0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002dda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	1d3a      	adds	r2, r7, #4
 8002de2:	8812      	ldrh	r2, [r2, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d8e7      	bhi.n	8002db8 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b299      	uxth	r1, r3
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f107 020c 	add.w	r2, r7, #12
 8002dfa:	200a      	movs	r0, #10
 8002dfc:	9000      	str	r0, [sp, #0]
 8002dfe:	4804      	ldr	r0, [pc, #16]	; (8002e10 <ssd1306_I2C_WriteMulti+0x8c>)
 8002e00:	f000 ffc0 	bl	8003d84 <HAL_I2C_Master_Transmit>
}
 8002e04:	bf00      	nop
 8002e06:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000a50 	.word	0x20000a50

08002e14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8002e14:	b082      	sub	sp, #8
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af02      	add	r7, sp, #8
 8002e1c:	f107 0c18 	add.w	ip, r7, #24
 8002e20:	e88c 000c 	stmia.w	ip, {r2, r3}
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8002e2c:	79bb      	ldrb	r3, [r7, #6]
 8002e2e:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e30:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002e34:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	f107 020c 	add.w	r2, r7, #12
 8002e3e:	230a      	movs	r3, #10
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2302      	movs	r3, #2
 8002e44:	f107 0018 	add.w	r0, r7, #24
 8002e48:	f000 ff9c 	bl	8003d84 <HAL_I2C_Master_Transmit>
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e56:	b002      	add	sp, #8
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_MspInit+0x4c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_MspInit+0x4c>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	; 0x44
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_MspInit+0x4c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_MspInit+0x4c>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_MspInit+0x4c>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_MspInit+0x4c>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_I2C_MspInit+0x18c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d12c      	bne.n	8002f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	4b5a      	ldr	r3, [pc, #360]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a59      	ldr	r2, [pc, #356]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eea:	23c0      	movs	r3, #192	; 0xc0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eee:	2312      	movs	r3, #18
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002efa:	2304      	movs	r3, #4
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	484e      	ldr	r0, [pc, #312]	; (8003040 <HAL_I2C_MspInit+0x194>)
 8002f06:	f000 fc11 	bl	800372c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f26:	e083      	b.n	8003030 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a45      	ldr	r2, [pc, #276]	; (8003044 <HAL_I2C_MspInit+0x198>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d12d      	bne.n	8002f8e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a40      	ldr	r2, [pc, #256]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f54:	2312      	movs	r3, #18
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f60:	2304      	movs	r3, #4
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4835      	ldr	r0, [pc, #212]	; (8003040 <HAL_I2C_MspInit+0x194>)
 8002f6c:	f000 fbde 	bl	800372c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a30      	ldr	r2, [pc, #192]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]
}
 8002f8c:	e050      	b.n	8003030 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <HAL_I2C_MspInit+0x19c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d14b      	bne.n	8003030 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	4a26      	ldr	r2, [pc, #152]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_I2C_MspInit+0x190>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fd6:	2312      	movs	r3, #18
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	4817      	ldr	r0, [pc, #92]	; (800304c <HAL_I2C_MspInit+0x1a0>)
 8002fee:	f000 fb9d 	bl	800372c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003004:	2304      	movs	r3, #4
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300c:	4619      	mov	r1, r3
 800300e:	4810      	ldr	r0, [pc, #64]	; (8003050 <HAL_I2C_MspInit+0x1a4>)
 8003010:	f000 fb8c 	bl	800372c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_I2C_MspInit+0x190>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_I2C_MspInit+0x190>)
 800301e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003022:	6413      	str	r3, [r2, #64]	; 0x40
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_I2C_MspInit+0x190>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
}
 8003030:	bf00      	nop
 8003032:	3738      	adds	r7, #56	; 0x38
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40005400 	.word	0x40005400
 800303c:	40023800 	.word	0x40023800
 8003040:	40020400 	.word	0x40020400
 8003044:	40005800 	.word	0x40005800
 8003048:	40005c00 	.word	0x40005c00
 800304c:	40020800 	.word	0x40020800
 8003050:	40020000 	.word	0x40020000

08003054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_TIM_Base_MspInit+0x48>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d115      	bne.n	8003092 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_TIM_Base_MspInit+0x4c>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <HAL_TIM_Base_MspInit+0x4c>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_TIM_Base_MspInit+0x4c>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	2019      	movs	r0, #25
 8003088:	f000 fa87 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800308c:	2019      	movs	r0, #25
 800308e:	f000 faa0 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_UART_MspInit+0x94>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d133      	bne.n	800312e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	4b1c      	ldr	r3, [pc, #112]	; (800313c <HAL_UART_MspInit+0x98>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_UART_MspInit+0x98>)
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_UART_MspInit+0x98>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_UART_MspInit+0x98>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_UART_MspInit+0x98>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_UART_MspInit+0x98>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030fe:	230c      	movs	r3, #12
 8003100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800310e:	2307      	movs	r3, #7
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	4619      	mov	r1, r3
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <HAL_UART_MspInit+0x9c>)
 800311a:	f000 fb07 	bl	800372c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	2026      	movs	r0, #38	; 0x26
 8003124:	f000 fa39 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003128:	2026      	movs	r0, #38	; 0x26
 800312a:	f000 fa52 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	; 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40004400 	.word	0x40004400
 800313c:	40023800 	.word	0x40023800
 8003140:	40020000 	.word	0x40020000

08003144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <NMI_Handler+0x4>

0800314a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800314e:	e7fe      	b.n	800314e <HardFault_Handler+0x4>

08003150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003154:	e7fe      	b.n	8003154 <MemManage_Handler+0x4>

08003156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800315a:	e7fe      	b.n	800315a <BusFault_Handler+0x4>

0800315c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003160:	e7fe      	b.n	8003160 <UsageFault_Handler+0x4>

08003162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003190:	f000 f8e4 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}

08003198 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800319e:	f003 f8b1 	bl	8006304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200009bc 	.word	0x200009bc

080031ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <USART2_IRQHandler+0x10>)
 80031b2:	f003 fcfb 	bl	8006bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000a0c 	.word	0x20000a0c

080031c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <OTG_FS_IRQHandler+0x10>)
 80031c6:	f001 fb62 	bl	800488e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20001f84 	.word	0x20001f84

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f008 f826 	bl	800b254 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20020000 	.word	0x20020000
 8003234:	00000400 	.word	0x00000400
 8003238:	20000634 	.word	0x20000634
 800323c:	200023a0 	.word	0x200023a0

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800329c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800326a:	490e      	ldr	r1, [pc, #56]	; (80032a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003280:	4c0b      	ldr	r4, [pc, #44]	; (80032b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800328e:	f7ff ffd7 	bl	8003240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f007 ffe5 	bl	800b260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f7fe ff61 	bl	800215c <main>
  bx  lr    
 800329a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800329c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80032a8:	0800d584 	.word	0x0800d584
  ldr r2, =_sbss
 80032ac:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80032b0:	2000239c 	.word	0x2000239c

080032b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>
	...

080032b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <HAL_Init+0x40>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_Init+0x40>)
 80032ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_Init+0x40>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e0:	2003      	movs	r0, #3
 80032e2:	f000 f94f 	bl	8003584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e6:	200f      	movs	r0, #15
 80032e8:	f000 f808 	bl	80032fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ec:	f7ff fdb6 	bl	8002e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_InitTick+0x54>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_InitTick+0x58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003312:	fbb3 f3f1 	udiv	r3, r3, r1
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f967 	bl	80035ee <HAL_SYSTICK_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00e      	b.n	8003348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d80a      	bhi.n	8003346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003330:	2200      	movs	r2, #0
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003338:	f000 f92f 	bl	800359a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <HAL_InitTick+0x5c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000020 	.word	0x20000020
 8003354:	20000028 	.word	0x20000028
 8003358:	20000024 	.word	0x20000024

0800335c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000028 	.word	0x20000028
 8003380:	20000ab0 	.word	0x20000ab0

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000ab0 	.word	0x20000ab0

0800339c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff ffee 	bl	8003384 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b4:	d005      	beq.n	80033c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_Delay+0x44>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033c2:	bf00      	nop
 80033c4:	f7ff ffde 	bl	8003384 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d8f7      	bhi.n	80033c4 <HAL_Delay+0x28>
  {
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000028 	.word	0x20000028

080033e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800340c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db0b      	blt.n	8003472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <__NVIC_EnableIRQ+0x38>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2001      	movs	r0, #1
 800346a:	fa00 f202 	lsl.w	r2, r0, r2
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0a      	blt.n	80034ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	490c      	ldr	r1, [pc, #48]	; (80034d0 <__NVIC_SetPriority+0x4c>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	440b      	add	r3, r1
 80034a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ac:	e00a      	b.n	80034c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <__NVIC_SetPriority+0x50>)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	3b04      	subs	r3, #4
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	440b      	add	r3, r1
 80034c2:	761a      	strb	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf28      	it	cs
 80034f6:	2304      	movcs	r3, #4
 80034f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d902      	bls.n	8003508 <NVIC_EncodePriority+0x30>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3b03      	subs	r3, #3
 8003506:	e000      	b.n	800350a <NVIC_EncodePriority+0x32>
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	401a      	ands	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43d9      	mvns	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	4313      	orrs	r3, r2
         );
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003550:	d301      	bcc.n	8003556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003552:	2301      	movs	r3, #1
 8003554:	e00f      	b.n	8003576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <SysTick_Config+0x40>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355e:	210f      	movs	r1, #15
 8003560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003564:	f7ff ff8e 	bl	8003484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <SysTick_Config+0x40>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <SysTick_Config+0x40>)
 8003570:	2207      	movs	r2, #7
 8003572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff29 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ac:	f7ff ff3e 	bl	800342c <__NVIC_GetPriorityGrouping>
 80035b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	6978      	ldr	r0, [r7, #20]
 80035b8:	f7ff ff8e 	bl	80034d8 <NVIC_EncodePriority>
 80035bc:	4602      	mov	r2, r0
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff5d 	bl	8003484 <__NVIC_SetPriority>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff31 	bl	8003448 <__NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ffa2 	bl	8003540 <SysTick_Config>
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff feb6 	bl	8003384 <HAL_GetTick>
 8003618:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d008      	beq.n	8003638 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e052      	b.n	80036de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0216 	bic.w	r2, r2, #22
 8003646:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003656:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <HAL_DMA_Abort+0x62>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0208 	bic.w	r2, r2, #8
 8003676:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003688:	e013      	b.n	80036b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368a:	f7ff fe7b 	bl	8003384 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b05      	cmp	r3, #5
 8003696:	d90c      	bls.n	80036b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2203      	movs	r2, #3
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e015      	b.n	80036de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e4      	bne.n	800368a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e00c      	b.n	800371e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2205      	movs	r2, #5
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e16b      	b.n	8003a20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	f040 815a 	bne.w	8003a1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d005      	beq.n	800377e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377a:	2b02      	cmp	r3, #2
 800377c:	d130      	bne.n	80037e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	2203      	movs	r2, #3
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 0201 	and.w	r2, r3, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d017      	beq.n	800381c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d123      	bne.n	8003870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	08da      	lsrs	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3208      	adds	r2, #8
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	08da      	lsrs	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3208      	adds	r2, #8
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80b4 	beq.w	8003a1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <HAL_GPIO_Init+0x30c>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	4a5f      	ldr	r2, [pc, #380]	; (8003a38 <HAL_GPIO_Init+0x30c>)
 80038bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c0:	6453      	str	r3, [r2, #68]	; 0x44
 80038c2:	4b5d      	ldr	r3, [pc, #372]	; (8003a38 <HAL_GPIO_Init+0x30c>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ce:	4a5b      	ldr	r2, [pc, #364]	; (8003a3c <HAL_GPIO_Init+0x310>)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	3302      	adds	r3, #2
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x314>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02b      	beq.n	8003952 <HAL_GPIO_Init+0x226>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <HAL_GPIO_Init+0x318>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d025      	beq.n	800394e <HAL_GPIO_Init+0x222>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_GPIO_Init+0x31c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01f      	beq.n	800394a <HAL_GPIO_Init+0x21e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4f      	ldr	r2, [pc, #316]	; (8003a4c <HAL_GPIO_Init+0x320>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d019      	beq.n	8003946 <HAL_GPIO_Init+0x21a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4e      	ldr	r2, [pc, #312]	; (8003a50 <HAL_GPIO_Init+0x324>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_GPIO_Init+0x216>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a4d      	ldr	r2, [pc, #308]	; (8003a54 <HAL_GPIO_Init+0x328>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00d      	beq.n	800393e <HAL_GPIO_Init+0x212>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a4c      	ldr	r2, [pc, #304]	; (8003a58 <HAL_GPIO_Init+0x32c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <HAL_GPIO_Init+0x20e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <HAL_GPIO_Init+0x330>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_GPIO_Init+0x20a>
 8003932:	2307      	movs	r3, #7
 8003934:	e00e      	b.n	8003954 <HAL_GPIO_Init+0x228>
 8003936:	2308      	movs	r3, #8
 8003938:	e00c      	b.n	8003954 <HAL_GPIO_Init+0x228>
 800393a:	2306      	movs	r3, #6
 800393c:	e00a      	b.n	8003954 <HAL_GPIO_Init+0x228>
 800393e:	2305      	movs	r3, #5
 8003940:	e008      	b.n	8003954 <HAL_GPIO_Init+0x228>
 8003942:	2304      	movs	r3, #4
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x228>
 8003946:	2303      	movs	r3, #3
 8003948:	e004      	b.n	8003954 <HAL_GPIO_Init+0x228>
 800394a:	2302      	movs	r3, #2
 800394c:	e002      	b.n	8003954 <HAL_GPIO_Init+0x228>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_GPIO_Init+0x228>
 8003952:	2300      	movs	r3, #0
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	f002 0203 	and.w	r2, r2, #3
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	4093      	lsls	r3, r2
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003964:	4935      	ldr	r1, [pc, #212]	; (8003a3c <HAL_GPIO_Init+0x310>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_GPIO_Init+0x334>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_GPIO_Init+0x334>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_GPIO_Init+0x334>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_GPIO_Init+0x334>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_GPIO_Init+0x334>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <HAL_GPIO_Init+0x334>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_GPIO_Init+0x334>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a14:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_GPIO_Init+0x334>)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	f67f ae90 	bls.w	8003748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40021400 	.word	0x40021400
 8003a58:	40021800 	.word	0x40021800
 8003a5c:	40021c00 	.word	0x40021c00
 8003a60:	40013c00 	.word	0x40013c00

08003a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	e001      	b.n	8003a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab0:	e003      	b.n	8003aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ab2:	887b      	ldrh	r3, [r7, #2]
 8003ab4:	041a      	lsls	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	619a      	str	r2, [r3, #24]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad8:	887a      	ldrh	r2, [r7, #2]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4013      	ands	r3, r2
 8003ade:	041a      	lsls	r2, r3, #16
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	619a      	str	r2, [r3, #24]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e12b      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff f9c2 	bl	8002eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b60:	f002 fae8 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 8003b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a81      	ldr	r2, [pc, #516]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d807      	bhi.n	8003b80 <HAL_I2C_Init+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a80      	ldr	r2, [pc, #512]	; (8003d74 <HAL_I2C_Init+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e006      	b.n	8003b8e <HAL_I2C_Init+0x92>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_I2C_Init+0x27c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf94      	ite	ls
 8003b88:	2301      	movls	r3, #1
 8003b8a:	2300      	movhi	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0e7      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a78      	ldr	r2, [pc, #480]	; (8003d7c <HAL_I2C_Init+0x280>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_I2C_Init+0xd4>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	e009      	b.n	8003be4 <HAL_I2C_Init+0xe8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_I2C_Init+0x284>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	3301      	adds	r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	495c      	ldr	r1, [pc, #368]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003c00:	428b      	cmp	r3, r1
 8003c02:	d819      	bhi.n	8003c38 <HAL_I2C_Init+0x13c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e59      	subs	r1, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c18:	400b      	ands	r3, r1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_I2C_Init+0x138>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	e051      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e04f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <HAL_I2C_Init+0x168>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e012      	b.n	8003c8a <HAL_I2C_Init+0x18e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x196>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <HAL_I2C_Init+0x1bc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e58      	subs	r0, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6911      	ldr	r1, [r2, #16]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	001e847f 	.word	0x001e847f
 8003d78:	003d08ff 	.word	0x003d08ff
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	10624dd3 	.word	0x10624dd3

08003d84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	460b      	mov	r3, r1
 8003d92:	817b      	strh	r3, [r7, #10]
 8003d94:	4613      	mov	r3, r2
 8003d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d98:	f7ff faf4 	bl	8003384 <HAL_GetTick>
 8003d9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	f040 80e0 	bne.w	8003f6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2319      	movs	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	4970      	ldr	r1, [pc, #448]	; (8003f78 <HAL_I2C_Master_Transmit+0x1f4>)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fa92 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0d3      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_I2C_Master_Transmit+0x50>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0cc      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d007      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2221      	movs	r2, #33	; 0x21
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2210      	movs	r2, #16
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	893a      	ldrh	r2, [r7, #8]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a50      	ldr	r2, [pc, #320]	; (8003f7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e3c:	8979      	ldrh	r1, [r7, #10]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f9ca 	bl	80041dc <I2C_MasterRequestWrite>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e08d      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e68:	e066      	b.n	8003f38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6a39      	ldr	r1, [r7, #32]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb0c 	bl	800448c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d107      	bne.n	8003e92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d11b      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x188>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d017      	beq.n	8003f0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fafc 	bl	800450e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e01a      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d194      	bne.n	8003e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	00100002 	.word	0x00100002
 8003f7c:	ffff0000 	.word	0xffff0000

08003f80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff f9f8 	bl	8003384 <HAL_GetTick>
 8003f94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	f040 8111 	bne.w	80041ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4988      	ldr	r1, [pc, #544]	; (80041d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f994 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e104      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2C_IsDeviceReady+0x50>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0fd      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d007      	beq.n	8003ff6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a70      	ldr	r2, [pc, #448]	; (80041d8 <HAL_I2C_IsDeviceReady+0x258>)
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f952 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004050:	d103      	bne.n	800405a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0b6      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800406c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800406e:	f7ff f989 	bl	8003384 <HAL_GetTick>
 8004072:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040a2:	e025      	b.n	80040f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7ff f96e 	bl	8003384 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <HAL_I2C_IsDeviceReady+0x13a>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	22a0      	movs	r2, #160	; 0xa0
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2ba0      	cmp	r3, #160	; 0xa0
 80040fa:	d005      	beq.n	8004108 <HAL_I2C_IsDeviceReady+0x188>
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <HAL_I2C_IsDeviceReady+0x188>
 8004102:	7dbb      	ldrb	r3, [r7, #22]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0cd      	beq.n	80040a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d129      	bne.n	8004172 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	4921      	ldr	r1, [pc, #132]	; (80041d4 <HAL_I2C_IsDeviceReady+0x254>)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f8c6 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e036      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e02c      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800418a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2319      	movs	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	490f      	ldr	r1, [pc, #60]	; (80041d4 <HAL_I2C_IsDeviceReady+0x254>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8a2 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e012      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3301      	adds	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f4ff af32 	bcc.w	800401a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	00100002 	.word	0x00100002
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d006      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d003      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004204:	d108      	bne.n	8004218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00b      	b.n	8004230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b12      	cmp	r3, #18
 800421e:	d107      	bne.n	8004230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f84f 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004256:	d103      	bne.n	8004260 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e035      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426c:	d108      	bne.n	8004280 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e01b      	b.n	80042b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004280:	897b      	ldrh	r3, [r7, #10]
 8004282:	11db      	asrs	r3, r3, #7
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f063 030f 	orn	r3, r3, #15
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <I2C_MasterRequestWrite+0xfc>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f875 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e010      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <I2C_MasterRequestWrite+0x100>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f865 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00010008 	.word	0x00010008
 80042dc:	00010002 	.word	0x00010002

080042e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f0:	e025      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f8:	d021      	beq.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7ff f843 	bl	8003384 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e023      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10d      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	e00c      	b.n	800437e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	43da      	mvns	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0b6      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439c:	e051      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d123      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e046      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fc:	d021      	beq.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fe ffc1 	bl	8003384 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e020      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10c      	bne.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e00b      	b.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d18d      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004498:	e02d      	b.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f878 	bl	8004590 <I2C_IsAcknowledgeFailed>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e02d      	b.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b0:	d021      	beq.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fe ff67 	bl	8003384 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e007      	b.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d1ca      	bne.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800451a:	e02d      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f837 	bl	8004590 <I2C_IsAcknowledgeFailed>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e02d      	b.n	8004588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004532:	d021      	beq.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fe ff26 	bl	8003384 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b04      	cmp	r3, #4
 8004584:	d1ca      	bne.n	800451c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d11b      	bne.n	80045e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0204 	orr.w	r2, r3, #4
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f0:	b08f      	sub	sp, #60	; 0x3c
 80045f2:	af0a      	add	r7, sp, #40	; 0x28
 80045f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e10f      	b.n	8004820 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f006 fb06 	bl	800ac2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2203      	movs	r2, #3
 8004624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f003 f9e3 	bl	8007a0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	687e      	ldr	r6, [r7, #4]
 800464c:	466d      	mov	r5, sp
 800464e:	f106 0410 	add.w	r4, r6, #16
 8004652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800465a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800465e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004662:	1d33      	adds	r3, r6, #4
 8004664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004666:	6838      	ldr	r0, [r7, #0]
 8004668:	f003 f8ba 	bl	80077e0 <USB_CoreInit>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0d0      	b.n	8004820 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f003 f9d1 	bl	8007a2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e04a      	b.n	8004726 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	333d      	adds	r3, #61	; 0x3d
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	333c      	adds	r3, #60	; 0x3c
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	b298      	uxth	r0, r3
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3342      	adds	r3, #66	; 0x42
 80046cc:	4602      	mov	r2, r0
 80046ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046d0:	7bfa      	ldrb	r2, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	333f      	adds	r3, #63	; 0x3f
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	3344      	adds	r3, #68	; 0x44
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3348      	adds	r3, #72	; 0x48
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3350      	adds	r3, #80	; 0x50
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	3301      	adds	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3af      	bcc.n	8004690 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004730:	2300      	movs	r3, #0
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	e044      	b.n	80047c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3301      	adds	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d3b5      	bcc.n	8004736 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	687e      	ldr	r6, [r7, #4]
 80047d2:	466d      	mov	r5, sp
 80047d4:	f106 0410 	add.w	r4, r6, #16
 80047d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80047e8:	1d33      	adds	r3, r6, #4
 80047ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f003 f969 	bl	8007ac4 <USB_DevInit>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e00d      	b.n	8004820 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f004 f9e5 	bl	8008be8 <USB_DevDisconnect>

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004828 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_PCD_Start+0x1c>
 8004840:	2302      	movs	r3, #2
 8004842:	e020      	b.n	8004886 <HAL_PCD_Start+0x5e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	2b01      	cmp	r3, #1
 8004852:	d109      	bne.n	8004868 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004858:	2b01      	cmp	r3, #1
 800485a:	d005      	beq.n	8004868 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 f8bb 	bl	80079e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f004 f995 	bl	8008ba6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800488e:	b590      	push	{r4, r7, lr}
 8004890:	b08d      	sub	sp, #52	; 0x34
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fa53 	bl	8008d50 <USB_GetMode>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 839d 	bne.w	8004fec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 f9b7 	bl	8008c2a <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8393 	beq.w	8004fea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 f9ae 	bl	8008c2a <USB_ReadInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d107      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f002 0202 	and.w	r2, r2, #2
 80048e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f004 f99c 	bl	8008c2a <USB_ReadInterrupts>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d161      	bne.n	80049c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0210 	bic.w	r2, r2, #16
 800490a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f003 020f 	and.w	r2, r3, #15
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	4413      	add	r3, r2
 8004928:	3304      	adds	r3, #4
 800492a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	0c5b      	lsrs	r3, r3, #17
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2b02      	cmp	r3, #2
 8004936:	d124      	bne.n	8004982 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d035      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800494e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004952:	b29b      	uxth	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	6a38      	ldr	r0, [r7, #32]
 8004958:	f003 ffd3 	bl	8008902 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004968:	441a      	add	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800497a:	441a      	add	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	619a      	str	r2, [r3, #24]
 8004980:	e016      	b.n	80049b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	0c5b      	lsrs	r3, r3, #17
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	2b06      	cmp	r3, #6
 800498c:	d110      	bne.n	80049b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004994:	2208      	movs	r2, #8
 8004996:	4619      	mov	r1, r3
 8004998:	6a38      	ldr	r0, [r7, #32]
 800499a:	f003 ffb2 	bl	8008902 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049aa:	441a      	add	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0210 	orr.w	r2, r2, #16
 80049be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f004 f930 	bl	8008c2a <USB_ReadInterrupts>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049d4:	d16e      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f004 f936 	bl	8008c50 <USB_ReadDevAllOutEpInterrupt>
 80049e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049e6:	e062      	b.n	8004aae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d057      	beq.n	8004aa2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 f95b 	bl	8008cb8 <USB_ReadDevOutEPInterrupt>
 8004a02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fdb0 	bl	8005588 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2308      	movs	r3, #8
 8004a42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 feaa 	bl	80057a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	461a      	mov	r2, r3
 8004a64:	2310      	movs	r3, #16
 8004a66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2320      	movs	r3, #32
 8004a82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aa0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d199      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f004 f8b6 	bl	8008c2a <USB_ReadInterrupts>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac8:	f040 80c0 	bne.w	8004c4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f004 f8d7 	bl	8008c84 <USB_ReadDevAllInEpInterrupt>
 8004ad6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004adc:	e0b2      	b.n	8004c44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a7 	beq.w	8004c38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f004 f8fd 	bl	8008cf4 <USB_ReadDevInEPInterrupt>
 8004afa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d057      	beq.n	8004bb6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b26:	4013      	ands	r3, r2
 8004b28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	461a      	mov	r2, r3
 8004b38:	2301      	movs	r3, #1
 8004b3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d132      	bne.n	8004baa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	3348      	adds	r3, #72	; 0x48
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4403      	add	r3, r0
 8004b64:	3344      	adds	r3, #68	; 0x44
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4419      	add	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4403      	add	r3, r0
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d113      	bne.n	8004baa <HAL_PCD_IRQHandler+0x31c>
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3350      	adds	r3, #80	; 0x50
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	f004 f905 	bl	8008db4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f006 f8bc 	bl	800ad2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2308      	movs	r3, #8
 8004bd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	2310      	movs	r3, #16
 8004bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	2340      	movs	r3, #64	; 0x40
 8004c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2302      	movs	r3, #2
 8004c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fc1b 	bl	800546e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f47f af49 	bne.w	8004ade <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f003 ffea 	bl	8008c2a <USB_ReadInterrupts>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c60:	d122      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d108      	bne.n	8004c92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c88:	2100      	movs	r1, #0
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fe26 	bl	80058dc <HAL_PCDEx_LPM_Callback>
 8004c90:	e002      	b.n	8004c98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f006 f8c2 	bl	800ae1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f003 ffbc 	bl	8008c2a <USB_ReadInterrupts>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbc:	d112      	bne.n	8004ce4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f006 f87e 	bl	800add0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ce2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f003 ff9e 	bl	8008c2a <USB_ReadInterrupts>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	f040 80c7 	bne.w	8004e8a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2110      	movs	r1, #16
 8004d16:	4618      	mov	r0, r3
 8004d18:	f003 f838 	bl	8007d8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d20:	e056      	b.n	8004dd0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d54:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	461a      	mov	r2, r3
 8004d84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004da8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	3301      	adds	r3, #1
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d3a3      	bcc.n	8004d22 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004dec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e06:	f043 030b 	orr.w	r3, r3, #11
 8004e0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1c:	f043 030b 	orr.w	r3, r3, #11
 8004e20:	6453      	str	r3, [r2, #68]	; 0x44
 8004e22:	e015      	b.n	8004e50 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4a:	f043 030b 	orr.w	r3, r3, #11
 8004e4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e74:	461a      	mov	r2, r3
 8004e76:	f003 ff9d 	bl	8008db4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f003 fecb 	bl	8008c2a <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9e:	d124      	bne.n	8004eea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 ff61 	bl	8008d6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 ffc9 	bl	8007e46 <USB_GetDevSpeed>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681c      	ldr	r4, [r3, #0]
 8004ec0:	f001 f92c 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8004ec4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f002 fce8 	bl	80078a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f005 ff52 	bl	800ad7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 fe9b 	bl	8008c2a <USB_ReadInterrupts>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d10a      	bne.n	8004f14 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f005 ff2f 	bl	800ad62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f002 0208 	and.w	r2, r2, #8
 8004f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f003 fe86 	bl	8008c2a <USB_ReadInterrupts>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f28:	d10f      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f005 ff91 	bl	800ae5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 fe6b 	bl	8008c2a <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5e:	d10f      	bne.n	8004f80 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f005 ff64 	bl	800ae38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 fe50 	bl	8008c2a <USB_ReadInterrupts>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d10a      	bne.n	8004fac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f005 ff72 	bl	800ae80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 fe3a 	bl	8008c2a <USB_ReadInterrupts>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d115      	bne.n	8004fec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f005 ff62 	bl	800ae9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	e000      	b.n	8004fec <HAL_PCD_IRQHandler+0x75e>
      return;
 8004fea:	bf00      	nop
    }
  }
}
 8004fec:	3734      	adds	r7, #52	; 0x34
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd90      	pop	{r4, r7, pc}

08004ff2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_PCD_SetAddress+0x1a>
 8005008:	2302      	movs	r3, #2
 800500a:	e013      	b.n	8005034 <HAL_PCD_SetAddress+0x42>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f003 fd98 	bl	8008b5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4603      	mov	r3, r0
 800504c:	70fb      	strb	r3, [r7, #3]
 800504e:	460b      	mov	r3, r1
 8005050:	803b      	strh	r3, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800505a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800505e:	2b00      	cmp	r3, #0
 8005060:	da0f      	bge.n	8005082 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	3338      	adds	r3, #56	; 0x38
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	3304      	adds	r3, #4
 8005078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	705a      	strb	r2, [r3, #1]
 8005080:	e00f      	b.n	80050a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 020f 	and.w	r2, r3, #15
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	3304      	adds	r3, #4
 800509a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050ae:	883a      	ldrh	r2, [r7, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	78ba      	ldrb	r2, [r7, #2]
 80050b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050cc:	78bb      	ldrb	r3, [r7, #2]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d102      	bne.n	80050d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_PCD_EP_Open+0xaa>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e00e      	b.n	8005104 <HAL_PCD_EP_Open+0xc8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f002 fecb 	bl	8007e90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005102:	7afb      	ldrb	r3, [r7, #11]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800511c:	2b00      	cmp	r3, #0
 800511e:	da0f      	bge.n	8005140 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	f003 020f 	and.w	r2, r3, #15
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3338      	adds	r3, #56	; 0x38
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	3304      	adds	r3, #4
 8005136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	705a      	strb	r2, [r3, #1]
 800513e:	e00f      	b.n	8005160 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	f003 020f 	and.w	r2, r3, #15
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	3304      	adds	r3, #4
 8005158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	b2da      	uxtb	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_PCD_EP_Close+0x6e>
 8005176:	2302      	movs	r3, #2
 8005178:	e00e      	b.n	8005198 <HAL_PCD_EP_Close+0x8c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	4618      	mov	r0, r3
 800518a:	f002 ff09 	bl	8007fa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	460b      	mov	r3, r1
 80051ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	3304      	adds	r3, #4
 80051c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e2:	7afb      	ldrb	r3, [r7, #11]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d102      	bne.n	80051fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051fc:	7afb      	ldrb	r3, [r7, #11]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	f003 f9e4 	bl	80085e0 <USB_EP0StartXfer>
 8005218:	e008      	b.n	800522c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	6979      	ldr	r1, [r7, #20]
 8005228:	f002 ff96 	bl	8008158 <USB_EPStartXfer>
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	f003 020f 	and.w	r2, r3, #15
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005258:	681b      	ldr	r3, [r3, #0]
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	460b      	mov	r3, r1
 8005274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005276:	7afb      	ldrb	r3, [r7, #11]
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	3338      	adds	r3, #56	; 0x38
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2201      	movs	r2, #1
 80052a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052c0:	7afb      	ldrb	r3, [r7, #11]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	f003 f982 	bl	80085e0 <USB_EP0StartXfer>
 80052dc:	e008      	b.n	80052f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6979      	ldr	r1, [r7, #20]
 80052ec:	f002 ff34 	bl	8008158 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d901      	bls.n	8005318 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e050      	b.n	80053ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da0f      	bge.n	8005340 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	3338      	adds	r3, #56	; 0x38
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	3304      	adds	r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	705a      	strb	r2, [r3, #1]
 800533e:	e00d      	b.n	800535c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	3304      	adds	r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_PCD_EP_SetStall+0x82>
 8005378:	2302      	movs	r3, #2
 800537a:	e01e      	b.n	80053ba <HAL_PCD_EP_SetStall+0xc0>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	4618      	mov	r0, r3
 800538c:	f003 fb11 	bl	80089b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	b2d9      	uxtb	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053aa:	461a      	mov	r2, r3
 80053ac:	f003 fd02 	bl	8008db4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d901      	bls.n	80053e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e042      	b.n	8005466 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da0f      	bge.n	8005408 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	f003 020f 	and.w	r2, r3, #15
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	3338      	adds	r3, #56	; 0x38
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	3304      	adds	r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	705a      	strb	r2, [r3, #1]
 8005406:	e00f      	b.n	8005428 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	f003 020f 	and.w	r2, r3, #15
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	3304      	adds	r3, #4
 8005420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_PCD_EP_ClrStall+0x86>
 8005444:	2302      	movs	r3, #2
 8005446:	e00e      	b.n	8005466 <HAL_PCD_EP_ClrStall+0xa4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	4618      	mov	r0, r3
 8005458:	f003 fb19 	bl	8008a8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b08a      	sub	sp, #40	; 0x28
 8005472:	af02      	add	r7, sp, #8
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	3338      	adds	r3, #56	; 0x38
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	3304      	adds	r3, #4
 8005494:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d901      	bls.n	80054a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e06c      	b.n	8005580 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d902      	bls.n	80054c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3303      	adds	r3, #3
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054ca:	e02b      	b.n	8005524 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d902      	bls.n	80054e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	3303      	adds	r3, #3
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68d9      	ldr	r1, [r3, #12]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005500:	b2db      	uxtb	r3, r3
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4603      	mov	r3, r0
 8005506:	6978      	ldr	r0, [r7, #20]
 8005508:	f003 f9bd 	bl	8008886 <USB_WritePacket>

    ep->xfer_buff  += len;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	441a      	add	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	441a      	add	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	b29b      	uxth	r3, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	429a      	cmp	r2, r3
 8005538:	d809      	bhi.n	800554e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005542:	429a      	cmp	r2, r3
 8005544:	d203      	bcs.n	800554e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1be      	bne.n	80054cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	429a      	cmp	r2, r3
 8005558:	d811      	bhi.n	800557e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	2201      	movs	r2, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	43db      	mvns	r3, r3
 8005574:	6939      	ldr	r1, [r7, #16]
 8005576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557a:	4013      	ands	r3, r2
 800557c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	333c      	adds	r3, #60	; 0x3c
 80055a0:	3304      	adds	r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	f040 80a0 	bne.w	8005700 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d015      	beq.n	80055f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a72      	ldr	r2, [pc, #456]	; (8005798 <PCD_EP_OutXfrComplete_int+0x210>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f240 80dd 	bls.w	800578e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80d7 	beq.w	800578e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	6093      	str	r3, [r2, #8]
 80055f4:	e0cb      	b.n	800578e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	461a      	mov	r2, r3
 800560e:	2320      	movs	r3, #32
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	e0bc      	b.n	800578e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 80b7 	bne.w	800578e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a5d      	ldr	r2, [pc, #372]	; (8005798 <PCD_EP_OutXfrComplete_int+0x210>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d90f      	bls.n	8005648 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	461a      	mov	r2, r3
 8005640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005644:	6093      	str	r3, [r2, #8]
 8005646:	e0a2      	b.n	800578e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800565a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	0159      	lsls	r1, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	440b      	add	r3, r1
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800566e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4403      	add	r3, r0
 800567e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005682:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005696:	6819      	ldr	r1, [r3, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4403      	add	r3, r0
 80056a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4419      	add	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4403      	add	r3, r0
 80056bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d114      	bne.n	80056f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056ea:	461a      	mov	r2, r3
 80056ec:	2101      	movs	r1, #1
 80056ee:	f003 fb61 	bl	8008db4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f005 fafd 	bl	800acf8 <HAL_PCD_DataOutStageCallback>
 80056fe:	e046      	b.n	800578e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <PCD_EP_OutXfrComplete_int+0x214>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d124      	bne.n	8005752 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	461a      	mov	r2, r3
 8005720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005724:	6093      	str	r3, [r2, #8]
 8005726:	e032      	b.n	800578e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	461a      	mov	r2, r3
 8005740:	2320      	movs	r3, #32
 8005742:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f005 fad4 	bl	800acf8 <HAL_PCD_DataOutStageCallback>
 8005750:	e01d      	b.n	800578e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d114      	bne.n	8005782 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800577a:	461a      	mov	r2, r3
 800577c:	2100      	movs	r1, #0
 800577e:	f003 fb19 	bl	8008db4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f005 fab5 	bl	800acf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	4f54300a 	.word	0x4f54300a
 800579c:	4f54310a 	.word	0x4f54310a

080057a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	333c      	adds	r3, #60	; 0x3c
 80057b8:	3304      	adds	r3, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <PCD_EP_OutSetupPacket_int+0x88>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d90e      	bls.n	80057f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	461a      	mov	r2, r3
 80057ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f005 fa6d 	bl	800acd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <PCD_EP_OutSetupPacket_int+0x88>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d90c      	bls.n	800581c <PCD_EP_OutSetupPacket_int+0x7c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d108      	bne.n	800581c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005814:	461a      	mov	r2, r3
 8005816:	2101      	movs	r1, #1
 8005818:	f003 facc 	bl	8008db4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	4f54300a 	.word	0x4f54300a

0800582c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
 8005838:	4613      	mov	r3, r2
 800583a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d107      	bne.n	800585a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800584a:	883b      	ldrh	r3, [r7, #0]
 800584c:	0419      	lsls	r1, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	430a      	orrs	r2, r1
 8005856:	629a      	str	r2, [r3, #40]	; 0x28
 8005858:	e028      	b.n	80058ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4413      	add	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	e00d      	b.n	800588a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	3340      	adds	r3, #64	; 0x40
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4413      	add	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	3301      	adds	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	7bfa      	ldrb	r2, [r7, #15]
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	3b01      	subs	r3, #1
 8005890:	429a      	cmp	r2, r3
 8005892:	d3ec      	bcc.n	800586e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005894:	883b      	ldrh	r3, [r7, #0]
 8005896:	0418      	lsls	r0, r3, #16
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6819      	ldr	r1, [r3, #0]
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	3b01      	subs	r3, #1
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	4302      	orrs	r2, r0
 80058a4:	3340      	adds	r3, #64	; 0x40
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	887a      	ldrh	r2, [r7, #2]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e264      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d075      	beq.n	80059fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005912:	4ba3      	ldr	r3, [pc, #652]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b04      	cmp	r3, #4
 800591c:	d00c      	beq.n	8005938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591e:	4ba0      	ldr	r3, [pc, #640]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005926:	2b08      	cmp	r3, #8
 8005928:	d112      	bne.n	8005950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800592a:	4b9d      	ldr	r3, [pc, #628]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005936:	d10b      	bne.n	8005950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	4b99      	ldr	r3, [pc, #612]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d05b      	beq.n	80059fc <HAL_RCC_OscConfig+0x108>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d157      	bne.n	80059fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e23f      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d106      	bne.n	8005968 <HAL_RCC_OscConfig+0x74>
 800595a:	4b91      	ldr	r3, [pc, #580]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a90      	ldr	r2, [pc, #576]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e01d      	b.n	80059a4 <HAL_RCC_OscConfig+0xb0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x98>
 8005972:	4b8b      	ldr	r3, [pc, #556]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a8a      	ldr	r2, [pc, #552]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a87      	ldr	r2, [pc, #540]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e00b      	b.n	80059a4 <HAL_RCC_OscConfig+0xb0>
 800598c:	4b84      	ldr	r3, [pc, #528]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a83      	ldr	r2, [pc, #524]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	4b81      	ldr	r3, [pc, #516]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a80      	ldr	r2, [pc, #512]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 800599e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d013      	beq.n	80059d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fd fcea 	bl	8003384 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fd fce6 	bl	8003384 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	; 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e204      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	4b76      	ldr	r3, [pc, #472]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0xc0>
 80059d2:	e014      	b.n	80059fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fd fcd6 	bl	8003384 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fd fcd2 	bl	8003384 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	; 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e1f0      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	4b6c      	ldr	r3, [pc, #432]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0xe8>
 80059fa:	e000      	b.n	80059fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d063      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a0a:	4b65      	ldr	r3, [pc, #404]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a16:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d11c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a22:	4b5f      	ldr	r3, [pc, #380]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d116      	bne.n	8005a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_RCC_OscConfig+0x152>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e1c4      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a46:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4952      	ldr	r1, [pc, #328]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5a:	e03a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a64:	4b4f      	ldr	r3, [pc, #316]	; (8005ba4 <HAL_RCC_OscConfig+0x2b0>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fd fc8b 	bl	8003384 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a72:	f7fd fc87 	bl	8003384 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e1a5      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a90:	4b43      	ldr	r3, [pc, #268]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4940      	ldr	r1, [pc, #256]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	600b      	str	r3, [r1, #0]
 8005aa4:	e015      	b.n	8005ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aa6:	4b3f      	ldr	r3, [pc, #252]	; (8005ba4 <HAL_RCC_OscConfig+0x2b0>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fd fc6a 	bl	8003384 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab4:	f7fd fc66 	bl	8003384 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e184      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	4b36      	ldr	r3, [pc, #216]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d030      	beq.n	8005b40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d016      	beq.n	8005b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae6:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <HAL_RCC_OscConfig+0x2b4>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fd fc4a 	bl	8003384 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af4:	f7fd fc46 	bl	8003384 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e164      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x200>
 8005b12:	e015      	b.n	8005b40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCC_OscConfig+0x2b4>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b1a:	f7fd fc33 	bl	8003384 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fd fc2f 	bl	8003384 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e14d      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80a0 	beq.w	8005c8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_OscConfig+0x2b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d121      	bne.n	8005bce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b8a:	4b08      	ldr	r3, [pc, #32]	; (8005bac <HAL_RCC_OscConfig+0x2b8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <HAL_RCC_OscConfig+0x2b8>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b96:	f7fd fbf5 	bl	8003384 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9c:	e011      	b.n	8005bc2 <HAL_RCC_OscConfig+0x2ce>
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	42470000 	.word	0x42470000
 8005ba8:	42470e80 	.word	0x42470e80
 8005bac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb0:	f7fd fbe8 	bl	8003384 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e106      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc2:	4b85      	ldr	r3, [pc, #532]	; (8005dd8 <HAL_RCC_OscConfig+0x4e4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCC_OscConfig+0x2f0>
 8005bd6:	4b81      	ldr	r3, [pc, #516]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	4a80      	ldr	r2, [pc, #512]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	6713      	str	r3, [r2, #112]	; 0x70
 8005be2:	e01c      	b.n	8005c1e <HAL_RCC_OscConfig+0x32a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCC_OscConfig+0x312>
 8005bec:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a7a      	ldr	r2, [pc, #488]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005bf2:	f043 0304 	orr.w	r3, r3, #4
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf8:	4b78      	ldr	r3, [pc, #480]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a77      	ldr	r2, [pc, #476]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
 8005c04:	e00b      	b.n	8005c1e <HAL_RCC_OscConfig+0x32a>
 8005c06:	4b75      	ldr	r3, [pc, #468]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a74      	ldr	r2, [pc, #464]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	4b72      	ldr	r3, [pc, #456]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a71      	ldr	r2, [pc, #452]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d015      	beq.n	8005c52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fd fbad 	bl	8003384 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fd fba9 	bl	8003384 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e0c5      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c44:	4b65      	ldr	r3, [pc, #404]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ee      	beq.n	8005c2e <HAL_RCC_OscConfig+0x33a>
 8005c50:	e014      	b.n	8005c7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c52:	f7fd fb97 	bl	8003384 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fd fb93 	bl	8003384 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0af      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c70:	4b5a      	ldr	r3, [pc, #360]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1ee      	bne.n	8005c5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d105      	bne.n	8005c8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c82:	4b56      	ldr	r3, [pc, #344]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	4a55      	ldr	r2, [pc, #340]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 809b 	beq.w	8005dce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c98:	4b50      	ldr	r3, [pc, #320]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 030c 	and.w	r3, r3, #12
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d05c      	beq.n	8005d5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d141      	bne.n	8005d30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <HAL_RCC_OscConfig+0x4ec>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb2:	f7fd fb67 	bl	8003384 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cba:	f7fd fb63 	bl	8003384 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e081      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ccc:	4b43      	ldr	r3, [pc, #268]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	019b      	lsls	r3, r3, #6
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	061b      	lsls	r3, r3, #24
 8005cfc:	4937      	ldr	r1, [pc, #220]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d02:	4b37      	ldr	r3, [pc, #220]	; (8005de0 <HAL_RCC_OscConfig+0x4ec>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7fd fb3c 	bl	8003384 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fd fb38 	bl	8003384 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e056      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d22:	4b2e      	ldr	r3, [pc, #184]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0x41c>
 8005d2e:	e04e      	b.n	8005dce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCC_OscConfig+0x4ec>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fd fb25 	bl	8003384 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd fb21 	bl	8003384 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e03f      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d50:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <HAL_RCC_OscConfig+0x44a>
 8005d5c:	e037      	b.n	8005dce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e032      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d6a:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <HAL_RCC_OscConfig+0x4e8>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d028      	beq.n	8005dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d121      	bne.n	8005dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d11a      	bne.n	8005dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	3b01      	subs	r3, #1
 8005db4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d107      	bne.n	8005dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d001      	beq.n	8005dce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40007000 	.word	0x40007000
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	42470060 	.word	0x42470060

08005de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0cc      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005df8:	4b68      	ldr	r3, [pc, #416]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d90c      	bls.n	8005e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0e:	4b63      	ldr	r3, [pc, #396]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0b8      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d020      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e38:	4b59      	ldr	r3, [pc, #356]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4a58      	ldr	r2, [pc, #352]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e50:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4a52      	ldr	r2, [pc, #328]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e5c:	4b50      	ldr	r3, [pc, #320]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	494d      	ldr	r1, [pc, #308]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d044      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d107      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d119      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e07f      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea2:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e06f      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e067      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ec2:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 0203 	bic.w	r2, r3, #3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4934      	ldr	r1, [pc, #208]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ed4:	f7fd fa56 	bl	8003384 <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005edc:	f7fd fa52 	bl	8003384 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e04f      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 020c 	and.w	r2, r3, #12
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d1eb      	bne.n	8005edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d20c      	bcs.n	8005f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f12:	4b22      	ldr	r3, [pc, #136]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1a:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d001      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e032      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f38:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4916      	ldr	r1, [pc, #88]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f56:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f6a:	f000 f821 	bl	8005fb0 <HAL_RCC_GetSysClockFreq>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	490a      	ldr	r1, [pc, #40]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f7c:	5ccb      	ldrb	r3, [r1, r3]
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <HAL_RCC_ClockConfig+0x1c8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fd f9b6 	bl	80032fc <HAL_InitTick>

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40023c00 	.word	0x40023c00
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	0800d3ac 	.word	0x0800d3ac
 8005fa8:	20000020 	.word	0x20000020
 8005fac:	20000024 	.word	0x20000024

08005fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb0:	b5b0      	push	{r4, r5, r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6079      	str	r1, [r7, #4]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	60f9      	str	r1, [r7, #12]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fc6:	4952      	ldr	r1, [pc, #328]	; (8006110 <HAL_RCC_GetSysClockFreq+0x160>)
 8005fc8:	6889      	ldr	r1, [r1, #8]
 8005fca:	f001 010c 	and.w	r1, r1, #12
 8005fce:	2908      	cmp	r1, #8
 8005fd0:	d00d      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0x3e>
 8005fd2:	2908      	cmp	r1, #8
 8005fd4:	f200 8094 	bhi.w	8006100 <HAL_RCC_GetSysClockFreq+0x150>
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x32>
 8005fdc:	2904      	cmp	r1, #4
 8005fde:	d003      	beq.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x38>
 8005fe0:	e08e      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fe2:	4b4c      	ldr	r3, [pc, #304]	; (8006114 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fe4:	60bb      	str	r3, [r7, #8]
       break;
 8005fe6:	e08e      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fe8:	4b4b      	ldr	r3, [pc, #300]	; (8006118 <HAL_RCC_GetSysClockFreq+0x168>)
 8005fea:	60bb      	str	r3, [r7, #8]
      break;
 8005fec:	e08b      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fee:	4948      	ldr	r1, [pc, #288]	; (8006110 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ff0:	6849      	ldr	r1, [r1, #4]
 8005ff2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005ff6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ff8:	4945      	ldr	r1, [pc, #276]	; (8006110 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ffa:	6849      	ldr	r1, [r1, #4]
 8005ffc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006000:	2900      	cmp	r1, #0
 8006002:	d024      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006004:	4942      	ldr	r1, [pc, #264]	; (8006110 <HAL_RCC_GetSysClockFreq+0x160>)
 8006006:	6849      	ldr	r1, [r1, #4]
 8006008:	0989      	lsrs	r1, r1, #6
 800600a:	4608      	mov	r0, r1
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006014:	f04f 0500 	mov.w	r5, #0
 8006018:	ea00 0204 	and.w	r2, r0, r4
 800601c:	ea01 0305 	and.w	r3, r1, r5
 8006020:	493d      	ldr	r1, [pc, #244]	; (8006118 <HAL_RCC_GetSysClockFreq+0x168>)
 8006022:	fb01 f003 	mul.w	r0, r1, r3
 8006026:	2100      	movs	r1, #0
 8006028:	fb01 f102 	mul.w	r1, r1, r2
 800602c:	1844      	adds	r4, r0, r1
 800602e:	493a      	ldr	r1, [pc, #232]	; (8006118 <HAL_RCC_GetSysClockFreq+0x168>)
 8006030:	fba2 0101 	umull	r0, r1, r2, r1
 8006034:	1863      	adds	r3, r4, r1
 8006036:	4619      	mov	r1, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	461a      	mov	r2, r3
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	f7fa fdb2 	bl	8000ba8 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e04a      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800604e:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_RCC_GetSysClockFreq+0x160>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	461a      	mov	r2, r3
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800605e:	f04f 0100 	mov.w	r1, #0
 8006062:	ea02 0400 	and.w	r4, r2, r0
 8006066:	ea03 0501 	and.w	r5, r3, r1
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	014b      	lsls	r3, r1, #5
 8006078:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800607c:	0142      	lsls	r2, r0, #5
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	1b00      	subs	r0, r0, r4
 8006084:	eb61 0105 	sbc.w	r1, r1, r5
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	018b      	lsls	r3, r1, #6
 8006092:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006096:	0182      	lsls	r2, r0, #6
 8006098:	1a12      	subs	r2, r2, r0
 800609a:	eb63 0301 	sbc.w	r3, r3, r1
 800609e:	f04f 0000 	mov.w	r0, #0
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	00d9      	lsls	r1, r3, #3
 80060a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060ac:	00d0      	lsls	r0, r2, #3
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	1912      	adds	r2, r2, r4
 80060b4:	eb45 0303 	adc.w	r3, r5, r3
 80060b8:	f04f 0000 	mov.w	r0, #0
 80060bc:	f04f 0100 	mov.w	r1, #0
 80060c0:	0299      	lsls	r1, r3, #10
 80060c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060c6:	0290      	lsls	r0, r2, #10
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f7fa fd66 	bl	8000ba8 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4613      	mov	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <HAL_RCC_GetSysClockFreq+0x160>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	60bb      	str	r3, [r7, #8]
      break;
 80060fe:	e002      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <HAL_RCC_GetSysClockFreq+0x164>)
 8006102:	60bb      	str	r3, [r7, #8]
      break;
 8006104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006106:	68bb      	ldr	r3, [r7, #8]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bdb0      	pop	{r4, r5, r7, pc}
 8006110:	40023800 	.word	0x40023800
 8006114:	00f42400 	.word	0x00f42400
 8006118:	017d7840 	.word	0x017d7840

0800611c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006120:	4b03      	ldr	r3, [pc, #12]	; (8006130 <HAL_RCC_GetHCLKFreq+0x14>)
 8006122:	681b      	ldr	r3, [r3, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000020 	.word	0x20000020

08006134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006138:	f7ff fff0 	bl	800611c <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	0a9b      	lsrs	r3, r3, #10
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4903      	ldr	r1, [pc, #12]	; (8006158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	0800d3bc 	.word	0x0800d3bc

0800615c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006160:	f7ff ffdc 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	0b5b      	lsrs	r3, r3, #13
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4903      	ldr	r1, [pc, #12]	; (8006180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40023800 	.word	0x40023800
 8006180:	0800d3bc 	.word	0x0800d3bc

08006184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e041      	b.n	800621a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc ff52 	bl	8003054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f000 fa96 	bl	80066f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e04e      	b.n	80062da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a23      	ldr	r2, [pc, #140]	; (80062e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006266:	d01d      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <HAL_TIM_Base_Start_IT+0xc8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a19      	ldr	r2, [pc, #100]	; (80062fc <HAL_TIM_Base_Start_IT+0xd8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_TIM_Base_Start_IT+0xdc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d111      	bne.n	80062c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	d010      	beq.n	80062d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	e007      	b.n	80062d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40010400 	.word	0x40010400
 80062fc:	40014000 	.word	0x40014000
 8006300:	40001800 	.word	0x40001800

08006304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b02      	cmp	r3, #2
 8006318:	d122      	bne.n	8006360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b02      	cmp	r3, #2
 8006326:	d11b      	bne.n	8006360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0202 	mvn.w	r2, #2
 8006330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9b5 	bl	80066b6 <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f9a7 	bl	80066a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f9b8 	bl	80066ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b04      	cmp	r3, #4
 800636c:	d122      	bne.n	80063b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b04      	cmp	r3, #4
 800637a:	d11b      	bne.n	80063b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0204 	mvn.w	r2, #4
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f98b 	bl	80066b6 <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f97d 	bl	80066a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f98e 	bl	80066ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d122      	bne.n	8006408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0208 	mvn.w	r2, #8
 80063d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2204      	movs	r2, #4
 80063de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f961 	bl	80066b6 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f953 	bl	80066a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f964 	bl	80066ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b10      	cmp	r3, #16
 8006414:	d122      	bne.n	800645c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b10      	cmp	r3, #16
 8006422:	d11b      	bne.n	800645c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0210 	mvn.w	r2, #16
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2208      	movs	r2, #8
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f937 	bl	80066b6 <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f929 	bl	80066a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f93a 	bl	80066ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10e      	bne.n	8006488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d107      	bne.n	8006488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0201 	mvn.w	r2, #1
 8006480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb fcf0 	bl	8001e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b80      	cmp	r3, #128	; 0x80
 8006494:	d10e      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	2b80      	cmp	r3, #128	; 0x80
 80064a2:	d107      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fae0 	bl	8006a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8ff 	bl	80066de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0220 	mvn.w	r2, #32
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 faaa 	bl	8006a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIM_ConfigClockSource+0x1c>
 800652c:	2302      	movs	r3, #2
 800652e:	e0b4      	b.n	800669a <HAL_TIM_ConfigClockSource+0x186>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006568:	d03e      	beq.n	80065e8 <HAL_TIM_ConfigClockSource+0xd4>
 800656a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656e:	f200 8087 	bhi.w	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006576:	f000 8086 	beq.w	8006686 <HAL_TIM_ConfigClockSource+0x172>
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d87f      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b70      	cmp	r3, #112	; 0x70
 8006582:	d01a      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xa6>
 8006584:	2b70      	cmp	r3, #112	; 0x70
 8006586:	d87b      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d050      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x11a>
 800658c:	2b60      	cmp	r3, #96	; 0x60
 800658e:	d877      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b50      	cmp	r3, #80	; 0x50
 8006592:	d03c      	beq.n	800660e <HAL_TIM_ConfigClockSource+0xfa>
 8006594:	2b50      	cmp	r3, #80	; 0x50
 8006596:	d873      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d058      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x13a>
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d86f      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d064      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065a4:	2b30      	cmp	r3, #48	; 0x30
 80065a6:	d86b      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d060      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d867      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d05c      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065b4:	2b10      	cmp	r3, #16
 80065b6:	d05a      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065b8:	e062      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6899      	ldr	r1, [r3, #8]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f000 f9ad 	bl	8006928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	609a      	str	r2, [r3, #8]
      break;
 80065e6:	e04f      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	6899      	ldr	r1, [r3, #8]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f000 f996 	bl	8006928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660a:	609a      	str	r2, [r3, #8]
      break;
 800660c:	e03c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	461a      	mov	r2, r3
 800661c:	f000 f90a 	bl	8006834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2150      	movs	r1, #80	; 0x50
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f963 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 800662c:	e02c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	461a      	mov	r2, r3
 800663c:	f000 f929 	bl	8006892 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2160      	movs	r1, #96	; 0x60
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f953 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 800664c:	e01c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	461a      	mov	r2, r3
 800665c:	f000 f8ea 	bl	8006834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2140      	movs	r1, #64	; 0x40
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f943 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 800666c:	e00c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 f93a 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 800667e:	e003      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
      break;
 8006684:	e000      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a40      	ldr	r2, [pc, #256]	; (8006808 <TIM_Base_SetConfig+0x114>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d00f      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a3d      	ldr	r2, [pc, #244]	; (800680c <TIM_Base_SetConfig+0x118>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00b      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a3c      	ldr	r2, [pc, #240]	; (8006810 <TIM_Base_SetConfig+0x11c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a3b      	ldr	r2, [pc, #236]	; (8006814 <TIM_Base_SetConfig+0x120>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a3a      	ldr	r2, [pc, #232]	; (8006818 <TIM_Base_SetConfig+0x124>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d108      	bne.n	8006746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a2f      	ldr	r2, [pc, #188]	; (8006808 <TIM_Base_SetConfig+0x114>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02b      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006754:	d027      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a2c      	ldr	r2, [pc, #176]	; (800680c <TIM_Base_SetConfig+0x118>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d023      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2b      	ldr	r2, [pc, #172]	; (8006810 <TIM_Base_SetConfig+0x11c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01f      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2a      	ldr	r2, [pc, #168]	; (8006814 <TIM_Base_SetConfig+0x120>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01b      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a29      	ldr	r2, [pc, #164]	; (8006818 <TIM_Base_SetConfig+0x124>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d017      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a28      	ldr	r2, [pc, #160]	; (800681c <TIM_Base_SetConfig+0x128>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a27      	ldr	r2, [pc, #156]	; (8006820 <TIM_Base_SetConfig+0x12c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a26      	ldr	r2, [pc, #152]	; (8006824 <TIM_Base_SetConfig+0x130>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a25      	ldr	r2, [pc, #148]	; (8006828 <TIM_Base_SetConfig+0x134>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a24      	ldr	r2, [pc, #144]	; (800682c <TIM_Base_SetConfig+0x138>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a23      	ldr	r2, [pc, #140]	; (8006830 <TIM_Base_SetConfig+0x13c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d108      	bne.n	80067b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <TIM_Base_SetConfig+0x114>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0xf8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <TIM_Base_SetConfig+0x124>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d103      	bne.n	80067f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	615a      	str	r2, [r3, #20]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40010400 	.word	0x40010400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800
 8006828:	40001800 	.word	0x40001800
 800682c:	40001c00 	.word	0x40001c00
 8006830:	40002000 	.word	0x40002000

08006834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800685e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 030a 	bic.w	r3, r3, #10
 8006870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006892:	b480      	push	{r7}
 8006894:	b087      	sub	sp, #28
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0210 	bic.w	r2, r3, #16
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	f043 0307 	orr.w	r3, r3, #7
 8006914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	021a      	lsls	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	431a      	orrs	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4313      	orrs	r3, r2
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800697c:	2302      	movs	r3, #2
 800697e:	e05a      	b.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a21      	ldr	r2, [pc, #132]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d022      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069cc:	d01d      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d018      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d013      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00e      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d009      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d10c      	bne.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40000c00 	.word	0x40000c00
 8006a54:	40010400 	.word	0x40010400
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40001800 	.word	0x40001800

08006a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e03f      	b.n	8006b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fc faf8 	bl	80030a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2224      	movs	r2, #36	; 0x24
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fcbf 	bl	8007450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d130      	bne.n	8006b9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_UART_Transmit_IT+0x26>
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e029      	b.n	8006ba0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Transmit_IT+0x38>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e022      	b.n	8006ba0 <HAL_UART_Transmit_IT+0x7e>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	88fa      	ldrh	r2, [r7, #6]
 8006b72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2221      	movs	r2, #33	; 0x21
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e000      	b.n	8006ba0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b0ba      	sub	sp, #232	; 0xe8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <HAL_UART_IRQHandler+0x66>
 8006bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb65 	bl	80072da <UART_Receive_IT>
      return;
 8006c10:	e256      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80de 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x22c>
 8006c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80d1 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <HAL_UART_IRQHandler+0xae>
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f043 0201 	orr.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_UART_IRQHandler+0xd2>
 8006c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <HAL_UART_IRQHandler+0xf6>
 8006c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f043 0204 	orr.w	r2, r3, #4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x126>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d105      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f043 0208 	orr.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 81ed 	beq.w	80070b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_UART_IRQHandler+0x14e>
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 faf0 	bl	80072da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	bf0c      	ite	eq
 8006d08:	2301      	moveq	r3, #1
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <HAL_UART_IRQHandler+0x17a>
 8006d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d04f      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9f8 	bl	800711c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d141      	bne.n	8006dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3314      	adds	r3, #20
 8006d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3314      	adds	r3, #20
 8006d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1d9      	bne.n	8006d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	4a7d      	ldr	r2, [pc, #500]	; (8006f88 <HAL_UART_IRQHandler+0x3dc>)
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fc fca3 	bl	80036e6 <HAL_DMA_Abort_IT>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e00e      	b.n	8006dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f99a 	bl	80070f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	e00a      	b.n	8006dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f996 	bl	80070f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	e006      	b.n	8006dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f992 	bl	80070f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dd2:	e170      	b.n	80070b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	bf00      	nop
    return;
 8006dd6:	e16e      	b.n	80070b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 814a 	bne.w	8007076 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8143 	beq.w	8007076 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 813c 	beq.w	8007076 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	f040 80b4 	bne.w	8006f8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8140 	beq.w	80070ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f080 8139 	bcs.w	80070ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5a:	f000 8088 	beq.w	8006f6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1d9      	bne.n	8006e5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ebc:	f023 0301 	bic.w	r3, r3, #1
 8006ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e1      	bne.n	8006eaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3314      	adds	r3, #20
 8006f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e3      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f50:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e3      	bne.n	8006f2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fc fb4c 	bl	8003606 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f8c0 	bl	8007104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f84:	e099      	b.n	80070ba <HAL_UART_IRQHandler+0x50e>
 8006f86:	bf00      	nop
 8006f88:	080071e3 	.word	0x080071e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 808b 	beq.w	80070be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8086 	beq.w	80070be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8006fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e3      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800700e:	633a      	str	r2, [r7, #48]	; 0x30
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e3      	bne.n	8006fea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0310 	bic.w	r3, r3, #16
 8007046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007054:	61fa      	str	r2, [r7, #28]
 8007056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	617b      	str	r3, [r7, #20]
   return(result);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e3      	bne.n	8007030 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f848 	bl	8007104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007074:	e023      	b.n	80070be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_UART_IRQHandler+0x4ea>
 8007082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8bb 	bl	800720a <UART_Transmit_IT>
    return;
 8007094:	e014      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00e      	beq.n	80070c0 <HAL_UART_IRQHandler+0x514>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f8fb 	bl	80072aa <UART_EndTransmit_IT>
    return;
 80070b4:	e004      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
    return;
 80070b6:	bf00      	nop
 80070b8:	e002      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
      return;
 80070ba:	bf00      	nop
 80070bc:	e000      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
      return;
 80070be:	bf00      	nop
  }
}
 80070c0:	37e8      	adds	r7, #232	; 0xe8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b095      	sub	sp, #84	; 0x54
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800713a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007144:	643a      	str	r2, [r7, #64]	; 0x40
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800714a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e5      	bne.n	8007124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	61fb      	str	r3, [r7, #28]
   return(result);
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3314      	adds	r3, #20
 8007176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e5      	bne.n	8007158 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	d119      	bne.n	80071c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b4:	61ba      	str	r2, [r7, #24]
 80071b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	613b      	str	r3, [r7, #16]
   return(result);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e5      	bne.n	8007194 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071d6:	bf00      	nop
 80071d8:	3754      	adds	r7, #84	; 0x54
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff ff77 	bl	80070f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b21      	cmp	r3, #33	; 0x21
 800721c:	d13e      	bne.n	800729c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007226:	d114      	bne.n	8007252 <UART_Transmit_IT+0x48>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d110      	bne.n	8007252 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007244:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	1c9a      	adds	r2, r3, #2
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	621a      	str	r2, [r3, #32]
 8007250:	e008      	b.n	8007264 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6211      	str	r1, [r2, #32]
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29b      	uxth	r3, r3
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4619      	mov	r1, r3
 8007272:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10f      	bne.n	8007298 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007286:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007296:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	e000      	b.n	800729e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fefc 	bl	80070c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b08c      	sub	sp, #48	; 0x30
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b22      	cmp	r3, #34	; 0x22
 80072ec:	f040 80ab 	bne.w	8007446 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f8:	d117      	bne.n	800732a <UART_Receive_IT+0x50>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d113      	bne.n	800732a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007318:	b29a      	uxth	r2, r3
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	1c9a      	adds	r2, r3, #2
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	629a      	str	r2, [r3, #40]	; 0x28
 8007328:	e026      	b.n	8007378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d007      	beq.n	800734e <UART_Receive_IT+0x74>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <UART_Receive_IT+0x82>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	b2da      	uxtb	r2, r3
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e008      	b.n	800736e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29b      	uxth	r3, r3
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4619      	mov	r1, r3
 8007386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007388:	2b00      	cmp	r3, #0
 800738a:	d15a      	bne.n	8007442 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0220 	bic.w	r2, r2, #32
 800739a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d135      	bne.n	8007438 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	330c      	adds	r3, #12
 80073d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	623a      	str	r2, [r7, #32]
 80073f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	69f9      	ldr	r1, [r7, #28]
 80073f8:	6a3a      	ldr	r2, [r7, #32]
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e5      	bne.n	80073d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b10      	cmp	r3, #16
 8007412:	d10a      	bne.n	800742a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fe67 	bl	8007104 <HAL_UARTEx_RxEventCallback>
 8007436:	e002      	b.n	800743e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fe4f 	bl	80070dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	e002      	b.n	8007448 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	e000      	b.n	8007448 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007446:	2302      	movs	r3, #2
  }
}
 8007448:	4618      	mov	r0, r3
 800744a:	3730      	adds	r7, #48	; 0x30
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	b09f      	sub	sp, #124	; 0x7c
 8007456:	af00      	add	r7, sp, #0
 8007458:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007466:	68d9      	ldr	r1, [r3, #12]
 8007468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	ea40 0301 	orr.w	r3, r0, r1
 8007470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	431a      	orrs	r2, r3
 800747c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	431a      	orrs	r2, r3
 8007482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	4313      	orrs	r3, r2
 8007488:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800748a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007494:	f021 010c 	bic.w	r1, r1, #12
 8007498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800749e:	430b      	orrs	r3, r1
 80074a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ae:	6999      	ldr	r1, [r3, #24]
 80074b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	ea40 0301 	orr.w	r3, r0, r1
 80074b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4bc5      	ldr	r3, [pc, #788]	; (80077d4 <UART_SetConfig+0x384>)
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d004      	beq.n	80074ce <UART_SetConfig+0x7e>
 80074c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	4bc3      	ldr	r3, [pc, #780]	; (80077d8 <UART_SetConfig+0x388>)
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d103      	bne.n	80074d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074ce:	f7fe fe45 	bl	800615c <HAL_RCC_GetPCLK2Freq>
 80074d2:	6778      	str	r0, [r7, #116]	; 0x74
 80074d4:	e002      	b.n	80074dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074d6:	f7fe fe2d 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 80074da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e4:	f040 80b6 	bne.w	8007654 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ea:	461c      	mov	r4, r3
 80074ec:	f04f 0500 	mov.w	r5, #0
 80074f0:	4622      	mov	r2, r4
 80074f2:	462b      	mov	r3, r5
 80074f4:	1891      	adds	r1, r2, r2
 80074f6:	6439      	str	r1, [r7, #64]	; 0x40
 80074f8:	415b      	adcs	r3, r3
 80074fa:	647b      	str	r3, [r7, #68]	; 0x44
 80074fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007500:	1912      	adds	r2, r2, r4
 8007502:	eb45 0303 	adc.w	r3, r5, r3
 8007506:	f04f 0000 	mov.w	r0, #0
 800750a:	f04f 0100 	mov.w	r1, #0
 800750e:	00d9      	lsls	r1, r3, #3
 8007510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007514:	00d0      	lsls	r0, r2, #3
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	1911      	adds	r1, r2, r4
 800751c:	6639      	str	r1, [r7, #96]	; 0x60
 800751e:	416b      	adcs	r3, r5
 8007520:	667b      	str	r3, [r7, #100]	; 0x64
 8007522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	1891      	adds	r1, r2, r2
 800752e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007530:	415b      	adcs	r3, r3
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007538:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800753c:	f7f9 fb34 	bl	8000ba8 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4ba5      	ldr	r3, [pc, #660]	; (80077dc <UART_SetConfig+0x38c>)
 8007546:	fba3 2302 	umull	r2, r3, r3, r2
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	011e      	lsls	r6, r3, #4
 800754e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007550:	461c      	mov	r4, r3
 8007552:	f04f 0500 	mov.w	r5, #0
 8007556:	4622      	mov	r2, r4
 8007558:	462b      	mov	r3, r5
 800755a:	1891      	adds	r1, r2, r2
 800755c:	6339      	str	r1, [r7, #48]	; 0x30
 800755e:	415b      	adcs	r3, r3
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
 8007562:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007566:	1912      	adds	r2, r2, r4
 8007568:	eb45 0303 	adc.w	r3, r5, r3
 800756c:	f04f 0000 	mov.w	r0, #0
 8007570:	f04f 0100 	mov.w	r1, #0
 8007574:	00d9      	lsls	r1, r3, #3
 8007576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800757a:	00d0      	lsls	r0, r2, #3
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	1911      	adds	r1, r2, r4
 8007582:	65b9      	str	r1, [r7, #88]	; 0x58
 8007584:	416b      	adcs	r3, r5
 8007586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	461a      	mov	r2, r3
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	1891      	adds	r1, r2, r2
 8007594:	62b9      	str	r1, [r7, #40]	; 0x28
 8007596:	415b      	adcs	r3, r3
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800759a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800759e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075a2:	f7f9 fb01 	bl	8000ba8 <__aeabi_uldivmod>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4b8c      	ldr	r3, [pc, #560]	; (80077dc <UART_SetConfig+0x38c>)
 80075ac:	fba3 1302 	umull	r1, r3, r3, r2
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	2164      	movs	r1, #100	; 0x64
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	3332      	adds	r3, #50	; 0x32
 80075be:	4a87      	ldr	r2, [pc, #540]	; (80077dc <UART_SetConfig+0x38c>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075cc:	441e      	add	r6, r3
 80075ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d0:	4618      	mov	r0, r3
 80075d2:	f04f 0100 	mov.w	r1, #0
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	1894      	adds	r4, r2, r2
 80075dc:	623c      	str	r4, [r7, #32]
 80075de:	415b      	adcs	r3, r3
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
 80075e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075e6:	1812      	adds	r2, r2, r0
 80075e8:	eb41 0303 	adc.w	r3, r1, r3
 80075ec:	f04f 0400 	mov.w	r4, #0
 80075f0:	f04f 0500 	mov.w	r5, #0
 80075f4:	00dd      	lsls	r5, r3, #3
 80075f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075fa:	00d4      	lsls	r4, r2, #3
 80075fc:	4622      	mov	r2, r4
 80075fe:	462b      	mov	r3, r5
 8007600:	1814      	adds	r4, r2, r0
 8007602:	653c      	str	r4, [r7, #80]	; 0x50
 8007604:	414b      	adcs	r3, r1
 8007606:	657b      	str	r3, [r7, #84]	; 0x54
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	461a      	mov	r2, r3
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	1891      	adds	r1, r2, r2
 8007614:	61b9      	str	r1, [r7, #24]
 8007616:	415b      	adcs	r3, r3
 8007618:	61fb      	str	r3, [r7, #28]
 800761a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800761e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007622:	f7f9 fac1 	bl	8000ba8 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4b6c      	ldr	r3, [pc, #432]	; (80077dc <UART_SetConfig+0x38c>)
 800762c:	fba3 1302 	umull	r1, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2164      	movs	r1, #100	; 0x64
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3332      	adds	r3, #50	; 0x32
 800763e:	4a67      	ldr	r2, [pc, #412]	; (80077dc <UART_SetConfig+0x38c>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4432      	add	r2, r6
 8007650:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007652:	e0b9      	b.n	80077c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007656:	461c      	mov	r4, r3
 8007658:	f04f 0500 	mov.w	r5, #0
 800765c:	4622      	mov	r2, r4
 800765e:	462b      	mov	r3, r5
 8007660:	1891      	adds	r1, r2, r2
 8007662:	6139      	str	r1, [r7, #16]
 8007664:	415b      	adcs	r3, r3
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800766c:	1912      	adds	r2, r2, r4
 800766e:	eb45 0303 	adc.w	r3, r5, r3
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f04f 0100 	mov.w	r1, #0
 800767a:	00d9      	lsls	r1, r3, #3
 800767c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007680:	00d0      	lsls	r0, r2, #3
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	eb12 0804 	adds.w	r8, r2, r4
 800768a:	eb43 0905 	adc.w	r9, r3, r5
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4618      	mov	r0, r3
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	008b      	lsls	r3, r1, #2
 80076a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076a6:	0082      	lsls	r2, r0, #2
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa7c 	bl	8000ba8 <__aeabi_uldivmod>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4b49      	ldr	r3, [pc, #292]	; (80077dc <UART_SetConfig+0x38c>)
 80076b6:	fba3 2302 	umull	r2, r3, r3, r2
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	011e      	lsls	r6, r3, #4
 80076be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c0:	4618      	mov	r0, r3
 80076c2:	f04f 0100 	mov.w	r1, #0
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	1894      	adds	r4, r2, r2
 80076cc:	60bc      	str	r4, [r7, #8]
 80076ce:	415b      	adcs	r3, r3
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076d6:	1812      	adds	r2, r2, r0
 80076d8:	eb41 0303 	adc.w	r3, r1, r3
 80076dc:	f04f 0400 	mov.w	r4, #0
 80076e0:	f04f 0500 	mov.w	r5, #0
 80076e4:	00dd      	lsls	r5, r3, #3
 80076e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076ea:	00d4      	lsls	r4, r2, #3
 80076ec:	4622      	mov	r2, r4
 80076ee:	462b      	mov	r3, r5
 80076f0:	1814      	adds	r4, r2, r0
 80076f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80076f4:	414b      	adcs	r3, r1
 80076f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f04f 0100 	mov.w	r1, #0
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	008b      	lsls	r3, r1, #2
 800770c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007710:	0082      	lsls	r2, r0, #2
 8007712:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007716:	f7f9 fa47 	bl	8000ba8 <__aeabi_uldivmod>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4b2f      	ldr	r3, [pc, #188]	; (80077dc <UART_SetConfig+0x38c>)
 8007720:	fba3 1302 	umull	r1, r3, r3, r2
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	2164      	movs	r1, #100	; 0x64
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	3332      	adds	r3, #50	; 0x32
 8007732:	4a2a      	ldr	r2, [pc, #168]	; (80077dc <UART_SetConfig+0x38c>)
 8007734:	fba2 2303 	umull	r2, r3, r2, r3
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800773e:	441e      	add	r6, r3
 8007740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007742:	4618      	mov	r0, r3
 8007744:	f04f 0100 	mov.w	r1, #0
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	1894      	adds	r4, r2, r2
 800774e:	603c      	str	r4, [r7, #0]
 8007750:	415b      	adcs	r3, r3
 8007752:	607b      	str	r3, [r7, #4]
 8007754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007758:	1812      	adds	r2, r2, r0
 800775a:	eb41 0303 	adc.w	r3, r1, r3
 800775e:	f04f 0400 	mov.w	r4, #0
 8007762:	f04f 0500 	mov.w	r5, #0
 8007766:	00dd      	lsls	r5, r3, #3
 8007768:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800776c:	00d4      	lsls	r4, r2, #3
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	eb12 0a00 	adds.w	sl, r2, r0
 8007776:	eb43 0b01 	adc.w	fp, r3, r1
 800777a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	f04f 0100 	mov.w	r1, #0
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	008b      	lsls	r3, r1, #2
 800778e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007792:	0082      	lsls	r2, r0, #2
 8007794:	4650      	mov	r0, sl
 8007796:	4659      	mov	r1, fp
 8007798:	f7f9 fa06 	bl	8000ba8 <__aeabi_uldivmod>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4b0e      	ldr	r3, [pc, #56]	; (80077dc <UART_SetConfig+0x38c>)
 80077a2:	fba3 1302 	umull	r1, r3, r3, r2
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	2164      	movs	r1, #100	; 0x64
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	3332      	adds	r3, #50	; 0x32
 80077b4:	4a09      	ldr	r2, [pc, #36]	; (80077dc <UART_SetConfig+0x38c>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4432      	add	r2, r6
 80077c6:	609a      	str	r2, [r3, #8]
}
 80077c8:	bf00      	nop
 80077ca:	377c      	adds	r7, #124	; 0x7c
 80077cc:	46bd      	mov	sp, r7
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	bf00      	nop
 80077d4:	40011000 	.word	0x40011000
 80077d8:	40011400 	.word	0x40011400
 80077dc:	51eb851f 	.word	0x51eb851f

080077e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077e0:	b084      	sub	sp, #16
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	f107 001c 	add.w	r0, r7, #28
 80077ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d122      	bne.n	800783e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800780c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d105      	bne.n	8007832 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fb1c 	bl	8008e70 <USB_CoreReset>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e01a      	b.n	8007874 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fb10 	bl	8008e70 <USB_CoreReset>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
 8007866:	e005      	b.n	8007874 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	2b01      	cmp	r3, #1
 8007878:	d10b      	bne.n	8007892 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f043 0206 	orr.w	r2, r3, #6
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f043 0220 	orr.w	r2, r3, #32
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800789e:	b004      	add	sp, #16
 80078a0:	4770      	bx	lr
	...

080078a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d165      	bne.n	8007984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a41      	ldr	r2, [pc, #260]	; (80079c0 <USB_SetTurnaroundTime+0x11c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d906      	bls.n	80078ce <USB_SetTurnaroundTime+0x2a>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4a40      	ldr	r2, [pc, #256]	; (80079c4 <USB_SetTurnaroundTime+0x120>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d202      	bcs.n	80078ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078c8:	230f      	movs	r3, #15
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e062      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <USB_SetTurnaroundTime+0x120>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d306      	bcc.n	80078e4 <USB_SetTurnaroundTime+0x40>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a3b      	ldr	r2, [pc, #236]	; (80079c8 <USB_SetTurnaroundTime+0x124>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d202      	bcs.n	80078e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078de:	230e      	movs	r3, #14
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e057      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <USB_SetTurnaroundTime+0x124>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d306      	bcc.n	80078fa <USB_SetTurnaroundTime+0x56>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a37      	ldr	r2, [pc, #220]	; (80079cc <USB_SetTurnaroundTime+0x128>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d202      	bcs.n	80078fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078f4:	230d      	movs	r3, #13
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e04c      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	4a33      	ldr	r2, [pc, #204]	; (80079cc <USB_SetTurnaroundTime+0x128>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d306      	bcc.n	8007910 <USB_SetTurnaroundTime+0x6c>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4a32      	ldr	r2, [pc, #200]	; (80079d0 <USB_SetTurnaroundTime+0x12c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d802      	bhi.n	8007910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800790a:	230c      	movs	r3, #12
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e041      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <USB_SetTurnaroundTime+0x12c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d906      	bls.n	8007926 <USB_SetTurnaroundTime+0x82>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4a2e      	ldr	r2, [pc, #184]	; (80079d4 <USB_SetTurnaroundTime+0x130>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d802      	bhi.n	8007926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007920:	230b      	movs	r3, #11
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e036      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4a2a      	ldr	r2, [pc, #168]	; (80079d4 <USB_SetTurnaroundTime+0x130>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d906      	bls.n	800793c <USB_SetTurnaroundTime+0x98>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4a29      	ldr	r2, [pc, #164]	; (80079d8 <USB_SetTurnaroundTime+0x134>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d802      	bhi.n	800793c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007936:	230a      	movs	r3, #10
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e02b      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4a26      	ldr	r2, [pc, #152]	; (80079d8 <USB_SetTurnaroundTime+0x134>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d906      	bls.n	8007952 <USB_SetTurnaroundTime+0xae>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4a25      	ldr	r2, [pc, #148]	; (80079dc <USB_SetTurnaroundTime+0x138>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d202      	bcs.n	8007952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800794c:	2309      	movs	r3, #9
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e020      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4a21      	ldr	r2, [pc, #132]	; (80079dc <USB_SetTurnaroundTime+0x138>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d306      	bcc.n	8007968 <USB_SetTurnaroundTime+0xc4>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4a20      	ldr	r2, [pc, #128]	; (80079e0 <USB_SetTurnaroundTime+0x13c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d802      	bhi.n	8007968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007962:	2308      	movs	r3, #8
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e015      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <USB_SetTurnaroundTime+0x13c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d906      	bls.n	800797e <USB_SetTurnaroundTime+0xda>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <USB_SetTurnaroundTime+0x140>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d202      	bcs.n	800797e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007978:	2307      	movs	r3, #7
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e00a      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800797e:	2306      	movs	r3, #6
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e007      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800798a:	2309      	movs	r3, #9
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e001      	b.n	8007994 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007990:	2309      	movs	r3, #9
 8007992:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	00d8acbf 	.word	0x00d8acbf
 80079c4:	00e4e1c0 	.word	0x00e4e1c0
 80079c8:	00f42400 	.word	0x00f42400
 80079cc:	01067380 	.word	0x01067380
 80079d0:	011a499f 	.word	0x011a499f
 80079d4:	01312cff 	.word	0x01312cff
 80079d8:	014ca43f 	.word	0x014ca43f
 80079dc:	016e3600 	.word	0x016e3600
 80079e0:	01a6ab1f 	.word	0x01a6ab1f
 80079e4:	01e84800 	.word	0x01e84800

080079e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f043 0201 	orr.w	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f023 0201 	bic.w	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d115      	bne.n	8007a7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f7fb fc9e 	bl	800339c <HAL_Delay>
      ms++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 f972 	bl	8008d50 <USB_GetMode>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d01e      	beq.n	8007ab0 <USB_SetCurrentMode+0x84>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b31      	cmp	r3, #49	; 0x31
 8007a76:	d9f0      	bls.n	8007a5a <USB_SetCurrentMode+0x2e>
 8007a78:	e01a      	b.n	8007ab0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d115      	bne.n	8007aac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	f7fb fc85 	bl	800339c <HAL_Delay>
      ms++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f959 	bl	8008d50 <USB_GetMode>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <USB_SetCurrentMode+0x84>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b31      	cmp	r3, #49	; 0x31
 8007aa8:	d9f0      	bls.n	8007a8c <USB_SetCurrentMode+0x60>
 8007aaa:	e001      	b.n	8007ab0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e005      	b.n	8007abc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b32      	cmp	r3, #50	; 0x32
 8007ab4:	d101      	bne.n	8007aba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	e009      	b.n	8007af8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3340      	adds	r3, #64	; 0x40
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3301      	adds	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b0e      	cmp	r3, #14
 8007afc:	d9f2      	bls.n	8007ae4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11c      	bne.n	8007b3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b12:	f043 0302 	orr.w	r3, r3, #2
 8007b16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007b3c:	e00b      	b.n	8007b56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b68:	4619      	mov	r1, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	461a      	mov	r2, r3
 8007b72:	680b      	ldr	r3, [r1, #0]
 8007b74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10c      	bne.n	8007b96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d104      	bne.n	8007b8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b82:	2100      	movs	r1, #0
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f945 	bl	8007e14 <USB_SetDevSpeed>
 8007b8a:	e008      	b.n	8007b9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f940 	bl	8007e14 <USB_SetDevSpeed>
 8007b94:	e003      	b.n	8007b9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b96:	2103      	movs	r1, #3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f93b 	bl	8007e14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b9e:	2110      	movs	r1, #16
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f8f3 	bl	8007d8c <USB_FlushTxFifo>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f90f 	bl	8007dd4 <USB_FlushRxFifo>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	461a      	mov	r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	e043      	b.n	8007c72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c00:	d118      	bne.n	8007c34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	461a      	mov	r2, r3
 8007c16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e013      	b.n	8007c46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	e008      	b.n	8007c46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c40:	461a      	mov	r2, r3
 8007c42:	2300      	movs	r3, #0
 8007c44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	461a      	mov	r2, r3
 8007c54:	2300      	movs	r3, #0
 8007c56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c64:	461a      	mov	r2, r3
 8007c66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d3b7      	bcc.n	8007bea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	e043      	b.n	8007d08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c96:	d118      	bne.n	8007cca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10a      	bne.n	8007cb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	461a      	mov	r2, r3
 8007cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e013      	b.n	8007cdc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e008      	b.n	8007cdc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce8:	461a      	mov	r2, r3
 8007cea:	2300      	movs	r3, #0
 8007cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3301      	adds	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d3b7      	bcc.n	8007c80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f043 0210 	orr.w	r2, r3, #16
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <USB_DevInit+0x2c4>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f043 0208 	orr.w	r2, r3, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d107      	bne.n	8007d78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d70:	f043 0304 	orr.w	r3, r3, #4
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d84:	b004      	add	sp, #16
 8007d86:	4770      	bx	lr
 8007d88:	803c3800 	.word	0x803c3800

08007d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	019b      	lsls	r3, r3, #6
 8007d9e:	f043 0220 	orr.w	r2, r3, #32
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <USB_FlushTxFifo+0x44>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d901      	bls.n	8007db6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e006      	b.n	8007dc4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d0f1      	beq.n	8007da6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	00030d40 	.word	0x00030d40

08007dd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2210      	movs	r2, #16
 8007de4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <USB_FlushRxFifo+0x3c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e006      	b.n	8007e04 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b10      	cmp	r3, #16
 8007e00:	d0f1      	beq.n	8007de6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	00030d40 	.word	0x00030d40

08007e14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e34:	4313      	orrs	r3, r2
 8007e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b087      	sub	sp, #28
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 0306 	and.w	r3, r3, #6
 8007e5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]
 8007e6a:	e00a      	b.n	8007e82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d002      	beq.n	8007e78 <USB_GetDevSpeed+0x32>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b06      	cmp	r3, #6
 8007e76:	d102      	bne.n	8007e7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	75fb      	strb	r3, [r7, #23]
 8007e7c:	e001      	b.n	8007e82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e7e:	230f      	movs	r3, #15
 8007e80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d13a      	bne.n	8007f22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	69da      	ldr	r2, [r3, #28]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	68f9      	ldr	r1, [r7, #12]
 8007ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d155      	bne.n	8007f90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	78db      	ldrb	r3, [r3, #3]
 8007efe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	059b      	lsls	r3, r3, #22
 8007f06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	0151      	lsls	r1, r2, #5
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	440a      	add	r2, r1
 8007f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	e036      	b.n	8007f90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	2101      	movs	r1, #1
 8007f34:	fa01 f303 	lsl.w	r3, r1, r3
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d11a      	bne.n	8007f90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	78db      	ldrb	r3, [r3, #3]
 8007f74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f76:	430b      	orrs	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d161      	bne.n	8008080 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd2:	d11f      	bne.n	8008014 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ff2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	440a      	add	r2, r1
 800800a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	2101      	movs	r1, #1
 8008026:	fa01 f303 	lsl.w	r3, r1, r3
 800802a:	b29b      	uxth	r3, r3
 800802c:	43db      	mvns	r3, r3
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008034:	4013      	ands	r3, r2
 8008036:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	69da      	ldr	r2, [r3, #28]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	b29b      	uxth	r3, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008058:	4013      	ands	r3, r2
 800805a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	0159      	lsls	r1, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	440b      	add	r3, r1
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	4619      	mov	r1, r3
 8008078:	4b35      	ldr	r3, [pc, #212]	; (8008150 <USB_DeactivateEndpoint+0x1b0>)
 800807a:	4013      	ands	r3, r2
 800807c:	600b      	str	r3, [r1, #0]
 800807e:	e060      	b.n	8008142 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008096:	d11f      	bne.n	80080d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2101      	movs	r1, #1
 80080ea:	fa01 f303 	lsl.w	r3, r1, r3
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	43db      	mvns	r3, r3
 80080f2:	68f9      	ldr	r1, [r7, #12]
 80080f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080f8:	4013      	ands	r3, r2
 80080fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	43db      	mvns	r3, r3
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800811c:	4013      	ands	r3, r2
 800811e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	0159      	lsls	r1, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	440b      	add	r3, r1
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	4619      	mov	r1, r3
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <USB_DeactivateEndpoint+0x1b4>)
 800813e:	4013      	ands	r3, r2
 8008140:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	ec337800 	.word	0xec337800
 8008154:	eff37800 	.word	0xeff37800

08008158 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	; 0x28
 800815c:	af02      	add	r7, sp, #8
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b01      	cmp	r3, #1
 8008176:	f040 815c 	bne.w	8008432 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d132      	bne.n	80081e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e0:	0cdb      	lsrs	r3, r3, #19
 80081e2:	04db      	lsls	r3, r3, #19
 80081e4:	6113      	str	r3, [r2, #16]
 80081e6:	e074      	b.n	80082d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008202:	0cdb      	lsrs	r3, r3, #19
 8008204:	04db      	lsls	r3, r3, #19
 8008206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008222:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008226:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800822a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008238:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6959      	ldr	r1, [r3, #20]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	440b      	add	r3, r1
 8008244:	1e59      	subs	r1, r3, #1
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	fbb1 f3f3 	udiv	r3, r1, r3
 800824e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008250:	4b9d      	ldr	r3, [pc, #628]	; (80084c8 <USB_EPStartXfer+0x370>)
 8008252:	400b      	ands	r3, r1
 8008254:	69b9      	ldr	r1, [r7, #24]
 8008256:	0148      	lsls	r0, r1, #5
 8008258:	69f9      	ldr	r1, [r7, #28]
 800825a:	4401      	add	r1, r0
 800825c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008260:	4313      	orrs	r3, r2
 8008262:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800827a:	69b9      	ldr	r1, [r7, #24]
 800827c:	0148      	lsls	r0, r1, #5
 800827e:	69f9      	ldr	r1, [r7, #28]
 8008280:	4401      	add	r1, r0
 8008282:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008286:	4313      	orrs	r3, r2
 8008288:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d11f      	bne.n	80082d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d14b      	bne.n	8008370 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	461a      	mov	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	78db      	ldrb	r3, [r3, #3]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d128      	bne.n	800834e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008308:	2b00      	cmp	r3, #0
 800830a:	d110      	bne.n	800832e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	0151      	lsls	r1, r2, #5
 800831e:	69fa      	ldr	r2, [r7, #28]
 8008320:	440a      	add	r2, r1
 8008322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	e00f      	b.n	800834e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	440a      	add	r2, r1
 8008364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	e12f      	b.n	80085d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	0151      	lsls	r1, r2, #5
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	440a      	add	r2, r1
 8008386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800838e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	78db      	ldrb	r3, [r3, #3]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d015      	beq.n	80083c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8117 	beq.w	80085d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	2101      	movs	r1, #1
 80083b4:	fa01 f303 	lsl.w	r3, r1, r3
 80083b8:	69f9      	ldr	r1, [r7, #28]
 80083ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083be:	4313      	orrs	r3, r2
 80083c0:	634b      	str	r3, [r1, #52]	; 0x34
 80083c2:	e105      	b.n	80085d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d110      	bne.n	80083f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e00f      	b.n	8008416 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008414:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	68d9      	ldr	r1, [r3, #12]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	781a      	ldrb	r2, [r3, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	b298      	uxth	r0, r3
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4603      	mov	r3, r0
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fa2b 	bl	8008886 <USB_WritePacket>
 8008430:	e0ce      	b.n	80085d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844c:	0cdb      	lsrs	r3, r3, #19
 800844e:	04db      	lsls	r3, r3, #19
 8008450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	69fa      	ldr	r2, [r7, #28]
 8008466:	440a      	add	r2, r1
 8008468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800846c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008474:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d126      	bne.n	80084cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008494:	69b9      	ldr	r1, [r7, #24]
 8008496:	0148      	lsls	r0, r1, #5
 8008498:	69f9      	ldr	r1, [r7, #28]
 800849a:	4401      	add	r1, r0
 800849c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084a0:	4313      	orrs	r3, r2
 80084a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084c2:	6113      	str	r3, [r2, #16]
 80084c4:	e036      	b.n	8008534 <USB_EPStartXfer+0x3dc>
 80084c6:	bf00      	nop
 80084c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	695a      	ldr	r2, [r3, #20]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	4413      	add	r3, r2
 80084d6:	1e5a      	subs	r2, r3, #1
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	8afb      	ldrh	r3, [r7, #22]
 80084f2:	04d9      	lsls	r1, r3, #19
 80084f4:	4b39      	ldr	r3, [pc, #228]	; (80085dc <USB_EPStartXfer+0x484>)
 80084f6:	400b      	ands	r3, r1
 80084f8:	69b9      	ldr	r1, [r7, #24]
 80084fa:	0148      	lsls	r0, r1, #5
 80084fc:	69f9      	ldr	r1, [r7, #28]
 80084fe:	4401      	add	r1, r0
 8008500:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008504:	4313      	orrs	r3, r2
 8008506:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	8af9      	ldrh	r1, [r7, #22]
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008524:	69b9      	ldr	r1, [r7, #24]
 8008526:	0148      	lsls	r0, r1, #5
 8008528:	69f9      	ldr	r1, [r7, #28]
 800852a:	4401      	add	r1, r0
 800852c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008530:	4313      	orrs	r3, r2
 8008532:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d10d      	bne.n	8008556 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	68d9      	ldr	r1, [r3, #12]
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008552:	460a      	mov	r2, r1
 8008554:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	78db      	ldrb	r3, [r3, #3]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d128      	bne.n	80085b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856a:	2b00      	cmp	r3, #0
 800856c:	d110      	bne.n	8008590 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e00f      	b.n	80085b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	1ff80000 	.word	0x1ff80000

080085e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4613      	mov	r3, r2
 80085ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	f040 80cd 	bne.w	800879c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d132      	bne.n	8008670 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	440a      	add	r2, r1
 8008620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800862c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800864c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	0151      	lsls	r1, r2, #5
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	440a      	add	r2, r1
 8008664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008668:	0cdb      	lsrs	r3, r3, #19
 800866a:	04db      	lsls	r3, r3, #19
 800866c:	6113      	str	r3, [r2, #16]
 800866e:	e04e      	b.n	800870e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	440a      	add	r2, r1
 8008686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868a:	0cdb      	lsrs	r3, r3, #19
 800868c:	04db      	lsls	r3, r3, #19
 800868e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	695a      	ldr	r2, [r3, #20]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d903      	bls.n	80086c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	691a      	ldr	r2, [r3, #16]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086fe:	6939      	ldr	r1, [r7, #16]
 8008700:	0148      	lsls	r0, r1, #5
 8008702:	6979      	ldr	r1, [r7, #20]
 8008704:	4401      	add	r1, r0
 8008706:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800870a:	4313      	orrs	r3, r2
 800870c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d11e      	bne.n	8008752 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d009      	beq.n	8008730 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	0151      	lsls	r1, r2, #5
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	440a      	add	r2, r1
 8008746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	e092      	b.n	8008878 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	440a      	add	r2, r1
 8008768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008770:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d07e      	beq.n	8008878 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	2101      	movs	r1, #1
 800878c:	fa01 f303 	lsl.w	r3, r1, r3
 8008790:	6979      	ldr	r1, [r7, #20]
 8008792:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008796:	4313      	orrs	r3, r2
 8008798:	634b      	str	r3, [r1, #52]	; 0x34
 800879a:	e06d      	b.n	8008878 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b6:	0cdb      	lsrs	r3, r3, #19
 80087b8:	04db      	lsls	r3, r3, #19
 80087ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800880a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800880e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	691a      	ldr	r2, [r3, #16]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008826:	6939      	ldr	r1, [r7, #16]
 8008828:	0148      	lsls	r0, r1, #5
 800882a:	6979      	ldr	r1, [r7, #20]
 800882c:	4401      	add	r1, r0
 800882e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008832:	4313      	orrs	r3, r2
 8008834:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10d      	bne.n	8008858 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d009      	beq.n	8008858 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	68d9      	ldr	r1, [r3, #12]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008854:	460a      	mov	r2, r1
 8008856:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008876:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008886:	b480      	push	{r7}
 8008888:	b089      	sub	sp, #36	; 0x24
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	460b      	mov	r3, r1
 8008896:	71fb      	strb	r3, [r7, #7]
 8008898:	4613      	mov	r3, r2
 800889a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d123      	bne.n	80088f4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088ac:	88bb      	ldrh	r3, [r7, #4]
 80088ae:	3303      	adds	r3, #3
 80088b0:	089b      	lsrs	r3, r3, #2
 80088b2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088b4:	2300      	movs	r3, #0
 80088b6:	61bb      	str	r3, [r7, #24]
 80088b8:	e018      	b.n	80088ec <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	031a      	lsls	r2, r3, #12
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c6:	461a      	mov	r2, r3
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	3301      	adds	r3, #1
 80088d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	3301      	adds	r3, #1
 80088de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	3301      	adds	r3, #1
 80088e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	3301      	adds	r3, #1
 80088ea:	61bb      	str	r3, [r7, #24]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d3e2      	bcc.n	80088ba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3724      	adds	r7, #36	; 0x24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008902:	b480      	push	{r7}
 8008904:	b08b      	sub	sp, #44	; 0x2c
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	b29b      	uxth	r3, r3
 800891e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008928:	2300      	movs	r3, #0
 800892a:	623b      	str	r3, [r7, #32]
 800892c:	e014      	b.n	8008958 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	601a      	str	r2, [r3, #0]
    pDest++;
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	3301      	adds	r3, #1
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	3301      	adds	r3, #1
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	3301      	adds	r3, #1
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	3301      	adds	r3, #1
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	3301      	adds	r3, #1
 8008956:	623b      	str	r3, [r7, #32]
 8008958:	6a3a      	ldr	r2, [r7, #32]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	429a      	cmp	r2, r3
 800895e:	d3e6      	bcc.n	800892e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008960:	8bfb      	ldrh	r3, [r7, #30]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d01e      	beq.n	80089a4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008970:	461a      	mov	r2, r3
 8008972:	f107 0310 	add.w	r3, r7, #16
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	fa22 f303 	lsr.w	r3, r2, r3
 8008986:	b2da      	uxtb	r2, r3
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	701a      	strb	r2, [r3, #0]
      i++;
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	3301      	adds	r3, #1
 8008990:	623b      	str	r3, [r7, #32]
      pDest++;
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	3301      	adds	r3, #1
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008998:	8bfb      	ldrh	r3, [r7, #30]
 800899a:	3b01      	subs	r3, #1
 800899c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800899e:	8bfb      	ldrh	r3, [r7, #30]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1ea      	bne.n	800897a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	372c      	adds	r7, #44	; 0x2c
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d12c      	bne.n	8008a28 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	db12      	blt.n	8008a06 <USB_EPSetStall+0x54>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00f      	beq.n	8008a06 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a04:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	e02b      	b.n	8008a80 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	db12      	blt.n	8008a60 <USB_EPSetStall+0xae>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00f      	beq.n	8008a60 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a5e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d128      	bne.n	8008afc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ac8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	78db      	ldrb	r3, [r3, #3]
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d003      	beq.n	8008ada <USB_EPClearStall+0x4c>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	78db      	ldrb	r3, [r3, #3]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d138      	bne.n	8008b4c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	e027      	b.n	8008b4c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	78db      	ldrb	r3, [r3, #3]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d003      	beq.n	8008b2c <USB_EPClearStall+0x9e>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	78db      	ldrb	r3, [r3, #3]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d10f      	bne.n	8008b4c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b4a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b7c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b94:	4313      	orrs	r3, r2
 8008b96:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd4:	f023 0302 	bic.w	r3, r3, #2
 8008bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c16:	f043 0302 	orr.w	r3, r3, #2
 8008c1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4013      	ands	r3, r2
 8008c72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	0c1b      	lsrs	r3, r3, #16
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	b29b      	uxth	r3, r3
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
 8008d24:	01db      	lsls	r3, r3, #7
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d42:	68bb      	ldr	r3, [r7, #8]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d8a:	f023 0307 	bic.w	r3, r3, #7
 8008d8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
	...

08008db4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	333c      	adds	r3, #60	; 0x3c
 8008dca:	3304      	adds	r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	4a26      	ldr	r2, [pc, #152]	; (8008e6c <USB_EP0_OutStart+0xb8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d90a      	bls.n	8008dee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de8:	d101      	bne.n	8008dee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e037      	b.n	8008e5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df4:	461a      	mov	r2, r3
 8008df6:	2300      	movs	r3, #0
 8008df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e1c:	f043 0318 	orr.w	r3, r3, #24
 8008e20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e36:	7afb      	ldrb	r3, [r7, #11]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d10f      	bne.n	8008e5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	4f54300a 	.word	0x4f54300a

08008e70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <USB_CoreReset+0x60>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e01a      	b.n	8008ec2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	daf3      	bge.n	8008e7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f043 0201 	orr.w	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <USB_CoreReset+0x60>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d901      	bls.n	8008eb4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e006      	b.n	8008ec2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d0f1      	beq.n	8008ea4 <USB_CoreReset+0x34>

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	00030d40 	.word	0x00030d40

08008ed4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ee0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ee4:	f002 f972 	bl	800b1cc <USBD_static_malloc>
 8008ee8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e066      	b.n	8008fca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	7c1b      	ldrb	r3, [r3, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d119      	bne.n	8008f40 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f10:	2202      	movs	r2, #2
 8008f12:	2181      	movs	r1, #129	; 0x81
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f002 f836 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f24:	2202      	movs	r2, #2
 8008f26:	2101      	movs	r1, #1
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 f82c 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2210      	movs	r2, #16
 8008f3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008f3e:	e016      	b.n	8008f6e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f40:	2340      	movs	r3, #64	; 0x40
 8008f42:	2202      	movs	r2, #2
 8008f44:	2181      	movs	r1, #129	; 0x81
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f002 f81d 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f52:	2340      	movs	r3, #64	; 0x40
 8008f54:	2202      	movs	r2, #2
 8008f56:	2101      	movs	r1, #1
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f002 f814 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2210      	movs	r2, #16
 8008f6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f6e:	2308      	movs	r3, #8
 8008f70:	2203      	movs	r2, #3
 8008f72:	2182      	movs	r1, #130	; 0x82
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 f806 	bl	800af86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	7c1b      	ldrb	r3, [r3, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d109      	bne.n	8008fb8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fae:	2101      	movs	r1, #1
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f002 f8d7 	bl	800b164 <USBD_LL_PrepareReceive>
 8008fb6:	e007      	b.n	8008fc8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fbe:	2340      	movs	r3, #64	; 0x40
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 f8ce 	bl	800b164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008fde:	2181      	movs	r1, #129	; 0x81
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 fff6 	bl	800afd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008fec:	2101      	movs	r1, #1
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 ffef 	bl	800afd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ffc:	2182      	movs	r1, #130	; 0x82
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 ffe7 	bl	800afd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800902e:	4618      	mov	r0, r3
 8009030:	f002 f8da 	bl	800b1e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009058:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800906c:	2303      	movs	r3, #3
 800906e:	e0af      	b.n	80091d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009078:	2b00      	cmp	r3, #0
 800907a:	d03f      	beq.n	80090fc <USBD_CDC_Setup+0xb4>
 800907c:	2b20      	cmp	r3, #32
 800907e:	f040 809f 	bne.w	80091c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88db      	ldrh	r3, [r3, #6]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d02e      	beq.n	80090e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b25b      	sxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	da16      	bge.n	80090c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80090a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	88d2      	ldrh	r2, [r2, #6]
 80090a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	88db      	ldrh	r3, [r3, #6]
 80090ac:	2b07      	cmp	r3, #7
 80090ae:	bf28      	it	cs
 80090b0:	2307      	movcs	r3, #7
 80090b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	89fa      	ldrh	r2, [r7, #14]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 fb19 	bl	800a6f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80090c0:	e085      	b.n	80091ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	785a      	ldrb	r2, [r3, #1]
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	88db      	ldrh	r3, [r3, #6]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80090d8:	6939      	ldr	r1, [r7, #16]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	88db      	ldrh	r3, [r3, #6]
 80090de:	461a      	mov	r2, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 fb32 	bl	800a74a <USBD_CtlPrepareRx>
      break;
 80090e6:	e072      	b.n	80091ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	7850      	ldrb	r0, [r2, #1]
 80090f4:	2200      	movs	r2, #0
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	4798      	blx	r3
      break;
 80090fa:	e068      	b.n	80091ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b0b      	cmp	r3, #11
 8009102:	d852      	bhi.n	80091aa <USBD_CDC_Setup+0x162>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USBD_CDC_Setup+0xc4>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	0800913d 	.word	0x0800913d
 8009110:	080091b9 	.word	0x080091b9
 8009114:	080091ab 	.word	0x080091ab
 8009118:	080091ab 	.word	0x080091ab
 800911c:	080091ab 	.word	0x080091ab
 8009120:	080091ab 	.word	0x080091ab
 8009124:	080091ab 	.word	0x080091ab
 8009128:	080091ab 	.word	0x080091ab
 800912c:	080091ab 	.word	0x080091ab
 8009130:	080091ab 	.word	0x080091ab
 8009134:	08009167 	.word	0x08009167
 8009138:	08009191 	.word	0x08009191
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b03      	cmp	r3, #3
 8009146:	d107      	bne.n	8009158 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009148:	f107 030a 	add.w	r3, r7, #10
 800914c:	2202      	movs	r2, #2
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 face 	bl	800a6f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009156:	e032      	b.n	80091be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f001 fa58 	bl	800a610 <USBD_CtlError>
            ret = USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	75fb      	strb	r3, [r7, #23]
          break;
 8009164:	e02b      	b.n	80091be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b03      	cmp	r3, #3
 8009170:	d107      	bne.n	8009182 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009172:	f107 030d 	add.w	r3, r7, #13
 8009176:	2201      	movs	r2, #1
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fab9 	bl	800a6f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009180:	e01d      	b.n	80091be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fa43 	bl	800a610 <USBD_CtlError>
            ret = USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	75fb      	strb	r3, [r7, #23]
          break;
 800918e:	e016      	b.n	80091be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b03      	cmp	r3, #3
 800919a:	d00f      	beq.n	80091bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 fa36 	bl	800a610 <USBD_CtlError>
            ret = USBD_FAIL;
 80091a4:	2303      	movs	r3, #3
 80091a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80091a8:	e008      	b.n	80091bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f001 fa2f 	bl	800a610 <USBD_CtlError>
          ret = USBD_FAIL;
 80091b2:	2303      	movs	r3, #3
 80091b4:	75fb      	strb	r3, [r7, #23]
          break;
 80091b6:	e002      	b.n	80091be <USBD_CDC_Setup+0x176>
          break;
 80091b8:	bf00      	nop
 80091ba:	e008      	b.n	80091ce <USBD_CDC_Setup+0x186>
          break;
 80091bc:	bf00      	nop
      }
      break;
 80091be:	e006      	b.n	80091ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fa24 	bl	800a610 <USBD_CtlError>
      ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	75fb      	strb	r3, [r7, #23]
      break;
 80091cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e04f      	b.n	800929a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	3318      	adds	r3, #24
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d029      	beq.n	800926c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	3318      	adds	r3, #24
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	78f9      	ldrb	r1, [r7, #3]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	460b      	mov	r3, r1
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	1a5b      	subs	r3, r3, r1
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4403      	add	r3, r0
 8009238:	3344      	adds	r3, #68	; 0x44
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009240:	fb03 f301 	mul.w	r3, r3, r1
 8009244:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009246:	2b00      	cmp	r3, #0
 8009248:	d110      	bne.n	800926c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	6879      	ldr	r1, [r7, #4]
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	440b      	add	r3, r1
 8009258:	3318      	adds	r3, #24
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800925e:	78f9      	ldrb	r1, [r7, #3]
 8009260:	2300      	movs	r3, #0
 8009262:	2200      	movs	r2, #0
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 ff5c 	bl	800b122 <USBD_LL_Transmit>
 800926a:	e015      	b.n	8009298 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2200      	movs	r2, #0
 8009270:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e015      	b.n	80092f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 ff6c 	bl	800b1a6 <USBD_LL_GetRxDataSize>
 80092ce:	4602      	mov	r2, r0
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092ea:	4611      	mov	r1, r2
 80092ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009306:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800930e:	2303      	movs	r3, #3
 8009310:	e01b      	b.n	800934a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d015      	beq.n	8009348 <USBD_CDC_EP0_RxReady+0x50>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009322:	2bff      	cmp	r3, #255	; 0xff
 8009324:	d010      	beq.n	8009348 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009334:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800933c:	b292      	uxth	r2, r2
 800933e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	22ff      	movs	r2, #255	; 0xff
 8009344:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2243      	movs	r2, #67	; 0x43
 8009360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009362:	4b03      	ldr	r3, [pc, #12]	; (8009370 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	200000b4 	.word	0x200000b4

08009374 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2243      	movs	r2, #67	; 0x43
 8009380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009382:	4b03      	ldr	r3, [pc, #12]	; (8009390 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009384:	4618      	mov	r0, r3
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	20000070 	.word	0x20000070

08009394 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2243      	movs	r2, #67	; 0x43
 80093a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80093a2:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	200000f8 	.word	0x200000f8

080093b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	220a      	movs	r2, #10
 80093c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80093c2:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	2000002c 	.word	0x2000002c

080093d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e004      	b.n	80093f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80093fe:	b480      	push	{r7}
 8009400:	b087      	sub	sp, #28
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009410:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009418:	2303      	movs	r3, #3
 800941a:	e008      	b.n	800942e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800944a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	e004      	b.n	8009460 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800947a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800948a:	2303      	movs	r3, #3
 800948c:	e01a      	b.n	80094c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009494:	2b00      	cmp	r3, #0
 8009496:	d114      	bne.n	80094c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2201      	movs	r2, #1
 800949c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80094b6:	2181      	movs	r1, #129	; 0x81
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fe32 	bl	800b122 <USBD_LL_Transmit>

    ret = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e016      	b.n	8009518 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	7c1b      	ldrb	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094fc:	2101      	movs	r1, #1
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fe30 	bl	800b164 <USBD_LL_PrepareReceive>
 8009504:	e007      	b.n	8009516 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800950c:	2340      	movs	r3, #64	; 0x40
 800950e:	2101      	movs	r1, #1
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fe27 	bl	800b164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009534:	2303      	movs	r3, #3
 8009536:	e01f      	b.n	8009578 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	79fa      	ldrb	r2, [r7, #7]
 800956a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f001 fca3 	bl	800aeb8 <USBD_LL_Init>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009594:	2303      	movs	r3, #3
 8009596:	e016      	b.n	80095c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	f107 020e 	add.w	r2, r7, #14
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	4602      	mov	r2, r0
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 fcba 	bl	800af50 <USBD_LL_Start>
 80095dc:	4603      	mov	r3, r0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	4611      	mov	r1, r2
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009646:	2b00      	cmp	r3, #0
 8009648:	d007      	beq.n	800965a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
  }

  return USBD_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 ff90 	bl	800a59c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800968a:	461a      	mov	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009698:	f003 031f 	and.w	r3, r3, #31
 800969c:	2b02      	cmp	r3, #2
 800969e:	d01a      	beq.n	80096d6 <USBD_LL_SetupStage+0x72>
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d822      	bhi.n	80096ea <USBD_LL_SetupStage+0x86>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <USBD_LL_SetupStage+0x4a>
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d00a      	beq.n	80096c2 <USBD_LL_SetupStage+0x5e>
 80096ac:	e01d      	b.n	80096ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa62 	bl	8009b80 <USBD_StdDevReq>
 80096bc:	4603      	mov	r3, r0
 80096be:	73fb      	strb	r3, [r7, #15]
      break;
 80096c0:	e020      	b.n	8009704 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fac6 	bl	8009c5c <USBD_StdItfReq>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
      break;
 80096d4:	e016      	b.n	8009704 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fb05 	bl	8009cee <USBD_StdEPReq>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]
      break;
 80096e8:	e00c      	b.n	8009704 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fc89 	bl	800b010 <USBD_LL_StallEP>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]
      break;
 8009702:	bf00      	nop
  }

  return ret;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b086      	sub	sp, #24
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	460b      	mov	r3, r1
 8009718:	607a      	str	r2, [r7, #4]
 800971a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d138      	bne.n	8009794 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009728:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009730:	2b03      	cmp	r3, #3
 8009732:	d14a      	bne.n	80097ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	429a      	cmp	r2, r3
 800973e:	d913      	bls.n	8009768 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	1ad2      	subs	r2, r2, r3
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4293      	cmp	r3, r2
 8009758:	bf28      	it	cs
 800975a:	4613      	movcs	r3, r2
 800975c:	461a      	mov	r2, r3
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f001 f80f 	bl	800a784 <USBD_CtlContinueRx>
 8009766:	e030      	b.n	80097ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b03      	cmp	r3, #3
 8009772:	d10b      	bne.n	800978c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f001 f80a 	bl	800a7a6 <USBD_CtlSendStatus>
 8009792:	e01a      	b.n	80097ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b03      	cmp	r3, #3
 800979e:	d114      	bne.n	80097ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00e      	beq.n	80097ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	7afa      	ldrb	r2, [r7, #11]
 80097b6:	4611      	mov	r1, r2
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	4798      	blx	r3
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	e000      	b.n	80097cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	460b      	mov	r3, r1
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80097e2:	7afb      	ldrb	r3, [r7, #11]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d16b      	bne.n	80098c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3314      	adds	r3, #20
 80097ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d156      	bne.n	80098a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	689a      	ldr	r2, [r3, #8]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	429a      	cmp	r2, r3
 8009802:	d914      	bls.n	800982e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	1ad2      	subs	r2, r2, r3
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	461a      	mov	r2, r3
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 ff84 	bl	800a728 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009820:	2300      	movs	r3, #0
 8009822:	2200      	movs	r2, #0
 8009824:	2100      	movs	r1, #0
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f001 fc9c 	bl	800b164 <USBD_LL_PrepareReceive>
 800982c:	e03b      	b.n	80098a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	d11c      	bne.n	8009874 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009842:	429a      	cmp	r2, r3
 8009844:	d316      	bcc.n	8009874 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009850:	429a      	cmp	r2, r3
 8009852:	d20f      	bcs.n	8009874 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009854:	2200      	movs	r2, #0
 8009856:	2100      	movs	r1, #0
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 ff65 	bl	800a728 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009866:	2300      	movs	r3, #0
 8009868:	2200      	movs	r2, #0
 800986a:	2100      	movs	r1, #0
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f001 fc79 	bl	800b164 <USBD_LL_PrepareReceive>
 8009872:	e018      	b.n	80098a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d10b      	bne.n	8009898 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009898:	2180      	movs	r1, #128	; 0x80
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f001 fbb8 	bl	800b010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 ff93 	bl	800a7cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d122      	bne.n	80098f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fe98 	bl	80095e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80098be:	e01a      	b.n	80098f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d114      	bne.n	80098f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00e      	beq.n	80098f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	7afa      	ldrb	r2, [r7, #11]
 80098e2:	4611      	mov	r1, r2
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	4798      	blx	r3
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	e000      	b.n	80098f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009930:	2303      	movs	r3, #3
 8009932:	e02f      	b.n	8009994 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00f      	beq.n	800995e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d009      	beq.n	800995e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6852      	ldr	r2, [r2, #4]
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	4611      	mov	r1, r2
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	2200      	movs	r2, #0
 8009962:	2100      	movs	r1, #0
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 fb0e 	bl	800af86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2240      	movs	r2, #64	; 0x40
 8009976:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800997a:	2340      	movs	r3, #64	; 0x40
 800997c:	2200      	movs	r2, #0
 800997e:	2180      	movs	r1, #128	; 0x80
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 fb00 	bl	800af86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2240      	movs	r2, #64	; 0x40
 8009990:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2204      	movs	r2, #4
 80099d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d106      	bne.n	8009a0a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e012      	b.n	8009a54 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d10b      	bne.n	8009a52 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e014      	b.n	8009aa0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d10d      	bne.n	8009a9e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e014      	b.n	8009aec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d10d      	bne.n	8009aea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d007      	beq.n	8009aea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	78fa      	ldrb	r2, [r7, #3]
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d009      	beq.n	8009b38 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	6852      	ldr	r2, [r2, #4]
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	4611      	mov	r1, r2
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
  }

  return USBD_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b087      	sub	sp, #28
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	3301      	adds	r3, #1
 8009b58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b60:	8a3b      	ldrh	r3, [r7, #16]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	b21a      	sxth	r2, r3
 8009b66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b70:	89fb      	ldrh	r3, [r7, #14]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d005      	beq.n	8009ba6 <USBD_StdDevReq+0x26>
 8009b9a:	2b40      	cmp	r3, #64	; 0x40
 8009b9c:	d853      	bhi.n	8009c46 <USBD_StdDevReq+0xc6>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <USBD_StdDevReq+0x3a>
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d14f      	bne.n	8009c46 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb8:	e04a      	b.n	8009c50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b09      	cmp	r3, #9
 8009bc0:	d83b      	bhi.n	8009c3a <USBD_StdDevReq+0xba>
 8009bc2:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <USBD_StdDevReq+0x48>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009c31 	.word	0x08009c31
 8009bd0:	08009c3b 	.word	0x08009c3b
 8009bd4:	08009c27 	.word	0x08009c27
 8009bd8:	08009c3b 	.word	0x08009c3b
 8009bdc:	08009bfb 	.word	0x08009bfb
 8009be0:	08009bf1 	.word	0x08009bf1
 8009be4:	08009c3b 	.word	0x08009c3b
 8009be8:	08009c13 	.word	0x08009c13
 8009bec:	08009c05 	.word	0x08009c05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f9de 	bl	8009fb4 <USBD_GetDescriptor>
          break;
 8009bf8:	e024      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fb43 	bl	800a288 <USBD_SetAddress>
          break;
 8009c02:	e01f      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fb82 	bl	800a310 <USBD_SetConfig>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]
          break;
 8009c10:	e018      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc21 	bl	800a45c <USBD_GetConfig>
          break;
 8009c1a:	e013      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fc52 	bl	800a4c8 <USBD_GetStatus>
          break;
 8009c24:	e00e      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fc81 	bl	800a530 <USBD_SetFeature>
          break;
 8009c2e:	e009      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fc90 	bl	800a558 <USBD_ClrFeature>
          break;
 8009c38:	e004      	b.n	8009c44 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fce7 	bl	800a610 <USBD_CtlError>
          break;
 8009c42:	bf00      	nop
      }
      break;
 8009c44:	e004      	b.n	8009c50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fce1 	bl	800a610 <USBD_CtlError>
      break;
 8009c4e:	bf00      	nop
  }

  return ret;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop

08009c5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c72:	2b40      	cmp	r3, #64	; 0x40
 8009c74:	d005      	beq.n	8009c82 <USBD_StdItfReq+0x26>
 8009c76:	2b40      	cmp	r3, #64	; 0x40
 8009c78:	d82f      	bhi.n	8009cda <USBD_StdItfReq+0x7e>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <USBD_StdItfReq+0x26>
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d12b      	bne.n	8009cda <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d81d      	bhi.n	8009ccc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	889b      	ldrh	r3, [r3, #4]
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d813      	bhi.n	8009cc2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	88db      	ldrh	r3, [r3, #6]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d110      	bne.n	8009cd6 <USBD_StdItfReq+0x7a>
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10d      	bne.n	8009cd6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fd73 	bl	800a7a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cc0:	e009      	b.n	8009cd6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fca3 	bl	800a610 <USBD_CtlError>
          break;
 8009cca:	e004      	b.n	8009cd6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fc9e 	bl	800a610 <USBD_CtlError>
          break;
 8009cd4:	e000      	b.n	8009cd8 <USBD_StdItfReq+0x7c>
          break;
 8009cd6:	bf00      	nop
      }
      break;
 8009cd8:	e004      	b.n	8009ce4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc97 	bl	800a610 <USBD_CtlError>
      break;
 8009ce2:	bf00      	nop
  }

  return ret;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	889b      	ldrh	r3, [r3, #4]
 8009d00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d0a:	2b40      	cmp	r3, #64	; 0x40
 8009d0c:	d007      	beq.n	8009d1e <USBD_StdEPReq+0x30>
 8009d0e:	2b40      	cmp	r3, #64	; 0x40
 8009d10:	f200 8145 	bhi.w	8009f9e <USBD_StdEPReq+0x2b0>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00c      	beq.n	8009d32 <USBD_StdEPReq+0x44>
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	f040 8140 	bne.w	8009f9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d30:	e13a      	b.n	8009fa8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d007      	beq.n	8009d4a <USBD_StdEPReq+0x5c>
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	f300 8129 	bgt.w	8009f92 <USBD_StdEPReq+0x2a4>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d07f      	beq.n	8009e44 <USBD_StdEPReq+0x156>
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d03c      	beq.n	8009dc2 <USBD_StdEPReq+0xd4>
 8009d48:	e123      	b.n	8009f92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d002      	beq.n	8009d5c <USBD_StdEPReq+0x6e>
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d016      	beq.n	8009d88 <USBD_StdEPReq+0x9a>
 8009d5a:	e02c      	b.n	8009db6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00d      	beq.n	8009d7e <USBD_StdEPReq+0x90>
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	2b80      	cmp	r3, #128	; 0x80
 8009d66:	d00a      	beq.n	8009d7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 f94f 	bl	800b010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d72:	2180      	movs	r1, #128	; 0x80
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f94b 	bl	800b010 <USBD_LL_StallEP>
 8009d7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d7c:	e020      	b.n	8009dc0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fc45 	bl	800a610 <USBD_CtlError>
              break;
 8009d86:	e01b      	b.n	8009dc0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	885b      	ldrh	r3, [r3, #2]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10e      	bne.n	8009dae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <USBD_StdEPReq+0xc0>
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b80      	cmp	r3, #128	; 0x80
 8009d9a:	d008      	beq.n	8009dae <USBD_StdEPReq+0xc0>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	88db      	ldrh	r3, [r3, #6]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f931 	bl	800b010 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fcf9 	bl	800a7a6 <USBD_CtlSendStatus>

              break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fc29 	bl	800a610 <USBD_CtlError>
              break;
 8009dbe:	bf00      	nop
          }
          break;
 8009dc0:	e0ec      	b.n	8009f9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d002      	beq.n	8009dd4 <USBD_StdEPReq+0xe6>
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d016      	beq.n	8009e00 <USBD_StdEPReq+0x112>
 8009dd2:	e030      	b.n	8009e36 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00d      	beq.n	8009df6 <USBD_StdEPReq+0x108>
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b80      	cmp	r3, #128	; 0x80
 8009dde:	d00a      	beq.n	8009df6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 f913 	bl	800b010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dea:	2180      	movs	r1, #128	; 0x80
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f90f 	bl	800b010 <USBD_LL_StallEP>
 8009df2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009df4:	e025      	b.n	8009e42 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fc09 	bl	800a610 <USBD_CtlError>
              break;
 8009dfe:	e020      	b.n	8009e42 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	885b      	ldrh	r3, [r3, #2]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11b      	bne.n	8009e40 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 f919 	bl	800b04e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fcc2 	bl	800a7a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009e34:	e004      	b.n	8009e40 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbe9 	bl	800a610 <USBD_CtlError>
              break;
 8009e3e:	e000      	b.n	8009e42 <USBD_StdEPReq+0x154>
              break;
 8009e40:	bf00      	nop
          }
          break;
 8009e42:	e0ab      	b.n	8009f9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d002      	beq.n	8009e56 <USBD_StdEPReq+0x168>
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d032      	beq.n	8009eba <USBD_StdEPReq+0x1cc>
 8009e54:	e097      	b.n	8009f86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d007      	beq.n	8009e6c <USBD_StdEPReq+0x17e>
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	2b80      	cmp	r3, #128	; 0x80
 8009e60:	d004      	beq.n	8009e6c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fbd3 	bl	800a610 <USBD_CtlError>
                break;
 8009e6a:	e091      	b.n	8009f90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	da0b      	bge.n	8009e8c <USBD_StdEPReq+0x19e>
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	3310      	adds	r3, #16
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	4413      	add	r3, r2
 8009e88:	3304      	adds	r3, #4
 8009e8a:	e00b      	b.n	8009ea4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fc1d 	bl	800a6f2 <USBD_CtlSendData>
              break;
 8009eb8:	e06a      	b.n	8009f90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	da11      	bge.n	8009ee6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	f003 020f 	and.w	r2, r3, #15
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	3324      	adds	r3, #36	; 0x24
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d117      	bne.n	8009f0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fb96 	bl	800a610 <USBD_CtlError>
                  break;
 8009ee4:	e054      	b.n	8009f90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	f003 020f 	and.w	r2, r3, #15
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d104      	bne.n	8009f0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fb83 	bl	800a610 <USBD_CtlError>
                  break;
 8009f0a:	e041      	b.n	8009f90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	da0b      	bge.n	8009f2c <USBD_StdEPReq+0x23e>
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	3310      	adds	r3, #16
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	4413      	add	r3, r2
 8009f28:	3304      	adds	r3, #4
 8009f2a:	e00b      	b.n	8009f44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	4413      	add	r3, r2
 8009f42:	3304      	adds	r3, #4
 8009f44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <USBD_StdEPReq+0x264>
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b80      	cmp	r3, #128	; 0x80
 8009f50:	d103      	bne.n	8009f5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	e00e      	b.n	8009f78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 f894 	bl	800b08c <USBD_LL_IsStallEP>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e002      	b.n	8009f78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fbb7 	bl	800a6f2 <USBD_CtlSendData>
              break;
 8009f84:	e004      	b.n	8009f90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fb41 	bl	800a610 <USBD_CtlError>
              break;
 8009f8e:	bf00      	nop
          }
          break;
 8009f90:	e004      	b.n	8009f9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fb3b 	bl	800a610 <USBD_CtlError>
          break;
 8009f9a:	bf00      	nop
      }
      break;
 8009f9c:	e004      	b.n	8009fa8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fb35 	bl	800a610 <USBD_CtlError>
      break;
 8009fa6:	bf00      	nop
  }

  return ret;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	885b      	ldrh	r3, [r3, #2]
 8009fce:	0a1b      	lsrs	r3, r3, #8
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	2b06      	cmp	r3, #6
 8009fd6:	f200 8128 	bhi.w	800a22a <USBD_GetDescriptor+0x276>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <USBD_GetDescriptor+0x2c>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	0800a015 	.word	0x0800a015
 8009fe8:	0800a055 	.word	0x0800a055
 8009fec:	0800a22b 	.word	0x0800a22b
 8009ff0:	0800a22b 	.word	0x0800a22b
 8009ff4:	0800a1cb 	.word	0x0800a1cb
 8009ff8:	0800a1f7 	.word	0x0800a1f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	7c12      	ldrb	r2, [r2, #16]
 800a008:	f107 0108 	add.w	r1, r7, #8
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	60f8      	str	r0, [r7, #12]
      break;
 800a012:	e112      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7c1b      	ldrb	r3, [r3, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10d      	bne.n	800a038 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a024:	f107 0208 	add.w	r2, r7, #8
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
 800a02c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	2202      	movs	r2, #2
 800a034:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a036:	e100      	b.n	800a23a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	f107 0208 	add.w	r2, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	2202      	movs	r2, #2
 800a050:	701a      	strb	r2, [r3, #0]
      break;
 800a052:	e0f2      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	885b      	ldrh	r3, [r3, #2]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	f200 80ac 	bhi.w	800a1b8 <USBD_GetDescriptor+0x204>
 800a060:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <USBD_GetDescriptor+0xb4>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a0b5 	.word	0x0800a0b5
 800a070:	0800a0e9 	.word	0x0800a0e9
 800a074:	0800a11d 	.word	0x0800a11d
 800a078:	0800a151 	.word	0x0800a151
 800a07c:	0800a185 	.word	0x0800a185
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a2:	e091      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fab2 	bl	800a610 <USBD_CtlError>
            err++;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b2:	e089      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e077      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa98 	bl	800a610 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e06f      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7c12      	ldrb	r2, [r2, #16]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10a:	e05d      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa7e 	bl	800a610 <USBD_CtlError>
            err++;
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	3301      	adds	r3, #1
 800a118:	72fb      	strb	r3, [r7, #11]
          break;
 800a11a:	e055      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e043      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa64 	bl	800a610 <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e03b      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e029      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa4a 	bl	800a610 <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e021      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e00f      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa30 	bl	800a610 <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e007      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa28 	bl	800a610 <USBD_CtlError>
          err++;
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a1c6:	bf00      	nop
      }
      break;
 800a1c8:	e037      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7c1b      	ldrb	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d109      	bne.n	800a1e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f107 0208 	add.w	r2, r7, #8
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4798      	blx	r3
 800a1e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1e4:	e029      	b.n	800a23a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa11 	bl	800a610 <USBD_CtlError>
        err++;
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f4:	e021      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7c1b      	ldrb	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10d      	bne.n	800a21a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a206:	f107 0208 	add.w	r2, r7, #8
 800a20a:	4610      	mov	r0, r2
 800a20c:	4798      	blx	r3
 800a20e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3301      	adds	r3, #1
 800a214:	2207      	movs	r2, #7
 800a216:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a218:	e00f      	b.n	800a23a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f9f7 	bl	800a610 <USBD_CtlError>
        err++;
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	3301      	adds	r3, #1
 800a226:	72fb      	strb	r3, [r7, #11]
      break;
 800a228:	e007      	b.n	800a23a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9ef 	bl	800a610 <USBD_CtlError>
      err++;
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	3301      	adds	r3, #1
 800a236:	72fb      	strb	r3, [r7, #11]
      break;
 800a238:	bf00      	nop
  }

  if (err != 0U)
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d11e      	bne.n	800a27e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	88db      	ldrh	r3, [r3, #6]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d016      	beq.n	800a276 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a248:	893b      	ldrh	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00e      	beq.n	800a26c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	88da      	ldrh	r2, [r3, #6]
 800a252:	893b      	ldrh	r3, [r7, #8]
 800a254:	4293      	cmp	r3, r2
 800a256:	bf28      	it	cs
 800a258:	4613      	movcs	r3, r2
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a25e:	893b      	ldrh	r3, [r7, #8]
 800a260:	461a      	mov	r2, r3
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fa44 	bl	800a6f2 <USBD_CtlSendData>
 800a26a:	e009      	b.n	800a280 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f9ce 	bl	800a610 <USBD_CtlError>
 800a274:	e004      	b.n	800a280 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa95 	bl	800a7a6 <USBD_CtlSendStatus>
 800a27c:	e000      	b.n	800a280 <USBD_GetDescriptor+0x2cc>
    return;
 800a27e:	bf00      	nop
  }
}
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop

0800a288 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d131      	bne.n	800a2fe <USBD_SetAddress+0x76>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d12d      	bne.n	800a2fe <USBD_SetAddress+0x76>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a2a8:	d829      	bhi.n	800a2fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	885b      	ldrh	r3, [r3, #2]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d104      	bne.n	800a2cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f9a3 	bl	800a610 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ca:	e01d      	b.n	800a308 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7bfa      	ldrb	r2, [r7, #15]
 800a2d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 ff03 	bl	800b0e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa61 	bl	800a7a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f2:	e009      	b.n	800a308 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fc:	e004      	b.n	800a308 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f985 	bl	800a610 <USBD_CtlError>
  }
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	885b      	ldrh	r3, [r3, #2]
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4b4c      	ldr	r3, [pc, #304]	; (800a458 <USBD_SetConfig+0x148>)
 800a326:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a328:	4b4b      	ldr	r3, [pc, #300]	; (800a458 <USBD_SetConfig+0x148>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d905      	bls.n	800a33c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f96c 	bl	800a610 <USBD_CtlError>
    return USBD_FAIL;
 800a338:	2303      	movs	r3, #3
 800a33a:	e088      	b.n	800a44e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b02      	cmp	r3, #2
 800a346:	d002      	beq.n	800a34e <USBD_SetConfig+0x3e>
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d025      	beq.n	800a398 <USBD_SetConfig+0x88>
 800a34c:	e071      	b.n	800a432 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a34e:	4b42      	ldr	r3, [pc, #264]	; (800a458 <USBD_SetConfig+0x148>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d01c      	beq.n	800a390 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a356:	4b40      	ldr	r3, [pc, #256]	; (800a458 <USBD_SetConfig+0x148>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a360:	4b3d      	ldr	r3, [pc, #244]	; (800a458 <USBD_SetConfig+0x148>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff f948 	bl	80095fc <USBD_SetClassConfig>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d004      	beq.n	800a380 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f949 	bl	800a610 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a37e:	e065      	b.n	800a44c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fa10 	bl	800a7a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2203      	movs	r2, #3
 800a38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a38e:	e05d      	b.n	800a44c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fa08 	bl	800a7a6 <USBD_CtlSendStatus>
      break;
 800a396:	e059      	b.n	800a44c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a398:	4b2f      	ldr	r3, [pc, #188]	; (800a458 <USBD_SetConfig+0x148>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d112      	bne.n	800a3c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3a8:	4b2b      	ldr	r3, [pc, #172]	; (800a458 <USBD_SetConfig+0x148>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3b2:	4b29      	ldr	r3, [pc, #164]	; (800a458 <USBD_SetConfig+0x148>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7ff f93b 	bl	8009634 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f9f1 	bl	800a7a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3c4:	e042      	b.n	800a44c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a3c6:	4b24      	ldr	r3, [pc, #144]	; (800a458 <USBD_SetConfig+0x148>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d02a      	beq.n	800a42a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff f929 	bl	8009634 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3e2:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <USBD_SetConfig+0x148>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	; (800a458 <USBD_SetConfig+0x148>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff f902 	bl	80095fc <USBD_SetClassConfig>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00f      	beq.n	800a422 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f903 	bl	800a610 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	4619      	mov	r1, r3
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff f90e 	bl	8009634 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a420:	e014      	b.n	800a44c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9bf 	bl	800a7a6 <USBD_CtlSendStatus>
      break;
 800a428:	e010      	b.n	800a44c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f9bb 	bl	800a7a6 <USBD_CtlSendStatus>
      break;
 800a430:	e00c      	b.n	800a44c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8eb 	bl	800a610 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a43a:	4b07      	ldr	r3, [pc, #28]	; (800a458 <USBD_SetConfig+0x148>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff f8f7 	bl	8009634 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a446:	2303      	movs	r3, #3
 800a448:	73fb      	strb	r3, [r7, #15]
      break;
 800a44a:	bf00      	nop
  }

  return ret;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000638 	.word	0x20000638

0800a45c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	88db      	ldrh	r3, [r3, #6]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d004      	beq.n	800a478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f8cd 	bl	800a610 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a476:	e023      	b.n	800a4c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	dc02      	bgt.n	800a48a <USBD_GetConfig+0x2e>
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc03      	bgt.n	800a490 <USBD_GetConfig+0x34>
 800a488:	e015      	b.n	800a4b6 <USBD_GetConfig+0x5a>
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d00b      	beq.n	800a4a6 <USBD_GetConfig+0x4a>
 800a48e:	e012      	b.n	800a4b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3308      	adds	r3, #8
 800a49a:	2201      	movs	r2, #1
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f927 	bl	800a6f2 <USBD_CtlSendData>
        break;
 800a4a4:	e00c      	b.n	800a4c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f91f 	bl	800a6f2 <USBD_CtlSendData>
        break;
 800a4b4:	e004      	b.n	800a4c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f8a9 	bl	800a610 <USBD_CtlError>
        break;
 800a4be:	bf00      	nop
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d81e      	bhi.n	800a51e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	88db      	ldrh	r3, [r3, #6]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d004      	beq.n	800a4f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f890 	bl	800a610 <USBD_CtlError>
        break;
 800a4f0:	e01a      	b.n	800a528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f043 0202 	orr.w	r2, r3, #2
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	330c      	adds	r3, #12
 800a512:	2202      	movs	r2, #2
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f8eb 	bl	800a6f2 <USBD_CtlSendData>
      break;
 800a51c:	e004      	b.n	800a528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f875 	bl	800a610 <USBD_CtlError>
      break;
 800a526:	bf00      	nop
  }
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	885b      	ldrh	r3, [r3, #2]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d106      	bne.n	800a550 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f92b 	bl	800a7a6 <USBD_CtlSendStatus>
  }
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	3b01      	subs	r3, #1
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d80b      	bhi.n	800a588 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	885b      	ldrh	r3, [r3, #2]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d10c      	bne.n	800a592 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f910 	bl	800a7a6 <USBD_CtlSendStatus>
      }
      break;
 800a586:	e004      	b.n	800a592 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f840 	bl	800a610 <USBD_CtlError>
      break;
 800a590:	e000      	b.n	800a594 <USBD_ClrFeature+0x3c>
      break;
 800a592:	bf00      	nop
  }
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	781a      	ldrb	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fabb 	bl	8009b42 <SWAPBYTE>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7ff faae 	bl	8009b42 <SWAPBYTE>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff faa1 	bl	8009b42 <SWAPBYTE>
 800a600:	4603      	mov	r3, r0
 800a602:	461a      	mov	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	80da      	strh	r2, [r3, #6]
}
 800a608:	bf00      	nop
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a61a:	2180      	movs	r1, #128	; 0x80
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fcf7 	bl	800b010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a622:	2100      	movs	r1, #0
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fcf3 	bl	800b010 <USBD_LL_StallEP>
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b086      	sub	sp, #24
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d036      	beq.n	800a6b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a64c:	6938      	ldr	r0, [r7, #16]
 800a64e:	f000 f836 	bl	800a6be <USBD_GetLen>
 800a652:	4603      	mov	r3, r0
 800a654:	3301      	adds	r3, #1
 800a656:	b29b      	uxth	r3, r3
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	4413      	add	r3, r2
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	7812      	ldrb	r2, [r2, #0]
 800a66a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	3301      	adds	r3, #1
 800a670:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4413      	add	r3, r2
 800a678:	2203      	movs	r2, #3
 800a67a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	3301      	adds	r3, #1
 800a680:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a682:	e013      	b.n	800a6ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	4413      	add	r3, r2
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	7812      	ldrb	r2, [r2, #0]
 800a68e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3301      	adds	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
    idx++;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	3301      	adds	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1e7      	bne.n	800a684 <USBD_GetString+0x52>
 800a6b4:	e000      	b.n	800a6b8 <USBD_GetString+0x86>
    return;
 800a6b6:	bf00      	nop
  }
}
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6ce:	e005      	b.n	800a6dc <USBD_GetLen+0x1e>
  {
    len++;
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1f5      	bne.n	800a6d0 <USBD_GetLen+0x12>
  }

  return len;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2202      	movs	r2, #2
 800a702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	2100      	movs	r1, #0
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fd02 	bl	800b122 <USBD_LL_Transmit>

  return USBD_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	2100      	movs	r1, #0
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fcf1 	bl	800b122 <USBD_LL_Transmit>

  return USBD_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2203      	movs	r2, #3
 800a75a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	2100      	movs	r1, #0
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fcf5 	bl	800b164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	2100      	movs	r1, #0
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 fce4 	bl	800b164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2204      	movs	r2, #4
 800a7b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fcb0 	bl	800b122 <USBD_LL_Transmit>

  return USBD_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2205      	movs	r2, #5
 800a7d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fcbe 	bl	800b164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
	...

0800a7f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4912      	ldr	r1, [pc, #72]	; (800a844 <MX_USB_DEVICE_Init+0x50>)
 800a7fc:	4812      	ldr	r0, [pc, #72]	; (800a848 <MX_USB_DEVICE_Init+0x54>)
 800a7fe:	f7fe fe8f 	bl	8009520 <USBD_Init>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a808:	f7f7 ff06 	bl	8002618 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a80c:	490f      	ldr	r1, [pc, #60]	; (800a84c <MX_USB_DEVICE_Init+0x58>)
 800a80e:	480e      	ldr	r0, [pc, #56]	; (800a848 <MX_USB_DEVICE_Init+0x54>)
 800a810:	f7fe feb6 	bl	8009580 <USBD_RegisterClass>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a81a:	f7f7 fefd 	bl	8002618 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a81e:	490c      	ldr	r1, [pc, #48]	; (800a850 <MX_USB_DEVICE_Init+0x5c>)
 800a820:	4809      	ldr	r0, [pc, #36]	; (800a848 <MX_USB_DEVICE_Init+0x54>)
 800a822:	f7fe fdd7 	bl	80093d4 <USBD_CDC_RegisterInterface>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a82c:	f7f7 fef4 	bl	8002618 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a830:	4805      	ldr	r0, [pc, #20]	; (800a848 <MX_USB_DEVICE_Init+0x54>)
 800a832:	f7fe fecc 	bl	80095ce <USBD_Start>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a83c:	f7f7 feec 	bl	8002618 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a840:	bf00      	nop
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000150 	.word	0x20000150
 800a848:	20000ab4 	.word	0x20000ab4
 800a84c:	20000038 	.word	0x20000038
 800a850:	2000013c 	.word	0x2000013c

0800a854 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a858:	2200      	movs	r2, #0
 800a85a:	4905      	ldr	r1, [pc, #20]	; (800a870 <CDC_Init_FS+0x1c>)
 800a85c:	4805      	ldr	r0, [pc, #20]	; (800a874 <CDC_Init_FS+0x20>)
 800a85e:	f7fe fdce 	bl	80093fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a862:	4905      	ldr	r1, [pc, #20]	; (800a878 <CDC_Init_FS+0x24>)
 800a864:	4803      	ldr	r0, [pc, #12]	; (800a874 <CDC_Init_FS+0x20>)
 800a866:	f7fe fde8 	bl	800943a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a86a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20001584 	.word	0x20001584
 800a874:	20000ab4 	.word	0x20000ab4
 800a878:	20000d84 	.word	0x20000d84

0800a87c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a880:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a882:	4618      	mov	r0, r3
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	6039      	str	r1, [r7, #0]
 800a896:	71fb      	strb	r3, [r7, #7]
 800a898:	4613      	mov	r3, r2
 800a89a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	2b23      	cmp	r3, #35	; 0x23
 800a8a0:	d84a      	bhi.n	800a938 <CDC_Control_FS+0xac>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <CDC_Control_FS+0x1c>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a939 	.word	0x0800a939
 800a8ac:	0800a939 	.word	0x0800a939
 800a8b0:	0800a939 	.word	0x0800a939
 800a8b4:	0800a939 	.word	0x0800a939
 800a8b8:	0800a939 	.word	0x0800a939
 800a8bc:	0800a939 	.word	0x0800a939
 800a8c0:	0800a939 	.word	0x0800a939
 800a8c4:	0800a939 	.word	0x0800a939
 800a8c8:	0800a939 	.word	0x0800a939
 800a8cc:	0800a939 	.word	0x0800a939
 800a8d0:	0800a939 	.word	0x0800a939
 800a8d4:	0800a939 	.word	0x0800a939
 800a8d8:	0800a939 	.word	0x0800a939
 800a8dc:	0800a939 	.word	0x0800a939
 800a8e0:	0800a939 	.word	0x0800a939
 800a8e4:	0800a939 	.word	0x0800a939
 800a8e8:	0800a939 	.word	0x0800a939
 800a8ec:	0800a939 	.word	0x0800a939
 800a8f0:	0800a939 	.word	0x0800a939
 800a8f4:	0800a939 	.word	0x0800a939
 800a8f8:	0800a939 	.word	0x0800a939
 800a8fc:	0800a939 	.word	0x0800a939
 800a900:	0800a939 	.word	0x0800a939
 800a904:	0800a939 	.word	0x0800a939
 800a908:	0800a939 	.word	0x0800a939
 800a90c:	0800a939 	.word	0x0800a939
 800a910:	0800a939 	.word	0x0800a939
 800a914:	0800a939 	.word	0x0800a939
 800a918:	0800a939 	.word	0x0800a939
 800a91c:	0800a939 	.word	0x0800a939
 800a920:	0800a939 	.word	0x0800a939
 800a924:	0800a939 	.word	0x0800a939
 800a928:	0800a939 	.word	0x0800a939
 800a92c:	0800a939 	.word	0x0800a939
 800a930:	0800a939 	.word	0x0800a939
 800a934:	0800a939 	.word	0x0800a939
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a938:	bf00      	nop
  }

  return (USBD_OK);
 800a93a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a952:	6879      	ldr	r1, [r7, #4]
 800a954:	480f      	ldr	r0, [pc, #60]	; (800a994 <CDC_Receive_FS+0x4c>)
 800a956:	f7fe fd70 	bl	800943a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a95a:	480e      	ldr	r0, [pc, #56]	; (800a994 <CDC_Receive_FS+0x4c>)
 800a95c:	f7fe fdb6 	bl	80094cc <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 800a960:	2240      	movs	r2, #64	; 0x40
 800a962:	2100      	movs	r1, #0
 800a964:	480c      	ldr	r0, [pc, #48]	; (800a998 <CDC_Receive_FS+0x50>)
 800a966:	f000 fcbd 	bl	800b2e4 <memset>
  uint8_t len = (uint8_t)*Len;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	461a      	mov	r2, r3
 800a974:	6879      	ldr	r1, [r7, #4]
 800a976:	4808      	ldr	r0, [pc, #32]	; (800a998 <CDC_Receive_FS+0x50>)
 800a978:	f000 fca6 	bl	800b2c8 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	461a      	mov	r2, r3
 800a980:	2100      	movs	r1, #0
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fcae 	bl	800b2e4 <memset>

  return (USBD_OK);
 800a988:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000ab4 	.word	0x20000ab4
 800a998:	20000970 	.word	0x20000970

0800a99c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <CDC_Transmit_FS+0x48>)
 800a9ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e00b      	b.n	800a9da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9c2:	887b      	ldrh	r3, [r7, #2]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	4806      	ldr	r0, [pc, #24]	; (800a9e4 <CDC_Transmit_FS+0x48>)
 800a9ca:	f7fe fd18 	bl	80093fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9ce:	4805      	ldr	r0, [pc, #20]	; (800a9e4 <CDC_Transmit_FS+0x48>)
 800a9d0:	f7fe fd4c 	bl	800946c <USBD_CDC_TransmitPacket>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000ab4 	.word	0x20000ab4

0800a9e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b087      	sub	sp, #28
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
	...

0800aa0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2212      	movs	r2, #18
 800aa1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa1e:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	2000016c 	.word	0x2000016c

0800aa30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2204      	movs	r2, #4
 800aa40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa42:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	20000180 	.word	0x20000180

0800aa54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4907      	ldr	r1, [pc, #28]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa6a:	4808      	ldr	r0, [pc, #32]	; (800aa8c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa6c:	f7ff fde1 	bl	800a632 <USBD_GetString>
 800aa70:	e004      	b.n	800aa7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	4904      	ldr	r1, [pc, #16]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa78:	f7ff fddb 	bl	800a632 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20001d84 	.word	0x20001d84
 800aa8c:	0800c5fc 	.word	0x0800c5fc

0800aa90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	4904      	ldr	r1, [pc, #16]	; (800aab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aaa2:	f7ff fdc6 	bl	800a632 <USBD_GetString>
  return USBD_StrDesc;
 800aaa6:	4b02      	ldr	r3, [pc, #8]	; (800aab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20001d84 	.word	0x20001d84
 800aab4:	0800c610 	.word	0x0800c610

0800aab8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	221a      	movs	r2, #26
 800aac8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaca:	f000 f843 	bl	800ab54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aace:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20000184 	.word	0x20000184

0800aadc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4907      	ldr	r1, [pc, #28]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaf2:	4808      	ldr	r0, [pc, #32]	; (800ab14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aaf4:	f7ff fd9d 	bl	800a632 <USBD_GetString>
 800aaf8:	e004      	b.n	800ab04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4904      	ldr	r1, [pc, #16]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aafe:	4805      	ldr	r0, [pc, #20]	; (800ab14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab00:	f7ff fd97 	bl	800a632 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20001d84 	.word	0x20001d84
 800ab14:	0800c624 	.word	0x0800c624

0800ab18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	4907      	ldr	r1, [pc, #28]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab2e:	4808      	ldr	r0, [pc, #32]	; (800ab50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab30:	f7ff fd7f 	bl	800a632 <USBD_GetString>
 800ab34:	e004      	b.n	800ab40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab3a:	4805      	ldr	r0, [pc, #20]	; (800ab50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab3c:	f7ff fd79 	bl	800a632 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20001d84 	.word	0x20001d84
 800ab50:	0800c630 	.word	0x0800c630

0800ab54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <Get_SerialNum+0x44>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab60:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <Get_SerialNum+0x48>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <Get_SerialNum+0x4c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab7a:	2208      	movs	r2, #8
 800ab7c:	4909      	ldr	r1, [pc, #36]	; (800aba4 <Get_SerialNum+0x50>)
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 f814 	bl	800abac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab84:	2204      	movs	r2, #4
 800ab86:	4908      	ldr	r1, [pc, #32]	; (800aba8 <Get_SerialNum+0x54>)
 800ab88:	68b8      	ldr	r0, [r7, #8]
 800ab8a:	f000 f80f 	bl	800abac <IntToUnicode>
  }
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	1fff7a10 	.word	0x1fff7a10
 800ab9c:	1fff7a14 	.word	0x1fff7a14
 800aba0:	1fff7a18 	.word	0x1fff7a18
 800aba4:	20000186 	.word	0x20000186
 800aba8:	20000196 	.word	0x20000196

0800abac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	4613      	mov	r3, r2
 800abb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abbe:	2300      	movs	r3, #0
 800abc0:	75fb      	strb	r3, [r7, #23]
 800abc2:	e027      	b.n	800ac14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0f1b      	lsrs	r3, r3, #28
 800abc8:	2b09      	cmp	r3, #9
 800abca:	d80b      	bhi.n	800abe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	0f1b      	lsrs	r3, r3, #28
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4619      	mov	r1, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	440b      	add	r3, r1
 800abdc:	3230      	adds	r2, #48	; 0x30
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	701a      	strb	r2, [r3, #0]
 800abe2:	e00a      	b.n	800abfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	0f1b      	lsrs	r3, r3, #28
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	7dfb      	ldrb	r3, [r7, #23]
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	4619      	mov	r1, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	440b      	add	r3, r1
 800abf4:	3237      	adds	r2, #55	; 0x37
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	011b      	lsls	r3, r3, #4
 800abfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	3301      	adds	r3, #1
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	4413      	add	r3, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	3301      	adds	r3, #1
 800ac12:	75fb      	strb	r3, [r7, #23]
 800ac14:	7dfa      	ldrb	r2, [r7, #23]
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d3d3      	bcc.n	800abc4 <IntToUnicode+0x18>
  }
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	609a      	str	r2, [r3, #8]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac4c:	d13a      	bne.n	800acc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac4e:	2300      	movs	r3, #0
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	4b1e      	ldr	r3, [pc, #120]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	4a1d      	ldr	r2, [pc, #116]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac58:	f043 0301 	orr.w	r3, r3, #1
 800ac5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac5e:	4b1b      	ldr	r3, [pc, #108]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac70:	2302      	movs	r3, #2
 800ac72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	4619      	mov	r1, r3
 800ac86:	4812      	ldr	r0, [pc, #72]	; (800acd0 <HAL_PCD_MspInit+0xa4>)
 800ac88:	f7f8 fd50 	bl	800372c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac96:	6353      	str	r3, [r2, #52]	; 0x34
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	4a0a      	ldr	r2, [pc, #40]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800aca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aca6:	6453      	str	r3, [r2, #68]	; 0x44
 800aca8:	4b08      	ldr	r3, [pc, #32]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800acaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800acb4:	2200      	movs	r2, #0
 800acb6:	2100      	movs	r1, #0
 800acb8:	2043      	movs	r0, #67	; 0x43
 800acba:	f7f8 fc6e 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acbe:	2043      	movs	r0, #67	; 0x43
 800acc0:	f7f8 fc87 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acc4:	bf00      	nop
 800acc6:	3728      	adds	r7, #40	; 0x28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40023800 	.word	0x40023800
 800acd0:	40020000 	.word	0x40020000

0800acd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fe fcba 	bl	8009664 <USBD_LL_SetupStage>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad0a:	78fa      	ldrb	r2, [r7, #3]
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	440b      	add	r3, r1
 800ad18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	4619      	mov	r1, r3
 800ad22:	f7fe fcf4 	bl	800970e <USBD_LL_DataOutStage>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad40:	78fa      	ldrb	r2, [r7, #3]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	1a9b      	subs	r3, r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	3348      	adds	r3, #72	; 0x48
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	78fb      	ldrb	r3, [r7, #3]
 800ad54:	4619      	mov	r1, r3
 800ad56:	f7fe fd3d 	bl	80097d4 <USBD_LL_DataInStage>
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fe51 	bl	8009a18 <USBD_LL_SOF>
}
 800ad76:	bf00      	nop
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad86:	2301      	movs	r3, #1
 800ad88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
 800ad96:	e008      	b.n	800adaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d102      	bne.n	800ada6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ada0:	2301      	movs	r3, #1
 800ada2:	73fb      	strb	r3, [r7, #15]
 800ada4:	e001      	b.n	800adaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ada6:	f7f7 fc37 	bl	8002618 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adb0:	7bfa      	ldrb	r2, [r7, #15]
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fdf1 	bl	800999c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fd9d 	bl	8009900 <USBD_LL_Reset>
}
 800adc6:	bf00      	nop
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe fdec 	bl	80099bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6812      	ldr	r2, [r2, #0]
 800adf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adf6:	f043 0301 	orr.w	r3, r3, #1
 800adfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d005      	beq.n	800ae10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae04:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <HAL_PCD_SuspendCallback+0x48>)
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	4a03      	ldr	r2, [pc, #12]	; (800ae18 <HAL_PCD_SuspendCallback+0x48>)
 800ae0a:	f043 0306 	orr.w	r3, r3, #6
 800ae0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	e000ed00 	.word	0xe000ed00

0800ae1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fddc 	bl	80099e8 <USBD_LL_Resume>
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae4a:	78fa      	ldrb	r2, [r7, #3]
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fe2a 	bl	8009aa8 <USBD_LL_IsoOUTIncomplete>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae6e:	78fa      	ldrb	r2, [r7, #3]
 800ae70:	4611      	mov	r1, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fdf2 	bl	8009a5c <USBD_LL_IsoINIncomplete>
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fe30 	bl	8009af4 <USBD_LL_DevConnected>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fe2d 	bl	8009b0a <USBD_LL_DevDisconnected>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d13c      	bne.n	800af42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aec8:	4a20      	ldr	r2, [pc, #128]	; (800af4c <USBD_LL_Init+0x94>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a1e      	ldr	r2, [pc, #120]	; (800af4c <USBD_LL_Init+0x94>)
 800aed4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aed8:	4b1c      	ldr	r3, [pc, #112]	; (800af4c <USBD_LL_Init+0x94>)
 800aeda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aee0:	4b1a      	ldr	r3, [pc, #104]	; (800af4c <USBD_LL_Init+0x94>)
 800aee2:	2204      	movs	r2, #4
 800aee4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aee6:	4b19      	ldr	r3, [pc, #100]	; (800af4c <USBD_LL_Init+0x94>)
 800aee8:	2202      	movs	r2, #2
 800aeea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aeec:	4b17      	ldr	r3, [pc, #92]	; (800af4c <USBD_LL_Init+0x94>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aef2:	4b16      	ldr	r3, [pc, #88]	; (800af4c <USBD_LL_Init+0x94>)
 800aef4:	2202      	movs	r2, #2
 800aef6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aef8:	4b14      	ldr	r3, [pc, #80]	; (800af4c <USBD_LL_Init+0x94>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <USBD_LL_Init+0x94>)
 800af00:	2200      	movs	r2, #0
 800af02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af04:	4b11      	ldr	r3, [pc, #68]	; (800af4c <USBD_LL_Init+0x94>)
 800af06:	2200      	movs	r2, #0
 800af08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af0a:	4b10      	ldr	r3, [pc, #64]	; (800af4c <USBD_LL_Init+0x94>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <USBD_LL_Init+0x94>)
 800af12:	2200      	movs	r2, #0
 800af14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af16:	480d      	ldr	r0, [pc, #52]	; (800af4c <USBD_LL_Init+0x94>)
 800af18:	f7f9 fb69 	bl	80045ee <HAL_PCD_Init>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af22:	f7f7 fb79 	bl	8002618 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af26:	2180      	movs	r1, #128	; 0x80
 800af28:	4808      	ldr	r0, [pc, #32]	; (800af4c <USBD_LL_Init+0x94>)
 800af2a:	f7fa fcc6 	bl	80058ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af2e:	2240      	movs	r2, #64	; 0x40
 800af30:	2100      	movs	r1, #0
 800af32:	4806      	ldr	r0, [pc, #24]	; (800af4c <USBD_LL_Init+0x94>)
 800af34:	f7fa fc7a 	bl	800582c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af38:	2280      	movs	r2, #128	; 0x80
 800af3a:	2101      	movs	r1, #1
 800af3c:	4803      	ldr	r0, [pc, #12]	; (800af4c <USBD_LL_Init+0x94>)
 800af3e:	f7fa fc75 	bl	800582c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20001f84 	.word	0x20001f84

0800af50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af66:	4618      	mov	r0, r3
 800af68:	f7f9 fc5e 	bl	8004828 <HAL_PCD_Start>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f942 	bl	800b1fc <USBD_Get_USB_Status>
 800af78:	4603      	mov	r3, r0
 800af7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	4608      	mov	r0, r1
 800af90:	4611      	mov	r1, r2
 800af92:	461a      	mov	r2, r3
 800af94:	4603      	mov	r3, r0
 800af96:	70fb      	strb	r3, [r7, #3]
 800af98:	460b      	mov	r3, r1
 800af9a:	70bb      	strb	r3, [r7, #2]
 800af9c:	4613      	mov	r3, r2
 800af9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afae:	78bb      	ldrb	r3, [r7, #2]
 800afb0:	883a      	ldrh	r2, [r7, #0]
 800afb2:	78f9      	ldrb	r1, [r7, #3]
 800afb4:	f7fa f842 	bl	800503c <HAL_PCD_EP_Open>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 f91c 	bl	800b1fc <USBD_Get_USB_Status>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fa f88b 	bl	800510c <HAL_PCD_EP_Close>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f8fd 	bl	800b1fc <USBD_Get_USB_Status>
 800b002:	4603      	mov	r3, r0
 800b004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b006:	7bbb      	ldrb	r3, [r7, #14]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b02a:	78fa      	ldrb	r2, [r7, #3]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fa f963 	bl	80052fa <HAL_PCD_EP_SetStall>
 800b034:	4603      	mov	r3, r0
 800b036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 f8de 	bl	800b1fc <USBD_Get_USB_Status>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b044:	7bbb      	ldrb	r3, [r7, #14]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b068:	78fa      	ldrb	r2, [r7, #3]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fa f9a8 	bl	80053c2 <HAL_PCD_EP_ClrStall>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f8bf 	bl	800b1fc <USBD_Get_USB_Status>
 800b07e:	4603      	mov	r3, r0
 800b080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b082:	7bbb      	ldrb	r3, [r7, #14]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b09e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da0b      	bge.n	800b0c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0a8:	78fb      	ldrb	r3, [r7, #3]
 800b0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0ae:	68f9      	ldr	r1, [r7, #12]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	333e      	adds	r3, #62	; 0x3e
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	e00b      	b.n	800b0d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	00db      	lsls	r3, r3, #3
 800b0cc:	1a9b      	subs	r3, r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7f9 ff75 	bl	8004ff2 <HAL_PCD_SetAddress>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f874 	bl	800b1fc <USBD_Get_USB_Status>
 800b114:	4603      	mov	r3, r0
 800b116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b118:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	460b      	mov	r3, r1
 800b130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b140:	7af9      	ldrb	r1, [r7, #11]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	f7fa f88e 	bl	8005266 <HAL_PCD_EP_Transmit>
 800b14a:	4603      	mov	r3, r0
 800b14c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	4618      	mov	r0, r3
 800b152:	f000 f853 	bl	800b1fc <USBD_Get_USB_Status>
 800b156:	4603      	mov	r3, r0
 800b158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b15a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	607a      	str	r2, [r7, #4]
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	460b      	mov	r3, r1
 800b172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b182:	7af9      	ldrb	r1, [r7, #11]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	f7fa f80a 	bl	80051a0 <HAL_PCD_EP_Receive>
 800b18c:	4603      	mov	r3, r0
 800b18e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f832 	bl	800b1fc <USBD_Get_USB_Status>
 800b198:	4603      	mov	r3, r0
 800b19a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b19c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fa f83a 	bl	8005236 <HAL_PCD_EP_GetRxCount>
 800b1c2:	4603      	mov	r3, r0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1d4:	4b03      	ldr	r3, [pc, #12]	; (800b1e4 <USBD_static_malloc+0x18>)
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	2000063c 	.word	0x2000063c

0800b1e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]

}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d817      	bhi.n	800b240 <USBD_Get_USB_Status+0x44>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <USBD_Get_USB_Status+0x1c>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b229 	.word	0x0800b229
 800b21c:	0800b22f 	.word	0x0800b22f
 800b220:	0800b235 	.word	0x0800b235
 800b224:	0800b23b 	.word	0x0800b23b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]
    break;
 800b22c:	e00b      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b22e:	2303      	movs	r3, #3
 800b230:	73fb      	strb	r3, [r7, #15]
    break;
 800b232:	e008      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b234:	2301      	movs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
    break;
 800b238:	e005      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b23a:	2303      	movs	r3, #3
 800b23c:	73fb      	strb	r3, [r7, #15]
    break;
 800b23e:	e002      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b240:	2303      	movs	r3, #3
 800b242:	73fb      	strb	r3, [r7, #15]
    break;
 800b244:	bf00      	nop
  }
  return usb_status;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <__errno>:
 800b254:	4b01      	ldr	r3, [pc, #4]	; (800b25c <__errno+0x8>)
 800b256:	6818      	ldr	r0, [r3, #0]
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	200001a0 	.word	0x200001a0

0800b260 <__libc_init_array>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4d0d      	ldr	r5, [pc, #52]	; (800b298 <__libc_init_array+0x38>)
 800b264:	4c0d      	ldr	r4, [pc, #52]	; (800b29c <__libc_init_array+0x3c>)
 800b266:	1b64      	subs	r4, r4, r5
 800b268:	10a4      	asrs	r4, r4, #2
 800b26a:	2600      	movs	r6, #0
 800b26c:	42a6      	cmp	r6, r4
 800b26e:	d109      	bne.n	800b284 <__libc_init_array+0x24>
 800b270:	4d0b      	ldr	r5, [pc, #44]	; (800b2a0 <__libc_init_array+0x40>)
 800b272:	4c0c      	ldr	r4, [pc, #48]	; (800b2a4 <__libc_init_array+0x44>)
 800b274:	f001 f92a 	bl	800c4cc <_init>
 800b278:	1b64      	subs	r4, r4, r5
 800b27a:	10a4      	asrs	r4, r4, #2
 800b27c:	2600      	movs	r6, #0
 800b27e:	42a6      	cmp	r6, r4
 800b280:	d105      	bne.n	800b28e <__libc_init_array+0x2e>
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	f855 3b04 	ldr.w	r3, [r5], #4
 800b288:	4798      	blx	r3
 800b28a:	3601      	adds	r6, #1
 800b28c:	e7ee      	b.n	800b26c <__libc_init_array+0xc>
 800b28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b292:	4798      	blx	r3
 800b294:	3601      	adds	r6, #1
 800b296:	e7f2      	b.n	800b27e <__libc_init_array+0x1e>
 800b298:	0800d57c 	.word	0x0800d57c
 800b29c:	0800d57c 	.word	0x0800d57c
 800b2a0:	0800d57c 	.word	0x0800d57c
 800b2a4:	0800d580 	.word	0x0800d580

0800b2a8 <malloc>:
 800b2a8:	4b02      	ldr	r3, [pc, #8]	; (800b2b4 <malloc+0xc>)
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	f000 b871 	b.w	800b394 <_malloc_r>
 800b2b2:	bf00      	nop
 800b2b4:	200001a0 	.word	0x200001a0

0800b2b8 <free>:
 800b2b8:	4b02      	ldr	r3, [pc, #8]	; (800b2c4 <free+0xc>)
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	6818      	ldr	r0, [r3, #0]
 800b2be:	f000 b819 	b.w	800b2f4 <_free_r>
 800b2c2:	bf00      	nop
 800b2c4:	200001a0 	.word	0x200001a0

0800b2c8 <memcpy>:
 800b2c8:	440a      	add	r2, r1
 800b2ca:	4291      	cmp	r1, r2
 800b2cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2d0:	d100      	bne.n	800b2d4 <memcpy+0xc>
 800b2d2:	4770      	bx	lr
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2de:	4291      	cmp	r1, r2
 800b2e0:	d1f9      	bne.n	800b2d6 <memcpy+0xe>
 800b2e2:	bd10      	pop	{r4, pc}

0800b2e4 <memset>:
 800b2e4:	4402      	add	r2, r0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d100      	bne.n	800b2ee <memset+0xa>
 800b2ec:	4770      	bx	lr
 800b2ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b2f2:	e7f9      	b.n	800b2e8 <memset+0x4>

0800b2f4 <_free_r>:
 800b2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2f6:	2900      	cmp	r1, #0
 800b2f8:	d048      	beq.n	800b38c <_free_r+0x98>
 800b2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2fe:	9001      	str	r0, [sp, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	f1a1 0404 	sub.w	r4, r1, #4
 800b306:	bfb8      	it	lt
 800b308:	18e4      	addlt	r4, r4, r3
 800b30a:	f000 f903 	bl	800b514 <__malloc_lock>
 800b30e:	4a20      	ldr	r2, [pc, #128]	; (800b390 <_free_r+0x9c>)
 800b310:	9801      	ldr	r0, [sp, #4]
 800b312:	6813      	ldr	r3, [r2, #0]
 800b314:	4615      	mov	r5, r2
 800b316:	b933      	cbnz	r3, 800b326 <_free_r+0x32>
 800b318:	6063      	str	r3, [r4, #4]
 800b31a:	6014      	str	r4, [r2, #0]
 800b31c:	b003      	add	sp, #12
 800b31e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b322:	f000 b8fd 	b.w	800b520 <__malloc_unlock>
 800b326:	42a3      	cmp	r3, r4
 800b328:	d90b      	bls.n	800b342 <_free_r+0x4e>
 800b32a:	6821      	ldr	r1, [r4, #0]
 800b32c:	1862      	adds	r2, r4, r1
 800b32e:	4293      	cmp	r3, r2
 800b330:	bf04      	itt	eq
 800b332:	681a      	ldreq	r2, [r3, #0]
 800b334:	685b      	ldreq	r3, [r3, #4]
 800b336:	6063      	str	r3, [r4, #4]
 800b338:	bf04      	itt	eq
 800b33a:	1852      	addeq	r2, r2, r1
 800b33c:	6022      	streq	r2, [r4, #0]
 800b33e:	602c      	str	r4, [r5, #0]
 800b340:	e7ec      	b.n	800b31c <_free_r+0x28>
 800b342:	461a      	mov	r2, r3
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	b10b      	cbz	r3, 800b34c <_free_r+0x58>
 800b348:	42a3      	cmp	r3, r4
 800b34a:	d9fa      	bls.n	800b342 <_free_r+0x4e>
 800b34c:	6811      	ldr	r1, [r2, #0]
 800b34e:	1855      	adds	r5, r2, r1
 800b350:	42a5      	cmp	r5, r4
 800b352:	d10b      	bne.n	800b36c <_free_r+0x78>
 800b354:	6824      	ldr	r4, [r4, #0]
 800b356:	4421      	add	r1, r4
 800b358:	1854      	adds	r4, r2, r1
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	6011      	str	r1, [r2, #0]
 800b35e:	d1dd      	bne.n	800b31c <_free_r+0x28>
 800b360:	681c      	ldr	r4, [r3, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	6053      	str	r3, [r2, #4]
 800b366:	4421      	add	r1, r4
 800b368:	6011      	str	r1, [r2, #0]
 800b36a:	e7d7      	b.n	800b31c <_free_r+0x28>
 800b36c:	d902      	bls.n	800b374 <_free_r+0x80>
 800b36e:	230c      	movs	r3, #12
 800b370:	6003      	str	r3, [r0, #0]
 800b372:	e7d3      	b.n	800b31c <_free_r+0x28>
 800b374:	6825      	ldr	r5, [r4, #0]
 800b376:	1961      	adds	r1, r4, r5
 800b378:	428b      	cmp	r3, r1
 800b37a:	bf04      	itt	eq
 800b37c:	6819      	ldreq	r1, [r3, #0]
 800b37e:	685b      	ldreq	r3, [r3, #4]
 800b380:	6063      	str	r3, [r4, #4]
 800b382:	bf04      	itt	eq
 800b384:	1949      	addeq	r1, r1, r5
 800b386:	6021      	streq	r1, [r4, #0]
 800b388:	6054      	str	r4, [r2, #4]
 800b38a:	e7c7      	b.n	800b31c <_free_r+0x28>
 800b38c:	b003      	add	sp, #12
 800b38e:	bd30      	pop	{r4, r5, pc}
 800b390:	2000085c 	.word	0x2000085c

0800b394 <_malloc_r>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	1ccd      	adds	r5, r1, #3
 800b398:	f025 0503 	bic.w	r5, r5, #3
 800b39c:	3508      	adds	r5, #8
 800b39e:	2d0c      	cmp	r5, #12
 800b3a0:	bf38      	it	cc
 800b3a2:	250c      	movcc	r5, #12
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	db01      	blt.n	800b3ae <_malloc_r+0x1a>
 800b3aa:	42a9      	cmp	r1, r5
 800b3ac:	d903      	bls.n	800b3b6 <_malloc_r+0x22>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	6033      	str	r3, [r6, #0]
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b6:	f000 f8ad 	bl	800b514 <__malloc_lock>
 800b3ba:	4921      	ldr	r1, [pc, #132]	; (800b440 <_malloc_r+0xac>)
 800b3bc:	680a      	ldr	r2, [r1, #0]
 800b3be:	4614      	mov	r4, r2
 800b3c0:	b99c      	cbnz	r4, 800b3ea <_malloc_r+0x56>
 800b3c2:	4f20      	ldr	r7, [pc, #128]	; (800b444 <_malloc_r+0xb0>)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	b923      	cbnz	r3, 800b3d2 <_malloc_r+0x3e>
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f844 	bl	800b458 <_sbrk_r>
 800b3d0:	6038      	str	r0, [r7, #0]
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f000 f83f 	bl	800b458 <_sbrk_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d123      	bne.n	800b426 <_malloc_r+0x92>
 800b3de:	230c      	movs	r3, #12
 800b3e0:	6033      	str	r3, [r6, #0]
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f000 f89c 	bl	800b520 <__malloc_unlock>
 800b3e8:	e7e3      	b.n	800b3b2 <_malloc_r+0x1e>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	1b5b      	subs	r3, r3, r5
 800b3ee:	d417      	bmi.n	800b420 <_malloc_r+0x8c>
 800b3f0:	2b0b      	cmp	r3, #11
 800b3f2:	d903      	bls.n	800b3fc <_malloc_r+0x68>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	441c      	add	r4, r3
 800b3f8:	6025      	str	r5, [r4, #0]
 800b3fa:	e004      	b.n	800b406 <_malloc_r+0x72>
 800b3fc:	6863      	ldr	r3, [r4, #4]
 800b3fe:	42a2      	cmp	r2, r4
 800b400:	bf0c      	ite	eq
 800b402:	600b      	streq	r3, [r1, #0]
 800b404:	6053      	strne	r3, [r2, #4]
 800b406:	4630      	mov	r0, r6
 800b408:	f000 f88a 	bl	800b520 <__malloc_unlock>
 800b40c:	f104 000b 	add.w	r0, r4, #11
 800b410:	1d23      	adds	r3, r4, #4
 800b412:	f020 0007 	bic.w	r0, r0, #7
 800b416:	1ac2      	subs	r2, r0, r3
 800b418:	d0cc      	beq.n	800b3b4 <_malloc_r+0x20>
 800b41a:	1a1b      	subs	r3, r3, r0
 800b41c:	50a3      	str	r3, [r4, r2]
 800b41e:	e7c9      	b.n	800b3b4 <_malloc_r+0x20>
 800b420:	4622      	mov	r2, r4
 800b422:	6864      	ldr	r4, [r4, #4]
 800b424:	e7cc      	b.n	800b3c0 <_malloc_r+0x2c>
 800b426:	1cc4      	adds	r4, r0, #3
 800b428:	f024 0403 	bic.w	r4, r4, #3
 800b42c:	42a0      	cmp	r0, r4
 800b42e:	d0e3      	beq.n	800b3f8 <_malloc_r+0x64>
 800b430:	1a21      	subs	r1, r4, r0
 800b432:	4630      	mov	r0, r6
 800b434:	f000 f810 	bl	800b458 <_sbrk_r>
 800b438:	3001      	adds	r0, #1
 800b43a:	d1dd      	bne.n	800b3f8 <_malloc_r+0x64>
 800b43c:	e7cf      	b.n	800b3de <_malloc_r+0x4a>
 800b43e:	bf00      	nop
 800b440:	2000085c 	.word	0x2000085c
 800b444:	20000860 	.word	0x20000860

0800b448 <realloc>:
 800b448:	4b02      	ldr	r3, [pc, #8]	; (800b454 <realloc+0xc>)
 800b44a:	460a      	mov	r2, r1
 800b44c:	4601      	mov	r1, r0
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	f000 b86c 	b.w	800b52c <_realloc_r>
 800b454:	200001a0 	.word	0x200001a0

0800b458 <_sbrk_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d06      	ldr	r5, [pc, #24]	; (800b474 <_sbrk_r+0x1c>)
 800b45c:	2300      	movs	r3, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f7 feb6 	bl	80031d4 <_sbrk>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_sbrk_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_sbrk_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	2000238c 	.word	0x2000238c

0800b478 <siprintf>:
 800b478:	b40e      	push	{r1, r2, r3}
 800b47a:	b500      	push	{lr}
 800b47c:	b09c      	sub	sp, #112	; 0x70
 800b47e:	ab1d      	add	r3, sp, #116	; 0x74
 800b480:	9002      	str	r0, [sp, #8]
 800b482:	9006      	str	r0, [sp, #24]
 800b484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b488:	4809      	ldr	r0, [pc, #36]	; (800b4b0 <siprintf+0x38>)
 800b48a:	9107      	str	r1, [sp, #28]
 800b48c:	9104      	str	r1, [sp, #16]
 800b48e:	4909      	ldr	r1, [pc, #36]	; (800b4b4 <siprintf+0x3c>)
 800b490:	f853 2b04 	ldr.w	r2, [r3], #4
 800b494:	9105      	str	r1, [sp, #20]
 800b496:	6800      	ldr	r0, [r0, #0]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	a902      	add	r1, sp, #8
 800b49c:	f000 f8c8 	bl	800b630 <_svfiprintf_r>
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	b01c      	add	sp, #112	; 0x70
 800b4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4ac:	b003      	add	sp, #12
 800b4ae:	4770      	bx	lr
 800b4b0:	200001a0 	.word	0x200001a0
 800b4b4:	ffff0208 	.word	0xffff0208

0800b4b8 <siscanf>:
 800b4b8:	b40e      	push	{r1, r2, r3}
 800b4ba:	b510      	push	{r4, lr}
 800b4bc:	b09f      	sub	sp, #124	; 0x7c
 800b4be:	ac21      	add	r4, sp, #132	; 0x84
 800b4c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b4c4:	f854 2b04 	ldr.w	r2, [r4], #4
 800b4c8:	9201      	str	r2, [sp, #4]
 800b4ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b4ce:	9004      	str	r0, [sp, #16]
 800b4d0:	9008      	str	r0, [sp, #32]
 800b4d2:	f7f4 fe7d 	bl	80001d0 <strlen>
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <siscanf+0x50>)
 800b4d8:	9005      	str	r0, [sp, #20]
 800b4da:	9009      	str	r0, [sp, #36]	; 0x24
 800b4dc:	930d      	str	r3, [sp, #52]	; 0x34
 800b4de:	480b      	ldr	r0, [pc, #44]	; (800b50c <siscanf+0x54>)
 800b4e0:	9a01      	ldr	r2, [sp, #4]
 800b4e2:	6800      	ldr	r0, [r0, #0]
 800b4e4:	9403      	str	r4, [sp, #12]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	9311      	str	r3, [sp, #68]	; 0x44
 800b4ea:	9316      	str	r3, [sp, #88]	; 0x58
 800b4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b4f4:	a904      	add	r1, sp, #16
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	f000 f9f4 	bl	800b8e4 <__ssvfiscanf_r>
 800b4fc:	b01f      	add	sp, #124	; 0x7c
 800b4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b502:	b003      	add	sp, #12
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	0800b511 	.word	0x0800b511
 800b50c:	200001a0 	.word	0x200001a0

0800b510 <__seofread>:
 800b510:	2000      	movs	r0, #0
 800b512:	4770      	bx	lr

0800b514 <__malloc_lock>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__malloc_lock+0x8>)
 800b516:	f000 bfb5 	b.w	800c484 <__retarget_lock_acquire_recursive>
 800b51a:	bf00      	nop
 800b51c:	20002394 	.word	0x20002394

0800b520 <__malloc_unlock>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__malloc_unlock+0x8>)
 800b522:	f000 bfb0 	b.w	800c486 <__retarget_lock_release_recursive>
 800b526:	bf00      	nop
 800b528:	20002394 	.word	0x20002394

0800b52c <_realloc_r>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	4607      	mov	r7, r0
 800b530:	4614      	mov	r4, r2
 800b532:	460e      	mov	r6, r1
 800b534:	b921      	cbnz	r1, 800b540 <_realloc_r+0x14>
 800b536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b53a:	4611      	mov	r1, r2
 800b53c:	f7ff bf2a 	b.w	800b394 <_malloc_r>
 800b540:	b922      	cbnz	r2, 800b54c <_realloc_r+0x20>
 800b542:	f7ff fed7 	bl	800b2f4 <_free_r>
 800b546:	4625      	mov	r5, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b54c:	f000 ffb6 	bl	800c4bc <_malloc_usable_size_r>
 800b550:	42a0      	cmp	r0, r4
 800b552:	d20f      	bcs.n	800b574 <_realloc_r+0x48>
 800b554:	4621      	mov	r1, r4
 800b556:	4638      	mov	r0, r7
 800b558:	f7ff ff1c 	bl	800b394 <_malloc_r>
 800b55c:	4605      	mov	r5, r0
 800b55e:	2800      	cmp	r0, #0
 800b560:	d0f2      	beq.n	800b548 <_realloc_r+0x1c>
 800b562:	4631      	mov	r1, r6
 800b564:	4622      	mov	r2, r4
 800b566:	f7ff feaf 	bl	800b2c8 <memcpy>
 800b56a:	4631      	mov	r1, r6
 800b56c:	4638      	mov	r0, r7
 800b56e:	f7ff fec1 	bl	800b2f4 <_free_r>
 800b572:	e7e9      	b.n	800b548 <_realloc_r+0x1c>
 800b574:	4635      	mov	r5, r6
 800b576:	e7e7      	b.n	800b548 <_realloc_r+0x1c>

0800b578 <__ssputs_r>:
 800b578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	688e      	ldr	r6, [r1, #8]
 800b57e:	429e      	cmp	r6, r3
 800b580:	4682      	mov	sl, r0
 800b582:	460c      	mov	r4, r1
 800b584:	4690      	mov	r8, r2
 800b586:	461f      	mov	r7, r3
 800b588:	d838      	bhi.n	800b5fc <__ssputs_r+0x84>
 800b58a:	898a      	ldrh	r2, [r1, #12]
 800b58c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b590:	d032      	beq.n	800b5f8 <__ssputs_r+0x80>
 800b592:	6825      	ldr	r5, [r4, #0]
 800b594:	6909      	ldr	r1, [r1, #16]
 800b596:	eba5 0901 	sub.w	r9, r5, r1
 800b59a:	6965      	ldr	r5, [r4, #20]
 800b59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	444b      	add	r3, r9
 800b5a8:	106d      	asrs	r5, r5, #1
 800b5aa:	429d      	cmp	r5, r3
 800b5ac:	bf38      	it	cc
 800b5ae:	461d      	movcc	r5, r3
 800b5b0:	0553      	lsls	r3, r2, #21
 800b5b2:	d531      	bpl.n	800b618 <__ssputs_r+0xa0>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7ff feed 	bl	800b394 <_malloc_r>
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	b950      	cbnz	r0, 800b5d4 <__ssputs_r+0x5c>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	f8ca 3000 	str.w	r3, [sl]
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d4:	6921      	ldr	r1, [r4, #16]
 800b5d6:	464a      	mov	r2, r9
 800b5d8:	f7ff fe76 	bl	800b2c8 <memcpy>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	6126      	str	r6, [r4, #16]
 800b5ea:	6165      	str	r5, [r4, #20]
 800b5ec:	444e      	add	r6, r9
 800b5ee:	eba5 0509 	sub.w	r5, r5, r9
 800b5f2:	6026      	str	r6, [r4, #0]
 800b5f4:	60a5      	str	r5, [r4, #8]
 800b5f6:	463e      	mov	r6, r7
 800b5f8:	42be      	cmp	r6, r7
 800b5fa:	d900      	bls.n	800b5fe <__ssputs_r+0x86>
 800b5fc:	463e      	mov	r6, r7
 800b5fe:	4632      	mov	r2, r6
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	4641      	mov	r1, r8
 800b604:	f000 ff40 	bl	800c488 <memmove>
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	1b9b      	subs	r3, r3, r6
 800b60e:	4432      	add	r2, r6
 800b610:	60a3      	str	r3, [r4, #8]
 800b612:	6022      	str	r2, [r4, #0]
 800b614:	2000      	movs	r0, #0
 800b616:	e7db      	b.n	800b5d0 <__ssputs_r+0x58>
 800b618:	462a      	mov	r2, r5
 800b61a:	f7ff ff87 	bl	800b52c <_realloc_r>
 800b61e:	4606      	mov	r6, r0
 800b620:	2800      	cmp	r0, #0
 800b622:	d1e1      	bne.n	800b5e8 <__ssputs_r+0x70>
 800b624:	6921      	ldr	r1, [r4, #16]
 800b626:	4650      	mov	r0, sl
 800b628:	f7ff fe64 	bl	800b2f4 <_free_r>
 800b62c:	e7c7      	b.n	800b5be <__ssputs_r+0x46>
	...

0800b630 <_svfiprintf_r>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	4698      	mov	r8, r3
 800b636:	898b      	ldrh	r3, [r1, #12]
 800b638:	061b      	lsls	r3, r3, #24
 800b63a:	b09d      	sub	sp, #116	; 0x74
 800b63c:	4607      	mov	r7, r0
 800b63e:	460d      	mov	r5, r1
 800b640:	4614      	mov	r4, r2
 800b642:	d50e      	bpl.n	800b662 <_svfiprintf_r+0x32>
 800b644:	690b      	ldr	r3, [r1, #16]
 800b646:	b963      	cbnz	r3, 800b662 <_svfiprintf_r+0x32>
 800b648:	2140      	movs	r1, #64	; 0x40
 800b64a:	f7ff fea3 	bl	800b394 <_malloc_r>
 800b64e:	6028      	str	r0, [r5, #0]
 800b650:	6128      	str	r0, [r5, #16]
 800b652:	b920      	cbnz	r0, 800b65e <_svfiprintf_r+0x2e>
 800b654:	230c      	movs	r3, #12
 800b656:	603b      	str	r3, [r7, #0]
 800b658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b65c:	e0d1      	b.n	800b802 <_svfiprintf_r+0x1d2>
 800b65e:	2340      	movs	r3, #64	; 0x40
 800b660:	616b      	str	r3, [r5, #20]
 800b662:	2300      	movs	r3, #0
 800b664:	9309      	str	r3, [sp, #36]	; 0x24
 800b666:	2320      	movs	r3, #32
 800b668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b66c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b670:	2330      	movs	r3, #48	; 0x30
 800b672:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b81c <_svfiprintf_r+0x1ec>
 800b676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b67a:	f04f 0901 	mov.w	r9, #1
 800b67e:	4623      	mov	r3, r4
 800b680:	469a      	mov	sl, r3
 800b682:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b686:	b10a      	cbz	r2, 800b68c <_svfiprintf_r+0x5c>
 800b688:	2a25      	cmp	r2, #37	; 0x25
 800b68a:	d1f9      	bne.n	800b680 <_svfiprintf_r+0x50>
 800b68c:	ebba 0b04 	subs.w	fp, sl, r4
 800b690:	d00b      	beq.n	800b6aa <_svfiprintf_r+0x7a>
 800b692:	465b      	mov	r3, fp
 800b694:	4622      	mov	r2, r4
 800b696:	4629      	mov	r1, r5
 800b698:	4638      	mov	r0, r7
 800b69a:	f7ff ff6d 	bl	800b578 <__ssputs_r>
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f000 80aa 	beq.w	800b7f8 <_svfiprintf_r+0x1c8>
 800b6a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a6:	445a      	add	r2, fp
 800b6a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 80a2 	beq.w	800b7f8 <_svfiprintf_r+0x1c8>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6be:	f10a 0a01 	add.w	sl, sl, #1
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	9307      	str	r3, [sp, #28]
 800b6c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b6cc:	4654      	mov	r4, sl
 800b6ce:	2205      	movs	r2, #5
 800b6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d4:	4851      	ldr	r0, [pc, #324]	; (800b81c <_svfiprintf_r+0x1ec>)
 800b6d6:	f7f4 fd83 	bl	80001e0 <memchr>
 800b6da:	9a04      	ldr	r2, [sp, #16]
 800b6dc:	b9d8      	cbnz	r0, 800b716 <_svfiprintf_r+0xe6>
 800b6de:	06d0      	lsls	r0, r2, #27
 800b6e0:	bf44      	itt	mi
 800b6e2:	2320      	movmi	r3, #32
 800b6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6e8:	0711      	lsls	r1, r2, #28
 800b6ea:	bf44      	itt	mi
 800b6ec:	232b      	movmi	r3, #43	; 0x2b
 800b6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f8:	d015      	beq.n	800b726 <_svfiprintf_r+0xf6>
 800b6fa:	9a07      	ldr	r2, [sp, #28]
 800b6fc:	4654      	mov	r4, sl
 800b6fe:	2000      	movs	r0, #0
 800b700:	f04f 0c0a 	mov.w	ip, #10
 800b704:	4621      	mov	r1, r4
 800b706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b70a:	3b30      	subs	r3, #48	; 0x30
 800b70c:	2b09      	cmp	r3, #9
 800b70e:	d94e      	bls.n	800b7ae <_svfiprintf_r+0x17e>
 800b710:	b1b0      	cbz	r0, 800b740 <_svfiprintf_r+0x110>
 800b712:	9207      	str	r2, [sp, #28]
 800b714:	e014      	b.n	800b740 <_svfiprintf_r+0x110>
 800b716:	eba0 0308 	sub.w	r3, r0, r8
 800b71a:	fa09 f303 	lsl.w	r3, r9, r3
 800b71e:	4313      	orrs	r3, r2
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	46a2      	mov	sl, r4
 800b724:	e7d2      	b.n	800b6cc <_svfiprintf_r+0x9c>
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	1d19      	adds	r1, r3, #4
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	9103      	str	r1, [sp, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	bfbb      	ittet	lt
 800b732:	425b      	neglt	r3, r3
 800b734:	f042 0202 	orrlt.w	r2, r2, #2
 800b738:	9307      	strge	r3, [sp, #28]
 800b73a:	9307      	strlt	r3, [sp, #28]
 800b73c:	bfb8      	it	lt
 800b73e:	9204      	strlt	r2, [sp, #16]
 800b740:	7823      	ldrb	r3, [r4, #0]
 800b742:	2b2e      	cmp	r3, #46	; 0x2e
 800b744:	d10c      	bne.n	800b760 <_svfiprintf_r+0x130>
 800b746:	7863      	ldrb	r3, [r4, #1]
 800b748:	2b2a      	cmp	r3, #42	; 0x2a
 800b74a:	d135      	bne.n	800b7b8 <_svfiprintf_r+0x188>
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	1d1a      	adds	r2, r3, #4
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	9203      	str	r2, [sp, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	bfb8      	it	lt
 800b758:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b75c:	3402      	adds	r4, #2
 800b75e:	9305      	str	r3, [sp, #20]
 800b760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b82c <_svfiprintf_r+0x1fc>
 800b764:	7821      	ldrb	r1, [r4, #0]
 800b766:	2203      	movs	r2, #3
 800b768:	4650      	mov	r0, sl
 800b76a:	f7f4 fd39 	bl	80001e0 <memchr>
 800b76e:	b140      	cbz	r0, 800b782 <_svfiprintf_r+0x152>
 800b770:	2340      	movs	r3, #64	; 0x40
 800b772:	eba0 000a 	sub.w	r0, r0, sl
 800b776:	fa03 f000 	lsl.w	r0, r3, r0
 800b77a:	9b04      	ldr	r3, [sp, #16]
 800b77c:	4303      	orrs	r3, r0
 800b77e:	3401      	adds	r4, #1
 800b780:	9304      	str	r3, [sp, #16]
 800b782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b786:	4826      	ldr	r0, [pc, #152]	; (800b820 <_svfiprintf_r+0x1f0>)
 800b788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b78c:	2206      	movs	r2, #6
 800b78e:	f7f4 fd27 	bl	80001e0 <memchr>
 800b792:	2800      	cmp	r0, #0
 800b794:	d038      	beq.n	800b808 <_svfiprintf_r+0x1d8>
 800b796:	4b23      	ldr	r3, [pc, #140]	; (800b824 <_svfiprintf_r+0x1f4>)
 800b798:	bb1b      	cbnz	r3, 800b7e2 <_svfiprintf_r+0x1b2>
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	3307      	adds	r3, #7
 800b79e:	f023 0307 	bic.w	r3, r3, #7
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	9303      	str	r3, [sp, #12]
 800b7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a8:	4433      	add	r3, r6
 800b7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ac:	e767      	b.n	800b67e <_svfiprintf_r+0x4e>
 800b7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	e7a5      	b.n	800b704 <_svfiprintf_r+0xd4>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	3401      	adds	r4, #1
 800b7bc:	9305      	str	r3, [sp, #20]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	f04f 0c0a 	mov.w	ip, #10
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ca:	3a30      	subs	r2, #48	; 0x30
 800b7cc:	2a09      	cmp	r2, #9
 800b7ce:	d903      	bls.n	800b7d8 <_svfiprintf_r+0x1a8>
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0c5      	beq.n	800b760 <_svfiprintf_r+0x130>
 800b7d4:	9105      	str	r1, [sp, #20]
 800b7d6:	e7c3      	b.n	800b760 <_svfiprintf_r+0x130>
 800b7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7dc:	4604      	mov	r4, r0
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e7f0      	b.n	800b7c4 <_svfiprintf_r+0x194>
 800b7e2:	ab03      	add	r3, sp, #12
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	4b0f      	ldr	r3, [pc, #60]	; (800b828 <_svfiprintf_r+0x1f8>)
 800b7ea:	a904      	add	r1, sp, #16
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f3af 8000 	nop.w
 800b7f2:	1c42      	adds	r2, r0, #1
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	d1d6      	bne.n	800b7a6 <_svfiprintf_r+0x176>
 800b7f8:	89ab      	ldrh	r3, [r5, #12]
 800b7fa:	065b      	lsls	r3, r3, #25
 800b7fc:	f53f af2c 	bmi.w	800b658 <_svfiprintf_r+0x28>
 800b800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b802:	b01d      	add	sp, #116	; 0x74
 800b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	ab03      	add	r3, sp, #12
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	462a      	mov	r2, r5
 800b80e:	4b06      	ldr	r3, [pc, #24]	; (800b828 <_svfiprintf_r+0x1f8>)
 800b810:	a904      	add	r1, sp, #16
 800b812:	4638      	mov	r0, r7
 800b814:	f000 fa4c 	bl	800bcb0 <_printf_i>
 800b818:	e7eb      	b.n	800b7f2 <_svfiprintf_r+0x1c2>
 800b81a:	bf00      	nop
 800b81c:	0800d4c5 	.word	0x0800d4c5
 800b820:	0800d4cf 	.word	0x0800d4cf
 800b824:	00000000 	.word	0x00000000
 800b828:	0800b579 	.word	0x0800b579
 800b82c:	0800d4cb 	.word	0x0800d4cb

0800b830 <_sungetc_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	1c4b      	adds	r3, r1, #1
 800b834:	4614      	mov	r4, r2
 800b836:	d103      	bne.n	800b840 <_sungetc_r+0x10>
 800b838:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b83c:	4628      	mov	r0, r5
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	8993      	ldrh	r3, [r2, #12]
 800b842:	f023 0320 	bic.w	r3, r3, #32
 800b846:	8193      	strh	r3, [r2, #12]
 800b848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b84a:	6852      	ldr	r2, [r2, #4]
 800b84c:	b2cd      	uxtb	r5, r1
 800b84e:	b18b      	cbz	r3, 800b874 <_sungetc_r+0x44>
 800b850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b852:	4293      	cmp	r3, r2
 800b854:	dd08      	ble.n	800b868 <_sungetc_r+0x38>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	1e5a      	subs	r2, r3, #1
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b860:	6863      	ldr	r3, [r4, #4]
 800b862:	3301      	adds	r3, #1
 800b864:	6063      	str	r3, [r4, #4]
 800b866:	e7e9      	b.n	800b83c <_sungetc_r+0xc>
 800b868:	4621      	mov	r1, r4
 800b86a:	f000 fdd1 	bl	800c410 <__submore>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d0f1      	beq.n	800b856 <_sungetc_r+0x26>
 800b872:	e7e1      	b.n	800b838 <_sungetc_r+0x8>
 800b874:	6921      	ldr	r1, [r4, #16]
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	b151      	cbz	r1, 800b890 <_sungetc_r+0x60>
 800b87a:	4299      	cmp	r1, r3
 800b87c:	d208      	bcs.n	800b890 <_sungetc_r+0x60>
 800b87e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b882:	42a9      	cmp	r1, r5
 800b884:	d104      	bne.n	800b890 <_sungetc_r+0x60>
 800b886:	3b01      	subs	r3, #1
 800b888:	3201      	adds	r2, #1
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	6062      	str	r2, [r4, #4]
 800b88e:	e7d5      	b.n	800b83c <_sungetc_r+0xc>
 800b890:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b898:	6363      	str	r3, [r4, #52]	; 0x34
 800b89a:	2303      	movs	r3, #3
 800b89c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b89e:	4623      	mov	r3, r4
 800b8a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e7dc      	b.n	800b864 <_sungetc_r+0x34>

0800b8aa <__ssrefill_r>:
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8b0:	b169      	cbz	r1, 800b8ce <__ssrefill_r+0x24>
 800b8b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8b6:	4299      	cmp	r1, r3
 800b8b8:	d001      	beq.n	800b8be <__ssrefill_r+0x14>
 800b8ba:	f7ff fd1b 	bl	800b2f4 <_free_r>
 800b8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8c0:	6063      	str	r3, [r4, #4]
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b8c6:	b113      	cbz	r3, 800b8ce <__ssrefill_r+0x24>
 800b8c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8ca:	6023      	str	r3, [r4, #0]
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6063      	str	r3, [r4, #4]
 800b8d6:	89a3      	ldrh	r3, [r4, #12]
 800b8d8:	f043 0320 	orr.w	r3, r3, #32
 800b8dc:	81a3      	strh	r3, [r4, #12]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8e2:	e7f3      	b.n	800b8cc <__ssrefill_r+0x22>

0800b8e4 <__ssvfiscanf_r>:
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b8f4:	49b2      	ldr	r1, [pc, #712]	; (800bbc0 <__ssvfiscanf_r+0x2dc>)
 800b8f6:	91a0      	str	r1, [sp, #640]	; 0x280
 800b8f8:	f10d 0804 	add.w	r8, sp, #4
 800b8fc:	49b1      	ldr	r1, [pc, #708]	; (800bbc4 <__ssvfiscanf_r+0x2e0>)
 800b8fe:	4fb2      	ldr	r7, [pc, #712]	; (800bbc8 <__ssvfiscanf_r+0x2e4>)
 800b900:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bbcc <__ssvfiscanf_r+0x2e8>
 800b904:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b908:	4606      	mov	r6, r0
 800b90a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f892 a000 	ldrb.w	sl, [r2]
 800b912:	f1ba 0f00 	cmp.w	sl, #0
 800b916:	f000 8151 	beq.w	800bbbc <__ssvfiscanf_r+0x2d8>
 800b91a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b91e:	f013 0308 	ands.w	r3, r3, #8
 800b922:	f102 0501 	add.w	r5, r2, #1
 800b926:	d019      	beq.n	800b95c <__ssvfiscanf_r+0x78>
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dd0f      	ble.n	800b94e <__ssvfiscanf_r+0x6a>
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	781a      	ldrb	r2, [r3, #0]
 800b932:	5cba      	ldrb	r2, [r7, r2]
 800b934:	0712      	lsls	r2, r2, #28
 800b936:	d401      	bmi.n	800b93c <__ssvfiscanf_r+0x58>
 800b938:	462a      	mov	r2, r5
 800b93a:	e7e8      	b.n	800b90e <__ssvfiscanf_r+0x2a>
 800b93c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b93e:	3201      	adds	r2, #1
 800b940:	9245      	str	r2, [sp, #276]	; 0x114
 800b942:	6862      	ldr	r2, [r4, #4]
 800b944:	3301      	adds	r3, #1
 800b946:	3a01      	subs	r2, #1
 800b948:	6062      	str	r2, [r4, #4]
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	e7ec      	b.n	800b928 <__ssvfiscanf_r+0x44>
 800b94e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b950:	4621      	mov	r1, r4
 800b952:	4630      	mov	r0, r6
 800b954:	4798      	blx	r3
 800b956:	2800      	cmp	r0, #0
 800b958:	d0e9      	beq.n	800b92e <__ssvfiscanf_r+0x4a>
 800b95a:	e7ed      	b.n	800b938 <__ssvfiscanf_r+0x54>
 800b95c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b960:	f040 8083 	bne.w	800ba6a <__ssvfiscanf_r+0x186>
 800b964:	9341      	str	r3, [sp, #260]	; 0x104
 800b966:	9343      	str	r3, [sp, #268]	; 0x10c
 800b968:	7853      	ldrb	r3, [r2, #1]
 800b96a:	2b2a      	cmp	r3, #42	; 0x2a
 800b96c:	bf02      	ittt	eq
 800b96e:	2310      	moveq	r3, #16
 800b970:	1c95      	addeq	r5, r2, #2
 800b972:	9341      	streq	r3, [sp, #260]	; 0x104
 800b974:	220a      	movs	r2, #10
 800b976:	46ab      	mov	fp, r5
 800b978:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b97c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b980:	2b09      	cmp	r3, #9
 800b982:	d91d      	bls.n	800b9c0 <__ssvfiscanf_r+0xdc>
 800b984:	4891      	ldr	r0, [pc, #580]	; (800bbcc <__ssvfiscanf_r+0x2e8>)
 800b986:	2203      	movs	r2, #3
 800b988:	f7f4 fc2a 	bl	80001e0 <memchr>
 800b98c:	b140      	cbz	r0, 800b9a0 <__ssvfiscanf_r+0xbc>
 800b98e:	2301      	movs	r3, #1
 800b990:	eba0 0009 	sub.w	r0, r0, r9
 800b994:	fa03 f000 	lsl.w	r0, r3, r0
 800b998:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b99a:	4318      	orrs	r0, r3
 800b99c:	9041      	str	r0, [sp, #260]	; 0x104
 800b99e:	465d      	mov	r5, fp
 800b9a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9a4:	2b78      	cmp	r3, #120	; 0x78
 800b9a6:	d806      	bhi.n	800b9b6 <__ssvfiscanf_r+0xd2>
 800b9a8:	2b57      	cmp	r3, #87	; 0x57
 800b9aa:	d810      	bhi.n	800b9ce <__ssvfiscanf_r+0xea>
 800b9ac:	2b25      	cmp	r3, #37	; 0x25
 800b9ae:	d05c      	beq.n	800ba6a <__ssvfiscanf_r+0x186>
 800b9b0:	d856      	bhi.n	800ba60 <__ssvfiscanf_r+0x17c>
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d074      	beq.n	800baa0 <__ssvfiscanf_r+0x1bc>
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	9347      	str	r3, [sp, #284]	; 0x11c
 800b9ba:	230a      	movs	r3, #10
 800b9bc:	9342      	str	r3, [sp, #264]	; 0x108
 800b9be:	e081      	b.n	800bac4 <__ssvfiscanf_r+0x1e0>
 800b9c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b9c2:	fb02 1303 	mla	r3, r2, r3, r1
 800b9c6:	3b30      	subs	r3, #48	; 0x30
 800b9c8:	9343      	str	r3, [sp, #268]	; 0x10c
 800b9ca:	465d      	mov	r5, fp
 800b9cc:	e7d3      	b.n	800b976 <__ssvfiscanf_r+0x92>
 800b9ce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b9d2:	2a20      	cmp	r2, #32
 800b9d4:	d8ef      	bhi.n	800b9b6 <__ssvfiscanf_r+0xd2>
 800b9d6:	a101      	add	r1, pc, #4	; (adr r1, 800b9dc <__ssvfiscanf_r+0xf8>)
 800b9d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b9dc:	0800baaf 	.word	0x0800baaf
 800b9e0:	0800b9b7 	.word	0x0800b9b7
 800b9e4:	0800b9b7 	.word	0x0800b9b7
 800b9e8:	0800bb0d 	.word	0x0800bb0d
 800b9ec:	0800b9b7 	.word	0x0800b9b7
 800b9f0:	0800b9b7 	.word	0x0800b9b7
 800b9f4:	0800b9b7 	.word	0x0800b9b7
 800b9f8:	0800b9b7 	.word	0x0800b9b7
 800b9fc:	0800b9b7 	.word	0x0800b9b7
 800ba00:	0800b9b7 	.word	0x0800b9b7
 800ba04:	0800b9b7 	.word	0x0800b9b7
 800ba08:	0800bb23 	.word	0x0800bb23
 800ba0c:	0800baf9 	.word	0x0800baf9
 800ba10:	0800ba67 	.word	0x0800ba67
 800ba14:	0800ba67 	.word	0x0800ba67
 800ba18:	0800ba67 	.word	0x0800ba67
 800ba1c:	0800b9b7 	.word	0x0800b9b7
 800ba20:	0800bafd 	.word	0x0800bafd
 800ba24:	0800b9b7 	.word	0x0800b9b7
 800ba28:	0800b9b7 	.word	0x0800b9b7
 800ba2c:	0800b9b7 	.word	0x0800b9b7
 800ba30:	0800b9b7 	.word	0x0800b9b7
 800ba34:	0800bb33 	.word	0x0800bb33
 800ba38:	0800bb05 	.word	0x0800bb05
 800ba3c:	0800baa7 	.word	0x0800baa7
 800ba40:	0800b9b7 	.word	0x0800b9b7
 800ba44:	0800b9b7 	.word	0x0800b9b7
 800ba48:	0800bb2f 	.word	0x0800bb2f
 800ba4c:	0800b9b7 	.word	0x0800b9b7
 800ba50:	0800baf9 	.word	0x0800baf9
 800ba54:	0800b9b7 	.word	0x0800b9b7
 800ba58:	0800b9b7 	.word	0x0800b9b7
 800ba5c:	0800baaf 	.word	0x0800baaf
 800ba60:	3b45      	subs	r3, #69	; 0x45
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d8a7      	bhi.n	800b9b6 <__ssvfiscanf_r+0xd2>
 800ba66:	2305      	movs	r3, #5
 800ba68:	e02b      	b.n	800bac2 <__ssvfiscanf_r+0x1de>
 800ba6a:	6863      	ldr	r3, [r4, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dd0d      	ble.n	800ba8c <__ssvfiscanf_r+0x1a8>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	781a      	ldrb	r2, [r3, #0]
 800ba74:	4552      	cmp	r2, sl
 800ba76:	f040 80a1 	bne.w	800bbbc <__ssvfiscanf_r+0x2d8>
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	6862      	ldr	r2, [r4, #4]
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ba82:	3a01      	subs	r2, #1
 800ba84:	3301      	adds	r3, #1
 800ba86:	6062      	str	r2, [r4, #4]
 800ba88:	9345      	str	r3, [sp, #276]	; 0x114
 800ba8a:	e755      	b.n	800b938 <__ssvfiscanf_r+0x54>
 800ba8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba8e:	4621      	mov	r1, r4
 800ba90:	4630      	mov	r0, r6
 800ba92:	4798      	blx	r3
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0eb      	beq.n	800ba70 <__ssvfiscanf_r+0x18c>
 800ba98:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	f040 8084 	bne.w	800bba8 <__ssvfiscanf_r+0x2c4>
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baa4:	e086      	b.n	800bbb4 <__ssvfiscanf_r+0x2d0>
 800baa6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800baa8:	f042 0220 	orr.w	r2, r2, #32
 800baac:	9241      	str	r2, [sp, #260]	; 0x104
 800baae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bab4:	9241      	str	r2, [sp, #260]	; 0x104
 800bab6:	2210      	movs	r2, #16
 800bab8:	2b6f      	cmp	r3, #111	; 0x6f
 800baba:	9242      	str	r2, [sp, #264]	; 0x108
 800babc:	bf34      	ite	cc
 800babe:	2303      	movcc	r3, #3
 800bac0:	2304      	movcs	r3, #4
 800bac2:	9347      	str	r3, [sp, #284]	; 0x11c
 800bac4:	6863      	ldr	r3, [r4, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	dd41      	ble.n	800bb4e <__ssvfiscanf_r+0x26a>
 800baca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bacc:	0659      	lsls	r1, r3, #25
 800bace:	d404      	bmi.n	800bada <__ssvfiscanf_r+0x1f6>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	781a      	ldrb	r2, [r3, #0]
 800bad4:	5cba      	ldrb	r2, [r7, r2]
 800bad6:	0712      	lsls	r2, r2, #28
 800bad8:	d440      	bmi.n	800bb5c <__ssvfiscanf_r+0x278>
 800bada:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800badc:	2b02      	cmp	r3, #2
 800bade:	dc4f      	bgt.n	800bb80 <__ssvfiscanf_r+0x29c>
 800bae0:	466b      	mov	r3, sp
 800bae2:	4622      	mov	r2, r4
 800bae4:	a941      	add	r1, sp, #260	; 0x104
 800bae6:	4630      	mov	r0, r6
 800bae8:	f000 fa08 	bl	800befc <_scanf_chars>
 800baec:	2801      	cmp	r0, #1
 800baee:	d065      	beq.n	800bbbc <__ssvfiscanf_r+0x2d8>
 800baf0:	2802      	cmp	r0, #2
 800baf2:	f47f af21 	bne.w	800b938 <__ssvfiscanf_r+0x54>
 800baf6:	e7cf      	b.n	800ba98 <__ssvfiscanf_r+0x1b4>
 800baf8:	220a      	movs	r2, #10
 800bafa:	e7dd      	b.n	800bab8 <__ssvfiscanf_r+0x1d4>
 800bafc:	2300      	movs	r3, #0
 800bafe:	9342      	str	r3, [sp, #264]	; 0x108
 800bb00:	2303      	movs	r3, #3
 800bb02:	e7de      	b.n	800bac2 <__ssvfiscanf_r+0x1de>
 800bb04:	2308      	movs	r3, #8
 800bb06:	9342      	str	r3, [sp, #264]	; 0x108
 800bb08:	2304      	movs	r3, #4
 800bb0a:	e7da      	b.n	800bac2 <__ssvfiscanf_r+0x1de>
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f000 fb40 	bl	800c194 <__sccl>
 800bb14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1a:	9341      	str	r3, [sp, #260]	; 0x104
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e7cf      	b.n	800bac2 <__ssvfiscanf_r+0x1de>
 800bb22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb28:	9341      	str	r3, [sp, #260]	; 0x104
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e7c9      	b.n	800bac2 <__ssvfiscanf_r+0x1de>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e7c7      	b.n	800bac2 <__ssvfiscanf_r+0x1de>
 800bb32:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bb34:	06c3      	lsls	r3, r0, #27
 800bb36:	f53f aeff 	bmi.w	800b938 <__ssvfiscanf_r+0x54>
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb3e:	1d19      	adds	r1, r3, #4
 800bb40:	9100      	str	r1, [sp, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	07c0      	lsls	r0, r0, #31
 800bb46:	bf4c      	ite	mi
 800bb48:	801a      	strhmi	r2, [r3, #0]
 800bb4a:	601a      	strpl	r2, [r3, #0]
 800bb4c:	e6f4      	b.n	800b938 <__ssvfiscanf_r+0x54>
 800bb4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb50:	4621      	mov	r1, r4
 800bb52:	4630      	mov	r0, r6
 800bb54:	4798      	blx	r3
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0b7      	beq.n	800baca <__ssvfiscanf_r+0x1e6>
 800bb5a:	e79d      	b.n	800ba98 <__ssvfiscanf_r+0x1b4>
 800bb5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb5e:	3201      	adds	r2, #1
 800bb60:	9245      	str	r2, [sp, #276]	; 0x114
 800bb62:	6862      	ldr	r2, [r4, #4]
 800bb64:	3a01      	subs	r2, #1
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	6062      	str	r2, [r4, #4]
 800bb6a:	dd02      	ble.n	800bb72 <__ssvfiscanf_r+0x28e>
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	e7ae      	b.n	800bad0 <__ssvfiscanf_r+0x1ec>
 800bb72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb74:	4621      	mov	r1, r4
 800bb76:	4630      	mov	r0, r6
 800bb78:	4798      	blx	r3
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d0a8      	beq.n	800bad0 <__ssvfiscanf_r+0x1ec>
 800bb7e:	e78b      	b.n	800ba98 <__ssvfiscanf_r+0x1b4>
 800bb80:	2b04      	cmp	r3, #4
 800bb82:	dc06      	bgt.n	800bb92 <__ssvfiscanf_r+0x2ae>
 800bb84:	466b      	mov	r3, sp
 800bb86:	4622      	mov	r2, r4
 800bb88:	a941      	add	r1, sp, #260	; 0x104
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f000 fa0e 	bl	800bfac <_scanf_i>
 800bb90:	e7ac      	b.n	800baec <__ssvfiscanf_r+0x208>
 800bb92:	4b0f      	ldr	r3, [pc, #60]	; (800bbd0 <__ssvfiscanf_r+0x2ec>)
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f43f aecf 	beq.w	800b938 <__ssvfiscanf_r+0x54>
 800bb9a:	466b      	mov	r3, sp
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	a941      	add	r1, sp, #260	; 0x104
 800bba0:	4630      	mov	r0, r6
 800bba2:	f3af 8000 	nop.w
 800bba6:	e7a1      	b.n	800baec <__ssvfiscanf_r+0x208>
 800bba8:	89a3      	ldrh	r3, [r4, #12]
 800bbaa:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bbae:	bf18      	it	ne
 800bbb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800bbb4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bbbe:	e7f9      	b.n	800bbb4 <__ssvfiscanf_r+0x2d0>
 800bbc0:	0800b831 	.word	0x0800b831
 800bbc4:	0800b8ab 	.word	0x0800b8ab
 800bbc8:	0800d3c5 	.word	0x0800d3c5
 800bbcc:	0800d4cb 	.word	0x0800d4cb
 800bbd0:	00000000 	.word	0x00000000

0800bbd4 <_printf_common>:
 800bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd8:	4616      	mov	r6, r2
 800bbda:	4699      	mov	r9, r3
 800bbdc:	688a      	ldr	r2, [r1, #8]
 800bbde:	690b      	ldr	r3, [r1, #16]
 800bbe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	bfb8      	it	lt
 800bbe8:	4613      	movlt	r3, r2
 800bbea:	6033      	str	r3, [r6, #0]
 800bbec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbf0:	4607      	mov	r7, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	b10a      	cbz	r2, 800bbfa <_printf_common+0x26>
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	6033      	str	r3, [r6, #0]
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	0699      	lsls	r1, r3, #26
 800bbfe:	bf42      	ittt	mi
 800bc00:	6833      	ldrmi	r3, [r6, #0]
 800bc02:	3302      	addmi	r3, #2
 800bc04:	6033      	strmi	r3, [r6, #0]
 800bc06:	6825      	ldr	r5, [r4, #0]
 800bc08:	f015 0506 	ands.w	r5, r5, #6
 800bc0c:	d106      	bne.n	800bc1c <_printf_common+0x48>
 800bc0e:	f104 0a19 	add.w	sl, r4, #25
 800bc12:	68e3      	ldr	r3, [r4, #12]
 800bc14:	6832      	ldr	r2, [r6, #0]
 800bc16:	1a9b      	subs	r3, r3, r2
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	dc26      	bgt.n	800bc6a <_printf_common+0x96>
 800bc1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc20:	1e13      	subs	r3, r2, #0
 800bc22:	6822      	ldr	r2, [r4, #0]
 800bc24:	bf18      	it	ne
 800bc26:	2301      	movne	r3, #1
 800bc28:	0692      	lsls	r2, r2, #26
 800bc2a:	d42b      	bmi.n	800bc84 <_printf_common+0xb0>
 800bc2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc30:	4649      	mov	r1, r9
 800bc32:	4638      	mov	r0, r7
 800bc34:	47c0      	blx	r8
 800bc36:	3001      	adds	r0, #1
 800bc38:	d01e      	beq.n	800bc78 <_printf_common+0xa4>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	68e5      	ldr	r5, [r4, #12]
 800bc3e:	6832      	ldr	r2, [r6, #0]
 800bc40:	f003 0306 	and.w	r3, r3, #6
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	bf08      	it	eq
 800bc48:	1aad      	subeq	r5, r5, r2
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	6922      	ldr	r2, [r4, #16]
 800bc4e:	bf0c      	ite	eq
 800bc50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc54:	2500      	movne	r5, #0
 800bc56:	4293      	cmp	r3, r2
 800bc58:	bfc4      	itt	gt
 800bc5a:	1a9b      	subgt	r3, r3, r2
 800bc5c:	18ed      	addgt	r5, r5, r3
 800bc5e:	2600      	movs	r6, #0
 800bc60:	341a      	adds	r4, #26
 800bc62:	42b5      	cmp	r5, r6
 800bc64:	d11a      	bne.n	800bc9c <_printf_common+0xc8>
 800bc66:	2000      	movs	r0, #0
 800bc68:	e008      	b.n	800bc7c <_printf_common+0xa8>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4652      	mov	r2, sl
 800bc6e:	4649      	mov	r1, r9
 800bc70:	4638      	mov	r0, r7
 800bc72:	47c0      	blx	r8
 800bc74:	3001      	adds	r0, #1
 800bc76:	d103      	bne.n	800bc80 <_printf_common+0xac>
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc80:	3501      	adds	r5, #1
 800bc82:	e7c6      	b.n	800bc12 <_printf_common+0x3e>
 800bc84:	18e1      	adds	r1, r4, r3
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	2030      	movs	r0, #48	; 0x30
 800bc8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc8e:	4422      	add	r2, r4
 800bc90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc98:	3302      	adds	r3, #2
 800bc9a:	e7c7      	b.n	800bc2c <_printf_common+0x58>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	4622      	mov	r2, r4
 800bca0:	4649      	mov	r1, r9
 800bca2:	4638      	mov	r0, r7
 800bca4:	47c0      	blx	r8
 800bca6:	3001      	adds	r0, #1
 800bca8:	d0e6      	beq.n	800bc78 <_printf_common+0xa4>
 800bcaa:	3601      	adds	r6, #1
 800bcac:	e7d9      	b.n	800bc62 <_printf_common+0x8e>
	...

0800bcb0 <_printf_i>:
 800bcb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	4691      	mov	r9, r2
 800bcb8:	7e27      	ldrb	r7, [r4, #24]
 800bcba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bcbc:	2f78      	cmp	r7, #120	; 0x78
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	469a      	mov	sl, r3
 800bcc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcc6:	d807      	bhi.n	800bcd8 <_printf_i+0x28>
 800bcc8:	2f62      	cmp	r7, #98	; 0x62
 800bcca:	d80a      	bhi.n	800bce2 <_printf_i+0x32>
 800bccc:	2f00      	cmp	r7, #0
 800bcce:	f000 80d8 	beq.w	800be82 <_printf_i+0x1d2>
 800bcd2:	2f58      	cmp	r7, #88	; 0x58
 800bcd4:	f000 80a3 	beq.w	800be1e <_printf_i+0x16e>
 800bcd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bcdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bce0:	e03a      	b.n	800bd58 <_printf_i+0xa8>
 800bce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bce6:	2b15      	cmp	r3, #21
 800bce8:	d8f6      	bhi.n	800bcd8 <_printf_i+0x28>
 800bcea:	a001      	add	r0, pc, #4	; (adr r0, 800bcf0 <_printf_i+0x40>)
 800bcec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bcf0:	0800bd49 	.word	0x0800bd49
 800bcf4:	0800bd5d 	.word	0x0800bd5d
 800bcf8:	0800bcd9 	.word	0x0800bcd9
 800bcfc:	0800bcd9 	.word	0x0800bcd9
 800bd00:	0800bcd9 	.word	0x0800bcd9
 800bd04:	0800bcd9 	.word	0x0800bcd9
 800bd08:	0800bd5d 	.word	0x0800bd5d
 800bd0c:	0800bcd9 	.word	0x0800bcd9
 800bd10:	0800bcd9 	.word	0x0800bcd9
 800bd14:	0800bcd9 	.word	0x0800bcd9
 800bd18:	0800bcd9 	.word	0x0800bcd9
 800bd1c:	0800be69 	.word	0x0800be69
 800bd20:	0800bd8d 	.word	0x0800bd8d
 800bd24:	0800be4b 	.word	0x0800be4b
 800bd28:	0800bcd9 	.word	0x0800bcd9
 800bd2c:	0800bcd9 	.word	0x0800bcd9
 800bd30:	0800be8b 	.word	0x0800be8b
 800bd34:	0800bcd9 	.word	0x0800bcd9
 800bd38:	0800bd8d 	.word	0x0800bd8d
 800bd3c:	0800bcd9 	.word	0x0800bcd9
 800bd40:	0800bcd9 	.word	0x0800bcd9
 800bd44:	0800be53 	.word	0x0800be53
 800bd48:	680b      	ldr	r3, [r1, #0]
 800bd4a:	1d1a      	adds	r2, r3, #4
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	600a      	str	r2, [r1, #0]
 800bd50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e0a3      	b.n	800bea4 <_printf_i+0x1f4>
 800bd5c:	6825      	ldr	r5, [r4, #0]
 800bd5e:	6808      	ldr	r0, [r1, #0]
 800bd60:	062e      	lsls	r6, r5, #24
 800bd62:	f100 0304 	add.w	r3, r0, #4
 800bd66:	d50a      	bpl.n	800bd7e <_printf_i+0xce>
 800bd68:	6805      	ldr	r5, [r0, #0]
 800bd6a:	600b      	str	r3, [r1, #0]
 800bd6c:	2d00      	cmp	r5, #0
 800bd6e:	da03      	bge.n	800bd78 <_printf_i+0xc8>
 800bd70:	232d      	movs	r3, #45	; 0x2d
 800bd72:	426d      	negs	r5, r5
 800bd74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd78:	485e      	ldr	r0, [pc, #376]	; (800bef4 <_printf_i+0x244>)
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	e019      	b.n	800bdb2 <_printf_i+0x102>
 800bd7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bd82:	6805      	ldr	r5, [r0, #0]
 800bd84:	600b      	str	r3, [r1, #0]
 800bd86:	bf18      	it	ne
 800bd88:	b22d      	sxthne	r5, r5
 800bd8a:	e7ef      	b.n	800bd6c <_printf_i+0xbc>
 800bd8c:	680b      	ldr	r3, [r1, #0]
 800bd8e:	6825      	ldr	r5, [r4, #0]
 800bd90:	1d18      	adds	r0, r3, #4
 800bd92:	6008      	str	r0, [r1, #0]
 800bd94:	0628      	lsls	r0, r5, #24
 800bd96:	d501      	bpl.n	800bd9c <_printf_i+0xec>
 800bd98:	681d      	ldr	r5, [r3, #0]
 800bd9a:	e002      	b.n	800bda2 <_printf_i+0xf2>
 800bd9c:	0669      	lsls	r1, r5, #25
 800bd9e:	d5fb      	bpl.n	800bd98 <_printf_i+0xe8>
 800bda0:	881d      	ldrh	r5, [r3, #0]
 800bda2:	4854      	ldr	r0, [pc, #336]	; (800bef4 <_printf_i+0x244>)
 800bda4:	2f6f      	cmp	r7, #111	; 0x6f
 800bda6:	bf0c      	ite	eq
 800bda8:	2308      	moveq	r3, #8
 800bdaa:	230a      	movne	r3, #10
 800bdac:	2100      	movs	r1, #0
 800bdae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdb2:	6866      	ldr	r6, [r4, #4]
 800bdb4:	60a6      	str	r6, [r4, #8]
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	bfa2      	ittt	ge
 800bdba:	6821      	ldrge	r1, [r4, #0]
 800bdbc:	f021 0104 	bicge.w	r1, r1, #4
 800bdc0:	6021      	strge	r1, [r4, #0]
 800bdc2:	b90d      	cbnz	r5, 800bdc8 <_printf_i+0x118>
 800bdc4:	2e00      	cmp	r6, #0
 800bdc6:	d04d      	beq.n	800be64 <_printf_i+0x1b4>
 800bdc8:	4616      	mov	r6, r2
 800bdca:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdce:	fb03 5711 	mls	r7, r3, r1, r5
 800bdd2:	5dc7      	ldrb	r7, [r0, r7]
 800bdd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdd8:	462f      	mov	r7, r5
 800bdda:	42bb      	cmp	r3, r7
 800bddc:	460d      	mov	r5, r1
 800bdde:	d9f4      	bls.n	800bdca <_printf_i+0x11a>
 800bde0:	2b08      	cmp	r3, #8
 800bde2:	d10b      	bne.n	800bdfc <_printf_i+0x14c>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	07df      	lsls	r7, r3, #31
 800bde8:	d508      	bpl.n	800bdfc <_printf_i+0x14c>
 800bdea:	6923      	ldr	r3, [r4, #16]
 800bdec:	6861      	ldr	r1, [r4, #4]
 800bdee:	4299      	cmp	r1, r3
 800bdf0:	bfde      	ittt	le
 800bdf2:	2330      	movle	r3, #48	; 0x30
 800bdf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bdf8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bdfc:	1b92      	subs	r2, r2, r6
 800bdfe:	6122      	str	r2, [r4, #16]
 800be00:	f8cd a000 	str.w	sl, [sp]
 800be04:	464b      	mov	r3, r9
 800be06:	aa03      	add	r2, sp, #12
 800be08:	4621      	mov	r1, r4
 800be0a:	4640      	mov	r0, r8
 800be0c:	f7ff fee2 	bl	800bbd4 <_printf_common>
 800be10:	3001      	adds	r0, #1
 800be12:	d14c      	bne.n	800beae <_printf_i+0x1fe>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be18:	b004      	add	sp, #16
 800be1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1e:	4835      	ldr	r0, [pc, #212]	; (800bef4 <_printf_i+0x244>)
 800be20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	680e      	ldr	r6, [r1, #0]
 800be28:	061f      	lsls	r7, r3, #24
 800be2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800be2e:	600e      	str	r6, [r1, #0]
 800be30:	d514      	bpl.n	800be5c <_printf_i+0x1ac>
 800be32:	07d9      	lsls	r1, r3, #31
 800be34:	bf44      	itt	mi
 800be36:	f043 0320 	orrmi.w	r3, r3, #32
 800be3a:	6023      	strmi	r3, [r4, #0]
 800be3c:	b91d      	cbnz	r5, 800be46 <_printf_i+0x196>
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	f023 0320 	bic.w	r3, r3, #32
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	2310      	movs	r3, #16
 800be48:	e7b0      	b.n	800bdac <_printf_i+0xfc>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	f043 0320 	orr.w	r3, r3, #32
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	2378      	movs	r3, #120	; 0x78
 800be54:	4828      	ldr	r0, [pc, #160]	; (800bef8 <_printf_i+0x248>)
 800be56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be5a:	e7e3      	b.n	800be24 <_printf_i+0x174>
 800be5c:	065e      	lsls	r6, r3, #25
 800be5e:	bf48      	it	mi
 800be60:	b2ad      	uxthmi	r5, r5
 800be62:	e7e6      	b.n	800be32 <_printf_i+0x182>
 800be64:	4616      	mov	r6, r2
 800be66:	e7bb      	b.n	800bde0 <_printf_i+0x130>
 800be68:	680b      	ldr	r3, [r1, #0]
 800be6a:	6826      	ldr	r6, [r4, #0]
 800be6c:	6960      	ldr	r0, [r4, #20]
 800be6e:	1d1d      	adds	r5, r3, #4
 800be70:	600d      	str	r5, [r1, #0]
 800be72:	0635      	lsls	r5, r6, #24
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	d501      	bpl.n	800be7c <_printf_i+0x1cc>
 800be78:	6018      	str	r0, [r3, #0]
 800be7a:	e002      	b.n	800be82 <_printf_i+0x1d2>
 800be7c:	0671      	lsls	r1, r6, #25
 800be7e:	d5fb      	bpl.n	800be78 <_printf_i+0x1c8>
 800be80:	8018      	strh	r0, [r3, #0]
 800be82:	2300      	movs	r3, #0
 800be84:	6123      	str	r3, [r4, #16]
 800be86:	4616      	mov	r6, r2
 800be88:	e7ba      	b.n	800be00 <_printf_i+0x150>
 800be8a:	680b      	ldr	r3, [r1, #0]
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	600a      	str	r2, [r1, #0]
 800be90:	681e      	ldr	r6, [r3, #0]
 800be92:	6862      	ldr	r2, [r4, #4]
 800be94:	2100      	movs	r1, #0
 800be96:	4630      	mov	r0, r6
 800be98:	f7f4 f9a2 	bl	80001e0 <memchr>
 800be9c:	b108      	cbz	r0, 800bea2 <_printf_i+0x1f2>
 800be9e:	1b80      	subs	r0, r0, r6
 800bea0:	6060      	str	r0, [r4, #4]
 800bea2:	6863      	ldr	r3, [r4, #4]
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	2300      	movs	r3, #0
 800bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beac:	e7a8      	b.n	800be00 <_printf_i+0x150>
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	4632      	mov	r2, r6
 800beb2:	4649      	mov	r1, r9
 800beb4:	4640      	mov	r0, r8
 800beb6:	47d0      	blx	sl
 800beb8:	3001      	adds	r0, #1
 800beba:	d0ab      	beq.n	800be14 <_printf_i+0x164>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	079b      	lsls	r3, r3, #30
 800bec0:	d413      	bmi.n	800beea <_printf_i+0x23a>
 800bec2:	68e0      	ldr	r0, [r4, #12]
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	4298      	cmp	r0, r3
 800bec8:	bfb8      	it	lt
 800beca:	4618      	movlt	r0, r3
 800becc:	e7a4      	b.n	800be18 <_printf_i+0x168>
 800bece:	2301      	movs	r3, #1
 800bed0:	4632      	mov	r2, r6
 800bed2:	4649      	mov	r1, r9
 800bed4:	4640      	mov	r0, r8
 800bed6:	47d0      	blx	sl
 800bed8:	3001      	adds	r0, #1
 800beda:	d09b      	beq.n	800be14 <_printf_i+0x164>
 800bedc:	3501      	adds	r5, #1
 800bede:	68e3      	ldr	r3, [r4, #12]
 800bee0:	9903      	ldr	r1, [sp, #12]
 800bee2:	1a5b      	subs	r3, r3, r1
 800bee4:	42ab      	cmp	r3, r5
 800bee6:	dcf2      	bgt.n	800bece <_printf_i+0x21e>
 800bee8:	e7eb      	b.n	800bec2 <_printf_i+0x212>
 800beea:	2500      	movs	r5, #0
 800beec:	f104 0619 	add.w	r6, r4, #25
 800bef0:	e7f5      	b.n	800bede <_printf_i+0x22e>
 800bef2:	bf00      	nop
 800bef4:	0800d4d6 	.word	0x0800d4d6
 800bef8:	0800d4e7 	.word	0x0800d4e7

0800befc <_scanf_chars>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	4615      	mov	r5, r2
 800bf02:	688a      	ldr	r2, [r1, #8]
 800bf04:	4680      	mov	r8, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b932      	cbnz	r2, 800bf18 <_scanf_chars+0x1c>
 800bf0a:	698a      	ldr	r2, [r1, #24]
 800bf0c:	2a00      	cmp	r2, #0
 800bf0e:	bf0c      	ite	eq
 800bf10:	2201      	moveq	r2, #1
 800bf12:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800bf16:	608a      	str	r2, [r1, #8]
 800bf18:	6822      	ldr	r2, [r4, #0]
 800bf1a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bfa8 <_scanf_chars+0xac>
 800bf1e:	06d1      	lsls	r1, r2, #27
 800bf20:	bf5f      	itttt	pl
 800bf22:	681a      	ldrpl	r2, [r3, #0]
 800bf24:	1d11      	addpl	r1, r2, #4
 800bf26:	6019      	strpl	r1, [r3, #0]
 800bf28:	6816      	ldrpl	r6, [r2, #0]
 800bf2a:	2700      	movs	r7, #0
 800bf2c:	69a0      	ldr	r0, [r4, #24]
 800bf2e:	b188      	cbz	r0, 800bf54 <_scanf_chars+0x58>
 800bf30:	2801      	cmp	r0, #1
 800bf32:	d107      	bne.n	800bf44 <_scanf_chars+0x48>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	781a      	ldrb	r2, [r3, #0]
 800bf38:	6963      	ldr	r3, [r4, #20]
 800bf3a:	5c9b      	ldrb	r3, [r3, r2]
 800bf3c:	b953      	cbnz	r3, 800bf54 <_scanf_chars+0x58>
 800bf3e:	bb27      	cbnz	r7, 800bf8a <_scanf_chars+0x8e>
 800bf40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf44:	2802      	cmp	r0, #2
 800bf46:	d120      	bne.n	800bf8a <_scanf_chars+0x8e>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bf50:	071b      	lsls	r3, r3, #28
 800bf52:	d41a      	bmi.n	800bf8a <_scanf_chars+0x8e>
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	06da      	lsls	r2, r3, #27
 800bf58:	bf5e      	ittt	pl
 800bf5a:	682b      	ldrpl	r3, [r5, #0]
 800bf5c:	781b      	ldrbpl	r3, [r3, #0]
 800bf5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bf62:	682a      	ldr	r2, [r5, #0]
 800bf64:	686b      	ldr	r3, [r5, #4]
 800bf66:	3201      	adds	r2, #1
 800bf68:	602a      	str	r2, [r5, #0]
 800bf6a:	68a2      	ldr	r2, [r4, #8]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	3a01      	subs	r2, #1
 800bf70:	606b      	str	r3, [r5, #4]
 800bf72:	3701      	adds	r7, #1
 800bf74:	60a2      	str	r2, [r4, #8]
 800bf76:	b142      	cbz	r2, 800bf8a <_scanf_chars+0x8e>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dcd7      	bgt.n	800bf2c <_scanf_chars+0x30>
 800bf7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf80:	4629      	mov	r1, r5
 800bf82:	4640      	mov	r0, r8
 800bf84:	4798      	blx	r3
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d0d0      	beq.n	800bf2c <_scanf_chars+0x30>
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	f013 0310 	ands.w	r3, r3, #16
 800bf90:	d105      	bne.n	800bf9e <_scanf_chars+0xa2>
 800bf92:	68e2      	ldr	r2, [r4, #12]
 800bf94:	3201      	adds	r2, #1
 800bf96:	60e2      	str	r2, [r4, #12]
 800bf98:	69a2      	ldr	r2, [r4, #24]
 800bf9a:	b102      	cbz	r2, 800bf9e <_scanf_chars+0xa2>
 800bf9c:	7033      	strb	r3, [r6, #0]
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	441f      	add	r7, r3
 800bfa2:	6127      	str	r7, [r4, #16]
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	e7cb      	b.n	800bf40 <_scanf_chars+0x44>
 800bfa8:	0800d3c5 	.word	0x0800d3c5

0800bfac <_scanf_i>:
 800bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	4698      	mov	r8, r3
 800bfb2:	4b74      	ldr	r3, [pc, #464]	; (800c184 <_scanf_i+0x1d8>)
 800bfb4:	460c      	mov	r4, r1
 800bfb6:	4682      	mov	sl, r0
 800bfb8:	4616      	mov	r6, r2
 800bfba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bfc6:	4b70      	ldr	r3, [pc, #448]	; (800c188 <_scanf_i+0x1dc>)
 800bfc8:	69a1      	ldr	r1, [r4, #24]
 800bfca:	4a70      	ldr	r2, [pc, #448]	; (800c18c <_scanf_i+0x1e0>)
 800bfcc:	2903      	cmp	r1, #3
 800bfce:	bf18      	it	ne
 800bfd0:	461a      	movne	r2, r3
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	9201      	str	r2, [sp, #4]
 800bfd6:	1e5a      	subs	r2, r3, #1
 800bfd8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bfdc:	bf88      	it	hi
 800bfde:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bfe2:	4627      	mov	r7, r4
 800bfe4:	bf82      	ittt	hi
 800bfe6:	eb03 0905 	addhi.w	r9, r3, r5
 800bfea:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bfee:	60a3      	strhi	r3, [r4, #8]
 800bff0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bff4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bff8:	bf98      	it	ls
 800bffa:	f04f 0900 	movls.w	r9, #0
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	463d      	mov	r5, r7
 800c002:	f04f 0b00 	mov.w	fp, #0
 800c006:	6831      	ldr	r1, [r6, #0]
 800c008:	ab03      	add	r3, sp, #12
 800c00a:	7809      	ldrb	r1, [r1, #0]
 800c00c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c010:	2202      	movs	r2, #2
 800c012:	f7f4 f8e5 	bl	80001e0 <memchr>
 800c016:	b328      	cbz	r0, 800c064 <_scanf_i+0xb8>
 800c018:	f1bb 0f01 	cmp.w	fp, #1
 800c01c:	d159      	bne.n	800c0d2 <_scanf_i+0x126>
 800c01e:	6862      	ldr	r2, [r4, #4]
 800c020:	b92a      	cbnz	r2, 800c02e <_scanf_i+0x82>
 800c022:	6822      	ldr	r2, [r4, #0]
 800c024:	2308      	movs	r3, #8
 800c026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c02a:	6063      	str	r3, [r4, #4]
 800c02c:	6022      	str	r2, [r4, #0]
 800c02e:	6822      	ldr	r2, [r4, #0]
 800c030:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c034:	6022      	str	r2, [r4, #0]
 800c036:	68a2      	ldr	r2, [r4, #8]
 800c038:	1e51      	subs	r1, r2, #1
 800c03a:	60a1      	str	r1, [r4, #8]
 800c03c:	b192      	cbz	r2, 800c064 <_scanf_i+0xb8>
 800c03e:	6832      	ldr	r2, [r6, #0]
 800c040:	1c51      	adds	r1, r2, #1
 800c042:	6031      	str	r1, [r6, #0]
 800c044:	7812      	ldrb	r2, [r2, #0]
 800c046:	f805 2b01 	strb.w	r2, [r5], #1
 800c04a:	6872      	ldr	r2, [r6, #4]
 800c04c:	3a01      	subs	r2, #1
 800c04e:	2a00      	cmp	r2, #0
 800c050:	6072      	str	r2, [r6, #4]
 800c052:	dc07      	bgt.n	800c064 <_scanf_i+0xb8>
 800c054:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c058:	4631      	mov	r1, r6
 800c05a:	4650      	mov	r0, sl
 800c05c:	4790      	blx	r2
 800c05e:	2800      	cmp	r0, #0
 800c060:	f040 8085 	bne.w	800c16e <_scanf_i+0x1c2>
 800c064:	f10b 0b01 	add.w	fp, fp, #1
 800c068:	f1bb 0f03 	cmp.w	fp, #3
 800c06c:	d1cb      	bne.n	800c006 <_scanf_i+0x5a>
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	b90b      	cbnz	r3, 800c076 <_scanf_i+0xca>
 800c072:	230a      	movs	r3, #10
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	6863      	ldr	r3, [r4, #4]
 800c078:	4945      	ldr	r1, [pc, #276]	; (800c190 <_scanf_i+0x1e4>)
 800c07a:	6960      	ldr	r0, [r4, #20]
 800c07c:	1ac9      	subs	r1, r1, r3
 800c07e:	f000 f889 	bl	800c194 <__sccl>
 800c082:	f04f 0b00 	mov.w	fp, #0
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	6822      	ldr	r2, [r4, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d03d      	beq.n	800c10a <_scanf_i+0x15e>
 800c08e:	6831      	ldr	r1, [r6, #0]
 800c090:	6960      	ldr	r0, [r4, #20]
 800c092:	f891 c000 	ldrb.w	ip, [r1]
 800c096:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d035      	beq.n	800c10a <_scanf_i+0x15e>
 800c09e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c0a2:	d124      	bne.n	800c0ee <_scanf_i+0x142>
 800c0a4:	0510      	lsls	r0, r2, #20
 800c0a6:	d522      	bpl.n	800c0ee <_scanf_i+0x142>
 800c0a8:	f10b 0b01 	add.w	fp, fp, #1
 800c0ac:	f1b9 0f00 	cmp.w	r9, #0
 800c0b0:	d003      	beq.n	800c0ba <_scanf_i+0x10e>
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	6873      	ldr	r3, [r6, #4]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	6073      	str	r3, [r6, #4]
 800c0c2:	dd1b      	ble.n	800c0fc <_scanf_i+0x150>
 800c0c4:	6833      	ldr	r3, [r6, #0]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	6033      	str	r3, [r6, #0]
 800c0ca:	68a3      	ldr	r3, [r4, #8]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	60a3      	str	r3, [r4, #8]
 800c0d0:	e7d9      	b.n	800c086 <_scanf_i+0xda>
 800c0d2:	f1bb 0f02 	cmp.w	fp, #2
 800c0d6:	d1ae      	bne.n	800c036 <_scanf_i+0x8a>
 800c0d8:	6822      	ldr	r2, [r4, #0]
 800c0da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c0de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c0e2:	d1bf      	bne.n	800c064 <_scanf_i+0xb8>
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	6063      	str	r3, [r4, #4]
 800c0e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0ec:	e7a2      	b.n	800c034 <_scanf_i+0x88>
 800c0ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c0f2:	6022      	str	r2, [r4, #0]
 800c0f4:	780b      	ldrb	r3, [r1, #0]
 800c0f6:	f805 3b01 	strb.w	r3, [r5], #1
 800c0fa:	e7de      	b.n	800c0ba <_scanf_i+0x10e>
 800c0fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c100:	4631      	mov	r1, r6
 800c102:	4650      	mov	r0, sl
 800c104:	4798      	blx	r3
 800c106:	2800      	cmp	r0, #0
 800c108:	d0df      	beq.n	800c0ca <_scanf_i+0x11e>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	05d9      	lsls	r1, r3, #23
 800c10e:	d50d      	bpl.n	800c12c <_scanf_i+0x180>
 800c110:	42bd      	cmp	r5, r7
 800c112:	d909      	bls.n	800c128 <_scanf_i+0x17c>
 800c114:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c118:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c11c:	4632      	mov	r2, r6
 800c11e:	4650      	mov	r0, sl
 800c120:	4798      	blx	r3
 800c122:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c126:	464d      	mov	r5, r9
 800c128:	42bd      	cmp	r5, r7
 800c12a:	d028      	beq.n	800c17e <_scanf_i+0x1d2>
 800c12c:	6822      	ldr	r2, [r4, #0]
 800c12e:	f012 0210 	ands.w	r2, r2, #16
 800c132:	d113      	bne.n	800c15c <_scanf_i+0x1b0>
 800c134:	702a      	strb	r2, [r5, #0]
 800c136:	6863      	ldr	r3, [r4, #4]
 800c138:	9e01      	ldr	r6, [sp, #4]
 800c13a:	4639      	mov	r1, r7
 800c13c:	4650      	mov	r0, sl
 800c13e:	47b0      	blx	r6
 800c140:	f8d8 3000 	ldr.w	r3, [r8]
 800c144:	6821      	ldr	r1, [r4, #0]
 800c146:	1d1a      	adds	r2, r3, #4
 800c148:	f8c8 2000 	str.w	r2, [r8]
 800c14c:	f011 0f20 	tst.w	r1, #32
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	d00f      	beq.n	800c174 <_scanf_i+0x1c8>
 800c154:	6018      	str	r0, [r3, #0]
 800c156:	68e3      	ldr	r3, [r4, #12]
 800c158:	3301      	adds	r3, #1
 800c15a:	60e3      	str	r3, [r4, #12]
 800c15c:	1bed      	subs	r5, r5, r7
 800c15e:	44ab      	add	fp, r5
 800c160:	6925      	ldr	r5, [r4, #16]
 800c162:	445d      	add	r5, fp
 800c164:	6125      	str	r5, [r4, #16]
 800c166:	2000      	movs	r0, #0
 800c168:	b007      	add	sp, #28
 800c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16e:	f04f 0b00 	mov.w	fp, #0
 800c172:	e7ca      	b.n	800c10a <_scanf_i+0x15e>
 800c174:	07ca      	lsls	r2, r1, #31
 800c176:	bf4c      	ite	mi
 800c178:	8018      	strhmi	r0, [r3, #0]
 800c17a:	6018      	strpl	r0, [r3, #0]
 800c17c:	e7eb      	b.n	800c156 <_scanf_i+0x1aa>
 800c17e:	2001      	movs	r0, #1
 800c180:	e7f2      	b.n	800c168 <_scanf_i+0x1bc>
 800c182:	bf00      	nop
 800c184:	0800c640 	.word	0x0800c640
 800c188:	0800c40d 	.word	0x0800c40d
 800c18c:	0800c311 	.word	0x0800c311
 800c190:	0800d511 	.word	0x0800d511

0800c194 <__sccl>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	780b      	ldrb	r3, [r1, #0]
 800c198:	4604      	mov	r4, r0
 800c19a:	2b5e      	cmp	r3, #94	; 0x5e
 800c19c:	bf0b      	itete	eq
 800c19e:	784b      	ldrbeq	r3, [r1, #1]
 800c1a0:	1c48      	addne	r0, r1, #1
 800c1a2:	1c88      	addeq	r0, r1, #2
 800c1a4:	2200      	movne	r2, #0
 800c1a6:	bf08      	it	eq
 800c1a8:	2201      	moveq	r2, #1
 800c1aa:	1e61      	subs	r1, r4, #1
 800c1ac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c1b0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c1b4:	42a9      	cmp	r1, r5
 800c1b6:	d1fb      	bne.n	800c1b0 <__sccl+0x1c>
 800c1b8:	b90b      	cbnz	r3, 800c1be <__sccl+0x2a>
 800c1ba:	3801      	subs	r0, #1
 800c1bc:	bd70      	pop	{r4, r5, r6, pc}
 800c1be:	f082 0101 	eor.w	r1, r2, #1
 800c1c2:	54e1      	strb	r1, [r4, r3]
 800c1c4:	1c42      	adds	r2, r0, #1
 800c1c6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c1ca:	2d2d      	cmp	r5, #45	; 0x2d
 800c1cc:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	d006      	beq.n	800c1e2 <__sccl+0x4e>
 800c1d4:	2d5d      	cmp	r5, #93	; 0x5d
 800c1d6:	d0f1      	beq.n	800c1bc <__sccl+0x28>
 800c1d8:	b90d      	cbnz	r5, 800c1de <__sccl+0x4a>
 800c1da:	4630      	mov	r0, r6
 800c1dc:	e7ee      	b.n	800c1bc <__sccl+0x28>
 800c1de:	462b      	mov	r3, r5
 800c1e0:	e7ef      	b.n	800c1c2 <__sccl+0x2e>
 800c1e2:	7816      	ldrb	r6, [r2, #0]
 800c1e4:	2e5d      	cmp	r6, #93	; 0x5d
 800c1e6:	d0fa      	beq.n	800c1de <__sccl+0x4a>
 800c1e8:	42b3      	cmp	r3, r6
 800c1ea:	dcf8      	bgt.n	800c1de <__sccl+0x4a>
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	4286      	cmp	r6, r0
 800c1f2:	5421      	strb	r1, [r4, r0]
 800c1f4:	dcfb      	bgt.n	800c1ee <__sccl+0x5a>
 800c1f6:	43d8      	mvns	r0, r3
 800c1f8:	4430      	add	r0, r6
 800c1fa:	1c5d      	adds	r5, r3, #1
 800c1fc:	42b3      	cmp	r3, r6
 800c1fe:	bfa8      	it	ge
 800c200:	2000      	movge	r0, #0
 800c202:	182b      	adds	r3, r5, r0
 800c204:	3202      	adds	r2, #2
 800c206:	e7de      	b.n	800c1c6 <__sccl+0x32>

0800c208 <_strtol_l.isra.0>:
 800c208:	2b01      	cmp	r3, #1
 800c20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20e:	d001      	beq.n	800c214 <_strtol_l.isra.0+0xc>
 800c210:	2b24      	cmp	r3, #36	; 0x24
 800c212:	d906      	bls.n	800c222 <_strtol_l.isra.0+0x1a>
 800c214:	f7ff f81e 	bl	800b254 <__errno>
 800c218:	2316      	movs	r3, #22
 800c21a:	6003      	str	r3, [r0, #0]
 800c21c:	2000      	movs	r0, #0
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c222:	4f3a      	ldr	r7, [pc, #232]	; (800c30c <_strtol_l.isra.0+0x104>)
 800c224:	468e      	mov	lr, r1
 800c226:	4676      	mov	r6, lr
 800c228:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c22c:	5de5      	ldrb	r5, [r4, r7]
 800c22e:	f015 0508 	ands.w	r5, r5, #8
 800c232:	d1f8      	bne.n	800c226 <_strtol_l.isra.0+0x1e>
 800c234:	2c2d      	cmp	r4, #45	; 0x2d
 800c236:	d134      	bne.n	800c2a2 <_strtol_l.isra.0+0x9a>
 800c238:	f89e 4000 	ldrb.w	r4, [lr]
 800c23c:	f04f 0801 	mov.w	r8, #1
 800c240:	f106 0e02 	add.w	lr, r6, #2
 800c244:	2b00      	cmp	r3, #0
 800c246:	d05c      	beq.n	800c302 <_strtol_l.isra.0+0xfa>
 800c248:	2b10      	cmp	r3, #16
 800c24a:	d10c      	bne.n	800c266 <_strtol_l.isra.0+0x5e>
 800c24c:	2c30      	cmp	r4, #48	; 0x30
 800c24e:	d10a      	bne.n	800c266 <_strtol_l.isra.0+0x5e>
 800c250:	f89e 4000 	ldrb.w	r4, [lr]
 800c254:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c258:	2c58      	cmp	r4, #88	; 0x58
 800c25a:	d14d      	bne.n	800c2f8 <_strtol_l.isra.0+0xf0>
 800c25c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c260:	2310      	movs	r3, #16
 800c262:	f10e 0e02 	add.w	lr, lr, #2
 800c266:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c26a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c26e:	2600      	movs	r6, #0
 800c270:	fbbc f9f3 	udiv	r9, ip, r3
 800c274:	4635      	mov	r5, r6
 800c276:	fb03 ca19 	mls	sl, r3, r9, ip
 800c27a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c27e:	2f09      	cmp	r7, #9
 800c280:	d818      	bhi.n	800c2b4 <_strtol_l.isra.0+0xac>
 800c282:	463c      	mov	r4, r7
 800c284:	42a3      	cmp	r3, r4
 800c286:	dd24      	ble.n	800c2d2 <_strtol_l.isra.0+0xca>
 800c288:	2e00      	cmp	r6, #0
 800c28a:	db1f      	blt.n	800c2cc <_strtol_l.isra.0+0xc4>
 800c28c:	45a9      	cmp	r9, r5
 800c28e:	d31d      	bcc.n	800c2cc <_strtol_l.isra.0+0xc4>
 800c290:	d101      	bne.n	800c296 <_strtol_l.isra.0+0x8e>
 800c292:	45a2      	cmp	sl, r4
 800c294:	db1a      	blt.n	800c2cc <_strtol_l.isra.0+0xc4>
 800c296:	fb05 4503 	mla	r5, r5, r3, r4
 800c29a:	2601      	movs	r6, #1
 800c29c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c2a0:	e7eb      	b.n	800c27a <_strtol_l.isra.0+0x72>
 800c2a2:	2c2b      	cmp	r4, #43	; 0x2b
 800c2a4:	bf08      	it	eq
 800c2a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c2aa:	46a8      	mov	r8, r5
 800c2ac:	bf08      	it	eq
 800c2ae:	f106 0e02 	addeq.w	lr, r6, #2
 800c2b2:	e7c7      	b.n	800c244 <_strtol_l.isra.0+0x3c>
 800c2b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c2b8:	2f19      	cmp	r7, #25
 800c2ba:	d801      	bhi.n	800c2c0 <_strtol_l.isra.0+0xb8>
 800c2bc:	3c37      	subs	r4, #55	; 0x37
 800c2be:	e7e1      	b.n	800c284 <_strtol_l.isra.0+0x7c>
 800c2c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c2c4:	2f19      	cmp	r7, #25
 800c2c6:	d804      	bhi.n	800c2d2 <_strtol_l.isra.0+0xca>
 800c2c8:	3c57      	subs	r4, #87	; 0x57
 800c2ca:	e7db      	b.n	800c284 <_strtol_l.isra.0+0x7c>
 800c2cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c2d0:	e7e4      	b.n	800c29c <_strtol_l.isra.0+0x94>
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	da05      	bge.n	800c2e2 <_strtol_l.isra.0+0xda>
 800c2d6:	2322      	movs	r3, #34	; 0x22
 800c2d8:	6003      	str	r3, [r0, #0]
 800c2da:	4665      	mov	r5, ip
 800c2dc:	b942      	cbnz	r2, 800c2f0 <_strtol_l.isra.0+0xe8>
 800c2de:	4628      	mov	r0, r5
 800c2e0:	e79d      	b.n	800c21e <_strtol_l.isra.0+0x16>
 800c2e2:	f1b8 0f00 	cmp.w	r8, #0
 800c2e6:	d000      	beq.n	800c2ea <_strtol_l.isra.0+0xe2>
 800c2e8:	426d      	negs	r5, r5
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	d0f7      	beq.n	800c2de <_strtol_l.isra.0+0xd6>
 800c2ee:	b10e      	cbz	r6, 800c2f4 <_strtol_l.isra.0+0xec>
 800c2f0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800c2f4:	6011      	str	r1, [r2, #0]
 800c2f6:	e7f2      	b.n	800c2de <_strtol_l.isra.0+0xd6>
 800c2f8:	2430      	movs	r4, #48	; 0x30
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1b3      	bne.n	800c266 <_strtol_l.isra.0+0x5e>
 800c2fe:	2308      	movs	r3, #8
 800c300:	e7b1      	b.n	800c266 <_strtol_l.isra.0+0x5e>
 800c302:	2c30      	cmp	r4, #48	; 0x30
 800c304:	d0a4      	beq.n	800c250 <_strtol_l.isra.0+0x48>
 800c306:	230a      	movs	r3, #10
 800c308:	e7ad      	b.n	800c266 <_strtol_l.isra.0+0x5e>
 800c30a:	bf00      	nop
 800c30c:	0800d3c5 	.word	0x0800d3c5

0800c310 <_strtol_r>:
 800c310:	f7ff bf7a 	b.w	800c208 <_strtol_l.isra.0>

0800c314 <_strtoul_l.isra.0>:
 800c314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c318:	4e3b      	ldr	r6, [pc, #236]	; (800c408 <_strtoul_l.isra.0+0xf4>)
 800c31a:	4686      	mov	lr, r0
 800c31c:	468c      	mov	ip, r1
 800c31e:	4660      	mov	r0, ip
 800c320:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c324:	5da5      	ldrb	r5, [r4, r6]
 800c326:	f015 0508 	ands.w	r5, r5, #8
 800c32a:	d1f8      	bne.n	800c31e <_strtoul_l.isra.0+0xa>
 800c32c:	2c2d      	cmp	r4, #45	; 0x2d
 800c32e:	d134      	bne.n	800c39a <_strtoul_l.isra.0+0x86>
 800c330:	f89c 4000 	ldrb.w	r4, [ip]
 800c334:	f04f 0801 	mov.w	r8, #1
 800c338:	f100 0c02 	add.w	ip, r0, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d05e      	beq.n	800c3fe <_strtoul_l.isra.0+0xea>
 800c340:	2b10      	cmp	r3, #16
 800c342:	d10c      	bne.n	800c35e <_strtoul_l.isra.0+0x4a>
 800c344:	2c30      	cmp	r4, #48	; 0x30
 800c346:	d10a      	bne.n	800c35e <_strtoul_l.isra.0+0x4a>
 800c348:	f89c 0000 	ldrb.w	r0, [ip]
 800c34c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c350:	2858      	cmp	r0, #88	; 0x58
 800c352:	d14f      	bne.n	800c3f4 <_strtoul_l.isra.0+0xe0>
 800c354:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c358:	2310      	movs	r3, #16
 800c35a:	f10c 0c02 	add.w	ip, ip, #2
 800c35e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c362:	2500      	movs	r5, #0
 800c364:	fbb7 f7f3 	udiv	r7, r7, r3
 800c368:	fb03 f907 	mul.w	r9, r3, r7
 800c36c:	ea6f 0909 	mvn.w	r9, r9
 800c370:	4628      	mov	r0, r5
 800c372:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c376:	2e09      	cmp	r6, #9
 800c378:	d818      	bhi.n	800c3ac <_strtoul_l.isra.0+0x98>
 800c37a:	4634      	mov	r4, r6
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	dd24      	ble.n	800c3ca <_strtoul_l.isra.0+0xb6>
 800c380:	2d00      	cmp	r5, #0
 800c382:	db1f      	blt.n	800c3c4 <_strtoul_l.isra.0+0xb0>
 800c384:	4287      	cmp	r7, r0
 800c386:	d31d      	bcc.n	800c3c4 <_strtoul_l.isra.0+0xb0>
 800c388:	d101      	bne.n	800c38e <_strtoul_l.isra.0+0x7a>
 800c38a:	45a1      	cmp	r9, r4
 800c38c:	db1a      	blt.n	800c3c4 <_strtoul_l.isra.0+0xb0>
 800c38e:	fb00 4003 	mla	r0, r0, r3, r4
 800c392:	2501      	movs	r5, #1
 800c394:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c398:	e7eb      	b.n	800c372 <_strtoul_l.isra.0+0x5e>
 800c39a:	2c2b      	cmp	r4, #43	; 0x2b
 800c39c:	bf08      	it	eq
 800c39e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c3a2:	46a8      	mov	r8, r5
 800c3a4:	bf08      	it	eq
 800c3a6:	f100 0c02 	addeq.w	ip, r0, #2
 800c3aa:	e7c7      	b.n	800c33c <_strtoul_l.isra.0+0x28>
 800c3ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c3b0:	2e19      	cmp	r6, #25
 800c3b2:	d801      	bhi.n	800c3b8 <_strtoul_l.isra.0+0xa4>
 800c3b4:	3c37      	subs	r4, #55	; 0x37
 800c3b6:	e7e1      	b.n	800c37c <_strtoul_l.isra.0+0x68>
 800c3b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c3bc:	2e19      	cmp	r6, #25
 800c3be:	d804      	bhi.n	800c3ca <_strtoul_l.isra.0+0xb6>
 800c3c0:	3c57      	subs	r4, #87	; 0x57
 800c3c2:	e7db      	b.n	800c37c <_strtoul_l.isra.0+0x68>
 800c3c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c3c8:	e7e4      	b.n	800c394 <_strtoul_l.isra.0+0x80>
 800c3ca:	2d00      	cmp	r5, #0
 800c3cc:	da07      	bge.n	800c3de <_strtoul_l.isra.0+0xca>
 800c3ce:	2322      	movs	r3, #34	; 0x22
 800c3d0:	f8ce 3000 	str.w	r3, [lr]
 800c3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3d8:	b942      	cbnz	r2, 800c3ec <_strtoul_l.isra.0+0xd8>
 800c3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3de:	f1b8 0f00 	cmp.w	r8, #0
 800c3e2:	d000      	beq.n	800c3e6 <_strtoul_l.isra.0+0xd2>
 800c3e4:	4240      	negs	r0, r0
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	d0f7      	beq.n	800c3da <_strtoul_l.isra.0+0xc6>
 800c3ea:	b10d      	cbz	r5, 800c3f0 <_strtoul_l.isra.0+0xdc>
 800c3ec:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800c3f0:	6011      	str	r1, [r2, #0]
 800c3f2:	e7f2      	b.n	800c3da <_strtoul_l.isra.0+0xc6>
 800c3f4:	2430      	movs	r4, #48	; 0x30
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1b1      	bne.n	800c35e <_strtoul_l.isra.0+0x4a>
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	e7af      	b.n	800c35e <_strtoul_l.isra.0+0x4a>
 800c3fe:	2c30      	cmp	r4, #48	; 0x30
 800c400:	d0a2      	beq.n	800c348 <_strtoul_l.isra.0+0x34>
 800c402:	230a      	movs	r3, #10
 800c404:	e7ab      	b.n	800c35e <_strtoul_l.isra.0+0x4a>
 800c406:	bf00      	nop
 800c408:	0800d3c5 	.word	0x0800d3c5

0800c40c <_strtoul_r>:
 800c40c:	f7ff bf82 	b.w	800c314 <_strtoul_l.isra.0>

0800c410 <__submore>:
 800c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	460c      	mov	r4, r1
 800c416:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c41c:	4299      	cmp	r1, r3
 800c41e:	d11d      	bne.n	800c45c <__submore+0x4c>
 800c420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c424:	f7fe ffb6 	bl	800b394 <_malloc_r>
 800c428:	b918      	cbnz	r0, 800c432 <__submore+0x22>
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c436:	63a3      	str	r3, [r4, #56]	; 0x38
 800c438:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c43c:	6360      	str	r0, [r4, #52]	; 0x34
 800c43e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c442:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c446:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c44a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c44e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c452:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c456:	6020      	str	r0, [r4, #0]
 800c458:	2000      	movs	r0, #0
 800c45a:	e7e8      	b.n	800c42e <__submore+0x1e>
 800c45c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c45e:	0077      	lsls	r7, r6, #1
 800c460:	463a      	mov	r2, r7
 800c462:	f7ff f863 	bl	800b52c <_realloc_r>
 800c466:	4605      	mov	r5, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	d0de      	beq.n	800c42a <__submore+0x1a>
 800c46c:	eb00 0806 	add.w	r8, r0, r6
 800c470:	4601      	mov	r1, r0
 800c472:	4632      	mov	r2, r6
 800c474:	4640      	mov	r0, r8
 800c476:	f7fe ff27 	bl	800b2c8 <memcpy>
 800c47a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c47e:	f8c4 8000 	str.w	r8, [r4]
 800c482:	e7e9      	b.n	800c458 <__submore+0x48>

0800c484 <__retarget_lock_acquire_recursive>:
 800c484:	4770      	bx	lr

0800c486 <__retarget_lock_release_recursive>:
 800c486:	4770      	bx	lr

0800c488 <memmove>:
 800c488:	4288      	cmp	r0, r1
 800c48a:	b510      	push	{r4, lr}
 800c48c:	eb01 0402 	add.w	r4, r1, r2
 800c490:	d902      	bls.n	800c498 <memmove+0x10>
 800c492:	4284      	cmp	r4, r0
 800c494:	4623      	mov	r3, r4
 800c496:	d807      	bhi.n	800c4a8 <memmove+0x20>
 800c498:	1e43      	subs	r3, r0, #1
 800c49a:	42a1      	cmp	r1, r4
 800c49c:	d008      	beq.n	800c4b0 <memmove+0x28>
 800c49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4a6:	e7f8      	b.n	800c49a <memmove+0x12>
 800c4a8:	4402      	add	r2, r0
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	428a      	cmp	r2, r1
 800c4ae:	d100      	bne.n	800c4b2 <memmove+0x2a>
 800c4b0:	bd10      	pop	{r4, pc}
 800c4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4ba:	e7f7      	b.n	800c4ac <memmove+0x24>

0800c4bc <_malloc_usable_size_r>:
 800c4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c0:	1f18      	subs	r0, r3, #4
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	bfbc      	itt	lt
 800c4c6:	580b      	ldrlt	r3, [r1, r0]
 800c4c8:	18c0      	addlt	r0, r0, r3
 800c4ca:	4770      	bx	lr

0800c4cc <_init>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	bf00      	nop
 800c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d2:	bc08      	pop	{r3}
 800c4d4:	469e      	mov	lr, r3
 800c4d6:	4770      	bx	lr

0800c4d8 <_fini>:
 800c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4da:	bf00      	nop
 800c4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4de:	bc08      	pop	{r3}
 800c4e0:	469e      	mov	lr, r3
 800c4e2:	4770      	bx	lr
