
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008850  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b4  080099b4  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099bc  080099bc  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  080099c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020194  2**0
                  CONTENTS
 10 .bss          000020b0  20000194  20000194  00020194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002244  20002244  00020194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee9d  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c67  00000000  00000000  0003f061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00042cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00043c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024742  00000000  00000000  00044a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a1c  00000000  00000000  0006916a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c73f8  00000000  00000000  0007eb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145f7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003efc  00000000  00000000  00145fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000194 	.word	0x20000194
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089c0 	.word	0x080089c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000198 	.word	0x20000198
 80001c4:	080089c0 	.word	0x080089c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <int_emissivity_to_char_emissivity>:
 * @param emissivity Emissivity value (max 65535)
 * @param arr Pointer to output array
 * @return void
 */
void int_emissivity_to_char_emissivity(int emissivity, char* arr)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	emissivity *= 10000;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	607b      	str	r3, [r7, #4]
	arr[6] = '\0';
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	3306      	adds	r3, #6
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
	arr[5] = emissivity % 10 + '0';
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 80004e2:	fb83 1302 	smull	r1, r3, r3, r2
 80004e6:	1099      	asrs	r1, r3, #2
 80004e8:	17d3      	asrs	r3, r2, #31
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	440b      	add	r3, r1
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	1ad1      	subs	r1, r2, r3
 80004f6:	b2ca      	uxtb	r2, r1
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	3305      	adds	r3, #5
 80004fc:	3230      	adds	r2, #48	; 0x30
 80004fe:	b2d2      	uxtb	r2, r2
 8000500:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a37      	ldr	r2, [pc, #220]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1092      	asrs	r2, r2, #2
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	607b      	str	r3, [r7, #4]
	arr[4] = emissivity % 10 + '0';
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 8000516:	fb83 1302 	smull	r1, r3, r3, r2
 800051a:	1099      	asrs	r1, r3, #2
 800051c:	17d3      	asrs	r3, r2, #31
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	460b      	mov	r3, r1
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	440b      	add	r3, r1
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	1ad1      	subs	r1, r2, r3
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	3304      	adds	r3, #4
 8000530:	3230      	adds	r2, #48	; 0x30
 8000532:	b2d2      	uxtb	r2, r2
 8000534:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800053a:	fb82 1203 	smull	r1, r2, r2, r3
 800053e:	1092      	asrs	r2, r2, #2
 8000540:	17db      	asrs	r3, r3, #31
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	607b      	str	r3, [r7, #4]
	arr[3] = emissivity % 10 + '0';
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800054a:	fb83 1302 	smull	r1, r3, r3, r2
 800054e:	1099      	asrs	r1, r3, #2
 8000550:	17d3      	asrs	r3, r2, #31
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	460b      	mov	r3, r1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	440b      	add	r3, r1
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	1ad1      	subs	r1, r2, r3
 800055e:	b2ca      	uxtb	r2, r1
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	3303      	adds	r3, #3
 8000564:	3230      	adds	r2, #48	; 0x30
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800056e:	fb82 1203 	smull	r1, r2, r2, r3
 8000572:	1092      	asrs	r2, r2, #2
 8000574:	17db      	asrs	r3, r3, #31
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	607b      	str	r3, [r7, #4]
	arr[2] = emissivity % 10 + '0';
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 800057e:	fb83 1302 	smull	r1, r3, r3, r2
 8000582:	1099      	asrs	r1, r3, #2
 8000584:	17d3      	asrs	r3, r2, #31
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	460b      	mov	r3, r1
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1ad1      	subs	r1, r2, r3
 8000592:	b2ca      	uxtb	r2, r1
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	3302      	adds	r3, #2
 8000598:	3230      	adds	r2, #48	; 0x30
 800059a:	b2d2      	uxtb	r2, r2
 800059c:	701a      	strb	r2, [r3, #0]
	emissivity /= 10;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 80005a2:	fb82 1203 	smull	r1, r2, r2, r3
 80005a6:	1092      	asrs	r2, r2, #2
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	607b      	str	r3, [r7, #4]
	arr[1] = ',';
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	222c      	movs	r2, #44	; 0x2c
 80005b4:	701a      	strb	r2, [r3, #0]
	arr[0] = emissivity % 10 + '0';
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <int_emissivity_to_char_emissivity+0x124>)
 80005ba:	fb83 1302 	smull	r1, r3, r3, r2
 80005be:	1099      	asrs	r1, r3, #2
 80005c0:	17d3      	asrs	r3, r2, #31
 80005c2:	1ac9      	subs	r1, r1, r3
 80005c4:	460b      	mov	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	1ad1      	subs	r1, r2, r3
 80005ce:	b2cb      	uxtb	r3, r1
 80005d0:	3330      	adds	r3, #48	; 0x30
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	66666667 	.word	0x66666667

080005e8 <int_address_to_char_address>:
 *
 * @param address Address to convert
 * @param arr Pointer to output char array
 */
void int_address_to_char_address(int address, char* arr)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
	arr[5] = '\0';
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	3305      	adds	r3, #5
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	arr[4] = address % 10 + '0';
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <int_address_to_char_address+0x110>)
 80005fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000602:	1099      	asrs	r1, r3, #2
 8000604:	17d3      	asrs	r3, r2, #31
 8000606:	1ac9      	subs	r1, r1, r3
 8000608:	460b      	mov	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	1ad1      	subs	r1, r2, r3
 8000612:	b2ca      	uxtb	r2, r1
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	3304      	adds	r3, #4
 8000618:	3230      	adds	r2, #48	; 0x30
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	701a      	strb	r2, [r3, #0]
	address /= 10;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a35      	ldr	r2, [pc, #212]	; (80006f8 <int_address_to_char_address+0x110>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	1092      	asrs	r2, r2, #2
 8000628:	17db      	asrs	r3, r3, #31
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	607b      	str	r3, [r7, #4]
	arr[3] = address % 10 + '0';
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <int_address_to_char_address+0x110>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	3303      	adds	r3, #3
 800064c:	3230      	adds	r2, #48	; 0x30
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	701a      	strb	r2, [r3, #0]
	address /= 10;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <int_address_to_char_address+0x110>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	1092      	asrs	r2, r2, #2
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	607b      	str	r3, [r7, #4]
	arr[2] = address % 10 + '0';
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <int_address_to_char_address+0x110>)
 8000666:	fb83 1302 	smull	r1, r3, r3, r2
 800066a:	1099      	asrs	r1, r3, #2
 800066c:	17d3      	asrs	r3, r2, #31
 800066e:	1ac9      	subs	r1, r1, r3
 8000670:	460b      	mov	r3, r1
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	440b      	add	r3, r1
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1ad1      	subs	r1, r2, r3
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3302      	adds	r3, #2
 8000680:	3230      	adds	r2, #48	; 0x30
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	701a      	strb	r2, [r3, #0]
	address /= 10;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <int_address_to_char_address+0x110>)
 800068a:	fb82 1203 	smull	r1, r2, r2, r3
 800068e:	1092      	asrs	r2, r2, #2
 8000690:	17db      	asrs	r3, r3, #31
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	607b      	str	r3, [r7, #4]
	arr[1] = address % 10 + '0';
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <int_address_to_char_address+0x110>)
 800069a:	fb83 1302 	smull	r1, r3, r3, r2
 800069e:	1099      	asrs	r1, r3, #2
 80006a0:	17d3      	asrs	r3, r2, #31
 80006a2:	1ac9      	subs	r1, r1, r3
 80006a4:	460b      	mov	r3, r1
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	440b      	add	r3, r1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	b2ca      	uxtb	r2, r1
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	3230      	adds	r2, #48	; 0x30
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
	address /= 10;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <int_address_to_char_address+0x110>)
 80006be:	fb82 1203 	smull	r1, r2, r2, r3
 80006c2:	1092      	asrs	r2, r2, #2
 80006c4:	17db      	asrs	r3, r3, #31
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	607b      	str	r3, [r7, #4]
	arr[0] = address % 10 + '0';
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <int_address_to_char_address+0x110>)
 80006ce:	fb83 1302 	smull	r1, r3, r3, r2
 80006d2:	1099      	asrs	r1, r3, #2
 80006d4:	17d3      	asrs	r3, r2, #31
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1ad1      	subs	r1, r2, r3
 80006e2:	b2cb      	uxtb	r3, r1
 80006e4:	3330      	adds	r3, #48	; 0x30
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	66666667 	.word	0x66666667

080006fc <display_output>:
 * @param message Pointer to message (what parameter)
 * @param char_param Parameter to output
 * @return void
 */
void display_output(char* message, char* char_param, char hex)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]
	SSD1306_GotoXY (0,0);
 800070a:	2100      	movs	r1, #0
 800070c:	2000      	movs	r0, #0
 800070e:	f000 ff7b 	bl	8001608 <SSD1306_GotoXY>
	SSD1306_Puts (message, &Font_11x18, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	4916      	ldr	r1, [pc, #88]	; (8000770 <display_output+0x74>)
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f001 f80c 	bl	8001734 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800071c:	f000 feac 	bl	8001478 <SSD1306_UpdateScreen>

	HAL_Delay(1500);
 8000720:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000724:	f001 fa94 	bl	8001c50 <HAL_Delay>
	SSD1306_Clear();
 8000728:	f001 f829 	bl	800177e <SSD1306_Clear>

	SSD1306_GotoXY (0,0);
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f000 ff6a 	bl	8001608 <SSD1306_GotoXY>
	SSD1306_Puts (char_param, &Font_11x18, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <display_output+0x74>)
 8000738:	68b8      	ldr	r0, [r7, #8]
 800073a:	f000 fffb 	bl	8001734 <SSD1306_Puts>
	if (hex > 0)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <display_output+0x5a>
	{
		SSD1306_GotoXY (0,20);
 8000744:	2114      	movs	r1, #20
 8000746:	2000      	movs	r0, #0
 8000748:	f000 ff5e 	bl	8001608 <SSD1306_GotoXY>
		SSD1306_Puts (HEX2DEX, &Font_11x18, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	4908      	ldr	r1, [pc, #32]	; (8000770 <display_output+0x74>)
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <display_output+0x78>)
 8000752:	f000 ffef 	bl	8001734 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8000756:	f000 fe8f 	bl	8001478 <SSD1306_UpdateScreen>

	HAL_Delay(1500);
 800075a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800075e:	f001 fa77 	bl	8001c50 <HAL_Delay>
	SSD1306_Clear();
 8000762:	f001 f80c 	bl	800177e <SSD1306_Clear>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000000c 	.word	0x2000000c
 8000774:	080089d8 	.word	0x080089d8

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b5b0      	push	{r4, r5, r7, lr}
 800077a:	b0c0      	sub	sp, #256	; 0x100
 800077c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f001 f9f5 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 fa0d 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 fafd 	bl	8000d84 <MX_GPIO_Init>
  MX_I2C1_Init();
 800078a:	f000 fa71 	bl	8000c70 <MX_I2C1_Init>
  MX_I2C2_Init();
 800078e:	f000 fa9d 	bl	8000ccc <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000792:	f007 fbd1 	bl	8007f38 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000796:	f000 fac7 	bl	8000d28 <MX_I2C3_Init>
   *
   */
  int mlx_addr_1;
  int mlx_addr_2;

  float float_temp_1 = 0.0;
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  float float_temp_2 = 0.0;
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  char char_temp_1[8];
  char char_temp_2[8];

  // Initialize Display
  if (SSD1306_Init(hi2c3) != 1)
 80007aa:	4cde      	ldr	r4, [pc, #888]	; (8000b24 <main+0x3ac>)
 80007ac:	4668      	mov	r0, sp
 80007ae:	f104 0310 	add.w	r3, r4, #16
 80007b2:	2244      	movs	r2, #68	; 0x44
 80007b4:	4619      	mov	r1, r3
 80007b6:	f008 f8ed 	bl	8008994 <memcpy>
 80007ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007be:	f000 fc45 	bl	800104c <SSD1306_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d00d      	beq.n	80007e4 <main+0x6c>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007cc:	48d6      	ldr	r0, [pc, #856]	; (8000b28 <main+0x3b0>)
 80007ce:	f001 fd2a 	bl	8002226 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d6:	f001 fa3b 	bl	8001c50 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007de:	48d2      	ldr	r0, [pc, #840]	; (8000b28 <main+0x3b0>)
 80007e0:	f001 fd21 	bl	8002226 <HAL_GPIO_TogglePin>
  }

  // Initialize MLX Sensors
  SSD1306_GotoXY (0,0);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 ff0e 	bl	8001608 <SSD1306_GotoXY>
  SSD1306_Puts (initializing_status, &Font_11x18, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	49cf      	ldr	r1, [pc, #828]	; (8000b2c <main+0x3b4>)
 80007f0:	48cf      	ldr	r0, [pc, #828]	; (8000b30 <main+0x3b8>)
 80007f2:	f000 ff9f 	bl	8001734 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80007f6:	f000 fe3f 	bl	8001478 <SSD1306_UpdateScreen>

  mlx_addr_1 = MLX90614_ScanDevices(hi2c1);
 80007fa:	4cce      	ldr	r4, [pc, #824]	; (8000b34 <main+0x3bc>)
 80007fc:	4668      	mov	r0, sp
 80007fe:	f104 0310 	add.w	r3, r4, #16
 8000802:	2244      	movs	r2, #68	; 0x44
 8000804:	4619      	mov	r1, r3
 8000806:	f008 f8c5 	bl	8008994 <memcpy>
 800080a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800080e:	f000 fbc7 	bl	8000fa0 <MLX90614_ScanDevices>
 8000812:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  mlx_addr_2 = MLX90614_ScanDevices(hi2c2);
 8000816:	4cc8      	ldr	r4, [pc, #800]	; (8000b38 <main+0x3c0>)
 8000818:	4668      	mov	r0, sp
 800081a:	f104 0310 	add.w	r3, r4, #16
 800081e:	2244      	movs	r2, #68	; 0x44
 8000820:	4619      	mov	r1, r3
 8000822:	f008 f8b7 	bl	8008994 <memcpy>
 8000826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800082a:	f000 fbb9 	bl	8000fa0 <MLX90614_ScanDevices>
 800082e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

  SSD1306_Clear();
 8000832:	f000 ffa4 	bl	800177e <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (DEBUG_MODE)
  {
	  char debug_status[] = "Debug mode";
 8000836:	4ac1      	ldr	r2, [pc, #772]	; (8000b3c <main+0x3c4>)
 8000838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800083c:	ca07      	ldmia	r2, {r0, r1, r2}
 800083e:	c303      	stmia	r3!, {r0, r1}
 8000840:	801a      	strh	r2, [r3, #0]
 8000842:	3302      	adds	r3, #2
 8000844:	0c12      	lsrs	r2, r2, #16
 8000846:	701a      	strb	r2, [r3, #0]

	  SSD1306_GotoXY (0,0);
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fedc 	bl	8001608 <SSD1306_GotoXY>
	  SSD1306_Puts (debug_status, &Font_11x18, 1);
 8000850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000854:	2201      	movs	r2, #1
 8000856:	49b5      	ldr	r1, [pc, #724]	; (8000b2c <main+0x3b4>)
 8000858:	4618      	mov	r0, r3
 800085a:	f000 ff6b 	bl	8001734 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800085e:	f000 fe0b 	bl	8001478 <SSD1306_UpdateScreen>
	  HAL_Delay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f001 f9f3 	bl	8001c50 <HAL_Delay>
	  SSD1306_Clear();
 800086a:	f000 ff88 	bl	800177e <SSD1306_Clear>

	  // To max
	  char char_to_max[6];
	  int int_to_max = MLX90614_ReadReg(mlx_addr_1, MLX90614_TOMAX, MLX90614_DBG_OFF, hi2c1);
 800086e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000872:	b2dd      	uxtb	r5, r3
 8000874:	4caf      	ldr	r4, [pc, #700]	; (8000b34 <main+0x3bc>)
 8000876:	4668      	mov	r0, sp
 8000878:	1d23      	adds	r3, r4, #4
 800087a:	2250      	movs	r2, #80	; 0x50
 800087c:	4619      	mov	r1, r3
 800087e:	f008 f889 	bl	8008994 <memcpy>
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	4628      	mov	r0, r5
 800088a:	f000 fb2b 	bl	8000ee4 <MLX90614_ReadReg>
 800088e:	4603      	mov	r3, r0
 8000890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  int_address_to_char_address(int_to_max, char_to_max);
 8000894:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000898:	4619      	mov	r1, r3
 800089a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800089e:	f7ff fea3 	bl	80005e8 <int_address_to_char_address>

	  // To min
	  char char_to_min[6];
	  int int_to_min = MLX90614_ReadReg(mlx_addr_1, MLX90614_TOMIN, MLX90614_DBG_OFF, hi2c1);
 80008a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008a6:	b2dd      	uxtb	r5, r3
 80008a8:	4ca2      	ldr	r4, [pc, #648]	; (8000b34 <main+0x3bc>)
 80008aa:	4668      	mov	r0, sp
 80008ac:	1d23      	adds	r3, r4, #4
 80008ae:	2250      	movs	r2, #80	; 0x50
 80008b0:	4619      	mov	r1, r3
 80008b2:	f008 f86f 	bl	8008994 <memcpy>
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	2200      	movs	r2, #0
 80008ba:	2121      	movs	r1, #33	; 0x21
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 fb11 	bl	8000ee4 <MLX90614_ReadReg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  int_address_to_char_address(int_to_min, char_to_min);
 80008c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008cc:	4619      	mov	r1, r3
 80008ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80008d2:	f7ff fe89 	bl	80005e8 <int_address_to_char_address>

	  // PWM Configuration register
	  char char_pwm_reg[6];
	  int int_pwm_reg = MLX90614_ReadReg(mlx_addr_1, MLX90614_PWMCTRL, MLX90614_DBG_OFF, hi2c1);
 80008d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008da:	b2dd      	uxtb	r5, r3
 80008dc:	4c95      	ldr	r4, [pc, #596]	; (8000b34 <main+0x3bc>)
 80008de:	4668      	mov	r0, sp
 80008e0:	1d23      	adds	r3, r4, #4
 80008e2:	2250      	movs	r2, #80	; 0x50
 80008e4:	4619      	mov	r1, r3
 80008e6:	f008 f855 	bl	8008994 <memcpy>
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	2200      	movs	r2, #0
 80008ee:	2122      	movs	r1, #34	; 0x22
 80008f0:	4628      	mov	r0, r5
 80008f2:	f000 faf7 	bl	8000ee4 <MLX90614_ReadReg>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  int_address_to_char_address(int_pwm_reg, char_pwm_reg);
 80008fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000900:	4619      	mov	r1, r3
 8000902:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000906:	f7ff fe6f 	bl	80005e8 <int_address_to_char_address>

	  // Ta Range
	  char char_ta_range[6];
	  int int_ta_range = MLX90614_ReadReg(mlx_addr_1, MLX90614_TARANGE, MLX90614_DBG_OFF, hi2c1);
 800090a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800090e:	b2dd      	uxtb	r5, r3
 8000910:	4c88      	ldr	r4, [pc, #544]	; (8000b34 <main+0x3bc>)
 8000912:	4668      	mov	r0, sp
 8000914:	1d23      	adds	r3, r4, #4
 8000916:	2250      	movs	r2, #80	; 0x50
 8000918:	4619      	mov	r1, r3
 800091a:	f008 f83b 	bl	8008994 <memcpy>
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	2123      	movs	r1, #35	; 0x23
 8000924:	4628      	mov	r0, r5
 8000926:	f000 fadd 	bl	8000ee4 <MLX90614_ReadReg>
 800092a:	4603      	mov	r3, r0
 800092c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  int_address_to_char_address(int_ta_range, char_ta_range);
 8000930:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000934:	4619      	mov	r1, r3
 8000936:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800093a:	f7ff fe55 	bl	80005e8 <int_address_to_char_address>

	  // Emissivity
	  char char_emissivity[7];
	  float emissivity = MLX90614_ReadReg(mlx_addr_1, MLX90614_EMISSIVITY, MLX90614_DBG_OFF, hi2c1) / 65535; // max 65535
 800093e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000942:	b2dd      	uxtb	r5, r3
 8000944:	4c7b      	ldr	r4, [pc, #492]	; (8000b34 <main+0x3bc>)
 8000946:	4668      	mov	r0, sp
 8000948:	1d23      	adds	r3, r4, #4
 800094a:	2250      	movs	r2, #80	; 0x50
 800094c:	4619      	mov	r1, r3
 800094e:	f008 f821 	bl	8008994 <memcpy>
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	2200      	movs	r2, #0
 8000956:	2124      	movs	r1, #36	; 0x24
 8000958:	4628      	mov	r0, r5
 800095a:	f000 fac3 	bl	8000ee4 <MLX90614_ReadReg>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b77      	ldr	r3, [pc, #476]	; (8000b40 <main+0x3c8>)
 8000964:	fba3 2302 	umull	r2, r3, r3, r2
 8000968:	0bdb      	lsrs	r3, r3, #15
 800096a:	b29b      	uxth	r3, r3
 800096c:	ee07 3a90 	vmov	s15, r3
 8000970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000974:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	  int_emissivity_to_char_emissivity(emissivity, char_emissivity);
 8000978:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800097c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000984:	4619      	mov	r1, r3
 8000986:	ee17 0a90 	vmov	r0, s15
 800098a:	f7ff fd99 	bl	80004c0 <int_emissivity_to_char_emissivity>

	  // Configutation register
	  char char_conf_reg[7];
	  int int_conf_reg = MLX90614_ReadReg(mlx_addr_1, MLX90614_CFG1, MLX90614_DBG_OFF, hi2c1);
 800098e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000992:	b2dd      	uxtb	r5, r3
 8000994:	4c67      	ldr	r4, [pc, #412]	; (8000b34 <main+0x3bc>)
 8000996:	4668      	mov	r0, sp
 8000998:	1d23      	adds	r3, r4, #4
 800099a:	2250      	movs	r2, #80	; 0x50
 800099c:	4619      	mov	r1, r3
 800099e:	f007 fff9 	bl	8008994 <memcpy>
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	2125      	movs	r1, #37	; 0x25
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 fa9b 	bl	8000ee4 <MLX90614_ReadReg>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  int_address_to_char_address(int_conf_reg, char_conf_reg);
 80009b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b8:	4619      	mov	r1, r3
 80009ba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009be:	f7ff fe13 	bl	80005e8 <int_address_to_char_address>

	  // Slave address
	  char char_slave_address[6];
	  int int_slave_address = MLX90614_ReadReg(mlx_addr_1, MLX90614_SA, MLX90614_DBG_OFF, hi2c1);
 80009c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009c6:	b2dd      	uxtb	r5, r3
 80009c8:	4c5a      	ldr	r4, [pc, #360]	; (8000b34 <main+0x3bc>)
 80009ca:	4668      	mov	r0, sp
 80009cc:	1d23      	adds	r3, r4, #4
 80009ce:	2250      	movs	r2, #80	; 0x50
 80009d0:	4619      	mov	r1, r3
 80009d2:	f007 ffdf 	bl	8008994 <memcpy>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	212e      	movs	r1, #46	; 0x2e
 80009dc:	4628      	mov	r0, r5
 80009de:	f000 fa81 	bl	8000ee4 <MLX90614_ReadReg>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  int_address_to_char_address(int_slave_address, char_slave_address);
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4619      	mov	r1, r3
 80009ee:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80009f2:	f7ff fdf9 	bl	80005e8 <int_address_to_char_address>

	  // ID1 Reg
	  char char_id1[6];
	  int int_id1 = MLX90614_ReadReg(mlx_addr_1, MLX90614_ID1, MLX90614_DBG_OFF, hi2c1);
 80009f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009fa:	b2dd      	uxtb	r5, r3
 80009fc:	4c4d      	ldr	r4, [pc, #308]	; (8000b34 <main+0x3bc>)
 80009fe:	4668      	mov	r0, sp
 8000a00:	1d23      	adds	r3, r4, #4
 8000a02:	2250      	movs	r2, #80	; 0x50
 8000a04:	4619      	mov	r1, r3
 8000a06:	f007 ffc5 	bl	8008994 <memcpy>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	213c      	movs	r1, #60	; 0x3c
 8000a10:	4628      	mov	r0, r5
 8000a12:	f000 fa67 	bl	8000ee4 <MLX90614_ReadReg>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  int_address_to_char_address(int_id1, char_id1);
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4619      	mov	r1, r3
 8000a22:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000a26:	f7ff fddf 	bl	80005e8 <int_address_to_char_address>

	  // ID2 Reg
	  char char_id2[6];
	  int int_id2 = MLX90614_ReadReg(mlx_addr_1, MLX90614_ID2, MLX90614_DBG_OFF, hi2c1);
 8000a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a2e:	b2dd      	uxtb	r5, r3
 8000a30:	4c40      	ldr	r4, [pc, #256]	; (8000b34 <main+0x3bc>)
 8000a32:	4668      	mov	r0, sp
 8000a34:	1d23      	adds	r3, r4, #4
 8000a36:	2250      	movs	r2, #80	; 0x50
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f007 ffab 	bl	8008994 <memcpy>
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	213d      	movs	r1, #61	; 0x3d
 8000a44:	4628      	mov	r0, r5
 8000a46:	f000 fa4d 	bl	8000ee4 <MLX90614_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
	  int_address_to_char_address(int_id2, char_id2);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4619      	mov	r1, r3
 8000a54:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a56:	f7ff fdc7 	bl	80005e8 <int_address_to_char_address>

	  // ID3 Reg
	  char char_id3[6];
	  int int_id3 = MLX90614_ReadReg(mlx_addr_1, MLX90614_ID3, MLX90614_DBG_OFF, hi2c1);
 8000a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a5e:	b2dd      	uxtb	r5, r3
 8000a60:	4c34      	ldr	r4, [pc, #208]	; (8000b34 <main+0x3bc>)
 8000a62:	4668      	mov	r0, sp
 8000a64:	1d23      	adds	r3, r4, #4
 8000a66:	2250      	movs	r2, #80	; 0x50
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f007 ff93 	bl	8008994 <memcpy>
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	2200      	movs	r2, #0
 8000a72:	213e      	movs	r1, #62	; 0x3e
 8000a74:	4628      	mov	r0, r5
 8000a76:	f000 fa35 	bl	8000ee4 <MLX90614_ReadReg>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	67bb      	str	r3, [r7, #120]	; 0x78
	  int_address_to_char_address(int_id3, char_id3);
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000a86:	f7ff fdaf 	bl	80005e8 <int_address_to_char_address>

	  // ID4 Reg
	  char char_id4[6];
	  int int_id4 = MLX90614_ReadReg(mlx_addr_1, MLX90614_ID4, MLX90614_DBG_OFF, hi2c1);
 8000a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a8e:	b2dd      	uxtb	r5, r3
 8000a90:	4c28      	ldr	r4, [pc, #160]	; (8000b34 <main+0x3bc>)
 8000a92:	4668      	mov	r0, sp
 8000a94:	1d23      	adds	r3, r4, #4
 8000a96:	2250      	movs	r2, #80	; 0x50
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f007 ff7b 	bl	8008994 <memcpy>
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	213f      	movs	r1, #63	; 0x3f
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 fa1d 	bl	8000ee4 <MLX90614_ReadReg>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	677b      	str	r3, [r7, #116]	; 0x74
	  int_address_to_char_address(int_id4, char_id4);
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ab4:	f7ff fd98 	bl	80005e8 <int_address_to_char_address>

	  while(1)
	  {
		  display_output(TO_MAX_STATUS, char_to_max, 1);
 8000ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4820      	ldr	r0, [pc, #128]	; (8000b44 <main+0x3cc>)
 8000ac2:	f7ff fe1b 	bl	80006fc <display_output>
		  display_output(TO_MIN_STATUS, char_to_min, 1);
 8000ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <main+0x3d0>)
 8000ad0:	f7ff fe14 	bl	80006fc <display_output>
		  display_output(PWM_CF_REG_STATUS, char_pwm_reg, 1);
 8000ad4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	481b      	ldr	r0, [pc, #108]	; (8000b4c <main+0x3d4>)
 8000ade:	f7ff fe0d 	bl	80006fc <display_output>
		  display_output(TA_RANGE_STATUS, char_ta_range, 1);
 8000ae2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4819      	ldr	r0, [pc, #100]	; (8000b50 <main+0x3d8>)
 8000aec:	f7ff fe06 	bl	80006fc <display_output>
		  display_output(EMISSIVITY_STATUS, char_emissivity, 0);
 8000af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	4816      	ldr	r0, [pc, #88]	; (8000b54 <main+0x3dc>)
 8000afa:	f7ff fdff 	bl	80006fc <display_output>
		  display_output(CONFIG_REGISTER_STATUS, char_conf_reg, 1);
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	2201      	movs	r2, #1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4814      	ldr	r0, [pc, #80]	; (8000b58 <main+0x3e0>)
 8000b08:	f7ff fdf8 	bl	80006fc <display_output>
		  display_output(SLAVE_ADDRESS_STATUS, char_slave_address, 1);
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <main+0x3e4>)
 8000b16:	f7ff fdf1 	bl	80006fc <display_output>
		  display_output(ID1_STATUS, char_id1, 1);
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4619      	mov	r1, r3
 8000b22:	e01d      	b.n	8000b60 <main+0x3e8>
 8000b24:	2000082c 	.word	0x2000082c
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000880 	.word	0x20000880
 8000b38:	200008d4 	.word	0x200008d4
 8000b3c:	08008af0 	.word	0x08008af0
 8000b40:	80008001 	.word	0x80008001
 8000b44:	08008a74 	.word	0x08008a74
 8000b48:	08008a7c 	.word	0x08008a7c
 8000b4c:	08008a84 	.word	0x08008a84
 8000b50:	08008a90 	.word	0x08008a90
 8000b54:	08008a9c 	.word	0x08008a9c
 8000b58:	08008aa8 	.word	0x08008aa8
 8000b5c:	08008ab4 	.word	0x08008ab4
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <main+0x418>)
 8000b62:	f7ff fdcb 	bl	80006fc <display_output>
		  display_output(ID2_STATUS, char_id2, 1);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <main+0x41c>)
 8000b70:	f7ff fdc4 	bl	80006fc <display_output>
		  display_output(ID3_STATUS, char_id3, 1);
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <main+0x420>)
 8000b7e:	f7ff fdbd 	bl	80006fc <display_output>
		  display_output(ID4_STATUS, char_id4, 1);
 8000b82:	463b      	mov	r3, r7
 8000b84:	2201      	movs	r2, #1
 8000b86:	4619      	mov	r1, r3
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <main+0x424>)
 8000b8a:	f7ff fdb7 	bl	80006fc <display_output>
		  display_output(TO_MAX_STATUS, char_to_max, 1);
 8000b8e:	e793      	b.n	8000ab8 <main+0x340>
 8000b90:	08008ac0 	.word	0x08008ac0
 8000b94:	08008acc 	.word	0x08008acc
 8000b98:	08008ad8 	.word	0x08008ad8
 8000b9c:	08008ae4 	.word	0x08008ae4

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fefe 	bl	80089b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <SystemClock_Config+0xc8>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <SystemClock_Config+0xc8>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <SystemClock_Config+0xc8>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <SystemClock_Config+0xcc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a20      	ldr	r2, [pc, #128]	; (8000c6c <SystemClock_Config+0xcc>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <SystemClock_Config+0xcc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	2310      	movs	r3, #16
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c10:	2310      	movs	r3, #16
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c14:	23c0      	movs	r3, #192	; 0xc0
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fd79 	bl	800471c <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c30:	f000 f924 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 ffdc 	bl	8004c0c <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c5a:	f000 f90f 	bl	8000e7c <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	; 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40007000 	.word	0x40007000

08000c70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <MX_I2C1_Init+0x54>)
 8000c78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x58>)
 8000c7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000cae:	f001 fad5 	bl	800225c <HAL_I2C_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb8:	f000 f8e0 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000880 	.word	0x20000880
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	000186a0 	.word	0x000186a0

08000ccc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <MX_I2C2_Init+0x54>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_I2C2_Init+0x58>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000d0a:	f001 faa7 	bl	800225c <HAL_I2C_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 f8b2 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200008d4 	.word	0x200008d4
 8000d20:	40005800 	.word	0x40005800
 8000d24:	000186a0 	.word	0x000186a0

08000d28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_I2C3_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_I2C3_Init+0x58>)
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_I2C3_Init+0x50>)
 8000d66:	f001 fa79 	bl	800225c <HAL_I2C_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 f884 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000082c 	.word	0x2000082c
 8000d7c:	40005c00 	.word	0x40005c00
 8000d80:	00061a80 	.word	0x00061a80

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a33      	ldr	r2, [pc, #204]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a2c      	ldr	r2, [pc, #176]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_GPIO_Init+0xec>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_GPIO_Init+0xf0>)
 8000e2e:	f001 f9e1 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_GPIO_Init+0xf4>)
 8000e46:	f001 f839 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e4a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_GPIO_Init+0xf0>)
 8000e64:	f001 f82a 	bl	8001ebc <HAL_GPIO_Init>

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40020000 	.word	0x40020000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <CRC8_Calc>:
 * @param p Pointer to uint8_t
 * @param len Length
 * @return uint8_t Checksum
 */
uint8_t CRC8_Calc (uint8_t *p, uint8_t len)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	81fb      	strh	r3, [r7, #14]
        while (len--)
 8000e98:	e015      	b.n	8000ec6 <CRC8_Calc+0x3e>
        {
                i = (crc ^ *p++) & 0xFF;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	4053      	eors	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <CRC8_Calc+0x58>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4053      	eors	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	81fb      	strh	r3, [r7, #14]
        while (len--)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	70fa      	strb	r2, [r7, #3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e4      	bne.n	8000e9a <CRC8_Calc+0x12>
        }
        return crc & 0xFF;
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	b2db      	uxtb	r3, r3
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	08008b40 	.word	0x08008b40

08000ee4 <MLX90614_ReadReg>:
 * @param dbg_lvl Debug level
 * @param hi2c Handler of I2C
 * @return uint16_t Register data
 */
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c)
{
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	b590      	push	{r4, r7, lr}
 8000ee8:	b08b      	sub	sp, #44	; 0x2c
 8000eea:	af04      	add	r7, sp, #16
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	b299      	uxth	r1, r3
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2303      	movs	r3, #3
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f001 fbe1 	bl	80026e0 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8000f36:	7c3b      	ldrb	r3, [r7, #16]
 8000f38:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8000f3a:	7c7b      	ldrb	r3, [r7, #17]
 8000f3c:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2105      	movs	r1, #5
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff9f 	bl	8000e88 <CRC8_Calc>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 8000f4e:	7c7b      	ldrb	r3, [r7, #17]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7c3b      	ldrb	r3, [r7, #16]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 8000f5e:	7cbb      	ldrb	r3, [r7, #18]
 8000f60:	7d7a      	ldrb	r2, [r7, #21]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d001      	beq.n	8000f6a <MLX90614_ReadReg+0x86>
		data = 0x0000;
 8000f66:	2300      	movs	r3, #0
 8000f68:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10b      	bne.n	8000f88 <MLX90614_ReadReg+0xa4>
 8000f70:	7cbb      	ldrb	r3, [r7, #18]
 8000f72:	8afc      	ldrh	r4, [r7, #22]
 8000f74:	79b8      	ldrb	r0, [r7, #6]
 8000f76:	79f9      	ldrb	r1, [r7, #7]
 8000f78:	7d7a      	ldrb	r2, [r7, #21]
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4623      	mov	r3, r4
 8000f80:	4602      	mov	r2, r0
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 f84e 	bl	8001024 <MLX90614_SendDebugMsg>

	HAL_Delay(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 fe61 	bl	8001c50 <HAL_Delay>
	return data;
 8000f8e:	8afb      	ldrh	r3, [r7, #22]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f9a:	b002      	add	sp, #8
 8000f9c:	4770      	bx	lr
	...

08000fa0 <MLX90614_ScanDevices>:
 *
 * @param hi2c Handler of I2C
 * @return int Device address
 */
int MLX90614_ScanDevices (I2C_HandleTypeDef hi2c)
{
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	f107 0c10 	add.w	ip, r7, #16
 8000fac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;
	for (int i = 0; i<126; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e029      	b.n	800100a <MLX90614_ScanDevices+0x6a>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	f107 0010 	add.w	r0, r7, #16
 8000fc6:	f001 fdb1 	bl	8002b2c <HAL_I2C_IsDeviceReady>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	70fb      	strb	r3, [r7, #3]
		if (result != HAL_OK)
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <MLX90614_ScanDevices+0x3e>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd8:	4811      	ldr	r0, [pc, #68]	; (8001020 <MLX90614_ScanDevices+0x80>)
 8000fda:	f001 f924 	bl	8002226 <HAL_GPIO_TogglePin>
		}
		if (result == HAL_OK)
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10f      	bne.n	8001004 <MLX90614_ScanDevices+0x64>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MLX90614_ScanDevices+0x80>)
 8000fea:	f001 f91c 	bl	8002226 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f000 fe2d 	bl	8001c50 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <MLX90614_ScanDevices+0x80>)
 8000ffc:	f001 f913 	bl	8002226 <HAL_GPIO_TogglePin>
		  return i;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	e005      	b.n	8001010 <MLX90614_ScanDevices+0x70>
	for (int i = 0; i<126; i++)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3301      	adds	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b7d      	cmp	r3, #125	; 0x7d
 800100e:	ddd2      	ble.n	8000fb6 <MLX90614_ScanDevices+0x16>
		}
	}
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101a:	b004      	add	sp, #16
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40020c00 	.word	0x40020c00

08001024 <MLX90614_SendDebugMsg>:
 * @param crc_in Checksum in
 * @param crc_calc Calculated checksum
 * @return void
 */
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc)
{
 8001024:	b490      	push	{r4, r7}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4604      	mov	r4, r0
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4623      	mov	r3, r4
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	4603      	mov	r3, r0
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	460b      	mov	r3, r1
 800103c:	717b      	strb	r3, [r7, #5]
 800103e:	4613      	mov	r3, r2
 8001040:	807b      	strh	r3, [r7, #2]
		// TODO: Do something if error
	}
	else if (op_type == MLX90614_DBG_MSG_R) {
		// TODO: Do something if error
	}
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bc90      	pop	{r4, r7}
 800104a:	4770      	bx	lr

0800104c <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 800104c:	b084      	sub	sp, #16
 800104e:	b590      	push	{r4, r7, lr}
 8001050:	b097      	sub	sp, #92	; 0x5c
 8001052:	af14      	add	r7, sp, #80	; 0x50
 8001054:	f107 0418 	add.w	r4, r7, #24
 8001058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 800105c:	f000 fb98 	bl	8001790 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <SSD1306_Init+0x44>)
 8001062:	4618      	mov	r0, r3
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	4619      	mov	r1, r3
 800106c:	f007 fc92 	bl	8008994 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001070:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001074:	2201      	movs	r2, #1
 8001076:	2178      	movs	r1, #120	; 0x78
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <SSD1306_Init+0x44>)
 800107a:	f001 fd57 	bl	8002b2c <HAL_I2C_IsDeviceReady>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e1ee      	b.n	8001466 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001088:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800108c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108e:	e004      	b.n	800109a <SSD1306_Init+0x4e>
 8001090:	200007d8 	.word	0x200007d8
		p--;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
	while(p>0)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f9      	bne.n	8001094 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010a0:	4ce1      	ldr	r4, [pc, #900]	; (8001428 <SSD1306_Init+0x3dc>)
 80010a2:	23ae      	movs	r3, #174	; 0xae
 80010a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010a6:	4668      	mov	r0, sp
 80010a8:	f104 0308 	add.w	r3, r4, #8
 80010ac:	224c      	movs	r2, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f007 fc70 	bl	8008994 <memcpy>
 80010b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fbc6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010c0:	4cd9      	ldr	r4, [pc, #868]	; (8001428 <SSD1306_Init+0x3dc>)
 80010c2:	2320      	movs	r3, #32
 80010c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010c6:	4668      	mov	r0, sp
 80010c8:	f104 0308 	add.w	r3, r4, #8
 80010cc:	224c      	movs	r2, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	f007 fc60 	bl	8008994 <memcpy>
 80010d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fbb6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010e0:	4cd1      	ldr	r4, [pc, #836]	; (8001428 <SSD1306_Init+0x3dc>)
 80010e2:	2310      	movs	r3, #16
 80010e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010e6:	4668      	mov	r0, sp
 80010e8:	f104 0308 	add.w	r3, r4, #8
 80010ec:	224c      	movs	r2, #76	; 0x4c
 80010ee:	4619      	mov	r1, r3
 80010f0:	f007 fc50 	bl	8008994 <memcpy>
 80010f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fba6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001100:	4cc9      	ldr	r4, [pc, #804]	; (8001428 <SSD1306_Init+0x3dc>)
 8001102:	23b0      	movs	r3, #176	; 0xb0
 8001104:	9313      	str	r3, [sp, #76]	; 0x4c
 8001106:	4668      	mov	r0, sp
 8001108:	f104 0308 	add.w	r3, r4, #8
 800110c:	224c      	movs	r2, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	f007 fc40 	bl	8008994 <memcpy>
 8001114:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 fb96 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001120:	4cc1      	ldr	r4, [pc, #772]	; (8001428 <SSD1306_Init+0x3dc>)
 8001122:	23c8      	movs	r3, #200	; 0xc8
 8001124:	9313      	str	r3, [sp, #76]	; 0x4c
 8001126:	4668      	mov	r0, sp
 8001128:	f104 0308 	add.w	r3, r4, #8
 800112c:	224c      	movs	r2, #76	; 0x4c
 800112e:	4619      	mov	r1, r3
 8001130:	f007 fc30 	bl	8008994 <memcpy>
 8001134:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 fb86 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001140:	4cb9      	ldr	r4, [pc, #740]	; (8001428 <SSD1306_Init+0x3dc>)
 8001142:	2300      	movs	r3, #0
 8001144:	9313      	str	r3, [sp, #76]	; 0x4c
 8001146:	4668      	mov	r0, sp
 8001148:	f104 0308 	add.w	r3, r4, #8
 800114c:	224c      	movs	r2, #76	; 0x4c
 800114e:	4619      	mov	r1, r3
 8001150:	f007 fc20 	bl	8008994 <memcpy>
 8001154:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	; 0x78
 800115c:	f000 fb76 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001160:	4cb1      	ldr	r4, [pc, #708]	; (8001428 <SSD1306_Init+0x3dc>)
 8001162:	2310      	movs	r3, #16
 8001164:	9313      	str	r3, [sp, #76]	; 0x4c
 8001166:	4668      	mov	r0, sp
 8001168:	f104 0308 	add.w	r3, r4, #8
 800116c:	224c      	movs	r2, #76	; 0x4c
 800116e:	4619      	mov	r1, r3
 8001170:	f007 fc10 	bl	8008994 <memcpy>
 8001174:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fb66 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001180:	4ca9      	ldr	r4, [pc, #676]	; (8001428 <SSD1306_Init+0x3dc>)
 8001182:	2340      	movs	r3, #64	; 0x40
 8001184:	9313      	str	r3, [sp, #76]	; 0x4c
 8001186:	4668      	mov	r0, sp
 8001188:	f104 0308 	add.w	r3, r4, #8
 800118c:	224c      	movs	r2, #76	; 0x4c
 800118e:	4619      	mov	r1, r3
 8001190:	f007 fc00 	bl	8008994 <memcpy>
 8001194:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001198:	2100      	movs	r1, #0
 800119a:	2078      	movs	r0, #120	; 0x78
 800119c:	f000 fb56 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011a0:	4ca1      	ldr	r4, [pc, #644]	; (8001428 <SSD1306_Init+0x3dc>)
 80011a2:	2381      	movs	r3, #129	; 0x81
 80011a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80011a6:	4668      	mov	r0, sp
 80011a8:	f104 0308 	add.w	r3, r4, #8
 80011ac:	224c      	movs	r2, #76	; 0x4c
 80011ae:	4619      	mov	r1, r3
 80011b0:	f007 fbf0 	bl	8008994 <memcpy>
 80011b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 fb46 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011c0:	4c99      	ldr	r4, [pc, #612]	; (8001428 <SSD1306_Init+0x3dc>)
 80011c2:	23ff      	movs	r3, #255	; 0xff
 80011c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80011c6:	4668      	mov	r0, sp
 80011c8:	f104 0308 	add.w	r3, r4, #8
 80011cc:	224c      	movs	r2, #76	; 0x4c
 80011ce:	4619      	mov	r1, r3
 80011d0:	f007 fbe0 	bl	8008994 <memcpy>
 80011d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fb36 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80011e0:	4c91      	ldr	r4, [pc, #580]	; (8001428 <SSD1306_Init+0x3dc>)
 80011e2:	23a1      	movs	r3, #161	; 0xa1
 80011e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80011e6:	4668      	mov	r0, sp
 80011e8:	f104 0308 	add.w	r3, r4, #8
 80011ec:	224c      	movs	r2, #76	; 0x4c
 80011ee:	4619      	mov	r1, r3
 80011f0:	f007 fbd0 	bl	8008994 <memcpy>
 80011f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80011f8:	2100      	movs	r1, #0
 80011fa:	2078      	movs	r0, #120	; 0x78
 80011fc:	f000 fb26 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001200:	4c89      	ldr	r4, [pc, #548]	; (8001428 <SSD1306_Init+0x3dc>)
 8001202:	23a6      	movs	r3, #166	; 0xa6
 8001204:	9313      	str	r3, [sp, #76]	; 0x4c
 8001206:	4668      	mov	r0, sp
 8001208:	f104 0308 	add.w	r3, r4, #8
 800120c:	224c      	movs	r2, #76	; 0x4c
 800120e:	4619      	mov	r1, r3
 8001210:	f007 fbc0 	bl	8008994 <memcpy>
 8001214:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	; 0x78
 800121c:	f000 fb16 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001220:	4c81      	ldr	r4, [pc, #516]	; (8001428 <SSD1306_Init+0x3dc>)
 8001222:	23a8      	movs	r3, #168	; 0xa8
 8001224:	9313      	str	r3, [sp, #76]	; 0x4c
 8001226:	4668      	mov	r0, sp
 8001228:	f104 0308 	add.w	r3, r4, #8
 800122c:	224c      	movs	r2, #76	; 0x4c
 800122e:	4619      	mov	r1, r3
 8001230:	f007 fbb0 	bl	8008994 <memcpy>
 8001234:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	; 0x78
 800123c:	f000 fb06 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001240:	4c79      	ldr	r4, [pc, #484]	; (8001428 <SSD1306_Init+0x3dc>)
 8001242:	233f      	movs	r3, #63	; 0x3f
 8001244:	9313      	str	r3, [sp, #76]	; 0x4c
 8001246:	4668      	mov	r0, sp
 8001248:	f104 0308 	add.w	r3, r4, #8
 800124c:	224c      	movs	r2, #76	; 0x4c
 800124e:	4619      	mov	r1, r3
 8001250:	f007 fba0 	bl	8008994 <memcpy>
 8001254:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f000 faf6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001260:	4c71      	ldr	r4, [pc, #452]	; (8001428 <SSD1306_Init+0x3dc>)
 8001262:	23a4      	movs	r3, #164	; 0xa4
 8001264:	9313      	str	r3, [sp, #76]	; 0x4c
 8001266:	4668      	mov	r0, sp
 8001268:	f104 0308 	add.w	r3, r4, #8
 800126c:	224c      	movs	r2, #76	; 0x4c
 800126e:	4619      	mov	r1, r3
 8001270:	f007 fb90 	bl	8008994 <memcpy>
 8001274:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001278:	2100      	movs	r1, #0
 800127a:	2078      	movs	r0, #120	; 0x78
 800127c:	f000 fae6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001280:	4c69      	ldr	r4, [pc, #420]	; (8001428 <SSD1306_Init+0x3dc>)
 8001282:	23d3      	movs	r3, #211	; 0xd3
 8001284:	9313      	str	r3, [sp, #76]	; 0x4c
 8001286:	4668      	mov	r0, sp
 8001288:	f104 0308 	add.w	r3, r4, #8
 800128c:	224c      	movs	r2, #76	; 0x4c
 800128e:	4619      	mov	r1, r3
 8001290:	f007 fb80 	bl	8008994 <memcpy>
 8001294:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f000 fad6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80012a0:	4c61      	ldr	r4, [pc, #388]	; (8001428 <SSD1306_Init+0x3dc>)
 80012a2:	2300      	movs	r3, #0
 80012a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012a6:	4668      	mov	r0, sp
 80012a8:	f104 0308 	add.w	r3, r4, #8
 80012ac:	224c      	movs	r2, #76	; 0x4c
 80012ae:	4619      	mov	r1, r3
 80012b0:	f007 fb70 	bl	8008994 <memcpy>
 80012b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	; 0x78
 80012bc:	f000 fac6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80012c0:	4c59      	ldr	r4, [pc, #356]	; (8001428 <SSD1306_Init+0x3dc>)
 80012c2:	23d5      	movs	r3, #213	; 0xd5
 80012c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012c6:	4668      	mov	r0, sp
 80012c8:	f104 0308 	add.w	r3, r4, #8
 80012cc:	224c      	movs	r2, #76	; 0x4c
 80012ce:	4619      	mov	r1, r3
 80012d0:	f007 fb60 	bl	8008994 <memcpy>
 80012d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fab6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012e0:	4c51      	ldr	r4, [pc, #324]	; (8001428 <SSD1306_Init+0x3dc>)
 80012e2:	23f0      	movs	r3, #240	; 0xf0
 80012e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012e6:	4668      	mov	r0, sp
 80012e8:	f104 0308 	add.w	r3, r4, #8
 80012ec:	224c      	movs	r2, #76	; 0x4c
 80012ee:	4619      	mov	r1, r3
 80012f0:	f007 fb50 	bl	8008994 <memcpy>
 80012f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f000 faa6 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001300:	4c49      	ldr	r4, [pc, #292]	; (8001428 <SSD1306_Init+0x3dc>)
 8001302:	23d9      	movs	r3, #217	; 0xd9
 8001304:	9313      	str	r3, [sp, #76]	; 0x4c
 8001306:	4668      	mov	r0, sp
 8001308:	f104 0308 	add.w	r3, r4, #8
 800130c:	224c      	movs	r2, #76	; 0x4c
 800130e:	4619      	mov	r1, r3
 8001310:	f007 fb40 	bl	8008994 <memcpy>
 8001314:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001318:	2100      	movs	r1, #0
 800131a:	2078      	movs	r0, #120	; 0x78
 800131c:	f000 fa96 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001320:	4c41      	ldr	r4, [pc, #260]	; (8001428 <SSD1306_Init+0x3dc>)
 8001322:	2322      	movs	r3, #34	; 0x22
 8001324:	9313      	str	r3, [sp, #76]	; 0x4c
 8001326:	4668      	mov	r0, sp
 8001328:	f104 0308 	add.w	r3, r4, #8
 800132c:	224c      	movs	r2, #76	; 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	f007 fb30 	bl	8008994 <memcpy>
 8001334:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	; 0x78
 800133c:	f000 fa86 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001340:	4c39      	ldr	r4, [pc, #228]	; (8001428 <SSD1306_Init+0x3dc>)
 8001342:	23da      	movs	r3, #218	; 0xda
 8001344:	9313      	str	r3, [sp, #76]	; 0x4c
 8001346:	4668      	mov	r0, sp
 8001348:	f104 0308 	add.w	r3, r4, #8
 800134c:	224c      	movs	r2, #76	; 0x4c
 800134e:	4619      	mov	r1, r3
 8001350:	f007 fb20 	bl	8008994 <memcpy>
 8001354:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001358:	2100      	movs	r1, #0
 800135a:	2078      	movs	r0, #120	; 0x78
 800135c:	f000 fa76 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001360:	4c31      	ldr	r4, [pc, #196]	; (8001428 <SSD1306_Init+0x3dc>)
 8001362:	2312      	movs	r3, #18
 8001364:	9313      	str	r3, [sp, #76]	; 0x4c
 8001366:	4668      	mov	r0, sp
 8001368:	f104 0308 	add.w	r3, r4, #8
 800136c:	224c      	movs	r2, #76	; 0x4c
 800136e:	4619      	mov	r1, r3
 8001370:	f007 fb10 	bl	8008994 <memcpy>
 8001374:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fa66 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001380:	4c29      	ldr	r4, [pc, #164]	; (8001428 <SSD1306_Init+0x3dc>)
 8001382:	23db      	movs	r3, #219	; 0xdb
 8001384:	9313      	str	r3, [sp, #76]	; 0x4c
 8001386:	4668      	mov	r0, sp
 8001388:	f104 0308 	add.w	r3, r4, #8
 800138c:	224c      	movs	r2, #76	; 0x4c
 800138e:	4619      	mov	r1, r3
 8001390:	f007 fb00 	bl	8008994 <memcpy>
 8001394:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	; 0x78
 800139c:	f000 fa56 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80013a0:	4c21      	ldr	r4, [pc, #132]	; (8001428 <SSD1306_Init+0x3dc>)
 80013a2:	2320      	movs	r3, #32
 80013a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80013a6:	4668      	mov	r0, sp
 80013a8:	f104 0308 	add.w	r3, r4, #8
 80013ac:	224c      	movs	r2, #76	; 0x4c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f007 faf0 	bl	8008994 <memcpy>
 80013b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	; 0x78
 80013bc:	f000 fa46 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80013c0:	4c19      	ldr	r4, [pc, #100]	; (8001428 <SSD1306_Init+0x3dc>)
 80013c2:	238d      	movs	r3, #141	; 0x8d
 80013c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80013c6:	4668      	mov	r0, sp
 80013c8:	f104 0308 	add.w	r3, r4, #8
 80013cc:	224c      	movs	r2, #76	; 0x4c
 80013ce:	4619      	mov	r1, r3
 80013d0:	f007 fae0 	bl	8008994 <memcpy>
 80013d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	; 0x78
 80013dc:	f000 fa36 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013e0:	4c11      	ldr	r4, [pc, #68]	; (8001428 <SSD1306_Init+0x3dc>)
 80013e2:	2314      	movs	r3, #20
 80013e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80013e6:	4668      	mov	r0, sp
 80013e8:	f104 0308 	add.w	r3, r4, #8
 80013ec:	224c      	movs	r2, #76	; 0x4c
 80013ee:	4619      	mov	r1, r3
 80013f0:	f007 fad0 	bl	8008994 <memcpy>
 80013f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	; 0x78
 80013fc:	f000 fa26 	bl	800184c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001400:	4c09      	ldr	r4, [pc, #36]	; (8001428 <SSD1306_Init+0x3dc>)
 8001402:	23af      	movs	r3, #175	; 0xaf
 8001404:	9313      	str	r3, [sp, #76]	; 0x4c
 8001406:	4668      	mov	r0, sp
 8001408:	f104 0308 	add.w	r3, r4, #8
 800140c:	224c      	movs	r2, #76	; 0x4c
 800140e:	4619      	mov	r1, r3
 8001410:	f007 fac0 	bl	8008994 <memcpy>
 8001414:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fa16 	bl	800184c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001420:	4c01      	ldr	r4, [pc, #4]	; (8001428 <SSD1306_Init+0x3dc>)
 8001422:	232e      	movs	r3, #46	; 0x2e
 8001424:	e002      	b.n	800142c <SSD1306_Init+0x3e0>
 8001426:	bf00      	nop
 8001428:	200007d8 	.word	0x200007d8
 800142c:	9313      	str	r3, [sp, #76]	; 0x4c
 800142e:	4668      	mov	r0, sp
 8001430:	f104 0308 	add.w	r3, r4, #8
 8001434:	224c      	movs	r2, #76	; 0x4c
 8001436:	4619      	mov	r1, r3
 8001438:	f007 faac 	bl	8008994 <memcpy>
 800143c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa02 	bl	800184c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001448:	2000      	movs	r0, #0
 800144a:	f000 f865 	bl	8001518 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800144e:	f000 f813 	bl	8001478 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SSD1306_Init+0x428>)
 8001454:	2200      	movs	r2, #0
 8001456:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <SSD1306_Init+0x428>)
 800145a:	2200      	movs	r2, #0
 800145c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SSD1306_Init+0x428>)
 8001460:	2201      	movs	r2, #1
 8001462:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001470:	b004      	add	sp, #16
 8001472:	4770      	bx	lr
 8001474:	200005b0 	.word	0x200005b0

08001478 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b097      	sub	sp, #92	; 0x5c
 800147c:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e03d      	b.n	8001500 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	3b50      	subs	r3, #80	; 0x50
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4c21      	ldr	r4, [pc, #132]	; (8001510 <SSD1306_UpdateScreen+0x98>)
 800148c:	9313      	str	r3, [sp, #76]	; 0x4c
 800148e:	4668      	mov	r0, sp
 8001490:	f104 0308 	add.w	r3, r4, #8
 8001494:	224c      	movs	r2, #76	; 0x4c
 8001496:	4619      	mov	r1, r3
 8001498:	f007 fa7c 	bl	8008994 <memcpy>
 800149c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	; 0x78
 80014a4:	f000 f9d2 	bl	800184c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014a8:	4c19      	ldr	r4, [pc, #100]	; (8001510 <SSD1306_UpdateScreen+0x98>)
 80014aa:	2300      	movs	r3, #0
 80014ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80014ae:	4668      	mov	r0, sp
 80014b0:	f104 0308 	add.w	r3, r4, #8
 80014b4:	224c      	movs	r2, #76	; 0x4c
 80014b6:	4619      	mov	r1, r3
 80014b8:	f007 fa6c 	bl	8008994 <memcpy>
 80014bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	; 0x78
 80014c4:	f000 f9c2 	bl	800184c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014c8:	4c11      	ldr	r4, [pc, #68]	; (8001510 <SSD1306_UpdateScreen+0x98>)
 80014ca:	2310      	movs	r3, #16
 80014cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80014ce:	4668      	mov	r0, sp
 80014d0:	f104 0308 	add.w	r3, r4, #8
 80014d4:	224c      	movs	r2, #76	; 0x4c
 80014d6:	4619      	mov	r1, r3
 80014d8:	f007 fa5c 	bl	8008994 <memcpy>
 80014dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 f9b2 	bl	800184c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4a09      	ldr	r2, [pc, #36]	; (8001514 <SSD1306_UpdateScreen+0x9c>)
 80014ee:	441a      	add	r2, r3
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	2078      	movs	r0, #120	; 0x78
 80014f6:	f000 f961 	bl	80017bc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3301      	adds	r3, #1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d9be      	bls.n	8001484 <SSD1306_UpdateScreen+0xc>
	}
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	200007d8 	.word	0x200007d8
 8001514:	200001b0 	.word	0x200001b0

08001518 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <SSD1306_Fill+0x14>
 8001528:	2300      	movs	r3, #0
 800152a:	e000      	b.n	800152e <SSD1306_Fill+0x16>
 800152c:	23ff      	movs	r3, #255	; 0xff
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	4619      	mov	r1, r3
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <SSD1306_Fill+0x2c>)
 8001536:	f007 fa3b 	bl	80089b0 <memset>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001b0 	.word	0x200001b0

08001548 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	460b      	mov	r3, r1
 8001554:	80bb      	strh	r3, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	70fb      	strb	r3, [r7, #3]
	if (
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b7f      	cmp	r3, #127	; 0x7f
 800155e:	d848      	bhi.n	80015f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	2b3f      	cmp	r3, #63	; 0x3f
 8001564:	d845      	bhi.n	80015f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <SSD1306_DrawPixel+0xb8>)
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d11a      	bne.n	80015b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	b298      	uxth	r0, r3
 800158a:	4603      	mov	r3, r0
 800158c:	01db      	lsls	r3, r3, #7
 800158e:	4413      	add	r3, r2
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <SSD1306_DrawPixel+0xbc>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	b25a      	sxtb	r2, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b259      	sxtb	r1, r3
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	4603      	mov	r3, r0
 80015ac:	01db      	lsls	r3, r3, #7
 80015ae:	4413      	add	r3, r2
 80015b0:	b2c9      	uxtb	r1, r1
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <SSD1306_DrawPixel+0xbc>)
 80015b4:	54d1      	strb	r1, [r2, r3]
 80015b6:	e01d      	b.n	80015f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	b298      	uxth	r0, r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	01db      	lsls	r3, r3, #7
 80015c4:	4413      	add	r3, r2
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <SSD1306_DrawPixel+0xbc>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4013      	ands	r3, r2
 80015e0:	b259      	sxtb	r1, r3
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	4603      	mov	r3, r0
 80015e6:	01db      	lsls	r3, r3, #7
 80015e8:	4413      	add	r3, r2
 80015ea:	b2c9      	uxtb	r1, r1
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SSD1306_DrawPixel+0xbc>)
 80015ee:	54d1      	strb	r1, [r2, r3]
 80015f0:	e000      	b.n	80015f4 <SSD1306_DrawPixel+0xac>
		return;
 80015f2:	bf00      	nop
	}
}
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200005b0 	.word	0x200005b0
 8001604:	200001b0 	.word	0x200001b0

08001608 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001618:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SSD1306_GotoXY+0x28>)
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <SSD1306_GotoXY+0x28>)
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	8053      	strh	r3, [r2, #2]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	200005b0 	.word	0x200005b0

08001634 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	4613      	mov	r3, r2
 8001642:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <SSD1306_Putc+0xfc>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
	if (
 8001650:	2b7f      	cmp	r3, #127	; 0x7f
 8001652:	dc07      	bgt.n	8001664 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <SSD1306_Putc+0xfc>)
 8001656:	885b      	ldrh	r3, [r3, #2]
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001660:	2b3f      	cmp	r3, #63	; 0x3f
 8001662:	dd01      	ble.n	8001668 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001664:	2300      	movs	r3, #0
 8001666:	e05e      	b.n	8001726 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e04b      	b.n	8001706 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	3b20      	subs	r3, #32
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	7849      	ldrb	r1, [r1, #1]
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4619      	mov	r1, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	440b      	add	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e030      	b.n	80016f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d010      	beq.n	80016c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <SSD1306_Putc+0xfc>)
 80016a4:	881a      	ldrh	r2, [r3, #0]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	b298      	uxth	r0, r3
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <SSD1306_Putc+0xfc>)
 80016b0:	885a      	ldrh	r2, [r3, #2]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff ff43 	bl	8001548 <SSD1306_DrawPixel>
 80016c2:	e014      	b.n	80016ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <SSD1306_Putc+0xfc>)
 80016c6:	881a      	ldrh	r2, [r3, #0]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b298      	uxth	r0, r3
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <SSD1306_Putc+0xfc>)
 80016d2:	885a      	ldrh	r2, [r3, #2]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b299      	uxth	r1, r3
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff ff2d 	bl	8001548 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3301      	adds	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d3c8      	bcc.n	8001692 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	785b      	ldrb	r3, [r3, #1]
 800170a:	461a      	mov	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4293      	cmp	r3, r2
 8001710:	d3ad      	bcc.n	800166e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <SSD1306_Putc+0xfc>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4413      	add	r3, r2
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <SSD1306_Putc+0xfc>)
 8001722:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001724:	79fb      	ldrb	r3, [r7, #7]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200005b0 	.word	0x200005b0

08001734 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	4613      	mov	r3, r2
 8001740:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001742:	e012      	b.n	800176a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	79fa      	ldrb	r2, [r7, #7]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff71 	bl	8001634 <SSD1306_Putc>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d002      	beq.n	8001764 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	e008      	b.n	8001776 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3301      	adds	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1e8      	bne.n	8001744 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fec8 	bl	8001518 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001788:	f7ff fe76 	bl	8001478 <SSD1306_UpdateScreen>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <ssd1306_I2C_Init+0x28>)
 8001798:	607b      	str	r3, [r7, #4]
	while(p>0)
 800179a:	e002      	b.n	80017a2 <ssd1306_I2C_Init+0x12>
		p--;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	0003d090 	.word	0x0003d090

080017bc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b0c7      	sub	sp, #284	; 0x11c
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	4604      	mov	r4, r0
 80017c4:	4608      	mov	r0, r1
 80017c6:	4639      	mov	r1, r7
 80017c8:	600a      	str	r2, [r1, #0]
 80017ca:	4619      	mov	r1, r3
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	4622      	mov	r2, r4
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	1dbb      	adds	r3, r7, #6
 80017d4:	4602      	mov	r2, r0
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	460a      	mov	r2, r1
 80017dc:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	1dba      	adds	r2, r7, #6
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017ee:	e010      	b.n	8001812 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 80017f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017f4:	463a      	mov	r2, r7
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	441a      	add	r2, r3
 80017fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017fe:	3301      	adds	r3, #1
 8001800:	7811      	ldrb	r1, [r2, #0]
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001808:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800180c:	3301      	adds	r3, #1
 800180e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001812:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001816:	b29b      	uxth	r3, r3
 8001818:	1d3a      	adds	r2, r7, #4
 800181a:	8812      	ldrh	r2, [r2, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8e7      	bhi.n	80017f0 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b299      	uxth	r1, r3
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b29b      	uxth	r3, r3
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	200a      	movs	r0, #10
 8001834:	9000      	str	r0, [sp, #0]
 8001836:	4804      	ldr	r0, [pc, #16]	; (8001848 <ssd1306_I2C_WriteMulti+0x8c>)
 8001838:	f000 fe54 	bl	80024e4 <HAL_I2C_Master_Transmit>
}
 800183c:	bf00      	nop
 800183e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	200007d8 	.word	0x200007d8

0800184c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 800184c:	b082      	sub	sp, #8
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af02      	add	r7, sp, #8
 8001854:	f107 0c18 	add.w	ip, r7, #24
 8001858:	e88c 000c 	stmia.w	ip, {r2, r3}
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
 8001860:	460b      	mov	r3, r1
 8001862:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001868:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800186c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	b299      	uxth	r1, r3
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	230a      	movs	r3, #10
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f107 0018 	add.w	r0, r7, #24
 8001880:	f000 fe30 	bl	80024e4 <HAL_I2C_Master_Transmit>
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800188e:	b002      	add	sp, #8
 8001890:	4770      	bx	lr
	...

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_I2C_MspInit+0x18c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12c      	bne.n	8001960 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	4b5a      	ldr	r3, [pc, #360]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a59      	ldr	r2, [pc, #356]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23c0      	movs	r3, #192	; 0xc0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001926:	2312      	movs	r3, #18
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001932:	2304      	movs	r3, #4
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	484e      	ldr	r0, [pc, #312]	; (8001a78 <HAL_I2C_MspInit+0x194>)
 800193e:	f000 fabd 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800195e:	e083      	b.n	8001a68 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <HAL_I2C_MspInit+0x198>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12d      	bne.n	80019c6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a40      	ldr	r2, [pc, #256]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001986:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	2312      	movs	r3, #18
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001998:	2304      	movs	r3, #4
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	4835      	ldr	r0, [pc, #212]	; (8001a78 <HAL_I2C_MspInit+0x194>)
 80019a4:	f000 fa8a 	bl	8001ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
}
 80019c4:	e050      	b.n	8001a68 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2d      	ldr	r2, [pc, #180]	; (8001a80 <HAL_I2C_MspInit+0x19c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d14b      	bne.n	8001a68 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4817      	ldr	r0, [pc, #92]	; (8001a84 <HAL_I2C_MspInit+0x1a0>)
 8001a26:	f000 fa49 	bl	8001ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	4619      	mov	r1, r3
 8001a46:	4810      	ldr	r0, [pc, #64]	; (8001a88 <HAL_I2C_MspInit+0x1a4>)
 8001a48:	f000 fa38 	bl	8001ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_I2C_MspInit+0x190>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
}
 8001a68:	bf00      	nop
 8001a6a:	3738      	adds	r7, #56	; 0x38
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40005800 	.word	0x40005800
 8001a80:	40005c00 	.word	0x40005c00
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020000 	.word	0x40020000

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <MemManage_Handler+0x4>

08001a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad8:	f000 f89a 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <OTG_FS_IRQHandler+0x10>)
 8001ae6:	f001 fde6 	bl	80036b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20001e3c 	.word	0x20001e3c

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b42:	f7ff ffd7 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f006 ff01 	bl	800894c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7fe fe15 	bl	8000778 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8001b5c:	080099c4 	.word	0x080099c4
  ldr r2, =_sbss
 8001b60:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8001b64:	20002244 	.word	0x20002244

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f94f 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fe78 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f967 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bec:	f000 f92f 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000014 	.word	0x20000014
 8001c08:	2000001c 	.word	0x2000001c
 8001c0c:	20000018 	.word	0x20000018

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000001c 	.word	0x2000001c
 8001c34:	20000968 	.word	0x20000968

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000968 	.word	0x20000968

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000001c 	.word	0x2000001c

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff3e 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff31 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e16b      	b.n	80021b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 815a 	bne.w	80021aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d123      	bne.n	8002000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80b4 	beq.w	80021aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a5b      	ldr	r2, [pc, #364]	; (80021cc <HAL_GPIO_Init+0x310>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_GPIO_Init+0x314>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x226>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_Init+0x318>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x222>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a50      	ldr	r2, [pc, #320]	; (80021d8 <HAL_GPIO_Init+0x31c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x21e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_GPIO_Init+0x320>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x21a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_GPIO_Init+0x324>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x216>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x328>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x212>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x32c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <HAL_GPIO_Init+0x330>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x20a>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00e      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020c6:	2308      	movs	r3, #8
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x310>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002126:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_GPIO_Init+0x334>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002150:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f ae90 	bls.w	8001ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40021c00 	.word	0x40021c00
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002210:	e003      	b.n	800221a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43d9      	mvns	r1, r3
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e12b      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fb2e 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c0:	f002 fe4c 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 80022c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a81      	ldr	r2, [pc, #516]	; (80024d0 <HAL_I2C_Init+0x274>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d807      	bhi.n	80022e0 <HAL_I2C_Init+0x84>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_I2C_Init+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e006      	b.n	80022ee <HAL_I2C_Init+0x92>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a7d      	ldr	r2, [pc, #500]	; (80024d8 <HAL_I2C_Init+0x27c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0e7      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a78      	ldr	r2, [pc, #480]	; (80024dc <HAL_I2C_Init+0x280>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_I2C_Init+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d802      	bhi.n	8002330 <HAL_I2C_Init+0xd4>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3301      	adds	r3, #1
 800232e:	e009      	b.n	8002344 <HAL_I2C_Init+0xe8>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a69      	ldr	r2, [pc, #420]	; (80024e0 <HAL_I2C_Init+0x284>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	3301      	adds	r3, #1
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	495c      	ldr	r1, [pc, #368]	; (80024d0 <HAL_I2C_Init+0x274>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d819      	bhi.n	8002398 <HAL_I2C_Init+0x13c>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e59      	subs	r1, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002378:	400b      	ands	r3, r1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_I2C_Init+0x138>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e59      	subs	r1, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fbb1 f3f3 	udiv	r3, r1, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	e051      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002394:	2304      	movs	r3, #4
 8002396:	e04f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_I2C_Init+0x168>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Init+0x18e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x196>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <HAL_I2C_Init+0x1bc>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e58      	subs	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	6809      	ldr	r1, [r1, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6911      	ldr	r1, [r2, #16]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff fb9e 	bl	8001c38 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80e0 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4970      	ldr	r1, [pc, #448]	; (80026d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fda0 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e0d3      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x50>
 8002530:	2302      	movs	r3, #2
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d007      	beq.n	800255a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2210      	movs	r2, #16
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_I2C_Master_Transmit+0x1f8>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fbf0 	bl	8002d88 <I2C_MasterRequestWrite>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025c8:	e066      	b.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fe1a 	bl	8003208 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_I2C_Master_Transmit+0x188>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fe0a 	bl	800328a <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d194      	bne.n	80025ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026fa:	f7ff fa9d 	bl	8001c38 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b20      	cmp	r3, #32
 800270a:	f040 8208 	bne.w	8002b1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2319      	movs	r3, #25
 8002714:	2201      	movs	r2, #1
 8002716:	497b      	ldr	r1, [pc, #492]	; (8002904 <HAL_I2C_Mem_Read+0x224>)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fc9f 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
 8002726:	e1fb      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Mem_Read+0x56>
 8002732:	2302      	movs	r3, #2
 8002734:	e1f4      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d007      	beq.n	800275c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2222      	movs	r2, #34	; 0x22
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_I2C_Mem_Read+0x228>)
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800279e:	88f8      	ldrh	r0, [r7, #6]
 80027a0:	893a      	ldrh	r2, [r7, #8]
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	4603      	mov	r3, r0
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fb6c 	bl	8002e8c <I2C_RequestMemoryRead>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1b0      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d113      	bne.n	80027ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e184      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d11b      	bne.n	800282e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e164      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b02      	cmp	r3, #2
 8002834:	d11b      	bne.n	800286e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002844:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	e144      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002884:	e138      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b03      	cmp	r3, #3
 800288c:	f200 80f1 	bhi.w	8002a72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b01      	cmp	r3, #1
 8002896:	d123      	bne.n	80028e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fd35 	bl	800330c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e139      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028de:	e10b      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d14e      	bne.n	8002986 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	2200      	movs	r2, #0
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <HAL_I2C_Mem_Read+0x22c>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fbb2 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e10e      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000
 800290c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002984:	e0b8      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	2200      	movs	r2, #0
 800298e:	4966      	ldr	r1, [pc, #408]	; (8002b28 <HAL_I2C_Mem_Read+0x448>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fb63 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0bf      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e8:	2200      	movs	r2, #0
 80029ea:	494f      	ldr	r1, [pc, #316]	; (8002b28 <HAL_I2C_Mem_Read+0x448>)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fb35 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e091      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a70:	e042      	b.n	8002af8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fc48 	bl	800330c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e04c      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d118      	bne.n	8002af8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f aec2 	bne.w	8002886 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010004 	.word	0x00010004

08002b2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff f87c 	bl	8001c38 <HAL_GetTick>
 8002b40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	f040 8111 	bne.w	8002d76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2319      	movs	r3, #25
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4988      	ldr	r1, [pc, #544]	; (8002d80 <HAL_I2C_IsDeviceReady+0x254>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fa7c 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e104      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2C_IsDeviceReady+0x50>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0fd      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d007      	beq.n	8002ba2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2224      	movs	r2, #36	; 0x24
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a70      	ldr	r2, [pc, #448]	; (8002d84 <HAL_I2C_IsDeviceReady+0x258>)
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa3a 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d103      	bne.n	8002c06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0b6      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f80d 	bl	8001c38 <HAL_GetTick>
 8002c1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c4e:	e025      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7fe fff2 	bl	8001c38 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <HAL_I2C_IsDeviceReady+0x13a>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	22a0      	movs	r2, #160	; 0xa0
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_I2C_IsDeviceReady+0x188>
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_I2C_IsDeviceReady+0x188>
 8002cae:	7dbb      	ldrb	r3, [r7, #22]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0cd      	beq.n	8002c50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d129      	bne.n	8002d1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2319      	movs	r3, #25
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4921      	ldr	r1, [pc, #132]	; (8002d80 <HAL_I2C_IsDeviceReady+0x254>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f9ae 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e036      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e02c      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2319      	movs	r3, #25
 8002d3e:	2201      	movs	r2, #1
 8002d40:	490f      	ldr	r1, [pc, #60]	; (8002d80 <HAL_I2C_IsDeviceReady+0x254>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f98a 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e012      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	f4ff af32 	bcc.w	8002bc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d006      	beq.n	8002db2 <I2C_MasterRequestWrite+0x2a>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d003      	beq.n	8002db2 <I2C_MasterRequestWrite+0x2a>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002db0:	d108      	bne.n	8002dc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e00b      	b.n	8002ddc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	2b12      	cmp	r3, #18
 8002dca:	d107      	bne.n	8002ddc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f937 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d103      	bne.n	8002e0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e035      	b.n	8002e7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e18:	d108      	bne.n	8002e2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	e01b      	b.n	8002e64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e2c:	897b      	ldrh	r3, [r7, #10]
 8002e2e:	11db      	asrs	r3, r3, #7
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0306 	and.w	r3, r3, #6
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f063 030f 	orn	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <I2C_MasterRequestWrite+0xfc>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f95d 	bl	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e010      	b.n	8002e7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4907      	ldr	r1, [pc, #28]	; (8002e88 <I2C_MasterRequestWrite+0x100>)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f94d 	bl	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	00010008 	.word	0x00010008
 8002e88:	00010002 	.word	0x00010002

08002e8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f8c2 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eec:	d103      	bne.n	8002ef6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0aa      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	4952      	ldr	r1, [pc, #328]	; (8003058 <I2C_RequestMemoryRead+0x1cc>)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f8fa 	bl	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e097      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6a39      	ldr	r1, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f964 	bl	8003208 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e076      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	e021      	b.n	8002fb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f74:	893b      	ldrh	r3, [r7, #8]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	6a39      	ldr	r1, [r7, #32]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f93e 	bl	8003208 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d107      	bne.n	8002faa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e050      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fae:	893b      	ldrh	r3, [r7, #8]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	6a39      	ldr	r1, [r7, #32]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f923 	bl	8003208 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e035      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f82b 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301a:	d103      	bne.n	8003024 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e013      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003028:	897b      	ldrh	r3, [r7, #10]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	6a3a      	ldr	r2, [r7, #32]
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <I2C_RequestMemoryRead+0x1cc>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f863 	bl	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	00010002 	.word	0x00010002

0800305c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306c:	e025      	b.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003074:	d021      	beq.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fddf 	bl	8001c38 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e023      	b.n	8003102 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10d      	bne.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	e00c      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d0b6      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003118:	e051      	b.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003128:	d123      	bne.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003142:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0204 	orr.w	r2, r3, #4
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e046      	b.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003178:	d021      	beq.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fd5d 	bl	8001c38 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d116      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e020      	b.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10c      	bne.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e00b      	b.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d18d      	bne.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003214:	e02d      	b.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8ce 	bl	80033b8 <I2C_IsAcknowledgeFailed>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e02d      	b.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800322c:	d021      	beq.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7fe fd03 	bl	8001c38 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d1ca      	bne.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003296:	e02d      	b.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f88d 	bl	80033b8 <I2C_IsAcknowledgeFailed>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e02d      	b.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ae:	d021      	beq.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7fe fcc2 	bl	8001c38 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e007      	b.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d1ca      	bne.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003318:	e042      	b.n	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b10      	cmp	r3, #16
 8003326:	d119      	bne.n	800335c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0210 	mvn.w	r2, #16
 8003330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e029      	b.n	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fe fc6c 	bl	8001c38 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d116      	bne.n	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d1b5      	bne.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d11b      	bne.n	8003408 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003418:	b08f      	sub	sp, #60	; 0x3c
 800341a:	af0a      	add	r7, sp, #40	; 0x28
 800341c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e10f      	b.n	8003648 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f004 ff6e 	bl	8008324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2203      	movs	r2, #3
 800344c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f001 fea1 	bl	80051ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	687e      	ldr	r6, [r7, #4]
 8003474:	466d      	mov	r5, sp
 8003476:	f106 0410 	add.w	r4, r6, #16
 800347a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003486:	e885 0003 	stmia.w	r5, {r0, r1}
 800348a:	1d33      	adds	r3, r6, #4
 800348c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	f001 fd78 	bl	8004f84 <USB_CoreInit>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0d0      	b.n	8003648 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fe8f 	bl	80051d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	e04a      	b.n	800354e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	333d      	adds	r3, #61	; 0x3d
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	333c      	adds	r3, #60	; 0x3c
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	b298      	uxth	r0, r3
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3342      	adds	r3, #66	; 0x42
 80034f4:	4602      	mov	r2, r0
 80034f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	333f      	adds	r3, #63	; 0x3f
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3344      	adds	r3, #68	; 0x44
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3350      	adds	r3, #80	; 0x50
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	3301      	adds	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d3af      	bcc.n	80034b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	e044      	b.n	80035e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	3301      	adds	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3b5      	bcc.n	800355e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	687e      	ldr	r6, [r7, #4]
 80035fa:	466d      	mov	r5, sp
 80035fc:	f106 0410 	add.w	r4, r6, #16
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800360c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003610:	1d33      	adds	r3, r6, #4
 8003612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f001 fe27 	bl	8005268 <USB_DevInit>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e00d      	b.n	8003648 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fea3 	bl	800638c <USB_DevDisconnect>

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003650 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_PCD_Start+0x1c>
 8003668:	2302      	movs	r3, #2
 800366a:	e020      	b.n	80036ae <HAL_PCD_Start+0x5e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	2b01      	cmp	r3, #1
 800367a:	d109      	bne.n	8003690 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003680:	2b01      	cmp	r3, #1
 8003682:	d005      	beq.n	8003690 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fd79 	bl	800518c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 fe53 	bl	800634a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036b6:	b590      	push	{r4, r7, lr}
 80036b8:	b08d      	sub	sp, #52	; 0x34
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f002 ff11 	bl	80064f4 <USB_GetMode>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f040 839d 	bne.w	8003e14 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fe75 	bl	80063ce <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8393 	beq.w	8003e12 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fe6c 	bl	80063ce <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d107      	bne.n	8003710 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f002 0202 	and.w	r2, r2, #2
 800370e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f002 fe5a 	bl	80063ce <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d161      	bne.n	80037e8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0210 	bic.w	r2, r2, #16
 8003732:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	0c5b      	lsrs	r3, r3, #17
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2b02      	cmp	r3, #2
 800375e:	d124      	bne.n	80037aa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d035      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	6a38      	ldr	r0, [r7, #32]
 8003780:	f002 fc91 	bl	80060a6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003790:	441a      	add	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a2:	441a      	add	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	619a      	str	r2, [r3, #24]
 80037a8:	e016      	b.n	80037d8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	0c5b      	lsrs	r3, r3, #17
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d110      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037bc:	2208      	movs	r2, #8
 80037be:	4619      	mov	r1, r3
 80037c0:	6a38      	ldr	r0, [r7, #32]
 80037c2:	f002 fc70 	bl	80060a6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d2:	441a      	add	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0210 	orr.w	r2, r2, #16
 80037e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f002 fdee 	bl	80063ce <USB_ReadInterrupts>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037fc:	d16e      	bne.n	80038dc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fdf4 	bl	80063f4 <USB_ReadDevAllOutEpInterrupt>
 800380c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800380e:	e062      	b.n	80038d6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d057      	beq.n	80038ca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fe19 	bl	800645c <USB_ReadDevOutEPInterrupt>
 800382a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	461a      	mov	r2, r3
 8003844:	2301      	movs	r3, #1
 8003846:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fdb0 	bl	80043b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003866:	461a      	mov	r2, r3
 8003868:	2308      	movs	r3, #8
 800386a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800386c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 feaa 	bl	80045c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	461a      	mov	r2, r3
 800388c:	2310      	movs	r3, #16
 800388e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	2320      	movs	r3, #32
 80038aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	3301      	adds	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d199      	bne.n	8003810 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fd74 	bl	80063ce <USB_ReadInterrupts>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f0:	f040 80c0 	bne.w	8003a74 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fd95 	bl	8006428 <USB_ReadDevAllInEpInterrupt>
 80038fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003904:	e0b2      	b.n	8003a6c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a7 	beq.w	8003a60 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fdbb 	bl	8006498 <USB_ReadDevInEPInterrupt>
 8003922:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d057      	beq.n	80039de <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	2201      	movs	r2, #1
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	69f9      	ldr	r1, [r7, #28]
 800394a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800394e:	4013      	ands	r3, r2
 8003950:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395e:	461a      	mov	r2, r3
 8003960:	2301      	movs	r3, #1
 8003962:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d132      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3348      	adds	r3, #72	; 0x48
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4403      	add	r3, r0
 800398c:	3344      	adds	r3, #68	; 0x44
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4419      	add	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4403      	add	r3, r0
 80039a0:	3348      	adds	r3, #72	; 0x48
 80039a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x31c>
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3350      	adds	r3, #80	; 0x50
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d108      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039ca:	461a      	mov	r2, r3
 80039cc:	2101      	movs	r1, #1
 80039ce:	f002 fdc3 	bl	8006558 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f004 fd24 	bl	8008426 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2308      	movs	r3, #8
 80039f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	461a      	mov	r2, r3
 8003a12:	2310      	movs	r3, #16
 8003a14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2340      	movs	r3, #64	; 0x40
 8003a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fc1b 	bl	8004296 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	3301      	adds	r3, #1
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f47f af49 	bne.w	8003906 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fca8 	bl	80063ce <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a88:	d122      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d108      	bne.n	8003aba <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fe26 	bl	8004704 <HAL_PCDEx_LPM_Callback>
 8003ab8:	e002      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f004 fd2a 	bl	8008514 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f002 fc7a 	bl	80063ce <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae4:	d112      	bne.n	8003b0c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f004 fce6 	bl	80084c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b0a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fc5c 	bl	80063ce <USB_ReadInterrupts>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	f040 80c7 	bne.w	8003cb2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fcf6 	bl	8005530 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	e056      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	461a      	mov	r2, r3
 8003b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b7c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8e:	0151      	lsls	r1, r2, #5
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	440a      	add	r2, r1
 8003b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	461a      	mov	r2, r3
 8003bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bf0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3a3      	bcc.n	8003b4a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2e:	f043 030b 	orr.w	r3, r3, #11
 8003c32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c44:	f043 030b 	orr.w	r3, r3, #11
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	e015      	b.n	8003c78 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c5e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c72:	f043 030b 	orr.w	r3, r3, #11
 8003c76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f002 fc5b 	bl	8006558 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 fb89 	bl	80063ce <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc6:	d124      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 fc1f 	bl	8006510 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fc87 	bl	80055ea <USB_GetDevSpeed>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681c      	ldr	r4, [r3, #0]
 8003ce8:	f001 f92c 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8003cec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f001 f9a6 	bl	8005048 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f004 fbba 	bl	8008476 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f002 fb59 	bl	80063ce <USB_ReadInterrupts>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d10a      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f004 fb97 	bl	800845a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f002 0208 	and.w	r2, r2, #8
 8003d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 fb44 	bl	80063ce <USB_ReadInterrupts>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d50:	d10f      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f004 fbf9 	bl	8008554 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fb29 	bl	80063ce <USB_ReadInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d86:	d10f      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f004 fbcc 	bl	8008530 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 fb0e 	bl	80063ce <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f004 fbda 	bl	8008578 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 faf8 	bl	80063ce <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d115      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f004 fbca 	bl	8008594 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	e000      	b.n	8003e14 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003e12:	bf00      	nop
    }
  }
}
 8003e14:	3734      	adds	r7, #52	; 0x34
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd90      	pop	{r4, r7, pc}

08003e1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_PCD_SetAddress+0x1a>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e013      	b.n	8003e5c <HAL_PCD_SetAddress+0x42>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fa56 	bl	80062fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	70fb      	strb	r3, [r7, #3]
 8003e76:	460b      	mov	r3, r1
 8003e78:	803b      	strh	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da0f      	bge.n	8003eaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	3338      	adds	r3, #56	; 0x38
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	705a      	strb	r2, [r3, #1]
 8003ea8:	e00f      	b.n	8003eca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 020f 	and.w	r2, r3, #15
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ed6:	883a      	ldrh	r2, [r7, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	78ba      	ldrb	r2, [r7, #2]
 8003ee0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ef4:	78bb      	ldrb	r3, [r7, #2]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d102      	bne.n	8003f00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_PCD_EP_Open+0xaa>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e00e      	b.n	8003f2c <HAL_PCD_EP_Open+0xc8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fb89 	bl	8005634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	da0f      	bge.n	8003f68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	f003 020f 	and.w	r2, r3, #15
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	3338      	adds	r3, #56	; 0x38
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	705a      	strb	r2, [r3, #1]
 8003f66:	e00f      	b.n	8003f88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_PCD_EP_Close+0x6e>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e00e      	b.n	8003fc0 <HAL_PCD_EP_Close+0x8c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fbc7 	bl	8005744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f003 020f 	and.w	r2, r3, #15
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2200      	movs	r2, #0
 8004008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	b2da      	uxtb	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d102      	bne.n	8004024 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004024:	7afb      	ldrb	r3, [r7, #11]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6979      	ldr	r1, [r7, #20]
 800403c:	f001 fea2 	bl	8005d84 <USB_EP0StartXfer>
 8004040:	e008      	b.n	8004054 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	f001 fc54 	bl	80058fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004080:	681b      	ldr	r3, [r3, #0]
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	460b      	mov	r3, r1
 800409c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	f003 020f 	and.w	r2, r3, #15
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	3338      	adds	r3, #56	; 0x38
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	3304      	adds	r3, #4
 80040b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2201      	movs	r2, #1
 80040cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ce:	7afb      	ldrb	r3, [r7, #11]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d102      	bne.n	80040e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e8:	7afb      	ldrb	r3, [r7, #11]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	f001 fe40 	bl	8005d84 <USB_EP0StartXfer>
 8004104:	e008      	b.n	8004118 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6979      	ldr	r1, [r7, #20]
 8004114:	f001 fbf2 	bl	80058fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d901      	bls.n	8004140 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e050      	b.n	80041e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da0f      	bge.n	8004168 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	3338      	adds	r3, #56	; 0x38
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	705a      	strb	r2, [r3, #1]
 8004166:	e00d      	b.n	8004184 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	3304      	adds	r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_PCD_EP_SetStall+0x82>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e01e      	b.n	80041e2 <HAL_PCD_EP_SetStall+0xc0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68f9      	ldr	r1, [r7, #12]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 ffcf 	bl	8006156 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d2:	461a      	mov	r2, r3
 80041d4:	f002 f9c0 	bl	8006558 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	f003 020f 	and.w	r2, r3, #15
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	d901      	bls.n	8004208 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e042      	b.n	800428e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	da0f      	bge.n	8004230 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	3338      	adds	r3, #56	; 0x38
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4413      	add	r3, r2
 8004224:	3304      	adds	r3, #4
 8004226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	705a      	strb	r2, [r3, #1]
 800422e:	e00f      	b.n	8004250 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 020f 	and.w	r2, r3, #15
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	3304      	adds	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PCD_EP_ClrStall+0x86>
 800426c:	2302      	movs	r3, #2
 800426e:	e00e      	b.n	800428e <HAL_PCD_EP_ClrStall+0xa4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	4618      	mov	r0, r3
 8004280:	f001 ffd7 	bl	8006232 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b08a      	sub	sp, #40	; 0x28
 800429a:	af02      	add	r7, sp, #8
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	3338      	adds	r3, #56	; 0x38
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d901      	bls.n	80042ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e06c      	b.n	80043a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3303      	adds	r3, #3
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042f2:	e02b      	b.n	800434c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	429a      	cmp	r2, r3
 8004308:	d902      	bls.n	8004310 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3303      	adds	r3, #3
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68d9      	ldr	r1, [r3, #12]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004328:	b2db      	uxtb	r3, r3
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4603      	mov	r3, r0
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f001 fe7b 	bl	800602a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	441a      	add	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	441a      	add	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	b29b      	uxth	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	429a      	cmp	r2, r3
 8004360:	d809      	bhi.n	8004376 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800436a:	429a      	cmp	r2, r3
 800436c:	d203      	bcs.n	8004376 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1be      	bne.n	80042f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	429a      	cmp	r2, r3
 8004380:	d811      	bhi.n	80043a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	2201      	movs	r2, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	43db      	mvns	r3, r3
 800439c:	6939      	ldr	r1, [r7, #16]
 800439e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a2:	4013      	ands	r3, r2
 80043a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	333c      	adds	r3, #60	; 0x3c
 80043c8:	3304      	adds	r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	f040 80a0 	bne.w	8004528 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a72      	ldr	r2, [pc, #456]	; (80045c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f240 80dd 	bls.w	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80d7 	beq.w	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	461a      	mov	r2, r3
 8004416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441a:	6093      	str	r3, [r2, #8]
 800441c:	e0cb      	b.n	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	2320      	movs	r3, #32
 8004438:	6093      	str	r3, [r2, #8]
 800443a:	e0bc      	b.n	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 80b7 	bne.w	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a5d      	ldr	r2, [pc, #372]	; (80045c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d90f      	bls.n	8004470 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004466:	461a      	mov	r2, r3
 8004468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446c:	6093      	str	r3, [r2, #8]
 800446e:	e0a2      	b.n	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004482:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	0159      	lsls	r1, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	440b      	add	r3, r1
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004496:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4403      	add	r3, r0
 80044a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4403      	add	r3, r0
 80044ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4419      	add	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4403      	add	r3, r0
 80044e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d114      	bne.n	800451a <PCD_EP_OutXfrComplete_int+0x16a>
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004512:	461a      	mov	r2, r3
 8004514:	2101      	movs	r1, #1
 8004516:	f002 f81f 	bl	8006558 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f003 ff65 	bl	80083f0 <HAL_PCD_DataOutStageCallback>
 8004526:	e046      	b.n	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d124      	bne.n	800457a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	e032      	b.n	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	461a      	mov	r2, r3
 8004568:	2320      	movs	r3, #32
 800456a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f003 ff3c 	bl	80083f0 <HAL_PCD_DataOutStageCallback>
 8004578:	e01d      	b.n	80045b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d114      	bne.n	80045aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d108      	bne.n	80045aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045a2:	461a      	mov	r2, r3
 80045a4:	2100      	movs	r1, #0
 80045a6:	f001 ffd7 	bl	8006558 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f003 ff1d 	bl	80083f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	4f54300a 	.word	0x4f54300a
 80045c4:	4f54310a 	.word	0x4f54310a

080045c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	333c      	adds	r3, #60	; 0x3c
 80045e0:	3304      	adds	r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a15      	ldr	r2, [pc, #84]	; (8004650 <PCD_EP_OutSetupPacket_int+0x88>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d90e      	bls.n	800461c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	461a      	mov	r2, r3
 8004616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f003 fed5 	bl	80083cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <PCD_EP_OutSetupPacket_int+0x88>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d90c      	bls.n	8004644 <PCD_EP_OutSetupPacket_int+0x7c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d108      	bne.n	8004644 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800463c:	461a      	mov	r2, r3
 800463e:	2101      	movs	r1, #1
 8004640:	f001 ff8a 	bl	8006558 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	4f54300a 	.word	0x4f54300a

08004654 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
 8004660:	4613      	mov	r3, r2
 8004662:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004672:	883b      	ldrh	r3, [r7, #0]
 8004674:	0419      	lsls	r1, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	430a      	orrs	r2, r1
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
 8004680:	e028      	b.n	80046d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	e00d      	b.n	80046b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	3340      	adds	r3, #64	; 0x40
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	4413      	add	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	3301      	adds	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3ec      	bcc.n	8004696 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046bc:	883b      	ldrh	r3, [r7, #0]
 80046be:	0418      	lsls	r0, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	4302      	orrs	r2, r0
 80046cc:	3340      	adds	r3, #64	; 0x40
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e264      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	4ba3      	ldr	r3, [pc, #652]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4ba0      	ldr	r3, [pc, #640]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b9d      	ldr	r3, [pc, #628]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e23f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b91      	ldr	r3, [pc, #580]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a90      	ldr	r2, [pc, #576]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b8b      	ldr	r3, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a8a      	ldr	r2, [pc, #552]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a87      	ldr	r2, [pc, #540]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b81      	ldr	r3, [pc, #516]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a80      	ldr	r2, [pc, #512]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd fa30 	bl	8001c38 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fd fa2c 	bl	8001c38 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e204      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fd fa1c 	bl	8001c38 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7fd fa18 	bl	8001c38 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1f0      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1c4      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b56      	ldr	r3, [pc, #344]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4952      	ldr	r1, [pc, #328]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <HAL_RCC_OscConfig+0x2b0>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fd f9d1 	bl	8001c38 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489a:	f7fd f9cd 	bl	8001c38 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1a5      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b46      	ldr	r3, [pc, #280]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4940      	ldr	r1, [pc, #256]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCC_OscConfig+0x2b0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd f9b0 	bl	8001c38 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048dc:	f7fd f9ac 	bl	8001c38 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e184      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d030      	beq.n	8004968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <HAL_RCC_OscConfig+0x2b4>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fd f990 	bl	8001c38 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7fd f98c 	bl	8001c38 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e164      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e015      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_OscConfig+0x2b4>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7fd f979 	bl	8001c38 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494a:	f7fd f975 	bl	8001c38 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e14d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495c:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a0 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d121      	bne.n	80049f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049be:	f7fd f93b 	bl	8001c38 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	e011      	b.n	80049ea <HAL_RCC_OscConfig+0x2ce>
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470000 	.word	0x42470000
 80049d0:	42470e80 	.word	0x42470e80
 80049d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fd f92e 	bl	8001c38 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e106      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <HAL_RCC_OscConfig+0x4e4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2f0>
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a80      	ldr	r2, [pc, #512]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e01c      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x312>
 8004a14:	4b7b      	ldr	r3, [pc, #492]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a7a      	ldr	r2, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b78      	ldr	r3, [pc, #480]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a77      	ldr	r2, [pc, #476]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
 8004a2e:	4b75      	ldr	r3, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a74      	ldr	r2, [pc, #464]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	4b72      	ldr	r3, [pc, #456]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a71      	ldr	r2, [pc, #452]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd f8f3 	bl	8001c38 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd f8ef 	bl	8001c38 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0c5      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	4b65      	ldr	r3, [pc, #404]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCC_OscConfig+0x33a>
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fd f8dd 	bl	8001c38 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd f8d9 	bl	8001c38 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0af      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	4b5a      	ldr	r3, [pc, #360]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 809b 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d05c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d141      	bne.n	8004b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b4c      	ldr	r3, [pc, #304]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fd f8ad 	bl	8001c38 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fd f8a9 	bl	8001c38 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e081      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	019b      	lsls	r3, r3, #6
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	4937      	ldr	r1, [pc, #220]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2a:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd f882 	bl	8001c38 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd f87e 	bl	8001c38 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e056      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x41c>
 8004b56:	e04e      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd f86b 	bl	8001c38 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fd f867 	bl	8001c38 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e03f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b78:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004b84:	e037      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e032      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d028      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d121      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d11a      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d111      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40007000 	.word	0x40007000
 8004c04:	40023800 	.word	0x40023800
 8004c08:	42470060 	.word	0x42470060

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0cc      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b68      	ldr	r3, [pc, #416]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90c      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d044      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b3f      	ldr	r3, [pc, #252]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e06f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e067      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4934      	ldr	r1, [pc, #208]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7fc ff9c 	bl	8001c38 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7fc ff98 	bl	8001c38 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fefc 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800999c 	.word	0x0800999c
 8004dd0:	20000014 	.word	0x20000014
 8004dd4:	20000018 	.word	0x20000018

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	b5b0      	push	{r4, r5, r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dde:	2100      	movs	r1, #0
 8004de0:	6079      	str	r1, [r7, #4]
 8004de2:	2100      	movs	r1, #0
 8004de4:	60f9      	str	r1, [r7, #12]
 8004de6:	2100      	movs	r1, #0
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dea:	2100      	movs	r1, #0
 8004dec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dee:	4952      	ldr	r1, [pc, #328]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004df0:	6889      	ldr	r1, [r1, #8]
 8004df2:	f001 010c 	and.w	r1, r1, #12
 8004df6:	2908      	cmp	r1, #8
 8004df8:	d00d      	beq.n	8004e16 <HAL_RCC_GetSysClockFreq+0x3e>
 8004dfa:	2908      	cmp	r1, #8
 8004dfc:	f200 8094 	bhi.w	8004f28 <HAL_RCC_GetSysClockFreq+0x150>
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x32>
 8004e04:	2904      	cmp	r1, #4
 8004e06:	d003      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x38>
 8004e08:	e08e      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0a:	4b4c      	ldr	r3, [pc, #304]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e0c:	60bb      	str	r3, [r7, #8]
       break;
 8004e0e:	e08e      	b.n	8004f2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e10:	4b4b      	ldr	r3, [pc, #300]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e12:	60bb      	str	r3, [r7, #8]
      break;
 8004e14:	e08b      	b.n	8004f2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e16:	4948      	ldr	r1, [pc, #288]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e18:	6849      	ldr	r1, [r1, #4]
 8004e1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e1e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e20:	4945      	ldr	r1, [pc, #276]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e22:	6849      	ldr	r1, [r1, #4]
 8004e24:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d024      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2c:	4942      	ldr	r1, [pc, #264]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e2e:	6849      	ldr	r1, [r1, #4]
 8004e30:	0989      	lsrs	r1, r1, #6
 8004e32:	4608      	mov	r0, r1
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004e3c:	f04f 0500 	mov.w	r5, #0
 8004e40:	ea00 0204 	and.w	r2, r0, r4
 8004e44:	ea01 0305 	and.w	r3, r1, r5
 8004e48:	493d      	ldr	r1, [pc, #244]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e4a:	fb01 f003 	mul.w	r0, r1, r3
 8004e4e:	2100      	movs	r1, #0
 8004e50:	fb01 f102 	mul.w	r1, r1, r2
 8004e54:	1844      	adds	r4, r0, r1
 8004e56:	493a      	ldr	r1, [pc, #232]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e58:	fba2 0101 	umull	r0, r1, r2, r1
 8004e5c:	1863      	adds	r3, r4, r1
 8004e5e:	4619      	mov	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	f7fb f9ae 	bl	80001c8 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e04a      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e76:	4b30      	ldr	r3, [pc, #192]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	ea02 0400 	and.w	r4, r2, r0
 8004e8e:	ea03 0501 	and.w	r5, r3, r1
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	014b      	lsls	r3, r1, #5
 8004ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ea4:	0142      	lsls	r2, r0, #5
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	1b00      	subs	r0, r0, r4
 8004eac:	eb61 0105 	sbc.w	r1, r1, r5
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	018b      	lsls	r3, r1, #6
 8004eba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ebe:	0182      	lsls	r2, r0, #6
 8004ec0:	1a12      	subs	r2, r2, r0
 8004ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ec6:	f04f 0000 	mov.w	r0, #0
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	00d9      	lsls	r1, r3, #3
 8004ed0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed4:	00d0      	lsls	r0, r2, #3
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	1912      	adds	r2, r2, r4
 8004edc:	eb45 0303 	adc.w	r3, r5, r3
 8004ee0:	f04f 0000 	mov.w	r0, #0
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	0299      	lsls	r1, r3, #10
 8004eea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eee:	0290      	lsls	r0, r2, #10
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f7fb f962 	bl	80001c8 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4613      	mov	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	3301      	adds	r3, #1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	60bb      	str	r3, [r7, #8]
      break;
 8004f26:	e002      	b.n	8004f2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x164>)
 8004f2a:	60bb      	str	r3, [r7, #8]
      break;
 8004f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bdb0      	pop	{r4, r5, r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	017d7840 	.word	0x017d7840

08004f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20000014 	.word	0x20000014

08004f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f60:	f7ff fff0 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0a9b      	lsrs	r3, r3, #10
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4903      	ldr	r1, [pc, #12]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f72:	5ccb      	ldrb	r3, [r1, r3]
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	080099ac 	.word	0x080099ac

08004f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f84:	b084      	sub	sp, #16
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	f107 001c 	add.w	r0, r7, #28
 8004f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d122      	bne.n	8004fe2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fb1c 	bl	8006614 <USB_CoreReset>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e01a      	b.n	8005018 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fb10 	bl	8006614 <USB_CoreReset>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
 800500a:	e005      	b.n	8005018 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10b      	bne.n	8005036 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f043 0206 	orr.w	r2, r3, #6
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005042:	b004      	add	sp, #16
 8005044:	4770      	bx	lr
	...

08005048 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d165      	bne.n	8005128 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4a41      	ldr	r2, [pc, #260]	; (8005164 <USB_SetTurnaroundTime+0x11c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d906      	bls.n	8005072 <USB_SetTurnaroundTime+0x2a>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a40      	ldr	r2, [pc, #256]	; (8005168 <USB_SetTurnaroundTime+0x120>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d202      	bcs.n	8005072 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800506c:	230f      	movs	r3, #15
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e062      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4a3c      	ldr	r2, [pc, #240]	; (8005168 <USB_SetTurnaroundTime+0x120>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d306      	bcc.n	8005088 <USB_SetTurnaroundTime+0x40>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a3b      	ldr	r2, [pc, #236]	; (800516c <USB_SetTurnaroundTime+0x124>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d202      	bcs.n	8005088 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005082:	230e      	movs	r3, #14
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e057      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a38      	ldr	r2, [pc, #224]	; (800516c <USB_SetTurnaroundTime+0x124>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d306      	bcc.n	800509e <USB_SetTurnaroundTime+0x56>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a37      	ldr	r2, [pc, #220]	; (8005170 <USB_SetTurnaroundTime+0x128>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d202      	bcs.n	800509e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005098:	230d      	movs	r3, #13
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e04c      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a33      	ldr	r2, [pc, #204]	; (8005170 <USB_SetTurnaroundTime+0x128>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d306      	bcc.n	80050b4 <USB_SetTurnaroundTime+0x6c>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a32      	ldr	r2, [pc, #200]	; (8005174 <USB_SetTurnaroundTime+0x12c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d802      	bhi.n	80050b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ae:	230c      	movs	r3, #12
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e041      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <USB_SetTurnaroundTime+0x12c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d906      	bls.n	80050ca <USB_SetTurnaroundTime+0x82>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a2e      	ldr	r2, [pc, #184]	; (8005178 <USB_SetTurnaroundTime+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d802      	bhi.n	80050ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050c4:	230b      	movs	r3, #11
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e036      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <USB_SetTurnaroundTime+0x130>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d906      	bls.n	80050e0 <USB_SetTurnaroundTime+0x98>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4a29      	ldr	r2, [pc, #164]	; (800517c <USB_SetTurnaroundTime+0x134>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d802      	bhi.n	80050e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050da:	230a      	movs	r3, #10
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e02b      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4a26      	ldr	r2, [pc, #152]	; (800517c <USB_SetTurnaroundTime+0x134>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d906      	bls.n	80050f6 <USB_SetTurnaroundTime+0xae>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a25      	ldr	r2, [pc, #148]	; (8005180 <USB_SetTurnaroundTime+0x138>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d202      	bcs.n	80050f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050f0:	2309      	movs	r3, #9
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e020      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a21      	ldr	r2, [pc, #132]	; (8005180 <USB_SetTurnaroundTime+0x138>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d306      	bcc.n	800510c <USB_SetTurnaroundTime+0xc4>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4a20      	ldr	r2, [pc, #128]	; (8005184 <USB_SetTurnaroundTime+0x13c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d802      	bhi.n	800510c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005106:	2308      	movs	r3, #8
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e015      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <USB_SetTurnaroundTime+0x13c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d906      	bls.n	8005122 <USB_SetTurnaroundTime+0xda>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <USB_SetTurnaroundTime+0x140>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d202      	bcs.n	8005122 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800511c:	2307      	movs	r3, #7
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e00a      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005122:	2306      	movs	r3, #6
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e007      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800512e:	2309      	movs	r3, #9
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e001      	b.n	8005138 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005134:	2309      	movs	r3, #9
 8005136:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	029b      	lsls	r3, r3, #10
 800514c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005150:	431a      	orrs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	00d8acbf 	.word	0x00d8acbf
 8005168:	00e4e1c0 	.word	0x00e4e1c0
 800516c:	00f42400 	.word	0x00f42400
 8005170:	01067380 	.word	0x01067380
 8005174:	011a499f 	.word	0x011a499f
 8005178:	01312cff 	.word	0x01312cff
 800517c:	014ca43f 	.word	0x014ca43f
 8005180:	016e3600 	.word	0x016e3600
 8005184:	01a6ab1f 	.word	0x01a6ab1f
 8005188:	01e84800 	.word	0x01e84800

0800518c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f043 0201 	orr.w	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d115      	bne.n	800521e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051fe:	2001      	movs	r0, #1
 8005200:	f7fc fd26 	bl	8001c50 <HAL_Delay>
      ms++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 f972 	bl	80064f4 <USB_GetMode>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d01e      	beq.n	8005254 <USB_SetCurrentMode+0x84>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b31      	cmp	r3, #49	; 0x31
 800521a:	d9f0      	bls.n	80051fe <USB_SetCurrentMode+0x2e>
 800521c:	e01a      	b.n	8005254 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d115      	bne.n	8005250 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005230:	2001      	movs	r0, #1
 8005232:	f7fc fd0d 	bl	8001c50 <HAL_Delay>
      ms++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 f959 	bl	80064f4 <USB_GetMode>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <USB_SetCurrentMode+0x84>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b31      	cmp	r3, #49	; 0x31
 800524c:	d9f0      	bls.n	8005230 <USB_SetCurrentMode+0x60>
 800524e:	e001      	b.n	8005254 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e005      	b.n	8005260 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b32      	cmp	r3, #50	; 0x32
 8005258:	d101      	bne.n	800525e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005268:	b084      	sub	sp, #16
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	e009      	b.n	800529c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3340      	adds	r3, #64	; 0x40
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	2200      	movs	r2, #0
 8005294:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3301      	adds	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b0e      	cmp	r3, #14
 80052a0:	d9f2      	bls.n	8005288 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11c      	bne.n	80052e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
 80052e0:	e00b      	b.n	80052fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005300:	461a      	mov	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	4619      	mov	r1, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	461a      	mov	r2, r3
 8005316:	680b      	ldr	r3, [r1, #0]
 8005318:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b01      	cmp	r3, #1
 800531e:	d10c      	bne.n	800533a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005326:	2100      	movs	r1, #0
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f945 	bl	80055b8 <USB_SetDevSpeed>
 800532e:	e008      	b.n	8005342 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005330:	2101      	movs	r1, #1
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f940 	bl	80055b8 <USB_SetDevSpeed>
 8005338:	e003      	b.n	8005342 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800533a:	2103      	movs	r1, #3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f93b 	bl	80055b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005342:	2110      	movs	r1, #16
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f8f3 	bl	8005530 <USB_FlushTxFifo>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f90f 	bl	8005578 <USB_FlushRxFifo>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	461a      	mov	r2, r3
 800536c:	2300      	movs	r3, #0
 800536e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	461a      	mov	r2, r3
 8005378:	2300      	movs	r3, #0
 800537a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	461a      	mov	r2, r3
 8005384:	2300      	movs	r3, #0
 8005386:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e043      	b.n	8005416 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a4:	d118      	bne.n	80053d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	461a      	mov	r2, r3
 80053ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	e013      	b.n	80053ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e008      	b.n	80053ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	461a      	mov	r2, r3
 80053e6:	2300      	movs	r3, #0
 80053e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	461a      	mov	r2, r3
 80053f8:	2300      	movs	r3, #0
 80053fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	461a      	mov	r2, r3
 800540a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800540e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	3301      	adds	r3, #1
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d3b7      	bcc.n	800538e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e043      	b.n	80054ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543a:	d118      	bne.n	800546e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	461a      	mov	r2, r3
 8005450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e013      	b.n	8005480 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	461a      	mov	r2, r3
 8005466:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e008      	b.n	8005480 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	2300      	movs	r3, #0
 8005490:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	461a      	mov	r2, r3
 80054a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3b7      	bcc.n	8005424 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f043 0210 	orr.w	r2, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <USB_DevInit+0x2c4>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f043 0208 	orr.w	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800551c:	7dfb      	ldrb	r3, [r7, #23]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005528:	b004      	add	sp, #16
 800552a:	4770      	bx	lr
 800552c:	803c3800 	.word	0x803c3800

08005530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <USB_FlushTxFifo+0x44>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d0f1      	beq.n	800554a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2210      	movs	r2, #16
 8005588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <USB_FlushRxFifo+0x3c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d0f1      	beq.n	800558a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0306 	and.w	r3, r3, #6
 8005602:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
 800560e:	e00a      	b.n	8005626 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d002      	beq.n	800561c <USB_GetDevSpeed+0x32>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d102      	bne.n	8005622 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800561c:	2302      	movs	r3, #2
 800561e:	75fb      	strb	r3, [r7, #23]
 8005620:	e001      	b.n	8005626 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005622:	230f      	movs	r3, #15
 8005624:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d13a      	bne.n	80056c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	2101      	movs	r1, #1
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	b29b      	uxth	r3, r3
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566e:	4313      	orrs	r3, r2
 8005670:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d155      	bne.n	8005734 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	78db      	ldrb	r3, [r3, #3]
 80056a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	059b      	lsls	r3, r3, #22
 80056aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056ac:	4313      	orrs	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e036      	b.n	8005734 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11a      	bne.n	8005734 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800571a:	430b      	orrs	r3, r1
 800571c:	4313      	orrs	r3, r2
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005732:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d161      	bne.n	8005824 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005776:	d11f      	bne.n	80057b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005796:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d8:	4013      	ands	r3, r2
 80057da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fc:	4013      	ands	r3, r2
 80057fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	0159      	lsls	r1, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	440b      	add	r3, r1
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	4619      	mov	r1, r3
 800581c:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <USB_DeactivateEndpoint+0x1b0>)
 800581e:	4013      	ands	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
 8005822:	e060      	b.n	80058e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800583a:	d11f      	bne.n	800587c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800585a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800587a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	43db      	mvns	r3, r3
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800589c:	4013      	ands	r3, r2
 800589e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	2101      	movs	r1, #1
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	43db      	mvns	r3, r3
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c0:	4013      	ands	r3, r2
 80058c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	0159      	lsls	r1, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	440b      	add	r3, r1
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	4619      	mov	r1, r3
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <USB_DeactivateEndpoint+0x1b4>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	ec337800 	.word	0xec337800
 80058f8:	eff37800 	.word	0xeff37800

080058fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b01      	cmp	r3, #1
 800591a:	f040 815c 	bne.w	8005bd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d132      	bne.n	800598c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005968:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005984:	0cdb      	lsrs	r3, r3, #19
 8005986:	04db      	lsls	r3, r3, #19
 8005988:	6113      	str	r3, [r2, #16]
 800598a:	e074      	b.n	8005a76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	0cdb      	lsrs	r3, r3, #19
 80059a8:	04db      	lsls	r3, r3, #19
 80059aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6959      	ldr	r1, [r3, #20]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	440b      	add	r3, r1
 80059e8:	1e59      	subs	r1, r3, #1
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059f4:	4b9d      	ldr	r3, [pc, #628]	; (8005c6c <USB_EPStartXfer+0x370>)
 80059f6:	400b      	ands	r3, r1
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	0148      	lsls	r0, r1, #5
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	4401      	add	r1, r0
 8005a00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a04:	4313      	orrs	r3, r2
 8005a06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	0148      	lsls	r0, r1, #5
 8005a22:	69f9      	ldr	r1, [r7, #28]
 8005a24:	4401      	add	r1, r0
 8005a26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	78db      	ldrb	r3, [r3, #3]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d11f      	bne.n	8005a76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d14b      	bne.n	8005b14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	78db      	ldrb	r3, [r3, #3]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d128      	bne.n	8005af2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d110      	bne.n	8005ad2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e00f      	b.n	8005af2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e12f      	b.n	8005d74 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d015      	beq.n	8005b68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8117 	beq.w	8005d74 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	2101      	movs	r1, #1
 8005b58:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b62:	4313      	orrs	r3, r2
 8005b64:	634b      	str	r3, [r1, #52]	; 0x34
 8005b66:	e105      	b.n	8005d74 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d110      	bne.n	8005b9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	e00f      	b.n	8005bba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68d9      	ldr	r1, [r3, #12]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	b298      	uxth	r0, r3
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4603      	mov	r3, r0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fa2b 	bl	800602a <USB_WritePacket>
 8005bd4:	e0ce      	b.n	8005d74 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf0:	0cdb      	lsrs	r3, r3, #19
 8005bf2:	04db      	lsls	r3, r3, #19
 8005bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d126      	bne.n	8005c70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	0148      	lsls	r0, r1, #5
 8005c3c:	69f9      	ldr	r1, [r7, #28]
 8005c3e:	4401      	add	r1, r0
 8005c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c44:	4313      	orrs	r3, r2
 8005c46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c66:	6113      	str	r3, [r2, #16]
 8005c68:	e036      	b.n	8005cd8 <USB_EPStartXfer+0x3dc>
 8005c6a:	bf00      	nop
 8005c6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	1e5a      	subs	r2, r3, #1
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	8afb      	ldrh	r3, [r7, #22]
 8005c96:	04d9      	lsls	r1, r3, #19
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <USB_EPStartXfer+0x484>)
 8005c9a:	400b      	ands	r3, r1
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	0148      	lsls	r0, r1, #5
 8005ca0:	69f9      	ldr	r1, [r7, #28]
 8005ca2:	4401      	add	r1, r0
 8005ca4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	8af9      	ldrh	r1, [r7, #22]
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc8:	69b9      	ldr	r1, [r7, #24]
 8005cca:	0148      	lsls	r0, r1, #5
 8005ccc:	69f9      	ldr	r1, [r7, #28]
 8005cce:	4401      	add	r1, r0
 8005cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10d      	bne.n	8005cfa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68d9      	ldr	r1, [r3, #12]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d128      	bne.n	8005d54 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d110      	bne.n	8005d34 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e00f      	b.n	8005d54 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	1ff80000 	.word	0x1ff80000

08005d84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	f040 80cd 	bne.w	8005f40 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d132      	bne.n	8005e14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0c:	0cdb      	lsrs	r3, r3, #19
 8005e0e:	04db      	lsls	r3, r3, #19
 8005e10:	6113      	str	r3, [r2, #16]
 8005e12:	e04e      	b.n	8005eb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2e:	0cdb      	lsrs	r3, r3, #19
 8005e30:	04db      	lsls	r3, r3, #19
 8005e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d903      	bls.n	8005e6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea2:	6939      	ldr	r1, [r7, #16]
 8005ea4:	0148      	lsls	r0, r1, #5
 8005ea6:	6979      	ldr	r1, [r7, #20]
 8005ea8:	4401      	add	r1, r0
 8005eaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d11e      	bne.n	8005ef6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e092      	b.n	800601c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d07e      	beq.n	800601c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	2101      	movs	r1, #1
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f3e:	e06d      	b.n	800601c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5a:	0cdb      	lsrs	r3, r3, #19
 8005f5c:	04db      	lsls	r3, r3, #19
 8005f5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f82:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	6939      	ldr	r1, [r7, #16]
 8005fcc:	0148      	lsls	r0, r1, #5
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	4401      	add	r1, r0
 8005fd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d10d      	bne.n	8005ffc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	68d9      	ldr	r1, [r3, #12]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800601a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800602a:	b480      	push	{r7}
 800602c:	b089      	sub	sp, #36	; 0x24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	4611      	mov	r1, r2
 8006036:	461a      	mov	r2, r3
 8006038:	460b      	mov	r3, r1
 800603a:	71fb      	strb	r3, [r7, #7]
 800603c:	4613      	mov	r3, r2
 800603e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006048:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d123      	bne.n	8006098 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006050:	88bb      	ldrh	r3, [r7, #4]
 8006052:	3303      	adds	r3, #3
 8006054:	089b      	lsrs	r3, r3, #2
 8006056:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006058:	2300      	movs	r3, #0
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e018      	b.n	8006090 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	031a      	lsls	r2, r3, #12
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606a:	461a      	mov	r2, r3
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3301      	adds	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	3301      	adds	r3, #1
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d3e2      	bcc.n	800605e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3724      	adds	r7, #36	; 0x24
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b08b      	sub	sp, #44	; 0x2c
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	4613      	mov	r3, r2
 80060b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060cc:	2300      	movs	r3, #0
 80060ce:	623b      	str	r3, [r7, #32]
 80060d0:	e014      	b.n	80060fc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	3301      	adds	r3, #1
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	3301      	adds	r3, #1
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	3301      	adds	r3, #1
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	3301      	adds	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	3301      	adds	r3, #1
 80060fa:	623b      	str	r3, [r7, #32]
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d3e6      	bcc.n	80060d2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006104:	8bfb      	ldrh	r3, [r7, #30]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01e      	beq.n	8006148 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	461a      	mov	r2, r3
 8006116:	f107 0310 	add.w	r3, r7, #16
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	fa22 f303 	lsr.w	r3, r2, r3
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	701a      	strb	r2, [r3, #0]
      i++;
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	3301      	adds	r3, #1
 8006134:	623b      	str	r3, [r7, #32]
      pDest++;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	3301      	adds	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800613c:	8bfb      	ldrh	r3, [r7, #30]
 800613e:	3b01      	subs	r3, #1
 8006140:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006142:	8bfb      	ldrh	r3, [r7, #30]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ea      	bne.n	800611e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800614a:	4618      	mov	r0, r3
 800614c:	372c      	adds	r7, #44	; 0x2c
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d12c      	bne.n	80061cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	db12      	blt.n	80061aa <USB_EPSetStall+0x54>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00f      	beq.n	80061aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e02b      	b.n	8006224 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	db12      	blt.n	8006204 <USB_EPSetStall+0xae>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006202:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d128      	bne.n	80062a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006268:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800626c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d003      	beq.n	800627e <USB_EPClearStall+0x4c>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	78db      	ldrb	r3, [r3, #3]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d138      	bne.n	80062f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e027      	b.n	80062f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	78db      	ldrb	r3, [r3, #3]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <USB_EPClearStall+0x9e>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	78db      	ldrb	r3, [r3, #3]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d10f      	bne.n	80062f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006320:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006364:	f023 0303 	bic.w	r3, r3, #3
 8006368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006378:	f023 0302 	bic.w	r3, r3, #2
 800637c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ba:	f043 0302 	orr.w	r3, r3, #2
 80063be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4013      	ands	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	0c1b      	lsrs	r3, r3, #16
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4013      	ands	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	b29b      	uxth	r3, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	4013      	ands	r3, r2
 8006488:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800648a:	68bb      	ldr	r3, [r7, #8]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
 80064c8:	01db      	lsls	r3, r3, #7
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4013      	ands	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064e6:	68bb      	ldr	r3, [r7, #8]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0301 	and.w	r3, r3, #1
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006546:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	460b      	mov	r3, r1
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	333c      	adds	r3, #60	; 0x3c
 800656e:	3304      	adds	r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4a26      	ldr	r2, [pc, #152]	; (8006610 <USB_EP0_OutStart+0xb8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d90a      	bls.n	8006592 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658c:	d101      	bne.n	8006592 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e037      	b.n	8006602 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f043 0318 	orr.w	r3, r3, #24
 80065c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	4f54300a 	.word	0x4f54300a

08006614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4a13      	ldr	r2, [pc, #76]	; (8006674 <USB_CoreReset+0x60>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d901      	bls.n	8006630 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e01a      	b.n	8006666 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	daf3      	bge.n	8006620 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f043 0201 	orr.w	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <USB_CoreReset+0x60>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e006      	b.n	8006666 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d0f1      	beq.n	8006648 <USB_CoreReset+0x34>

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	00030d40 	.word	0x00030d40

08006678 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006684:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006688:	f002 f91c 	bl	80088c4 <USBD_static_malloc>
 800668c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800669c:	2302      	movs	r3, #2
 800669e:	e066      	b.n	800676e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	7c1b      	ldrb	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d119      	bne.n	80066e4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b4:	2202      	movs	r2, #2
 80066b6:	2181      	movs	r1, #129	; 0x81
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 ffe0 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c8:	2202      	movs	r2, #2
 80066ca:	2101      	movs	r1, #1
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ffd6 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2210      	movs	r2, #16
 80066de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80066e2:	e016      	b.n	8006712 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	2202      	movs	r2, #2
 80066e8:	2181      	movs	r1, #129	; 0x81
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 ffc7 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	2202      	movs	r2, #2
 80066fa:	2101      	movs	r1, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 ffbe 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2210      	movs	r2, #16
 800670e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006712:	2308      	movs	r3, #8
 8006714:	2203      	movs	r2, #3
 8006716:	2182      	movs	r1, #130	; 0x82
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 ffb0 	bl	800867e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7c1b      	ldrb	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800674e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006752:	2101      	movs	r1, #1
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f002 f881 	bl	800885c <USBD_LL_PrepareReceive>
 800675a:	e007      	b.n	800676c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006762:	2340      	movs	r3, #64	; 0x40
 8006764:	2101      	movs	r1, #1
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f002 f878 	bl	800885c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006782:	2181      	movs	r1, #129	; 0x81
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 ffa0 	bl	80086ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006790:	2101      	movs	r1, #1
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 ff99 	bl	80086ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067a0:	2182      	movs	r1, #130	; 0x82
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 ff91 	bl	80086ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d2:	4618      	mov	r0, r3
 80067d4:	f002 f884 	bl	80088e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	e0af      	b.n	8006974 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800681c:	2b00      	cmp	r3, #0
 800681e:	d03f      	beq.n	80068a0 <USBD_CDC_Setup+0xb4>
 8006820:	2b20      	cmp	r3, #32
 8006822:	f040 809f 	bne.w	8006964 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	88db      	ldrh	r3, [r3, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02e      	beq.n	800688c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b25b      	sxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	da16      	bge.n	8006866 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006844:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	88d2      	ldrh	r2, [r2, #6]
 800684a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	88db      	ldrh	r3, [r3, #6]
 8006850:	2b07      	cmp	r3, #7
 8006852:	bf28      	it	cs
 8006854:	2307      	movcs	r3, #7
 8006856:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	89fa      	ldrh	r2, [r7, #14]
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fae9 	bl	8007e36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006864:	e085      	b.n	8006972 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785a      	ldrb	r2, [r3, #1]
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	88db      	ldrh	r3, [r3, #6]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800687c:	6939      	ldr	r1, [r7, #16]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	461a      	mov	r2, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fb02 	bl	8007e8e <USBD_CtlPrepareRx>
      break;
 800688a:	e072      	b.n	8006972 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	7850      	ldrb	r0, [r2, #1]
 8006898:	2200      	movs	r2, #0
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	4798      	blx	r3
      break;
 800689e:	e068      	b.n	8006972 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	2b0b      	cmp	r3, #11
 80068a6:	d852      	bhi.n	800694e <USBD_CDC_Setup+0x162>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <USBD_CDC_Setup+0xc4>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068e1 	.word	0x080068e1
 80068b4:	0800695d 	.word	0x0800695d
 80068b8:	0800694f 	.word	0x0800694f
 80068bc:	0800694f 	.word	0x0800694f
 80068c0:	0800694f 	.word	0x0800694f
 80068c4:	0800694f 	.word	0x0800694f
 80068c8:	0800694f 	.word	0x0800694f
 80068cc:	0800694f 	.word	0x0800694f
 80068d0:	0800694f 	.word	0x0800694f
 80068d4:	0800694f 	.word	0x0800694f
 80068d8:	0800690b 	.word	0x0800690b
 80068dc:	08006935 	.word	0x08006935
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d107      	bne.n	80068fc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068ec:	f107 030a 	add.w	r3, r7, #10
 80068f0:	2202      	movs	r2, #2
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fa9e 	bl	8007e36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068fa:	e032      	b.n	8006962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 fa28 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	75fb      	strb	r3, [r7, #23]
          break;
 8006908:	e02b      	b.n	8006962 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b03      	cmp	r3, #3
 8006914:	d107      	bne.n	8006926 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006916:	f107 030d 	add.w	r3, r7, #13
 800691a:	2201      	movs	r2, #1
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fa89 	bl	8007e36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006924:	e01d      	b.n	8006962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fa13 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 800692e:	2303      	movs	r3, #3
 8006930:	75fb      	strb	r3, [r7, #23]
          break;
 8006932:	e016      	b.n	8006962 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b03      	cmp	r3, #3
 800693e:	d00f      	beq.n	8006960 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fa06 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800694c:	e008      	b.n	8006960 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f9ff 	bl	8007d54 <USBD_CtlError>
          ret = USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	75fb      	strb	r3, [r7, #23]
          break;
 800695a:	e002      	b.n	8006962 <USBD_CDC_Setup+0x176>
          break;
 800695c:	bf00      	nop
 800695e:	e008      	b.n	8006972 <USBD_CDC_Setup+0x186>
          break;
 8006960:	bf00      	nop
      }
      break;
 8006962:	e006      	b.n	8006972 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f9f4 	bl	8007d54 <USBD_CtlError>
      ret = USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	bf00      	nop
  }

  return (uint8_t)ret;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800698e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800699a:	2303      	movs	r3, #3
 800699c:	e04f      	b.n	8006a3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	3318      	adds	r3, #24
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d029      	beq.n	8006a10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	3318      	adds	r3, #24
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	78f9      	ldrb	r1, [r7, #3]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	460b      	mov	r3, r1
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	1a5b      	subs	r3, r3, r1
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4403      	add	r3, r0
 80069dc:	3344      	adds	r3, #68	; 0x44
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80069e4:	fb03 f301 	mul.w	r3, r3, r1
 80069e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d110      	bne.n	8006a10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80069ee:	78fa      	ldrb	r2, [r7, #3]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3318      	adds	r3, #24
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a02:	78f9      	ldrb	r1, [r7, #3]
 8006a04:	2300      	movs	r3, #0
 8006a06:	2200      	movs	r2, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 ff06 	bl	800881a <USBD_LL_Transmit>
 8006a0e:	e015      	b.n	8006a3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e015      	b.n	8006a94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 ff16 	bl	800889e <USBD_LL_GetRxDataSize>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e01b      	b.n	8006aee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d015      	beq.n	8006aec <USBD_CDC_EP0_RxReady+0x50>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ac6:	2bff      	cmp	r3, #255	; 0xff
 8006ac8:	d010      	beq.n	8006aec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006ad8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	22ff      	movs	r2, #255	; 0xff
 8006ae8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2243      	movs	r2, #67	; 0x43
 8006b04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	200000a8 	.word	0x200000a8

08006b18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2243      	movs	r2, #67	; 0x43
 8006b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000064 	.word	0x20000064

08006b38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2243      	movs	r2, #67	; 0x43
 8006b44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006b46:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	200000ec 	.word	0x200000ec

08006b58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	220a      	movs	r2, #10
 8006b64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b66:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000020 	.word	0x20000020

08006b78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e004      	b.n	8006b96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e008      	b.n	8006bd2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e004      	b.n	8006c04 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e016      	b.n	8006c5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7c1b      	ldrb	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c40:	2101      	movs	r1, #1
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fe0a 	bl	800885c <USBD_LL_PrepareReceive>
 8006c48:	e007      	b.n	8006c5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	2101      	movs	r1, #1
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fe01 	bl	800885c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e01f      	b.n	8006cbc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	79fa      	ldrb	r2, [r7, #7]
 8006cae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f001 fc7d 	bl	80085b0 <USBD_LL_Init>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e016      	b.n	8006d0a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f107 020e 	add.w	r2, r7, #14
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fc94 	bl	8008648 <USBD_LL_Start>
 8006d20:	4603      	mov	r3, r0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	4611      	mov	r1, r2
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
  }

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff90 	bl	8007ce0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d01a      	beq.n	8006e1a <USBD_LL_SetupStage+0x72>
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d822      	bhi.n	8006e2e <USBD_LL_SetupStage+0x86>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <USBD_LL_SetupStage+0x4a>
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d00a      	beq.n	8006e06 <USBD_LL_SetupStage+0x5e>
 8006df0:	e01d      	b.n	8006e2e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa62 	bl	80072c4 <USBD_StdDevReq>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
      break;
 8006e04:	e020      	b.n	8006e48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fac6 	bl	80073a0 <USBD_StdItfReq>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e016      	b.n	8006e48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fb05 	bl	8007432 <USBD_StdEPReq>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2c:	e00c      	b.n	8006e48 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fc63 	bl	8008708 <USBD_LL_StallEP>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
      break;
 8006e46:	bf00      	nop
  }

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d138      	bne.n	8006ed8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d14a      	bne.n	8006f0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d913      	bls.n	8006eac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	bf28      	it	cs
 8006e9e:	4613      	movcs	r3, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f001 f80f 	bl	8007ec8 <USBD_CtlContinueRx>
 8006eaa:	e030      	b.n	8006f0e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d10b      	bne.n	8006ed0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 f80a 	bl	8007eea <USBD_CtlSendStatus>
 8006ed6:	e01a      	b.n	8006f0e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d114      	bne.n	8006f0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00e      	beq.n	8006f0e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	7afa      	ldrb	r2, [r7, #11]
 8006efa:	4611      	mov	r1, r2
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	e000      	b.n	8006f10 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	460b      	mov	r3, r1
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d16b      	bne.n	8007004 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d156      	bne.n	8006fea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d914      	bls.n	8006f72 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	1ad2      	subs	r2, r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 ff84 	bl	8007e6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f64:	2300      	movs	r3, #0
 8006f66:	2200      	movs	r2, #0
 8006f68:	2100      	movs	r1, #0
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 fc76 	bl	800885c <USBD_LL_PrepareReceive>
 8006f70:	e03b      	b.n	8006fea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d11c      	bne.n	8006fb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d316      	bcc.n	8006fb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d20f      	bcs.n	8006fb8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 ff65 	bl	8007e6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f001 fc53 	bl	800885c <USBD_LL_PrepareReceive>
 8006fb6:	e018      	b.n	8006fea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d10b      	bne.n	8006fdc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fdc:	2180      	movs	r1, #128	; 0x80
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f001 fb92 	bl	8008708 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 ff93 	bl	8007f10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d122      	bne.n	800703a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fe98 	bl	8006d2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007002:	e01a      	b.n	800703a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b03      	cmp	r3, #3
 800700e:	d114      	bne.n	800703a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	7afa      	ldrb	r2, [r7, #11]
 8007026:	4611      	mov	r1, r2
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	4798      	blx	r3
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	e000      	b.n	800703c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e02f      	b.n	80070d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00f      	beq.n	80070a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6852      	ldr	r2, [r2, #4]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	4611      	mov	r1, r2
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	2200      	movs	r2, #0
 80070a6:	2100      	movs	r1, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fae8 	bl	800867e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2240      	movs	r2, #64	; 0x40
 80070ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070be:	2340      	movs	r3, #64	; 0x40
 80070c0:	2200      	movs	r2, #0
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fada 	bl	800867e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2240      	movs	r2, #64	; 0x40
 80070d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710e:	b2da      	uxtb	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2204      	movs	r2, #4
 800711a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b04      	cmp	r3, #4
 800713e:	d106      	bne.n	800714e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007146:	b2da      	uxtb	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800716e:	2303      	movs	r3, #3
 8007170:	e012      	b.n	8007198 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b03      	cmp	r3, #3
 800717c:	d10b      	bne.n	8007196 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e014      	b.n	80071e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d10d      	bne.n	80071e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	4611      	mov	r1, r2
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007202:	2303      	movs	r3, #3
 8007204:	e014      	b.n	8007230 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d10d      	bne.n	800722e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	78fa      	ldrb	r2, [r7, #3]
 8007228:	4611      	mov	r1, r2
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6852      	ldr	r2, [r2, #4]
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	4611      	mov	r1, r2
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
  }

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007286:	b480      	push	{r7}
 8007288:	b087      	sub	sp, #28
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	3301      	adds	r3, #1
 800729c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072a4:	8a3b      	ldrh	r3, [r7, #16]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	b21a      	sxth	r2, r3
 80072aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b21b      	sxth	r3, r3
 80072b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072b4:	89fb      	ldrh	r3, [r7, #14]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d005      	beq.n	80072ea <USBD_StdDevReq+0x26>
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d853      	bhi.n	800738a <USBD_StdDevReq+0xc6>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <USBD_StdDevReq+0x3a>
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d14f      	bne.n	800738a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
      break;
 80072fc:	e04a      	b.n	8007394 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b09      	cmp	r3, #9
 8007304:	d83b      	bhi.n	800737e <USBD_StdDevReq+0xba>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <USBD_StdDevReq+0x48>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007361 	.word	0x08007361
 8007310:	08007375 	.word	0x08007375
 8007314:	0800737f 	.word	0x0800737f
 8007318:	0800736b 	.word	0x0800736b
 800731c:	0800737f 	.word	0x0800737f
 8007320:	0800733f 	.word	0x0800733f
 8007324:	08007335 	.word	0x08007335
 8007328:	0800737f 	.word	0x0800737f
 800732c:	08007357 	.word	0x08007357
 8007330:	08007349 	.word	0x08007349
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9de 	bl	80076f8 <USBD_GetDescriptor>
          break;
 800733c:	e024      	b.n	8007388 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb43 	bl	80079cc <USBD_SetAddress>
          break;
 8007346:	e01f      	b.n	8007388 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fb82 	bl	8007a54 <USBD_SetConfig>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
          break;
 8007354:	e018      	b.n	8007388 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fc21 	bl	8007ba0 <USBD_GetConfig>
          break;
 800735e:	e013      	b.n	8007388 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fc52 	bl	8007c0c <USBD_GetStatus>
          break;
 8007368:	e00e      	b.n	8007388 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fc81 	bl	8007c74 <USBD_SetFeature>
          break;
 8007372:	e009      	b.n	8007388 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fc90 	bl	8007c9c <USBD_ClrFeature>
          break;
 800737c:	e004      	b.n	8007388 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fce7 	bl	8007d54 <USBD_CtlError>
          break;
 8007386:	bf00      	nop
      }
      break;
 8007388:	e004      	b.n	8007394 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fce1 	bl	8007d54 <USBD_CtlError>
      break;
 8007392:	bf00      	nop
  }

  return ret;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d005      	beq.n	80073c6 <USBD_StdItfReq+0x26>
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d82f      	bhi.n	800741e <USBD_StdItfReq+0x7e>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <USBD_StdItfReq+0x26>
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d12b      	bne.n	800741e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d81d      	bhi.n	8007410 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	889b      	ldrh	r3, [r3, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d813      	bhi.n	8007406 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	88db      	ldrh	r3, [r3, #6]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d110      	bne.n	800741a <USBD_StdItfReq+0x7a>
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fd73 	bl	8007eea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007404:	e009      	b.n	800741a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fca3 	bl	8007d54 <USBD_CtlError>
          break;
 800740e:	e004      	b.n	800741a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc9e 	bl	8007d54 <USBD_CtlError>
          break;
 8007418:	e000      	b.n	800741c <USBD_StdItfReq+0x7c>
          break;
 800741a:	bf00      	nop
      }
      break;
 800741c:	e004      	b.n	8007428 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc97 	bl	8007d54 <USBD_CtlError>
      break;
 8007426:	bf00      	nop
  }

  return ret;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	889b      	ldrh	r3, [r3, #4]
 8007444:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	d007      	beq.n	8007462 <USBD_StdEPReq+0x30>
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	f200 8145 	bhi.w	80076e2 <USBD_StdEPReq+0x2b0>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00c      	beq.n	8007476 <USBD_StdEPReq+0x44>
 800745c:	2b20      	cmp	r3, #32
 800745e:	f040 8140 	bne.w	80076e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]
      break;
 8007474:	e13a      	b.n	80076ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b03      	cmp	r3, #3
 800747c:	d007      	beq.n	800748e <USBD_StdEPReq+0x5c>
 800747e:	2b03      	cmp	r3, #3
 8007480:	f300 8129 	bgt.w	80076d6 <USBD_StdEPReq+0x2a4>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d07f      	beq.n	8007588 <USBD_StdEPReq+0x156>
 8007488:	2b01      	cmp	r3, #1
 800748a:	d03c      	beq.n	8007506 <USBD_StdEPReq+0xd4>
 800748c:	e123      	b.n	80076d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d002      	beq.n	80074a0 <USBD_StdEPReq+0x6e>
 800749a:	2b03      	cmp	r3, #3
 800749c:	d016      	beq.n	80074cc <USBD_StdEPReq+0x9a>
 800749e:	e02c      	b.n	80074fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <USBD_StdEPReq+0x90>
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b80      	cmp	r3, #128	; 0x80
 80074aa:	d00a      	beq.n	80074c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f929 	bl	8008708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f925 	bl	8008708 <USBD_LL_StallEP>
 80074be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c0:	e020      	b.n	8007504 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fc45 	bl	8007d54 <USBD_CtlError>
              break;
 80074ca:	e01b      	b.n	8007504 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10e      	bne.n	80074f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <USBD_StdEPReq+0xc0>
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b80      	cmp	r3, #128	; 0x80
 80074de:	d008      	beq.n	80074f2 <USBD_StdEPReq+0xc0>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	88db      	ldrh	r3, [r3, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d104      	bne.n	80074f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f90b 	bl	8008708 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fcf9 	bl	8007eea <USBD_CtlSendStatus>

              break;
 80074f8:	e004      	b.n	8007504 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fc29 	bl	8007d54 <USBD_CtlError>
              break;
 8007502:	bf00      	nop
          }
          break;
 8007504:	e0ec      	b.n	80076e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d002      	beq.n	8007518 <USBD_StdEPReq+0xe6>
 8007512:	2b03      	cmp	r3, #3
 8007514:	d016      	beq.n	8007544 <USBD_StdEPReq+0x112>
 8007516:	e030      	b.n	800757a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00d      	beq.n	800753a <USBD_StdEPReq+0x108>
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b80      	cmp	r3, #128	; 0x80
 8007522:	d00a      	beq.n	800753a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f8ed 	bl	8008708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f8e9 	bl	8008708 <USBD_LL_StallEP>
 8007536:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007538:	e025      	b.n	8007586 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fc09 	bl	8007d54 <USBD_CtlError>
              break;
 8007542:	e020      	b.n	8007586 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	885b      	ldrh	r3, [r3, #2]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11b      	bne.n	8007584 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007552:	2b00      	cmp	r3, #0
 8007554:	d004      	beq.n	8007560 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 f8f3 	bl	8008746 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fcc2 	bl	8007eea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007578:	e004      	b.n	8007584 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fbe9 	bl	8007d54 <USBD_CtlError>
              break;
 8007582:	e000      	b.n	8007586 <USBD_StdEPReq+0x154>
              break;
 8007584:	bf00      	nop
          }
          break;
 8007586:	e0ab      	b.n	80076e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d002      	beq.n	800759a <USBD_StdEPReq+0x168>
 8007594:	2b03      	cmp	r3, #3
 8007596:	d032      	beq.n	80075fe <USBD_StdEPReq+0x1cc>
 8007598:	e097      	b.n	80076ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <USBD_StdEPReq+0x17e>
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d004      	beq.n	80075b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fbd3 	bl	8007d54 <USBD_CtlError>
                break;
 80075ae:	e091      	b.n	80076d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da0b      	bge.n	80075d0 <USBD_StdEPReq+0x19e>
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	3310      	adds	r3, #16
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	3304      	adds	r3, #4
 80075ce:	e00b      	b.n	80075e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4413      	add	r3, r2
 80075e6:	3304      	adds	r3, #4
 80075e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2202      	movs	r2, #2
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc1d 	bl	8007e36 <USBD_CtlSendData>
              break;
 80075fc:	e06a      	b.n	80076d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007602:	2b00      	cmp	r3, #0
 8007604:	da11      	bge.n	800762a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	f003 020f 	and.w	r2, r3, #15
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d117      	bne.n	8007650 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fb96 	bl	8007d54 <USBD_CtlError>
                  break;
 8007628:	e054      	b.n	80076d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb83 	bl	8007d54 <USBD_CtlError>
                  break;
 800764e:	e041      	b.n	80076d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007654:	2b00      	cmp	r3, #0
 8007656:	da0b      	bge.n	8007670 <USBD_StdEPReq+0x23e>
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3310      	adds	r3, #16
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	e00b      	b.n	8007688 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	3304      	adds	r3, #4
 8007688:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <USBD_StdEPReq+0x264>
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d103      	bne.n	800769e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e00e      	b.n	80076bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 f86e 	bl	8008784 <USBD_LL_IsStallEP>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e002      	b.n	80076bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2202      	movs	r2, #2
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fbb7 	bl	8007e36 <USBD_CtlSendData>
              break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fb41 	bl	8007d54 <USBD_CtlError>
              break;
 80076d2:	bf00      	nop
          }
          break;
 80076d4:	e004      	b.n	80076e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fb3b 	bl	8007d54 <USBD_CtlError>
          break;
 80076de:	bf00      	nop
      }
      break;
 80076e0:	e004      	b.n	80076ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fb35 	bl	8007d54 <USBD_CtlError>
      break;
 80076ea:	bf00      	nop
  }

  return ret;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	885b      	ldrh	r3, [r3, #2]
 8007712:	0a1b      	lsrs	r3, r3, #8
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	2b06      	cmp	r3, #6
 800771a:	f200 8128 	bhi.w	800796e <USBD_GetDescriptor+0x276>
 800771e:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <USBD_GetDescriptor+0x2c>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007741 	.word	0x08007741
 8007728:	08007759 	.word	0x08007759
 800772c:	08007799 	.word	0x08007799
 8007730:	0800796f 	.word	0x0800796f
 8007734:	0800796f 	.word	0x0800796f
 8007738:	0800790f 	.word	0x0800790f
 800773c:	0800793b 	.word	0x0800793b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
      break;
 8007756:	e112      	b.n	800797e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7c1b      	ldrb	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	f107 0208 	add.w	r2, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800777a:	e100      	b.n	800797e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	f107 0208 	add.w	r2, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
      break;
 8007796:	e0f2      	b.n	800797e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	885b      	ldrh	r3, [r3, #2]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b05      	cmp	r3, #5
 80077a0:	f200 80ac 	bhi.w	80078fc <USBD_GetDescriptor+0x204>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USBD_GetDescriptor+0xb4>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077f9 	.word	0x080077f9
 80077b4:	0800782d 	.word	0x0800782d
 80077b8:	08007861 	.word	0x08007861
 80077bc:	08007895 	.word	0x08007895
 80077c0:	080078c9 	.word	0x080078c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e6:	e091      	b.n	800790c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fab2 	bl	8007d54 <USBD_CtlError>
            err++;
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	3301      	adds	r3, #1
 80077f4:	72fb      	strb	r3, [r7, #11]
          break;
 80077f6:	e089      	b.n	800790c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7c12      	ldrb	r2, [r2, #16]
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781a:	e077      	b.n	800790c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa98 	bl	8007d54 <USBD_CtlError>
            err++;
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	3301      	adds	r3, #1
 8007828:	72fb      	strb	r3, [r7, #11]
          break;
 800782a:	e06f      	b.n	800790c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7c12      	ldrb	r2, [r2, #16]
 8007844:	f107 0108 	add.w	r1, r7, #8
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784e:	e05d      	b.n	800790c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa7e 	bl	8007d54 <USBD_CtlError>
            err++;
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	3301      	adds	r3, #1
 800785c:	72fb      	strb	r3, [r7, #11]
          break;
 800785e:	e055      	b.n	800790c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	7c12      	ldrb	r2, [r2, #16]
 8007878:	f107 0108 	add.w	r1, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007882:	e043      	b.n	800790c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa64 	bl	8007d54 <USBD_CtlError>
            err++;
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	3301      	adds	r3, #1
 8007890:	72fb      	strb	r3, [r7, #11]
          break;
 8007892:	e03b      	b.n	800790c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	7c12      	ldrb	r2, [r2, #16]
 80078ac:	f107 0108 	add.w	r1, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b6:	e029      	b.n	800790c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa4a 	bl	8007d54 <USBD_CtlError>
            err++;
 80078c0:	7afb      	ldrb	r3, [r7, #11]
 80078c2:	3301      	adds	r3, #1
 80078c4:	72fb      	strb	r3, [r7, #11]
          break;
 80078c6:	e021      	b.n	800790c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	7c12      	ldrb	r2, [r2, #16]
 80078e0:	f107 0108 	add.w	r1, r7, #8
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
 80078e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ea:	e00f      	b.n	800790c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa30 	bl	8007d54 <USBD_CtlError>
            err++;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	3301      	adds	r3, #1
 80078f8:	72fb      	strb	r3, [r7, #11]
          break;
 80078fa:	e007      	b.n	800790c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa28 	bl	8007d54 <USBD_CtlError>
          err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800790a:	bf00      	nop
      }
      break;
 800790c:	e037      	b.n	800797e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7c1b      	ldrb	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d109      	bne.n	800792a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	f107 0208 	add.w	r2, r7, #8
 8007922:	4610      	mov	r0, r2
 8007924:	4798      	blx	r3
 8007926:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007928:	e029      	b.n	800797e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa11 	bl	8007d54 <USBD_CtlError>
        err++;
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	3301      	adds	r3, #1
 8007936:	72fb      	strb	r3, [r7, #11]
      break;
 8007938:	e021      	b.n	800797e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	7c1b      	ldrb	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10d      	bne.n	800795e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	f107 0208 	add.w	r2, r7, #8
 800794e:	4610      	mov	r0, r2
 8007950:	4798      	blx	r3
 8007952:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	2207      	movs	r2, #7
 800795a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800795c:	e00f      	b.n	800797e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f9f7 	bl	8007d54 <USBD_CtlError>
        err++;
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	3301      	adds	r3, #1
 800796a:	72fb      	strb	r3, [r7, #11]
      break;
 800796c:	e007      	b.n	800797e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9ef 	bl	8007d54 <USBD_CtlError>
      err++;
 8007976:	7afb      	ldrb	r3, [r7, #11]
 8007978:	3301      	adds	r3, #1
 800797a:	72fb      	strb	r3, [r7, #11]
      break;
 800797c:	bf00      	nop
  }

  if (err != 0U)
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11e      	bne.n	80079c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	88db      	ldrh	r3, [r3, #6]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d016      	beq.n	80079ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800798c:	893b      	ldrh	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	88da      	ldrh	r2, [r3, #6]
 8007996:	893b      	ldrh	r3, [r7, #8]
 8007998:	4293      	cmp	r3, r2
 800799a:	bf28      	it	cs
 800799c:	4613      	movcs	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	461a      	mov	r2, r3
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa44 	bl	8007e36 <USBD_CtlSendData>
 80079ae:	e009      	b.n	80079c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9ce 	bl	8007d54 <USBD_CtlError>
 80079b8:	e004      	b.n	80079c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa95 	bl	8007eea <USBD_CtlSendStatus>
 80079c0:	e000      	b.n	80079c4 <USBD_GetDescriptor+0x2cc>
    return;
 80079c2:	bf00      	nop
  }
}
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop

080079cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	889b      	ldrh	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d131      	bne.n	8007a42 <USBD_SetAddress+0x76>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d12d      	bne.n	8007a42 <USBD_SetAddress+0x76>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	2b7f      	cmp	r3, #127	; 0x7f
 80079ec:	d829      	bhi.n	8007a42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d104      	bne.n	8007a10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9a3 	bl	8007d54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	e01d      	b.n	8007a4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7bfa      	ldrb	r2, [r7, #15]
 8007a14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fedd 	bl	80087dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa61 	bl	8007eea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d004      	beq.n	8007a38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a36:	e009      	b.n	8007a4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a40:	e004      	b.n	8007a4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f985 	bl	8007d54 <USBD_CtlError>
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	4b4c      	ldr	r3, [pc, #304]	; (8007b9c <USBD_SetConfig+0x148>)
 8007a6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a6c:	4b4b      	ldr	r3, [pc, #300]	; (8007b9c <USBD_SetConfig+0x148>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d905      	bls.n	8007a80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f96c 	bl	8007d54 <USBD_CtlError>
    return USBD_FAIL;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e088      	b.n	8007b92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d002      	beq.n	8007a92 <USBD_SetConfig+0x3e>
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d025      	beq.n	8007adc <USBD_SetConfig+0x88>
 8007a90:	e071      	b.n	8007b76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a92:	4b42      	ldr	r3, [pc, #264]	; (8007b9c <USBD_SetConfig+0x148>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d01c      	beq.n	8007ad4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007a9a:	4b40      	ldr	r3, [pc, #256]	; (8007b9c <USBD_SetConfig+0x148>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007aa4:	4b3d      	ldr	r3, [pc, #244]	; (8007b9c <USBD_SetConfig+0x148>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff f948 	bl	8006d40 <USBD_SetClassConfig>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f949 	bl	8007d54 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ac2:	e065      	b.n	8007b90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fa10 	bl	8007eea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ad2:	e05d      	b.n	8007b90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fa08 	bl	8007eea <USBD_CtlSendStatus>
      break;
 8007ada:	e059      	b.n	8007b90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007adc:	4b2f      	ldr	r3, [pc, #188]	; (8007b9c <USBD_SetConfig+0x148>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d112      	bne.n	8007b0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aec:	4b2b      	ldr	r3, [pc, #172]	; (8007b9c <USBD_SetConfig+0x148>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007af6:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <USBD_SetConfig+0x148>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff f93b 	bl	8006d78 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9f1 	bl	8007eea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b08:	e042      	b.n	8007b90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <USBD_SetConfig+0x148>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d02a      	beq.n	8007b6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff f929 	bl	8006d78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b26:	4b1d      	ldr	r3, [pc, #116]	; (8007b9c <USBD_SetConfig+0x148>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b30:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <USBD_SetConfig+0x148>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff f902 	bl	8006d40 <USBD_SetClassConfig>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00f      	beq.n	8007b66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f903 	bl	8007d54 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff f90e 	bl	8006d78 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b64:	e014      	b.n	8007b90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9bf 	bl	8007eea <USBD_CtlSendStatus>
      break;
 8007b6c:	e010      	b.n	8007b90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9bb 	bl	8007eea <USBD_CtlSendStatus>
      break;
 8007b74:	e00c      	b.n	8007b90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8eb 	bl	8007d54 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <USBD_SetConfig+0x148>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff f8f7 	bl	8006d78 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8e:	bf00      	nop
  }

  return ret;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200005b6 	.word	0x200005b6

08007ba0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	88db      	ldrh	r3, [r3, #6]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d004      	beq.n	8007bbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8cd 	bl	8007d54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bba:	e023      	b.n	8007c04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	dc02      	bgt.n	8007bce <USBD_GetConfig+0x2e>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dc03      	bgt.n	8007bd4 <USBD_GetConfig+0x34>
 8007bcc:	e015      	b.n	8007bfa <USBD_GetConfig+0x5a>
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d00b      	beq.n	8007bea <USBD_GetConfig+0x4a>
 8007bd2:	e012      	b.n	8007bfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	2201      	movs	r2, #1
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f927 	bl	8007e36 <USBD_CtlSendData>
        break;
 8007be8:	e00c      	b.n	8007c04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3304      	adds	r3, #4
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f91f 	bl	8007e36 <USBD_CtlSendData>
        break;
 8007bf8:	e004      	b.n	8007c04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f8a9 	bl	8007d54 <USBD_CtlError>
        break;
 8007c02:	bf00      	nop
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d81e      	bhi.n	8007c62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	88db      	ldrh	r3, [r3, #6]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d004      	beq.n	8007c36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f890 	bl	8007d54 <USBD_CtlError>
        break;
 8007c34:	e01a      	b.n	8007c6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f043 0202 	orr.w	r2, r3, #2
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	330c      	adds	r3, #12
 8007c56:	2202      	movs	r2, #2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f8eb 	bl	8007e36 <USBD_CtlSendData>
      break;
 8007c60:	e004      	b.n	8007c6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f875 	bl	8007d54 <USBD_CtlError>
      break;
 8007c6a:	bf00      	nop
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d106      	bne.n	8007c94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f92b 	bl	8007eea <USBD_CtlSendStatus>
  }
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d80b      	bhi.n	8007ccc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d10c      	bne.n	8007cd6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f910 	bl	8007eea <USBD_CtlSendStatus>
      }
      break;
 8007cca:	e004      	b.n	8007cd6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f840 	bl	8007d54 <USBD_CtlError>
      break;
 8007cd4:	e000      	b.n	8007cd8 <USBD_ClrFeature+0x3c>
      break;
 8007cd6:	bf00      	nop
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fabb 	bl	8007286 <SWAPBYTE>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f7ff faae 	bl	8007286 <SWAPBYTE>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff faa1 	bl	8007286 <SWAPBYTE>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	80da      	strh	r2, [r3, #6]
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d5e:	2180      	movs	r1, #128	; 0x80
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fcd1 	bl	8008708 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fccd 	bl	8008708 <USBD_LL_StallEP>
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d036      	beq.n	8007dfa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d90:	6938      	ldr	r0, [r7, #16]
 8007d92:	f000 f836 	bl	8007e02 <USBD_GetLen>
 8007d96:	4603      	mov	r3, r0
 8007d98:	3301      	adds	r3, #1
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	701a      	strb	r2, [r3, #0]
  idx++;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	3301      	adds	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	4413      	add	r3, r2
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007dc6:	e013      	b.n	8007df0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	613b      	str	r3, [r7, #16]
    idx++;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4413      	add	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	3301      	adds	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e7      	bne.n	8007dc8 <USBD_GetString+0x52>
 8007df8:	e000      	b.n	8007dfc <USBD_GetString+0x86>
    return;
 8007dfa:	bf00      	nop
  }
}
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e12:	e005      	b.n	8007e20 <USBD_GetLen+0x1e>
  {
    len++;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	3301      	adds	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f5      	bne.n	8007e14 <USBD_GetLen+0x12>
  }

  return len;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fcdc 	bl	800881a <USBD_LL_Transmit>

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fccb 	bl	800881a <USBD_LL_Transmit>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fccf 	bl	800885c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fcbe 	bl	800885c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007efa:	2300      	movs	r3, #0
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc8a 	bl	800881a <USBD_LL_Transmit>

  return USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2205      	movs	r2, #5
 8007f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f20:	2300      	movs	r3, #0
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fc98 	bl	800885c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4912      	ldr	r1, [pc, #72]	; (8007f88 <MX_USB_DEVICE_Init+0x50>)
 8007f40:	4812      	ldr	r0, [pc, #72]	; (8007f8c <MX_USB_DEVICE_Init+0x54>)
 8007f42:	f7fe fe8f 	bl	8006c64 <USBD_Init>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f4c:	f7f8 ff96 	bl	8000e7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f50:	490f      	ldr	r1, [pc, #60]	; (8007f90 <MX_USB_DEVICE_Init+0x58>)
 8007f52:	480e      	ldr	r0, [pc, #56]	; (8007f8c <MX_USB_DEVICE_Init+0x54>)
 8007f54:	f7fe feb6 	bl	8006cc4 <USBD_RegisterClass>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f5e:	f7f8 ff8d 	bl	8000e7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f62:	490c      	ldr	r1, [pc, #48]	; (8007f94 <MX_USB_DEVICE_Init+0x5c>)
 8007f64:	4809      	ldr	r0, [pc, #36]	; (8007f8c <MX_USB_DEVICE_Init+0x54>)
 8007f66:	f7fe fe07 	bl	8006b78 <USBD_CDC_RegisterInterface>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f70:	f7f8 ff84 	bl	8000e7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f74:	4805      	ldr	r0, [pc, #20]	; (8007f8c <MX_USB_DEVICE_Init+0x54>)
 8007f76:	f7fe fecc 	bl	8006d12 <USBD_Start>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f80:	f7f8 ff7c 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f84:	bf00      	nop
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000144 	.word	0x20000144
 8007f8c:	2000096c 	.word	0x2000096c
 8007f90:	2000002c 	.word	0x2000002c
 8007f94:	20000130 	.word	0x20000130

08007f98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4905      	ldr	r1, [pc, #20]	; (8007fb4 <CDC_Init_FS+0x1c>)
 8007fa0:	4805      	ldr	r0, [pc, #20]	; (8007fb8 <CDC_Init_FS+0x20>)
 8007fa2:	f7fe fdfe 	bl	8006ba2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fa6:	4905      	ldr	r1, [pc, #20]	; (8007fbc <CDC_Init_FS+0x24>)
 8007fa8:	4803      	ldr	r0, [pc, #12]	; (8007fb8 <CDC_Init_FS+0x20>)
 8007faa:	f7fe fe18 	bl	8006bde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	2000143c 	.word	0x2000143c
 8007fb8:	2000096c 	.word	0x2000096c
 8007fbc:	20000c3c 	.word	0x20000c3c

08007fc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	2b23      	cmp	r3, #35	; 0x23
 8007fe4:	d84a      	bhi.n	800807c <CDC_Control_FS+0xac>
 8007fe6:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <CDC_Control_FS+0x1c>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	0800807d 	.word	0x0800807d
 8007ff0:	0800807d 	.word	0x0800807d
 8007ff4:	0800807d 	.word	0x0800807d
 8007ff8:	0800807d 	.word	0x0800807d
 8007ffc:	0800807d 	.word	0x0800807d
 8008000:	0800807d 	.word	0x0800807d
 8008004:	0800807d 	.word	0x0800807d
 8008008:	0800807d 	.word	0x0800807d
 800800c:	0800807d 	.word	0x0800807d
 8008010:	0800807d 	.word	0x0800807d
 8008014:	0800807d 	.word	0x0800807d
 8008018:	0800807d 	.word	0x0800807d
 800801c:	0800807d 	.word	0x0800807d
 8008020:	0800807d 	.word	0x0800807d
 8008024:	0800807d 	.word	0x0800807d
 8008028:	0800807d 	.word	0x0800807d
 800802c:	0800807d 	.word	0x0800807d
 8008030:	0800807d 	.word	0x0800807d
 8008034:	0800807d 	.word	0x0800807d
 8008038:	0800807d 	.word	0x0800807d
 800803c:	0800807d 	.word	0x0800807d
 8008040:	0800807d 	.word	0x0800807d
 8008044:	0800807d 	.word	0x0800807d
 8008048:	0800807d 	.word	0x0800807d
 800804c:	0800807d 	.word	0x0800807d
 8008050:	0800807d 	.word	0x0800807d
 8008054:	0800807d 	.word	0x0800807d
 8008058:	0800807d 	.word	0x0800807d
 800805c:	0800807d 	.word	0x0800807d
 8008060:	0800807d 	.word	0x0800807d
 8008064:	0800807d 	.word	0x0800807d
 8008068:	0800807d 	.word	0x0800807d
 800806c:	0800807d 	.word	0x0800807d
 8008070:	0800807d 	.word	0x0800807d
 8008074:	0800807d 	.word	0x0800807d
 8008078:	0800807d 	.word	0x0800807d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800807c:	bf00      	nop
  }

  return (USBD_OK);
 800807e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	480f      	ldr	r0, [pc, #60]	; (80080d8 <CDC_Receive_FS+0x4c>)
 800809a:	f7fe fda0 	bl	8006bde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800809e:	480e      	ldr	r0, [pc, #56]	; (80080d8 <CDC_Receive_FS+0x4c>)
 80080a0:	f7fe fdb6 	bl	8006c10 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 80080a4:	2240      	movs	r2, #64	; 0x40
 80080a6:	2100      	movs	r1, #0
 80080a8:	480c      	ldr	r0, [pc, #48]	; (80080dc <CDC_Receive_FS+0x50>)
 80080aa:	f000 fc81 	bl	80089b0 <memset>
  uint8_t len = (uint8_t)*Len;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	4808      	ldr	r0, [pc, #32]	; (80080dc <CDC_Receive_FS+0x50>)
 80080bc:	f000 fc6a 	bl	8008994 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	461a      	mov	r2, r3
 80080c4:	2100      	movs	r1, #0
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fc72 	bl	80089b0 <memset>

  return (USBD_OK);
 80080cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	2000096c 	.word	0x2000096c
 80080dc:	20000928 	.word	0x20000928

080080e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2212      	movs	r2, #18
 8008114:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008116:	4b03      	ldr	r3, [pc, #12]	; (8008124 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000160 	.word	0x20000160

08008128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2204      	movs	r2, #4
 8008138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800813a:	4b03      	ldr	r3, [pc, #12]	; (8008148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20000174 	.word	0x20000174

0800814c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4907      	ldr	r1, [pc, #28]	; (8008180 <USBD_FS_ProductStrDescriptor+0x34>)
 8008162:	4808      	ldr	r0, [pc, #32]	; (8008184 <USBD_FS_ProductStrDescriptor+0x38>)
 8008164:	f7ff fe07 	bl	8007d76 <USBD_GetString>
 8008168:	e004      	b.n	8008174 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4904      	ldr	r1, [pc, #16]	; (8008180 <USBD_FS_ProductStrDescriptor+0x34>)
 800816e:	4805      	ldr	r0, [pc, #20]	; (8008184 <USBD_FS_ProductStrDescriptor+0x38>)
 8008170:	f7ff fe01 	bl	8007d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20001c3c 	.word	0x20001c3c
 8008184:	08008afc 	.word	0x08008afc

08008188 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	6039      	str	r1, [r7, #0]
 8008192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	4904      	ldr	r1, [pc, #16]	; (80081a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800819a:	f7ff fdec 	bl	8007d76 <USBD_GetString>
  return USBD_StrDesc;
 800819e:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20001c3c 	.word	0x20001c3c
 80081ac:	08008b10 	.word	0x08008b10

080081b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	221a      	movs	r2, #26
 80081c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081c2:	f000 f843 	bl	800824c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081c6:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000178 	.word	0x20000178

080081d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4907      	ldr	r1, [pc, #28]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ea:	4808      	ldr	r0, [pc, #32]	; (800820c <USBD_FS_ConfigStrDescriptor+0x38>)
 80081ec:	f7ff fdc3 	bl	8007d76 <USBD_GetString>
 80081f0:	e004      	b.n	80081fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4904      	ldr	r1, [pc, #16]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f8:	f7ff fdbd 	bl	8007d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20001c3c 	.word	0x20001c3c
 800820c:	08008b24 	.word	0x08008b24

08008210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d105      	bne.n	800822e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4907      	ldr	r1, [pc, #28]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008226:	4808      	ldr	r0, [pc, #32]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008228:	f7ff fda5 	bl	8007d76 <USBD_GetString>
 800822c:	e004      	b.n	8008238 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4904      	ldr	r1, [pc, #16]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008232:	4805      	ldr	r0, [pc, #20]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008234:	f7ff fd9f 	bl	8007d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008238:	4b02      	ldr	r3, [pc, #8]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20001c3c 	.word	0x20001c3c
 8008248:	08008b30 	.word	0x08008b30

0800824c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <Get_SerialNum+0x44>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008258:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <Get_SerialNum+0x48>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <Get_SerialNum+0x4c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008272:	2208      	movs	r2, #8
 8008274:	4909      	ldr	r1, [pc, #36]	; (800829c <Get_SerialNum+0x50>)
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f814 	bl	80082a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800827c:	2204      	movs	r2, #4
 800827e:	4908      	ldr	r1, [pc, #32]	; (80082a0 <Get_SerialNum+0x54>)
 8008280:	68b8      	ldr	r0, [r7, #8]
 8008282:	f000 f80f 	bl	80082a4 <IntToUnicode>
  }
}
 8008286:	bf00      	nop
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	1fff7a10 	.word	0x1fff7a10
 8008294:	1fff7a14 	.word	0x1fff7a14
 8008298:	1fff7a18 	.word	0x1fff7a18
 800829c:	2000017a 	.word	0x2000017a
 80082a0:	2000018a 	.word	0x2000018a

080082a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	75fb      	strb	r3, [r7, #23]
 80082ba:	e027      	b.n	800830c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	2b09      	cmp	r3, #9
 80082c2:	d80b      	bhi.n	80082dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0f1b      	lsrs	r3, r3, #28
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4619      	mov	r1, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	440b      	add	r3, r1
 80082d4:	3230      	adds	r2, #48	; 0x30
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e00a      	b.n	80082f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	0f1b      	lsrs	r3, r3, #28
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	4619      	mov	r1, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	440b      	add	r3, r1
 80082ec:	3237      	adds	r2, #55	; 0x37
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	3301      	adds	r3, #1
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	3301      	adds	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
 800830c:	7dfa      	ldrb	r2, [r7, #23]
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3d3      	bcc.n	80082bc <IntToUnicode+0x18>
  }
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800832c:	f107 0314 	add.w	r3, r7, #20
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	605a      	str	r2, [r3, #4]
 8008336:	609a      	str	r2, [r3, #8]
 8008338:	60da      	str	r2, [r3, #12]
 800833a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008344:	d13a      	bne.n	80083bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008346:	2300      	movs	r3, #0
 8008348:	613b      	str	r3, [r7, #16]
 800834a:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 800834c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834e:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 8008350:	f043 0301 	orr.w	r3, r3, #1
 8008354:	6313      	str	r3, [r2, #48]	; 0x30
 8008356:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008362:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008368:	2302      	movs	r3, #2
 800836a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836c:	2300      	movs	r3, #0
 800836e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008370:	2303      	movs	r3, #3
 8008372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008374:	230a      	movs	r3, #10
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4619      	mov	r1, r3
 800837e:	4812      	ldr	r0, [pc, #72]	; (80083c8 <HAL_PCD_MspInit+0xa4>)
 8008380:	f7f9 fd9c 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008384:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 8008386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008388:	4a0e      	ldr	r2, [pc, #56]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 800838a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838e:	6353      	str	r3, [r2, #52]	; 0x34
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 800839a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800839e:	6453      	str	r3, [r2, #68]	; 0x44
 80083a0:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <HAL_PCD_MspInit+0xa0>)
 80083a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	2043      	movs	r0, #67	; 0x43
 80083b2:	f7f9 fd4c 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083b6:	2043      	movs	r0, #67	; 0x43
 80083b8:	f7f9 fd65 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083bc:	bf00      	nop
 80083be:	3728      	adds	r7, #40	; 0x28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40023800 	.word	0x40023800
 80083c8:	40020000 	.word	0x40020000

080083cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f7fe fce0 	bl	8006da8 <USBD_LL_SetupStage>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008402:	78fa      	ldrb	r2, [r7, #3]
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	4619      	mov	r1, r3
 800841a:	f7fe fd1a 	bl	8006e52 <USBD_LL_DataOutStage>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008438:	78fa      	ldrb	r2, [r7, #3]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	4613      	mov	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	3348      	adds	r3, #72	; 0x48
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	4619      	mov	r1, r3
 800844e:	f7fe fd63 	bl	8006f18 <USBD_LL_DataInStage>
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fe77 	bl	800715c <USBD_LL_SOF>
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800847e:	2301      	movs	r3, #1
 8008480:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
 800848e:	e008      	b.n	80084a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d102      	bne.n	800849e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	e001      	b.n	80084a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800849e:	f7f8 fced 	bl	8000e7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe fe17 	bl	80070e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe fdc3 	bl	8007044 <USBD_LL_Reset>
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fe12 	bl	8007100 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084fc:	4b04      	ldr	r3, [pc, #16]	; (8008510 <HAL_PCD_SuspendCallback+0x48>)
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	4a03      	ldr	r2, [pc, #12]	; (8008510 <HAL_PCD_SuspendCallback+0x48>)
 8008502:	f043 0306 	orr.w	r3, r3, #6
 8008506:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	e000ed00 	.word	0xe000ed00

08008514 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fe02 	bl	800712c <USBD_LL_Resume>
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fe50 	bl	80071ec <USBD_LL_IsoOUTIncomplete>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fe18 	bl	80071a0 <USBD_LL_IsoINIncomplete>
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fe56 	bl	8007238 <USBD_LL_DevConnected>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fe53 	bl	800724e <USBD_LL_DevDisconnected>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d13c      	bne.n	800863a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085c0:	4a20      	ldr	r2, [pc, #128]	; (8008644 <USBD_LL_Init+0x94>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <USBD_LL_Init+0x94>)
 80085cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085d0:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <USBD_LL_Init+0x94>)
 80085d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085d8:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <USBD_LL_Init+0x94>)
 80085da:	2204      	movs	r2, #4
 80085dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085de:	4b19      	ldr	r3, [pc, #100]	; (8008644 <USBD_LL_Init+0x94>)
 80085e0:	2202      	movs	r2, #2
 80085e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085e4:	4b17      	ldr	r3, [pc, #92]	; (8008644 <USBD_LL_Init+0x94>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <USBD_LL_Init+0x94>)
 80085ec:	2202      	movs	r2, #2
 80085ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085f0:	4b14      	ldr	r3, [pc, #80]	; (8008644 <USBD_LL_Init+0x94>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <USBD_LL_Init+0x94>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <USBD_LL_Init+0x94>)
 80085fe:	2200      	movs	r2, #0
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <USBD_LL_Init+0x94>)
 8008604:	2200      	movs	r2, #0
 8008606:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <USBD_LL_Init+0x94>)
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800860e:	480d      	ldr	r0, [pc, #52]	; (8008644 <USBD_LL_Init+0x94>)
 8008610:	f7fa ff01 	bl	8003416 <HAL_PCD_Init>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800861a:	f7f8 fc2f 	bl	8000e7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	4808      	ldr	r0, [pc, #32]	; (8008644 <USBD_LL_Init+0x94>)
 8008622:	f7fc f85e 	bl	80046e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	2100      	movs	r1, #0
 800862a:	4806      	ldr	r0, [pc, #24]	; (8008644 <USBD_LL_Init+0x94>)
 800862c:	f7fc f812 	bl	8004654 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008630:	2280      	movs	r2, #128	; 0x80
 8008632:	2101      	movs	r1, #1
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <USBD_LL_Init+0x94>)
 8008636:	f7fc f80d 	bl	8004654 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20001e3c 	.word	0x20001e3c

08008648 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800865e:	4618      	mov	r0, r3
 8008660:	f7fa fff6 	bl	8003650 <HAL_PCD_Start>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f942 	bl	80088f4 <USBD_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008674:	7bbb      	ldrb	r3, [r7, #14]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	461a      	mov	r2, r3
 800868c:	4603      	mov	r3, r0
 800868e:	70fb      	strb	r3, [r7, #3]
 8008690:	460b      	mov	r3, r1
 8008692:	70bb      	strb	r3, [r7, #2]
 8008694:	4613      	mov	r3, r2
 8008696:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086a6:	78bb      	ldrb	r3, [r7, #2]
 80086a8:	883a      	ldrh	r2, [r7, #0]
 80086aa:	78f9      	ldrb	r1, [r7, #3]
 80086ac:	f7fb fbda 	bl	8003e64 <HAL_PCD_EP_Open>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f91c 	bl	80088f4 <USBD_Get_USB_Status>
 80086bc:	4603      	mov	r3, r0
 80086be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fb fc23 	bl	8003f34 <HAL_PCD_EP_Close>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f8fd 	bl	80088f4 <USBD_Get_USB_Status>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7fb fcfb 	bl	8004122 <HAL_PCD_EP_SetStall>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f8de 	bl	80088f4 <USBD_Get_USB_Status>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873c:	7bbb      	ldrb	r3, [r7, #14]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f7fb fd40 	bl	80041ea <HAL_PCD_EP_ClrStall>
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f8bf 	bl	80088f4 <USBD_Get_USB_Status>
 8008776:	4603      	mov	r3, r0
 8008778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800877a:	7bbb      	ldrb	r3, [r7, #14]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008796:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800879c:	2b00      	cmp	r3, #0
 800879e:	da0b      	bge.n	80087b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	4613      	mov	r3, r2
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	333e      	adds	r3, #62	; 0x3e
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	e00b      	b.n	80087d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fb fb0d 	bl	8003e1a <HAL_PCD_SetAddress>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f874 	bl	80088f4 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
 8008826:	460b      	mov	r3, r1
 8008828:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008838:	7af9      	ldrb	r1, [r7, #11]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	f7fb fc26 	bl	800408e <HAL_PCD_EP_Transmit>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f853 	bl	80088f4 <USBD_Get_USB_Status>
 800884e:	4603      	mov	r3, r0
 8008850:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008852:	7dbb      	ldrb	r3, [r7, #22]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	460b      	mov	r3, r1
 800886a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800887a:	7af9      	ldrb	r1, [r7, #11]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	f7fb fba2 	bl	8003fc8 <HAL_PCD_EP_Receive>
 8008884:	4603      	mov	r3, r0
 8008886:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f832 	bl	80088f4 <USBD_Get_USB_Status>
 8008890:	4603      	mov	r3, r0
 8008892:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008894:	7dbb      	ldrb	r3, [r7, #22]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fb fbd2 	bl	800405e <HAL_PCD_EP_GetRxCount>
 80088ba:	4603      	mov	r3, r0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088cc:	4b03      	ldr	r3, [pc, #12]	; (80088dc <USBD_static_malloc+0x18>)
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	200005b8 	.word	0x200005b8

080088e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d817      	bhi.n	8008938 <USBD_Get_USB_Status+0x44>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_Get_USB_Status+0x1c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008921 	.word	0x08008921
 8008914:	08008927 	.word	0x08008927
 8008918:	0800892d 	.word	0x0800892d
 800891c:	08008933 	.word	0x08008933
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
    break;
 8008924:	e00b      	b.n	800893e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008926:	2303      	movs	r3, #3
 8008928:	73fb      	strb	r3, [r7, #15]
    break;
 800892a:	e008      	b.n	800893e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
    break;
 8008930:	e005      	b.n	800893e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008932:	2303      	movs	r3, #3
 8008934:	73fb      	strb	r3, [r7, #15]
    break;
 8008936:	e002      	b.n	800893e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008938:	2303      	movs	r3, #3
 800893a:	73fb      	strb	r3, [r7, #15]
    break;
 800893c:	bf00      	nop
  }
  return usb_status;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <__libc_init_array>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4d0d      	ldr	r5, [pc, #52]	; (8008984 <__libc_init_array+0x38>)
 8008950:	4c0d      	ldr	r4, [pc, #52]	; (8008988 <__libc_init_array+0x3c>)
 8008952:	1b64      	subs	r4, r4, r5
 8008954:	10a4      	asrs	r4, r4, #2
 8008956:	2600      	movs	r6, #0
 8008958:	42a6      	cmp	r6, r4
 800895a:	d109      	bne.n	8008970 <__libc_init_array+0x24>
 800895c:	4d0b      	ldr	r5, [pc, #44]	; (800898c <__libc_init_array+0x40>)
 800895e:	4c0c      	ldr	r4, [pc, #48]	; (8008990 <__libc_init_array+0x44>)
 8008960:	f000 f82e 	bl	80089c0 <_init>
 8008964:	1b64      	subs	r4, r4, r5
 8008966:	10a4      	asrs	r4, r4, #2
 8008968:	2600      	movs	r6, #0
 800896a:	42a6      	cmp	r6, r4
 800896c:	d105      	bne.n	800897a <__libc_init_array+0x2e>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	f855 3b04 	ldr.w	r3, [r5], #4
 8008974:	4798      	blx	r3
 8008976:	3601      	adds	r6, #1
 8008978:	e7ee      	b.n	8008958 <__libc_init_array+0xc>
 800897a:	f855 3b04 	ldr.w	r3, [r5], #4
 800897e:	4798      	blx	r3
 8008980:	3601      	adds	r6, #1
 8008982:	e7f2      	b.n	800896a <__libc_init_array+0x1e>
 8008984:	080099bc 	.word	0x080099bc
 8008988:	080099bc 	.word	0x080099bc
 800898c:	080099bc 	.word	0x080099bc
 8008990:	080099c0 	.word	0x080099c0

08008994 <memcpy>:
 8008994:	440a      	add	r2, r1
 8008996:	4291      	cmp	r1, r2
 8008998:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800899c:	d100      	bne.n	80089a0 <memcpy+0xc>
 800899e:	4770      	bx	lr
 80089a0:	b510      	push	{r4, lr}
 80089a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089aa:	4291      	cmp	r1, r2
 80089ac:	d1f9      	bne.n	80089a2 <memcpy+0xe>
 80089ae:	bd10      	pop	{r4, pc}

080089b0 <memset>:
 80089b0:	4402      	add	r2, r0
 80089b2:	4603      	mov	r3, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <_init>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr

080089cc <_fini>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr
