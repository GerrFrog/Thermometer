
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b420  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c400  0800c400  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800c400  0800c400  0001c400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c408  0800c408  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c408  0800c408  0001c408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c40c  0800c40c  0001c40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800c410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          00002138  20000228  20000228  00020228  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002360  20002360  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   000258c3  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045fd  00000000  00000000  00045b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  0004a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  0004b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006923  00000000  00000000  0004c648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a949  00000000  00000000  00052f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb904  00000000  00000000  0006d8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001391b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005444  00000000  00000000  0013920c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000228 	.word	0x20000228
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b590 	.word	0x0800b590

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000022c 	.word	0x2000022c
 80001c4:	0800b590 	.word	0x0800b590

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <float_temp_to_char_temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(MLX90614) || defined(MLX90632)
void float_temp_to_char_temp(double digit, char* arr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ea2:	6078      	str	r0, [r7, #4]
    int l_digit = digit * 100.0;
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <float_temp_to_char_temp+0x110>)
 8000eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eae:	f7ff fb4f 	bl	8000550 <__aeabi_dmul>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fdf9 	bl	8000ab0 <__aeabi_d2iz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	617b      	str	r3, [r7, #20]
    arr[7] = '\0';
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    arr[6] = '\0';
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3306      	adds	r3, #6
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    arr[5] = '\0';
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
    arr[4] = l_digit % 10 + '0';
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000ede:	fb83 1302 	smull	r1, r3, r3, r2
 8000ee2:	1099      	asrs	r1, r3, #2
 8000ee4:	17d3      	asrs	r3, r2, #31
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	460b      	mov	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	1ad1      	subs	r1, r2, r3
 8000ef2:	b2ca      	uxtb	r2, r1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	3230      	adds	r2, #48	; 0x30
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f02:	fb82 1203 	smull	r1, r2, r2, r3
 8000f06:	1092      	asrs	r2, r2, #2
 8000f08:	17db      	asrs	r3, r3, #31
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    arr[3] = l_digit % 10 + '0';
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f12:	fb83 1302 	smull	r1, r3, r3, r2
 8000f16:	1099      	asrs	r1, r3, #2
 8000f18:	17d3      	asrs	r3, r2, #31
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1ad1      	subs	r1, r2, r3
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3303      	adds	r3, #3
 8000f2c:	3230      	adds	r2, #48	; 0x30
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1092      	asrs	r2, r2, #2
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    arr[2] = ',';
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3302      	adds	r3, #2
 8000f46:	222c      	movs	r2, #44	; 0x2c
 8000f48:	701a      	strb	r2, [r3, #0]
    arr[1] = l_digit % 10 + '0';
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f52:	1099      	asrs	r1, r3, #2
 8000f54:	17d3      	asrs	r3, r2, #31
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	1ad1      	subs	r1, r2, r3
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	3230      	adds	r2, #48	; 0x30
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f72:	fb82 1203 	smull	r1, r2, r2, r3
 8000f76:	1092      	asrs	r2, r2, #2
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    arr[0] = l_digit % 10 + '0';
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <float_temp_to_char_temp+0x114>)
 8000f82:	fb83 1302 	smull	r1, r3, r3, r2
 8000f86:	1099      	asrs	r1, r3, #2
 8000f88:	17d3      	asrs	r3, r2, #31
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1ad1      	subs	r1, r2, r3
 8000f96:	b2cb      	uxtb	r3, r1
 8000f98:	3330      	adds	r3, #48	; 0x30
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40590000 	.word	0x40590000
 8000fac:	66666667 	.word	0x66666667

08000fb0 <mlx90632_read_eeprom>:
#endif

#if defined(MLX90632)
static int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka, I2C_HandleTypeDef hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09a      	sub	sp, #104	; 0x68
 8000fb4:	af14      	add	r7, sp, #80	; 0x50
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR, hi2c);
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc4:	224c      	movs	r2, #76	; 0x4c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f00a f9e4 	bl	800b394 <memcpy>
 8000fcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fd0:	cb0c      	ldmia	r3, {r2, r3}
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	f242 400c 	movw	r0, #9228	; 0x240c
 8000fd8:	f000 fdd7 	bl	8001b8a <mlx90632_i2c_read32>
 8000fdc:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da01      	bge.n	8000fe8 <mlx90632_read_eeprom+0x38>
        return ret;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	e0fc      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG, hi2c);
 8000fe8:	4668      	mov	r0, sp
 8000fea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fee:	224c      	movs	r2, #76	; 0x4c
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f00a f9cf 	bl	800b394 <memcpy>
 8000ff6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ffa:	cb0c      	ldmia	r3, {r2, r3}
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	f242 400e 	movw	r0, #9230	; 0x240e
 8001002:	f000 fdc2 	bl	8001b8a <mlx90632_i2c_read32>
 8001006:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da01      	bge.n	8001012 <mlx90632_read_eeprom+0x62>
        return ret;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	e0e7      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO, hi2c);
 8001012:	4668      	mov	r0, sp
 8001014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001018:	224c      	movs	r2, #76	; 0x4c
 800101a:	4619      	mov	r1, r3
 800101c:	f00a f9ba 	bl	800b394 <memcpy>
 8001020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001024:	cb0c      	ldmia	r3, {r2, r3}
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f242 4012 	movw	r0, #9234	; 0x2412
 800102c:	f000 fdad 	bl	8001b8a <mlx90632_i2c_read32>
 8001030:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da01      	bge.n	800103c <mlx90632_read_eeprom+0x8c>
        return ret;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	e0d2      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT, hi2c);
 800103c:	4668      	mov	r0, sp
 800103e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001042:	224c      	movs	r2, #76	; 0x4c
 8001044:	4619      	mov	r1, r3
 8001046:	f00a f9a5 	bl	800b394 <memcpy>
 800104a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104e:	cb0c      	ldmia	r3, {r2, r3}
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	f242 4010 	movw	r0, #9232	; 0x2410
 8001056:	f000 fd98 	bl	8001b8a <mlx90632_i2c_read32>
 800105a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	da01      	bge.n	8001066 <mlx90632_read_eeprom+0xb6>
        return ret;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	e0bd      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea, hi2c);
 8001066:	4668      	mov	r0, sp
 8001068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800106c:	224c      	movs	r2, #76	; 0x4c
 800106e:	4619      	mov	r1, r3
 8001070:	f00a f990 	bl	800b394 <memcpy>
 8001074:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001078:	cb0c      	ldmia	r3, {r2, r3}
 800107a:	6a39      	ldr	r1, [r7, #32]
 800107c:	f242 4024 	movw	r0, #9252	; 0x2424
 8001080:	f000 fd83 	bl	8001b8a <mlx90632_i2c_read32>
 8001084:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	da01      	bge.n	8001090 <mlx90632_read_eeprom+0xe0>
        return ret;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	e0a8      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb, hi2c);
 8001090:	4668      	mov	r0, sp
 8001092:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001096:	224c      	movs	r2, #76	; 0x4c
 8001098:	4619      	mov	r1, r3
 800109a:	f00a f97b 	bl	800b394 <memcpy>
 800109e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010a2:	cb0c      	ldmia	r3, {r2, r3}
 80010a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a6:	f242 4026 	movw	r0, #9254	; 0x2426
 80010aa:	f000 fd6e 	bl	8001b8a <mlx90632_i2c_read32>
 80010ae:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da01      	bge.n	80010ba <mlx90632_read_eeprom+0x10a>
        return ret;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	e093      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa, hi2c);
 80010ba:	4668      	mov	r0, sp
 80010bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c0:	224c      	movs	r2, #76	; 0x4c
 80010c2:	4619      	mov	r1, r3
 80010c4:	f00a f966 	bl	800b394 <memcpy>
 80010c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010cc:	cb0c      	ldmia	r3, {r2, r3}
 80010ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d0:	f242 4028 	movw	r0, #9256	; 0x2428
 80010d4:	f000 fd59 	bl	8001b8a <mlx90632_i2c_read32>
 80010d8:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da01      	bge.n	80010e4 <mlx90632_read_eeprom+0x134>
        return ret;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	e07e      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb, hi2c);
 80010e4:	4668      	mov	r0, sp
 80010e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ea:	224c      	movs	r2, #76	; 0x4c
 80010ec:	4619      	mov	r1, r3
 80010ee:	f00a f951 	bl	800b394 <memcpy>
 80010f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010f6:	cb0c      	ldmia	r3, {r2, r3}
 80010f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010fa:	f242 402a 	movw	r0, #9258	; 0x242a
 80010fe:	f000 fd44 	bl	8001b8a <mlx90632_i2c_read32>
 8001102:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <mlx90632_read_eeprom+0x15e>
        return ret;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	e069      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga, hi2c);
 800110e:	4668      	mov	r0, sp
 8001110:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001114:	224c      	movs	r2, #76	; 0x4c
 8001116:	4619      	mov	r1, r3
 8001118:	f00a f93c 	bl	800b394 <memcpy>
 800111c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001120:	cb0c      	ldmia	r3, {r2, r3}
 8001122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001124:	f242 402c 	movw	r0, #9260	; 0x242c
 8001128:	f000 fd2f 	bl	8001b8a <mlx90632_i2c_read32>
 800112c:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da01      	bge.n	8001138 <mlx90632_read_eeprom+0x188>
        return ret;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	e054      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb, hi2c);
 8001138:	4668      	mov	r0, sp
 800113a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800113e:	224c      	movs	r2, #76	; 0x4c
 8001140:	4619      	mov	r1, r3
 8001142:	f00a f927 	bl	800b394 <memcpy>
 8001146:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800114a:	cb0c      	ldmia	r3, {r2, r3}
 800114c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800114e:	f242 402e 	movw	r0, #9262	; 0x242e
 8001152:	f000 fced 	bl	8001b30 <mlx90632_i2c_read>
 8001156:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	da01      	bge.n	8001162 <mlx90632_read_eeprom+0x1b2>
        return ret;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	e03f      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha, hi2c);
 8001162:	4668      	mov	r0, sp
 8001164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001168:	224c      	movs	r2, #76	; 0x4c
 800116a:	4619      	mov	r1, r3
 800116c:	f00a f912 	bl	800b394 <memcpy>
 8001170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001174:	cb0c      	ldmia	r3, {r2, r3}
 8001176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001178:	f242 4081 	movw	r0, #9345	; 0x2481
 800117c:	f000 fcd8 	bl	8001b30 <mlx90632_i2c_read>
 8001180:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da01      	bge.n	800118c <mlx90632_read_eeprom+0x1dc>
        return ret;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	e02a      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb, hi2c);
 800118c:	4668      	mov	r0, sp
 800118e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001192:	224c      	movs	r2, #76	; 0x4c
 8001194:	4619      	mov	r1, r3
 8001196:	f00a f8fd 	bl	800b394 <memcpy>
 800119a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800119e:	cb0c      	ldmia	r3, {r2, r3}
 80011a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011a2:	f242 4082 	movw	r0, #9346	; 0x2482
 80011a6:	f000 fcc3 	bl	8001b30 <mlx90632_i2c_read>
 80011aa:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da01      	bge.n	80011b6 <mlx90632_read_eeprom+0x206>
        return ret;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	e015      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka, hi2c);
 80011b6:	4668      	mov	r0, sp
 80011b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011bc:	224c      	movs	r2, #76	; 0x4c
 80011be:	4619      	mov	r1, r3
 80011c0:	f00a f8e8 	bl	800b394 <memcpy>
 80011c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011c8:	cb0c      	ldmia	r3, {r2, r3}
 80011ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011cc:	f242 402f 	movw	r0, #9263	; 0x242f
 80011d0:	f000 fcae 	bl	8001b30 <mlx90632_i2c_read>
 80011d4:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da01      	bge.n	80011e0 <mlx90632_read_eeprom+0x230>
        return ret;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	e000      	b.n	80011e2 <mlx90632_read_eeprom+0x232>
    return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	0000      	movs	r0, r0
 80011ec:	0000      	movs	r0, r0
	...

080011f0 <mlx90632_start_extended_mode>:
#	    endif
    }
}

void mlx90632_start_extended_mode()
{
 80011f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011f4:	ed2d 8b02 	vpush	{d8}
 80011f8:	b0a1      	sub	sp, #132	; 0x84
 80011fa:	af1e      	add	r7, sp, #120	; 0x78
	HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, 0x3a << 1, 1, 100);
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	2201      	movs	r2, #1
 8001200:	2174      	movs	r1, #116	; 0x74
 8001202:	48b9      	ldr	r0, [pc, #740]	; (80014e8 <mlx90632_start_extended_mode+0x2f8>)
 8001204:	f003 f9f8 	bl	80045f8 <HAL_I2C_IsDeviceReady>
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
	if (result == HAL_OK) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d120      	bne.n	8001254 <mlx90632_start_extended_mode+0x64>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	48b5      	ldr	r0, [pc, #724]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 8001218:	f002 fc71 	bl	8003afe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	f002 f8d8 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	48b0      	ldr	r0, [pc, #704]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 800122a:	f002 fc68 	bl	8003afe <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800122e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001232:	f002 f8cf 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	48ac      	ldr	r0, [pc, #688]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 800123c:	f002 fc5f 	bl	8003afe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f002 f8c6 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124c:	48a7      	ldr	r0, [pc, #668]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 800124e:	f002 fc56 	bl	8003afe <HAL_GPIO_TogglePin>
 8001252:	e01f      	b.n	8001294 <mlx90632_start_extended_mode+0xa4>
	} else {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001254:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001258:	48a4      	ldr	r0, [pc, #656]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 800125a:	f002 fc50 	bl	8003afe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800125e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001262:	f002 f8b7 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	48a0      	ldr	r0, [pc, #640]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 800126c:	f002 fc47 	bl	8003afe <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001274:	f002 f8ae 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127c:	489b      	ldr	r0, [pc, #620]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 800127e:	f002 fc3e 	bl	8003afe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f002 f8a5 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4897      	ldr	r0, [pc, #604]	; (80014ec <mlx90632_start_extended_mode+0x2fc>)
 8001290:	f002 fc35 	bl	8003afe <HAL_GPIO_TogglePin>
	}

    mlx90632_set_meas_type(MLX90632_MTYP_EXTENDED, hi2c1);
 8001294:	4c94      	ldr	r4, [pc, #592]	; (80014e8 <mlx90632_start_extended_mode+0x2f8>)
 8001296:	4668      	mov	r0, sp
 8001298:	f104 030c 	add.w	r3, r4, #12
 800129c:	2248      	movs	r2, #72	; 0x48
 800129e:	4619      	mov	r1, r3
 80012a0:	f00a f878 	bl	800b394 <memcpy>
 80012a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012a8:	2011      	movs	r0, #17
 80012aa:	f001 f983 	bl	80025b4 <mlx90632_set_meas_type>

    mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka, hi2c1);
 80012ae:	4a8e      	ldr	r2, [pc, #568]	; (80014e8 <mlx90632_start_extended_mode+0x2f8>)
 80012b0:	ab09      	add	r3, sp, #36	; 0x24
 80012b2:	4611      	mov	r1, r2
 80012b4:	2254      	movs	r2, #84	; 0x54
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00a f86c 	bl	800b394 <memcpy>
 80012bc:	4b8c      	ldr	r3, [pc, #560]	; (80014f0 <mlx90632_start_extended_mode+0x300>)
 80012be:	9308      	str	r3, [sp, #32]
 80012c0:	4b8c      	ldr	r3, [pc, #560]	; (80014f4 <mlx90632_start_extended_mode+0x304>)
 80012c2:	9307      	str	r3, [sp, #28]
 80012c4:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <mlx90632_start_extended_mode+0x308>)
 80012c6:	9306      	str	r3, [sp, #24]
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <mlx90632_start_extended_mode+0x30c>)
 80012ca:	9305      	str	r3, [sp, #20]
 80012cc:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <mlx90632_start_extended_mode+0x310>)
 80012ce:	9304      	str	r3, [sp, #16]
 80012d0:	4b8c      	ldr	r3, [pc, #560]	; (8001504 <mlx90632_start_extended_mode+0x314>)
 80012d2:	9303      	str	r3, [sp, #12]
 80012d4:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <mlx90632_start_extended_mode+0x318>)
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <mlx90632_start_extended_mode+0x31c>)
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <mlx90632_start_extended_mode+0x320>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b8c      	ldr	r3, [pc, #560]	; (8001514 <mlx90632_start_extended_mode+0x324>)
 80012e2:	4a8d      	ldr	r2, [pc, #564]	; (8001518 <mlx90632_start_extended_mode+0x328>)
 80012e4:	498d      	ldr	r1, [pc, #564]	; (800151c <mlx90632_start_extended_mode+0x32c>)
 80012e6:	488e      	ldr	r0, [pc, #568]	; (8001520 <mlx90632_start_extended_mode+0x330>)
 80012e8:	f7ff fe62 	bl	8000fb0 <mlx90632_read_eeprom>

    while(1)
    {
    	mlx90632_set_emissivity(0.5);
 80012ec:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 80014e0 <mlx90632_start_extended_mode+0x2f0>
 80012f0:	f000 fb8a 	bl	8001a08 <mlx90632_set_emissivity>

    	mlx90632_read_temp_raw_extended(&ambient_new_raw, &ambient_old_raw, &object_new_raw, hi2c1);
 80012f4:	4c7c      	ldr	r4, [pc, #496]	; (80014e8 <mlx90632_start_extended_mode+0x2f8>)
 80012f6:	4668      	mov	r0, sp
 80012f8:	1d23      	adds	r3, r4, #4
 80012fa:	2250      	movs	r2, #80	; 0x50
 80012fc:	4619      	mov	r1, r3
 80012fe:	f00a f849 	bl	800b394 <memcpy>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	4a87      	ldr	r2, [pc, #540]	; (8001524 <mlx90632_start_extended_mode+0x334>)
 8001306:	4988      	ldr	r1, [pc, #544]	; (8001528 <mlx90632_start_extended_mode+0x338>)
 8001308:	4888      	ldr	r0, [pc, #544]	; (800152c <mlx90632_start_extended_mode+0x33c>)
 800130a:	f000 fdc0 	bl	8001e8e <mlx90632_read_temp_raw_extended>

        ambient = mlx90632_calc_temp_ambient_extended(ambient_new_raw, ambient_old_raw,
 800130e:	4b87      	ldr	r3, [pc, #540]	; (800152c <mlx90632_start_extended_mode+0x33c>)
 8001310:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001314:	4b84      	ldr	r3, [pc, #528]	; (8001528 <mlx90632_start_extended_mode+0x338>)
 8001316:	f9b3 4000 	ldrsh.w	r4, [r3]
 800131a:	4b7e      	ldr	r3, [pc, #504]	; (8001514 <mlx90632_start_extended_mode+0x324>)
 800131c:	681d      	ldr	r5, [r3, #0]
 800131e:	4b80      	ldr	r3, [pc, #512]	; (8001520 <mlx90632_start_extended_mode+0x330>)
 8001320:	681e      	ldr	r6, [r3, #0]
 8001322:	4b7e      	ldr	r3, [pc, #504]	; (800151c <mlx90632_start_extended_mode+0x32c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <mlx90632_start_extended_mode+0x328>)
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	4974      	ldr	r1, [pc, #464]	; (80014fc <mlx90632_start_extended_mode+0x30c>)
 800132c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001330:	9102      	str	r1, [sp, #8]
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4633      	mov	r3, r6
 8001338:	462a      	mov	r2, r5
 800133a:	4621      	mov	r1, r4
 800133c:	f000 feca 	bl	80020d4 <mlx90632_calc_temp_ambient_extended>
 8001340:	ec53 2b10 	vmov	r2, r3, d0
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbda 	bl	8000b00 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a78      	ldr	r2, [pc, #480]	; (8001530 <mlx90632_start_extended_mode+0x340>)
 8001350:	6013      	str	r3, [r2, #0]
                                                      PT, PR, PG, PO, Gb);

        pre_ambient = mlx90632_preprocess_temp_ambient_extended(ambient_new_raw,
 8001352:	4b76      	ldr	r3, [pc, #472]	; (800152c <mlx90632_start_extended_mode+0x33c>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	4a73      	ldr	r2, [pc, #460]	; (8001528 <mlx90632_start_extended_mode+0x338>)
 800135a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800135e:	4a67      	ldr	r2, [pc, #412]	; (80014fc <mlx90632_start_extended_mode+0x30c>)
 8001360:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fde3 	bl	8001f30 <mlx90632_preprocess_temp_ambient_extended>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fbc5 	bl	8000b00 <__aeabi_d2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4a6e      	ldr	r2, [pc, #440]	; (8001534 <mlx90632_start_extended_mode+0x344>)
 800137a:	6013      	str	r3, [r2, #0]
                                                                       ambient_old_raw, Gb);
        pre_object = mlx90632_preprocess_temp_object_extended(object_new_raw, ambient_new_raw,
 800137c:	4b69      	ldr	r3, [pc, #420]	; (8001524 <mlx90632_start_extended_mode+0x334>)
 800137e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001382:	4b6a      	ldr	r3, [pc, #424]	; (800152c <mlx90632_start_extended_mode+0x33c>)
 8001384:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001388:	4b67      	ldr	r3, [pc, #412]	; (8001528 <mlx90632_start_extended_mode+0x338>)
 800138a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800138e:	4b58      	ldr	r3, [pc, #352]	; (80014f0 <mlx90632_start_extended_mode+0x300>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	f000 fe32 	bl	8001ffc <mlx90632_preprocess_temp_object_extended>
 8001398:	ec53 2b10 	vmov	r2, r3, d0
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fbae 	bl	8000b00 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a64      	ldr	r2, [pc, #400]	; (8001538 <mlx90632_start_extended_mode+0x348>)
 80013a8:	6013      	str	r3, [r2, #0]
                                                                     ambient_old_raw, Ka);

        object = mlx90632_calc_temp_object_extended(pre_object, pre_ambient, ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <mlx90632_start_extended_mode+0x348>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80013b4:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <mlx90632_start_extended_mode+0x344>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <mlx90632_start_extended_mode+0x340>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f86c 	bl	80004a0 <__aeabi_f2d>
 80013c8:	4680      	mov	r8, r0
 80013ca:	4689      	mov	r9, r1
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <mlx90632_start_extended_mode+0x320>)
 80013ce:	681d      	ldr	r5, [r3, #0]
 80013d0:	4b4e      	ldr	r3, [pc, #312]	; (800150c <mlx90632_start_extended_mode+0x31c>)
 80013d2:	681e      	ldr	r6, [r3, #0]
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <mlx90632_start_extended_mode+0x310>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <mlx90632_start_extended_mode+0x318>)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	4949      	ldr	r1, [pc, #292]	; (8001504 <mlx90632_start_extended_mode+0x314>)
 80013de:	6809      	ldr	r1, [r1, #0]
 80013e0:	4845      	ldr	r0, [pc, #276]	; (80014f8 <mlx90632_start_extended_mode+0x308>)
 80013e2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80013e6:	4c43      	ldr	r4, [pc, #268]	; (80014f4 <mlx90632_start_extended_mode+0x304>)
 80013e8:	f9b4 4000 	ldrsh.w	r4, [r4]
 80013ec:	9404      	str	r4, [sp, #16]
 80013ee:	9003      	str	r0, [sp, #12]
 80013f0:	9102      	str	r1, [sp, #8]
 80013f2:	9201      	str	r2, [sp, #4]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4633      	mov	r3, r6
 80013f8:	462a      	mov	r2, r5
 80013fa:	ec49 8b10 	vmov	d0, r8, r9
 80013fe:	ee18 1a90 	vmov	r1, s17
 8001402:	ee18 0a10 	vmov	r0, s16
 8001406:	f000 fffb 	bl	8002400 <mlx90632_calc_temp_object_extended>
 800140a:	ec53 2b10 	vmov	r2, r3, d0
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb75 	bl	8000b00 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <mlx90632_start_extended_mode+0x34c>)
 800141a:	6013      	str	r3, [r2, #0]

        float_temp_1 = object;
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <mlx90632_start_extended_mode+0x34c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a47      	ldr	r2, [pc, #284]	; (8001540 <mlx90632_start_extended_mode+0x350>)
 8001422:	6013      	str	r3, [r2, #0]
        float_temp_to_char_temp(float_temp_1, char_temp_1);
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <mlx90632_start_extended_mode+0x350>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f839 	bl	80004a0 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4844      	ldr	r0, [pc, #272]	; (8001544 <mlx90632_start_extended_mode+0x354>)
 8001434:	ec43 2b10 	vmov	d0, r2, r3
 8001438:	f7ff fd2e 	bl	8000e98 <float_temp_to_char_temp>

        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 800143c:	2101      	movs	r1, #1
 800143e:	4842      	ldr	r0, [pc, #264]	; (8001548 <mlx90632_start_extended_mode+0x358>)
 8001440:	f002 fb2c 	bl	8003a9c <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d134      	bne.n	80014b4 <mlx90632_start_extended_mode+0x2c4>
        {
#	        ifdef SSD1306_DISPLAY
            SSD1306_GotoXY(0, 0);
 800144a:	2100      	movs	r1, #0
 800144c:	2000      	movs	r0, #0
 800144e:	f001 fc4b 	bl	8002ce8 <SSD1306_GotoXY>
            SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8001452:	2201      	movs	r2, #1
 8001454:	493d      	ldr	r1, [pc, #244]	; (800154c <mlx90632_start_extended_mode+0x35c>)
 8001456:	483b      	ldr	r0, [pc, #236]	; (8001544 <mlx90632_start_extended_mode+0x354>)
 8001458:	f001 fcdc 	bl	8002e14 <SSD1306_Puts>

            SSD1306_GotoXY(70, 0);
 800145c:	2100      	movs	r1, #0
 800145e:	2046      	movs	r0, #70	; 0x46
 8001460:	f001 fc42 	bl	8002ce8 <SSD1306_GotoXY>
            SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	4939      	ldr	r1, [pc, #228]	; (800154c <mlx90632_start_extended_mode+0x35c>)
 8001468:	4839      	ldr	r0, [pc, #228]	; (8001550 <mlx90632_start_extended_mode+0x360>)
 800146a:	f001 fcd3 	bl	8002e14 <SSD1306_Puts>
#	        endif

#		    ifdef USB_SEND
            CDC_Transmit_FS(cap_mess_1, strlen(cap_mess_1));
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <mlx90632_start_extended_mode+0x364>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <mlx90632_start_extended_mode+0x364>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fea6 	bl	80001c8 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	4620      	mov	r0, r4
 8001484:	f009 fb00 	bl	800aa88 <CDC_Transmit_FS>
            CDC_Transmit_FS((uint8_t*)char_temp_1, strlen((uint8_t*)char_temp_1));
 8001488:	482e      	ldr	r0, [pc, #184]	; (8001544 <mlx90632_start_extended_mode+0x354>)
 800148a:	f7fe fe9d 	bl	80001c8 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29b      	uxth	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	482b      	ldr	r0, [pc, #172]	; (8001544 <mlx90632_start_extended_mode+0x354>)
 8001496:	f009 faf7 	bl	800aa88 <CDC_Transmit_FS>
            CDC_Transmit_FS(end, strlen(end));
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <mlx90632_start_extended_mode+0x368>)
 800149c:	681c      	ldr	r4, [r3, #0]
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <mlx90632_start_extended_mode+0x368>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe90 	bl	80001c8 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4619      	mov	r1, r3
 80014ae:	4620      	mov	r0, r4
 80014b0:	f009 faea 	bl	800aa88 <CDC_Transmit_FS>
//            CDC_Transmit_FS(end, strlen(end));
#  		    endif
        }

#       ifdef SSD1306_DISPLAY
        SSD1306_GotoXY(0, 29);
 80014b4:	211d      	movs	r1, #29
 80014b6:	2000      	movs	r0, #0
 80014b8:	f001 fc16 	bl	8002ce8 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	4923      	ldr	r1, [pc, #140]	; (800154c <mlx90632_start_extended_mode+0x35c>)
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <mlx90632_start_extended_mode+0x354>)
 80014c2:	f001 fca7 	bl	8002e14 <SSD1306_Puts>

        SSD1306_GotoXY(70, 29);
 80014c6:	211d      	movs	r1, #29
 80014c8:	2046      	movs	r0, #70	; 0x46
 80014ca:	f001 fc0d 	bl	8002ce8 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	491e      	ldr	r1, [pc, #120]	; (800154c <mlx90632_start_extended_mode+0x35c>)
 80014d2:	481f      	ldr	r0, [pc, #124]	; (8001550 <mlx90632_start_extended_mode+0x360>)
 80014d4:	f001 fc9e 	bl	8002e14 <SSD1306_Puts>

        SSD1306_UpdateScreen();
 80014d8:	f001 fb3e 	bl	8002b58 <SSD1306_UpdateScreen>
    	mlx90632_set_emissivity(0.5);
 80014dc:	e706      	b.n	80012ec <mlx90632_start_extended_mode+0xfc>
 80014de:	bf00      	nop
 80014e0:	00000000 	.word	0x00000000
 80014e4:	3fe00000 	.word	0x3fe00000
 80014e8:	200008d8 	.word	0x200008d8
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	20000030 	.word	0x20000030
 80014f4:	20000248 	.word	0x20000248
 80014f8:	2000002e 	.word	0x2000002e
 80014fc:	2000002c 	.word	0x2000002c
 8001500:	20000028 	.word	0x20000028
 8001504:	20000024 	.word	0x20000024
 8001508:	20000020 	.word	0x20000020
 800150c:	2000001c 	.word	0x2000001c
 8001510:	20000018 	.word	0x20000018
 8001514:	20000010 	.word	0x20000010
 8001518:	20000014 	.word	0x20000014
 800151c:	2000000c 	.word	0x2000000c
 8001520:	20000008 	.word	0x20000008
 8001524:	2000092c 	.word	0x2000092c
 8001528:	20000988 	.word	0x20000988
 800152c:	200009cc 	.word	0x200009cc
 8001530:	200009dc 	.word	0x200009dc
 8001534:	20000a78 	.word	0x20000a78
 8001538:	20000984 	.word	0x20000984
 800153c:	200009d8 	.word	0x200009d8
 8001540:	20000244 	.word	0x20000244
 8001544:	200009d0 	.word	0x200009d0
 8001548:	40020000 	.word	0x40020000
 800154c:	20000034 	.word	0x20000034
 8001550:	20000a7c 	.word	0x20000a7c
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b093      	sub	sp, #76	; 0x4c
 8001560:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001562:	f001 fec5 	bl	80032f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001566:	f000 f843 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156a:	f000 f95d 	bl	8001828 <MX_GPIO_Init>
  MX_I2C1_Init();
 800156e:	f000 f8a7 	bl	80016c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001572:	f000 f8d3 	bl	800171c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001576:	f009 f9b3 	bl	800a8e0 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 800157a:	f000 f8fd 	bl	8001778 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800157e:	f000 f929 	bl	80017d4 <MX_USART2_UART_Init>
     * Temp sensor 1 - I2C1, temp sensor 2 - I2C2, Display - I2C3
     */

  // Initialize Display
#ifdef SSD1306_DISPLAY
    if (SSD1306_Init(hi2c3) != 1)
 8001582:	4c17      	ldr	r4, [pc, #92]	; (80015e0 <main+0x84>)
 8001584:	4668      	mov	r0, sp
 8001586:	f104 0310 	add.w	r3, r4, #16
 800158a:	2244      	movs	r2, #68	; 0x44
 800158c:	4619      	mov	r1, r3
 800158e:	f009 ff01 	bl	800b394 <memcpy>
 8001592:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001596:	f001 f8c9 	bl	800272c <SSD1306_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00d      	beq.n	80015bc <main+0x60>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80015a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <main+0x88>)
 80015a6:	f002 faaa 	bl	8003afe <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 80015aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ae:	f001 ff11 	bl	80033d4 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80015b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <main+0x88>)
 80015b8:	f002 faa1 	bl	8003afe <HAL_GPIO_TogglePin>
    }

    SSD1306_GotoXY (0,0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f001 fb92 	bl	8002ce8 <SSD1306_GotoXY>
    SSD1306_Puts ("initialize", &Font_11x18, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <main+0x8c>)
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <main+0x90>)
 80015ca:	f001 fc23 	bl	8002e14 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80015ce:	f001 fac3 	bl	8002b58 <SSD1306_UpdateScreen>

#if defined(MLX90614)
    mlx90614_start_standard_mode();
#elif defined(MLX90632)
//    mlx90632_start_standard_mode();
    mlx90632_start_extended_mode();
 80015d2:	f7ff fe0d 	bl	80011f0 <mlx90632_start_extended_mode>
 80015d6:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3704      	adds	r7, #4
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	20000880 	.word	0x20000880
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	20000034 	.word	0x20000034
 80015ec:	0800b63c 	.word	0x0800b63c

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2230      	movs	r2, #48	; 0x30
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f009 fed6 	bl	800b3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <SystemClock_Config+0xc8>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <SystemClock_Config+0xc8>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <SystemClock_Config+0xc8>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <SystemClock_Config+0xcc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <SystemClock_Config+0xcc>)
 800163a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <SystemClock_Config+0xcc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2302      	movs	r3, #2
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001664:	2348      	movs	r3, #72	; 0x48
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800166c:	2303      	movs	r3, #3
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fe4d 	bl	8006314 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001680:	f000 f94e 	bl	8001920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2102      	movs	r1, #2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 f8af 	bl	8006804 <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016ac:	f000 f938 	bl	8001920 <Error_Handler>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3750      	adds	r7, #80	; 0x50
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C1_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_I2C1_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_I2C1_Init+0x50>)
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_I2C1_Init+0x58>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_I2C1_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_I2C1_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_I2C1_Init+0x50>)
 80016de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_I2C1_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_I2C1_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_I2C1_Init+0x50>)
 80016fe:	f002 fa19 	bl	8003b34 <HAL_I2C_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001708:	f000 f90a 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200008d8 	.word	0x200008d8
 8001714:	40005400 	.word	0x40005400
 8001718:	000186a0 	.word	0x000186a0

0800171c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C2_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C2_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C2_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_I2C2_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C2_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_I2C2_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_I2C2_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_I2C2_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_I2C2_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_I2C2_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_I2C2_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_I2C2_Init+0x50>)
 800175a:	f002 f9eb 	bl	8003b34 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001764:	f000 f8dc 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000930 	.word	0x20000930
 8001770:	40005800 	.word	0x40005800
 8001774:	000186a0 	.word	0x000186a0

08001778 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C3_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C3_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C3_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C3_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C3_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C3_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C3_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C3_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C3_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C3_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C3_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C3_Init+0x50>)
 80017b6:	f002 f9bd 	bl	8003b34 <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 f8ae 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000880 	.word	0x20000880
 80017cc:	40005c00 	.word	0x40005c00
 80017d0:	00061a80 	.word	0x00061a80

080017d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_USART2_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 800180c:	f005 f9f6 	bl	8006bfc <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f000 f883 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200009e0 	.word	0x200009e0
 8001824:	40004400 	.word	0x40004400

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <MX_GPIO_Init+0xec>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <MX_GPIO_Init+0xec>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <MX_GPIO_Init+0xec>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <MX_GPIO_Init+0xec>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <MX_GPIO_Init+0xec>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <MX_GPIO_Init+0xec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MX_GPIO_Init+0xec>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a25      	ldr	r2, [pc, #148]	; (8001914 <MX_GPIO_Init+0xec>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <MX_GPIO_Init+0xec>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <MX_GPIO_Init+0xec>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <MX_GPIO_Init+0xec>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <MX_GPIO_Init+0xec>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_GPIO_Init+0xec>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <MX_GPIO_Init+0xec>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_GPIO_Init+0xec>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_GPIO_Init+0xf0>)
 80018d2:	f002 f8fb 	bl	8003acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d6:	2301      	movs	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_GPIO_Init+0xf4>)
 80018ea:	f001 ff3b 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_GPIO_Init+0xf0>)
 8001908:	f001 ff2c 	bl	8003764 <HAL_GPIO_Init>

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40020000 	.word	0x40020000

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>

0800192a <mlx90632_start_measurement>:
#ifndef STATIC
#define STATIC static
#endif

int mlx90632_start_measurement(I2C_HandleTypeDef hi2c)
{
 800192a:	b084      	sub	sp, #16
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b099      	sub	sp, #100	; 0x64
 8001930:	af14      	add	r7, sp, #80	; 0x50
 8001932:	f107 0420 	add.w	r4, r7, #32
 8001936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 800193e:	1dbc      	adds	r4, r7, #6
 8001940:	4668      	mov	r0, sp
 8001942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001946:	224c      	movs	r2, #76	; 0x4c
 8001948:	4619      	mov	r1, r3
 800194a:	f009 fd23 	bl	800b394 <memcpy>
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	cb0c      	ldmia	r3, {r2, r3}
 8001954:	4621      	mov	r1, r4
 8001956:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800195a:	f000 f8e9 	bl	8001b30 <mlx90632_i2c_read>
 800195e:	60b8      	str	r0, [r7, #8]
    if (ret < 0) {
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	da01      	bge.n	800196a <mlx90632_start_measurement+0x40>
    	  return ret;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	e047      	b.n	80019fa <mlx90632_start_measurement+0xd0>
    }


    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY), hi2c);
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	b29c      	uxth	r4, r3
 8001972:	4668      	mov	r0, sp
 8001974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001978:	224c      	movs	r2, #76	; 0x4c
 800197a:	4619      	mov	r1, r3
 800197c:	f009 fd0a 	bl	800b394 <memcpy>
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	cb0c      	ldmia	r3, {r2, r3}
 8001986:	4621      	mov	r1, r4
 8001988:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800198c:	f000 f92d 	bl	8001bea <mlx90632_i2c_write>
 8001990:	60b8      	str	r0, [r7, #8]
    if (ret < 0){
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	da22      	bge.n	80019de <mlx90632_start_measurement+0xb4>
  	  return ret;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	e02e      	b.n	80019fa <mlx90632_start_measurement+0xd0>
  }

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 800199c:	1dbc      	adds	r4, r7, #6
 800199e:	4668      	mov	r0, sp
 80019a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a4:	224c      	movs	r2, #76	; 0x4c
 80019a6:	4619      	mov	r1, r3
 80019a8:	f009 fcf4 	bl	800b394 <memcpy>
 80019ac:	f107 0320 	add.w	r3, r7, #32
 80019b0:	cb0c      	ldmia	r3, {r2, r3}
 80019b2:	4621      	mov	r1, r4
 80019b4:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80019b8:	f000 f8ba 	bl	8001b30 <mlx90632_i2c_read>
 80019bc:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da01      	bge.n	80019c8 <mlx90632_start_measurement+0x9e>
            return ret;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	e018      	b.n	80019fa <mlx90632_start_measurement+0xd0>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10b      	bne.n	80019ea <mlx90632_start_measurement+0xc0>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 80019d2:	f642 21f8 	movw	r1, #11000	; 0x2af8
 80019d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80019da:	f000 f930 	bl	8001c3e <usleep>
    while (tries-- > 0)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	dcd9      	bgt.n	800199c <mlx90632_start_measurement+0x72>
 80019e8:	e000      	b.n	80019ec <mlx90632_start_measurement+0xc2>
            break;
 80019ea:	bf00      	nop
    }

    if (tries < 0)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da02      	bge.n	80019f8 <mlx90632_start_measurement+0xce>
    {
        // data not ready
        return -ETIMEDOUT;
 80019f2:	f06f 0373 	mvn.w	r3, #115	; 0x73
 80019f6:	e000      	b.n	80019fa <mlx90632_start_measurement+0xd0>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a04:	b004      	add	sp, #16
 8001a06:	4770      	bx	lr

08001a08 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 8001a12:	4905      	ldr	r1, [pc, #20]	; (8001a28 <mlx90632_set_emissivity+0x20>)
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	20000250 	.word	0x20000250

08001a2c <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <mlx90632_get_emissivity+0x38>)
 8001a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	f7fe ffef 	bl	8000a20 <__aeabi_dcmpeq>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <mlx90632_get_emissivity+0x3c>)
 8001a4e:	e002      	b.n	8001a56 <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <mlx90632_get_emissivity+0x38>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000250 	.word	0x20000250
 8001a68:	3ff00000 	.word	0x3ff00000

08001a6c <mlx90632_addressed_reset>:

    return 0;
}

int32_t mlx90632_addressed_reset(I2C_HandleTypeDef hi2c)
{
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	b590      	push	{r4, r7, lr}
 8001a70:	b097      	sub	sp, #92	; 0x5c
 8001a72:	af14      	add	r7, sp, #80	; 0x50
 8001a74:	f107 0418 	add.w	r4, r7, #24
 8001a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_value;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value, hi2c);
 8001a7c:	463c      	mov	r4, r7
 8001a7e:	4668      	mov	r0, sp
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	224c      	movs	r2, #76	; 0x4c
 8001a86:	4619      	mov	r1, r3
 8001a88:	f009 fc84 	bl	800b394 <memcpy>
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	cb0c      	ldmia	r3, {r2, r3}
 8001a92:	4621      	mov	r1, r4
 8001a94:	f243 0001 	movw	r0, #12289	; 0x3001
 8001a98:	f000 f84a 	bl	8001b30 <mlx90632_i2c_read>
 8001a9c:	6078      	str	r0, [r7, #4]
//    if (ret < 0)
//        return ret;

    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	807b      	strh	r3, [r7, #2]
    reg_ctrl |= MLX90632_PWR_STATUS_STEP;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	807b      	strh	r3, [r7, #2]
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8001aaa:	887c      	ldrh	r4, [r7, #2]
 8001aac:	4668      	mov	r0, sp
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	224c      	movs	r2, #76	; 0x4c
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f009 fc6d 	bl	800b394 <memcpy>
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	cb0c      	ldmia	r3, {r2, r3}
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	f243 0001 	movw	r0, #12289	; 0x3001
 8001ac6:	f000 f890 	bl	8001bea <mlx90632_i2c_write>
 8001aca:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da01      	bge.n	8001ad6 <mlx90632_addressed_reset+0x6a>
        return ret;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	e025      	b.n	8001b22 <mlx90632_addressed_reset+0xb6>

    ret = mlx90632_i2c_write(0x3005, MLX90632_RESET_CMD, hi2c);
 8001ad6:	4668      	mov	r0, sp
 8001ad8:	f107 0320 	add.w	r3, r7, #32
 8001adc:	224c      	movs	r2, #76	; 0x4c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f009 fc58 	bl	800b394 <memcpy>
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	cb0c      	ldmia	r3, {r2, r3}
 8001aea:	2106      	movs	r1, #6
 8001aec:	f243 0005 	movw	r0, #12293	; 0x3005
 8001af0:	f000 f87b 	bl	8001bea <mlx90632_i2c_write>
 8001af4:	6078      	str	r0, [r7, #4]
//    if (ret < 0)
//        return ret;

    usleep(150, 200);
 8001af6:	21c8      	movs	r1, #200	; 0xc8
 8001af8:	2096      	movs	r0, #150	; 0x96
 8001afa:	f000 f8a0 	bl	8001c3e <usleep>

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value, hi2c);
 8001afe:	883c      	ldrh	r4, [r7, #0]
 8001b00:	4668      	mov	r0, sp
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	224c      	movs	r2, #76	; 0x4c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f009 fc43 	bl	800b394 <memcpy>
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	cb0c      	ldmia	r3, {r2, r3}
 8001b14:	4621      	mov	r1, r4
 8001b16:	f243 0001 	movw	r0, #12289	; 0x3001
 8001b1a:	f000 f866 	bl	8001bea <mlx90632_i2c_write>
 8001b1e:	6078      	str	r0, [r7, #4]

    return ret;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b2c:	b004      	add	sp, #16
 8001b2e:	4770      	bx	lr

08001b30 <mlx90632_i2c_read>:
#define CHIP_ADDRESS 0x3a << 1

/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value, I2C_HandleTypeDef hi2c)
{
 8001b30:	b082      	sub	sp, #8
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b088      	sub	sp, #32
 8001b36:	af04      	add	r7, sp, #16
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	f107 0118 	add.w	r1, r7, #24
 8001b3e:	e881 000c 	stmia.w	r1, {r2, r3}
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2302      	movs	r3, #2
 8001b58:	2174      	movs	r1, #116	; 0x74
 8001b5a:	f107 0018 	add.w	r0, r7, #24
 8001b5e:	f002 fb25 	bl	80041ac <HAL_I2C_Mem_Read>
 8001b62:	4603      	mov	r3, r0
 8001b64:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 8001b66:	7a7b      	ldrb	r3, [r7, #9]
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	7a3b      	ldrb	r3, [r7, #8]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	801a      	strh	r2, [r3, #0]
	return ret;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b86:	b002      	add	sp, #8
 8001b88:	4770      	bx	lr

08001b8a <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address, uint32_t *value, I2C_HandleTypeDef hi2c)
{
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	6039      	str	r1, [r7, #0]
 8001b94:	f107 0118 	add.w	r1, r7, #24
 8001b98:	e881 000c 	stmia.w	r1, {r2, r3}
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	80fb      	strh	r3, [r7, #6]
	uint8_t data[4];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	2364      	movs	r3, #100	; 0x64
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	2174      	movs	r1, #116	; 0x74
 8001bb4:	f107 0018 	add.w	r0, r7, #24
 8001bb8:	f002 faf8 	bl	80041ac <HAL_I2C_Mem_Read>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 8001bc0:	7abb      	ldrb	r3, [r7, #10]
 8001bc2:	061a      	lsls	r2, r3, #24
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	7a3b      	ldrb	r3, [r7, #8]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	7a7a      	ldrb	r2, [r7, #9]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]
	return ret;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001be6:	b002      	add	sp, #8
 8001be8:	4770      	bx	lr

08001bea <mlx90632_i2c_write>:

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value, I2C_HandleTypeDef hi2c) {
 8001bea:	b082      	sub	sp, #8
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af04      	add	r7, sp, #16
 8001bf2:	f107 0c18 	add.w	ip, r7, #24
 8001bf6:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 8001c02:	88bb      	ldrh	r3, [r7, #4]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	2364      	movs	r3, #100	; 0x64
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2302      	movs	r3, #2
 8001c24:	2174      	movs	r1, #116	; 0x74
 8001c26:	f107 0018 	add.w	r0, r7, #24
 8001c2a:	f002 f9c5 	bl	8003fb8 <HAL_I2C_Mem_Write>
 8001c2e:	4603      	mov	r3, r0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c3a:	b002      	add	sp, #8
 8001c3c:	4770      	bx	lr

08001c3e <usleep>:

void usleep(int min_range, int max_range) {
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
	while(--min_range);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f9      	bne.n	8001c48 <usleep+0xa>
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <mlx90632_read_temp_ambient_raw_extended>:
#ifndef STATIC
#define STATIC static
#endif

STATIC int32_t mlx90632_read_temp_ambient_raw_extended(int16_t *ambient_new_raw, int16_t *ambient_old_raw, I2C_HandleTypeDef hi2c)
{
 8001c62:	b082      	sub	sp, #8
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b099      	sub	sp, #100	; 0x64
 8001c68:	af14      	add	r7, sp, #80	; 0x50
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	f107 0120 	add.w	r1, r7, #32
 8001c72:	e881 000c 	stmia.w	r1, {r2, r3}
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(17), &read_tmp, hi2c);
 8001c76:	f107 040a 	add.w	r4, r7, #10
 8001c7a:	4668      	mov	r0, sp
 8001c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c80:	224c      	movs	r2, #76	; 0x4c
 8001c82:	4619      	mov	r1, r3
 8001c84:	f009 fb86 	bl	800b394 <memcpy>
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	cb0c      	ldmia	r3, {r2, r3}
 8001c8e:	4621      	mov	r1, r4
 8001c90:	f244 0035 	movw	r0, #16437	; 0x4035
 8001c94:	f7ff ff4c 	bl	8001b30 <mlx90632_i2c_read>
 8001c98:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da01      	bge.n	8001ca4 <mlx90632_read_temp_ambient_raw_extended+0x42>
        return ret;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	e01f      	b.n	8001ce4 <mlx90632_read_temp_ambient_raw_extended+0x82>
    *ambient_new_raw = (int16_t)read_tmp;
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(18), &read_tmp, hi2c);
 8001cac:	f107 040a 	add.w	r4, r7, #10
 8001cb0:	4668      	mov	r0, sp
 8001cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb6:	224c      	movs	r2, #76	; 0x4c
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f009 fb6b 	bl	800b394 <memcpy>
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	cb0c      	ldmia	r3, {r2, r3}
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	f244 0038 	movw	r0, #16440	; 0x4038
 8001cca:	f7ff ff31 	bl	8001b30 <mlx90632_i2c_read>
 8001cce:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da01      	bge.n	8001cda <mlx90632_read_temp_ambient_raw_extended+0x78>
        return ret;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	e004      	b.n	8001ce4 <mlx90632_read_temp_ambient_raw_extended+0x82>
    *ambient_old_raw = (int16_t)read_tmp;
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	801a      	strh	r2, [r3, #0]

    return ret;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cee:	b002      	add	sp, #8
 8001cf0:	4770      	bx	lr

08001cf2 <mlx90632_read_temp_object_raw_extended>:

STATIC int32_t mlx90632_read_temp_object_raw_extended(int16_t *object_new_raw, I2C_HandleTypeDef hi2c)
{
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b09b      	sub	sp, #108	; 0x6c
 8001cf8:	af14      	add	r7, sp, #80	; 0x50
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001d00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret;
    uint16_t read_tmp;
    int32_t read;

    ret = mlx90632_i2c_read(MLX90632_RAM_1(17), &read_tmp, hi2c);
 8001d04:	f107 040e 	add.w	r4, r7, #14
 8001d08:	4668      	mov	r0, sp
 8001d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d0e:	224c      	movs	r2, #76	; 0x4c
 8001d10:	4619      	mov	r1, r3
 8001d12:	f009 fb3f 	bl	800b394 <memcpy>
 8001d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1a:	cb0c      	ldmia	r3, {r2, r3}
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	f244 0033 	movw	r0, #16435	; 0x4033
 8001d22:	f7ff ff05 	bl	8001b30 <mlx90632_i2c_read>
 8001d26:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da01      	bge.n	8001d32 <mlx90632_read_temp_object_raw_extended+0x40>
        return ret;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	e0a6      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = (int16_t)read_tmp;
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(17), &read_tmp, hi2c);
 8001d38:	f107 040e 	add.w	r4, r7, #14
 8001d3c:	4668      	mov	r0, sp
 8001d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d42:	224c      	movs	r2, #76	; 0x4c
 8001d44:	4619      	mov	r1, r3
 8001d46:	f009 fb25 	bl	800b394 <memcpy>
 8001d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4e:	cb0c      	ldmia	r3, {r2, r3}
 8001d50:	4621      	mov	r1, r4
 8001d52:	f244 0034 	movw	r0, #16436	; 0x4034
 8001d56:	f7ff feeb 	bl	8001b30 <mlx90632_i2c_read>
 8001d5a:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da01      	bge.n	8001d66 <mlx90632_read_temp_object_raw_extended+0x74>
        return ret;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	e08c      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read - (int16_t)read_tmp;
 8001d66:	89fb      	ldrh	r3, [r7, #14]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(18), &read_tmp, hi2c);
 8001d72:	f107 040e 	add.w	r4, r7, #14
 8001d76:	4668      	mov	r0, sp
 8001d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d7c:	224c      	movs	r2, #76	; 0x4c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f009 fb08 	bl	800b394 <memcpy>
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	cb0c      	ldmia	r3, {r2, r3}
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	f244 0036 	movw	r0, #16438	; 0x4036
 8001d90:	f7ff fece 	bl	8001b30 <mlx90632_i2c_read>
 8001d94:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da01      	bge.n	8001da0 <mlx90632_read_temp_object_raw_extended+0xae>
        return ret;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	e06f      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read - (int16_t)read_tmp;
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(18), &read_tmp, hi2c);
 8001dac:	f107 040e 	add.w	r4, r7, #14
 8001db0:	4668      	mov	r0, sp
 8001db2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db6:	224c      	movs	r2, #76	; 0x4c
 8001db8:	4619      	mov	r1, r3
 8001dba:	f009 faeb 	bl	800b394 <memcpy>
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	cb0c      	ldmia	r3, {r2, r3}
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	f244 0037 	movw	r0, #16439	; 0x4037
 8001dca:	f7ff feb1 	bl	8001b30 <mlx90632_i2c_read>
 8001dce:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da01      	bge.n	8001dda <mlx90632_read_temp_object_raw_extended+0xe8>
        return ret;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	e052      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = (read + (int16_t)read_tmp) / 2;
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	0fda      	lsrs	r2, r3, #31
 8001de6:	4413      	add	r3, r2
 8001de8:	105b      	asrs	r3, r3, #1
 8001dea:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(19), &read_tmp, hi2c);
 8001dec:	f107 040e 	add.w	r4, r7, #14
 8001df0:	4668      	mov	r0, sp
 8001df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df6:	224c      	movs	r2, #76	; 0x4c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f009 facb 	bl	800b394 <memcpy>
 8001dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e02:	cb0c      	ldmia	r3, {r2, r3}
 8001e04:	4621      	mov	r1, r4
 8001e06:	f244 0039 	movw	r0, #16441	; 0x4039
 8001e0a:	f7ff fe91 	bl	8001b30 <mlx90632_i2c_read>
 8001e0e:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da01      	bge.n	8001e1a <mlx90632_read_temp_object_raw_extended+0x128>
        return ret;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	e032      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read + (int16_t)read_tmp;
 8001e1a:	89fb      	ldrh	r3, [r7, #14]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(19), &read_tmp, hi2c);
 8001e26:	f107 040e 	add.w	r4, r7, #14
 8001e2a:	4668      	mov	r0, sp
 8001e2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e30:	224c      	movs	r2, #76	; 0x4c
 8001e32:	4619      	mov	r1, r3
 8001e34:	f009 faae 	bl	800b394 <memcpy>
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	cb0c      	ldmia	r3, {r2, r3}
 8001e3e:	4621      	mov	r1, r4
 8001e40:	f244 003a 	movw	r0, #16442	; 0x403a
 8001e44:	f7ff fe74 	bl	8001b30 <mlx90632_i2c_read>
 8001e48:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da01      	bge.n	8001e54 <mlx90632_read_temp_object_raw_extended+0x162>
        return ret;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	e015      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read + (int16_t)read_tmp;
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]

    if (read > 32767 || read < -32768)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e66:	da03      	bge.n	8001e70 <mlx90632_read_temp_object_raw_extended+0x17e>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e6e:	da02      	bge.n	8001e76 <mlx90632_read_temp_object_raw_extended+0x184>
        return -EINVAL;
 8001e70:	f06f 0315 	mvn.w	r3, #21
 8001e74:	e004      	b.n	8001e80 <mlx90632_read_temp_object_raw_extended+0x18e>

    *object_new_raw = (int16_t)read;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	801a      	strh	r2, [r3, #0]

    return ret;
 8001e7e:	697b      	ldr	r3, [r7, #20]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e8a:	b004      	add	sp, #16
 8001e8c:	4770      	bx	lr

08001e8e <mlx90632_read_temp_raw_extended>:

int32_t mlx90632_read_temp_raw_extended(int16_t *ambient_new_raw, int16_t *ambient_old_raw, int16_t *object_new_raw, I2C_HandleTypeDef hi2c)
{
 8001e8e:	b082      	sub	sp, #8
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09c      	sub	sp, #112	; 0x70
 8001e94:	af14      	add	r7, sp, #80	; 0x50
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t ret, start_measurement_ret;
    int tries = 3;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	61fb      	str	r3, [r7, #28]

    // trigger and wait for measurement to complete
    while (tries-- > 0)
 8001ea2:	e014      	b.n	8001ece <mlx90632_read_temp_raw_extended+0x40>
    {
        start_measurement_ret = mlx90632_start_measurement(hi2c);
 8001ea4:	4668      	mov	r0, sp
 8001ea6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eaa:	2244      	movs	r2, #68	; 0x44
 8001eac:	4619      	mov	r1, r3
 8001eae:	f009 fa71 	bl	800b394 <memcpy>
 8001eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	f7ff fd37 	bl	800192a <mlx90632_start_measurement>
 8001ebc:	61b8      	str	r0, [r7, #24]
        if (start_measurement_ret < 0)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da01      	bge.n	8001ec8 <mlx90632_read_temp_raw_extended+0x3a>
            return start_measurement_ret;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	e02c      	b.n	8001f22 <mlx90632_read_temp_raw_extended+0x94>

        if (start_measurement_ret == 19)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b13      	cmp	r3, #19
 8001ecc:	d005      	beq.n	8001eda <mlx90632_read_temp_raw_extended+0x4c>
    while (tries-- > 0)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	61fa      	str	r2, [r7, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	dce5      	bgt.n	8001ea4 <mlx90632_read_temp_raw_extended+0x16>
 8001ed8:	e000      	b.n	8001edc <mlx90632_read_temp_raw_extended+0x4e>
            break;
 8001eda:	bf00      	nop
//        // data not ready
//        return -ETIMEDOUT;
//    }

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw_extended(ambient_new_raw, ambient_old_raw, hi2c);
 8001edc:	4668      	mov	r0, sp
 8001ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee2:	224c      	movs	r2, #76	; 0x4c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f009 fa55 	bl	800b394 <memcpy>
 8001eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eee:	cb0c      	ldmia	r3, {r2, r3}
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff feb5 	bl	8001c62 <mlx90632_read_temp_ambient_raw_extended>
 8001ef8:	6178      	str	r0, [r7, #20]
    if (ret < 0) {
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da01      	bge.n	8001f04 <mlx90632_read_temp_raw_extended+0x76>
  	  return ret;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	e00e      	b.n	8001f22 <mlx90632_read_temp_raw_extended+0x94>
    }

    /** Read new **object** value from sensor */
    ret = mlx90632_read_temp_object_raw_extended(object_new_raw, hi2c);
 8001f04:	4668      	mov	r0, sp
 8001f06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f0a:	2248      	movs	r2, #72	; 0x48
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f009 fa41 	bl	800b394 <memcpy>
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff feea 	bl	8001cf2 <mlx90632_read_temp_object_raw_extended>
 8001f1e:	6178      	str	r0, [r7, #20]

    return ret;
 8001f20:	697b      	ldr	r3, [r7, #20]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f2c:	b002      	add	sp, #8
 8001f2e:	4770      	bx	lr

08001f30 <mlx90632_preprocess_temp_ambient_extended>:

    return ret;
}

double mlx90632_preprocess_temp_ambient_extended(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	80bb      	strh	r3, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 8001f42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa98 	bl	800047c <__aeabi_i2d>
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <mlx90632_preprocess_temp_ambient_extended+0xc0>)
 8001f52:	f7fe fc27 	bl	80007a4 <__aeabi_ddiv>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 8001f5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa8a 	bl	800047c <__aeabi_i2d>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	460d      	mov	r5, r1
 8001f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fa83 	bl	800047c <__aeabi_i2d>
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <mlx90632_preprocess_temp_ambient_extended+0xc4>)
 8001f7c:	f7fe fc12 	bl	80007a4 <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f8c:	f7fe fae0 	bl	8000550 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe f924 	bl	80001e4 <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8001fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa67 	bl	800047c <__aeabi_i2d>
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <mlx90632_preprocess_temp_ambient_extended+0xc4>)
 8001fb4:	f7fe fbf6 	bl	80007a4 <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc4:	f7fe fbee 	bl	80007a4 <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <mlx90632_preprocess_temp_ambient_extended+0xc8>)
 8001fd6:	f7fe fabb 	bl	8000550 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fe2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe6:	eef0 0a67 	vmov.f32	s1, s15
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff0:	40900000 	.word	0x40900000
 8001ff4:	40280000 	.word	0x40280000
 8001ff8:	41200000 	.word	0x41200000

08001ffc <mlx90632_preprocess_temp_object_extended>:

double mlx90632_preprocess_temp_object_extended(int16_t object_new_raw, int16_t ambient_new_raw,
                                                int16_t ambient_old_raw, int16_t Ka)
{
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4623      	mov	r3, r4
 800200c:	80fb      	strh	r3, [r7, #6]
 800200e:	4603      	mov	r3, r0
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	807b      	strh	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 800201a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa2c 	bl	800047c <__aeabi_i2d>
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <mlx90632_preprocess_temp_object_extended+0xcc>)
 800202a:	f7fe fbbb 	bl	80007a4 <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 8002036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa1e 	bl	800047c <__aeabi_i2d>
 8002040:	4604      	mov	r4, r0
 8002042:	460d      	mov	r5, r1
 8002044:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa17 	bl	800047c <__aeabi_i2d>
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <mlx90632_preprocess_temp_object_extended+0xd0>)
 8002054:	f7fe fba6 	bl	80007a4 <__aeabi_ddiv>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002064:	f7fe fa74 	bl	8000550 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe f8b8 	bl	80001e4 <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((object_new_raw / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 800207c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f9fb 	bl	800047c <__aeabi_i2d>
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <mlx90632_preprocess_temp_object_extended+0xd0>)
 800208c:	f7fe fb8a 	bl	80007a4 <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800209c:	f7fe fb82 	bl	80007a4 <__aeabi_ddiv>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <mlx90632_preprocess_temp_object_extended+0xd4>)
 80020ae:	f7fe fa4f 	bl	8000550 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80020ba:	eeb0 0a47 	vmov.f32	s0, s14
 80020be:	eef0 0a67 	vmov.f32	s1, s15
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	40900000 	.word	0x40900000
 80020cc:	40280000 	.word	0x40280000
 80020d0:	41200000 	.word	0x41200000

080020d4 <mlx90632_calc_temp_ambient_extended>:

double mlx90632_calc_temp_ambient_extended(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                           int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b090      	sub	sp, #64	; 0x40
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4603      	mov	r3, r0
 80020e0:	81fb      	strh	r3, [r7, #14]
 80020e2:	460b      	mov	r3, r1
 80020e4:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient_extended(ambient_new_raw, ambient_old_raw, Gb);
 80020e6:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 80020ea:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80020ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff1c 	bl	8001f30 <mlx90632_preprocess_temp_ambient_extended>
 80020f8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 80020fc:	68b8      	ldr	r0, [r7, #8]
 80020fe:	f7fe f9bd 	bl	800047c <__aeabi_i2d>
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <mlx90632_calc_temp_ambient_extended+0xfc>)
 8002108:	f7fe fb4c 	bl	80007a4 <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = AMB - ((double)P_R / (double)256.0);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe f9b1 	bl	800047c <__aeabi_i2d>
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <mlx90632_calc_temp_ambient_extended+0x100>)
 8002120:	f7fe fb40 	bl	80007a4 <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800212c:	f7fe f858 	bl	80001e0 <__aeabi_dsub>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 8002138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800213c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002140:	f7fe fa06 	bl	8000550 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800214c:	f7fe fa00 	bl	8000550 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 8002158:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800215a:	f7fe f98f 	bl	800047c <__aeabi_i2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002166:	f7fe fb1d 	bl	80007a4 <__aeabi_ddiv>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <mlx90632_calc_temp_ambient_extended+0x104>)
 8002178:	f7fe f9ea 	bl	8000550 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 8002184:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002186:	f7fe f979 	bl	800047c <__aeabi_i2d>
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <mlx90632_calc_temp_ambient_extended+0x100>)
 8002190:	f7fe fb08 	bl	80007a4 <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 800219c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a4:	f7fe f81e 	bl	80001e4 <__adddf3>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021b4:	f7fe f816 	bl	80001e4 <__adddf3>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80021c0:	eeb0 0a47 	vmov.f32	s0, s14
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	3740      	adds	r7, #64	; 0x40
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	42b00000 	.word	0x42b00000
 80021d4:	40700000 	.word	0x40700000
 80021d8:	41300000 	.word	0x41300000
 80021dc:	00000000 	.word	0x00000000

080021e0 <mlx90632_calc_temp_object_iteration_extended>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
static double mlx90632_calc_temp_object_iteration_extended(double prev_object_temp, int32_t object, double TAdut, double TaTr4,
                                                           int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                           double emissivity)
{
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b09c      	sub	sp, #112	; 0x70
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24
 80021ec:	ed87 1b06 	vstr	d1, [r7, #24]
 80021f0:	ed87 2b04 	vstr	d2, [r7, #16]
 80021f4:	6239      	str	r1, [r7, #32]
 80021f6:	60fa      	str	r2, [r7, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	ed87 3b00 	vstr	d3, [r7]
    double calcedGa, calcedGb, calcedFa, first_sqrt;
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;

    Ha_customer = Ha / ((double)16384.0);
 80021fe:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f93a 	bl	800047c <__aeabi_i2d>
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	4b74      	ldr	r3, [pc, #464]	; (80023e0 <mlx90632_calc_temp_object_iteration_extended+0x200>)
 800220e:	f7fe fac9 	bl	80007a4 <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 800221a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f92c 	bl	800047c <__aeabi_i2d>
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b6e      	ldr	r3, [pc, #440]	; (80023e4 <mlx90632_calc_temp_object_iteration_extended+0x204>)
 800222a:	f7fe fabb 	bl	80007a4 <__aeabi_ddiv>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 8002236:	6a38      	ldr	r0, [r7, #32]
 8002238:	f7fe f920 	bl	800047c <__aeabi_i2d>
 800223c:	4604      	mov	r4, r0
 800223e:	460d      	mov	r5, r1
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <mlx90632_calc_temp_object_iteration_extended+0x208>)
 8002246:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800224a:	f7fd ffc9 	bl	80001e0 <__aeabi_dsub>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fe f97b 	bl	8000550 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b61      	ldr	r3, [pc, #388]	; (80023ec <mlx90632_calc_temp_object_iteration_extended+0x20c>)
 8002268:	f7fe fa9c 	bl	80007a4 <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 8002274:	68b8      	ldr	r0, [r7, #8]
 8002276:	f7fe f901 	bl	800047c <__aeabi_i2d>
 800227a:	4604      	mov	r4, r0
 800227c:	460d      	mov	r5, r1
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <mlx90632_calc_temp_object_iteration_extended+0x208>)
 8002284:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002288:	f7fd ffaa 	bl	80001e0 <__aeabi_dsub>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4620      	mov	r0, r4
 8002292:	4629      	mov	r1, r5
 8002294:	f7fe f95c 	bl	8000550 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b51      	ldr	r3, [pc, #324]	; (80023ec <mlx90632_calc_temp_object_iteration_extended+0x20c>)
 80022a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022aa:	f7fe fa7b 	bl	80007a4 <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1.0 + calcedGa + calcedGb)) /
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	461a      	mov	r2, r3
 80022ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022be:	494c      	ldr	r1, [pc, #304]	; (80023f0 <mlx90632_calc_temp_object_iteration_extended+0x210>)
 80022c0:	fb01 f003 	mul.w	r0, r1, r3
 80022c4:	2102      	movs	r1, #2
 80022c6:	fb01 f102 	mul.w	r1, r1, r2
 80022ca:	4401      	add	r1, r0
 80022cc:	4848      	ldr	r0, [pc, #288]	; (80023f0 <mlx90632_calc_temp_object_iteration_extended+0x210>)
 80022ce:	fba2 2300 	umull	r2, r3, r2, r0
 80022d2:	4419      	add	r1, r3
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe f90b 	bl	80004f4 <__aeabi_l2d>
 80022de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80022e2:	f7fe f935 	bl	8000550 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4614      	mov	r4, r2
 80022ec:	461d      	mov	r5, r3
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <mlx90632_calc_temp_object_iteration_extended+0x214>)
 80022f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022f8:	f7fd ff74 	bl	80001e4 <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002308:	f7fd ff6c 	bl	80001e4 <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4620      	mov	r0, r4
 8002312:	4629      	mov	r1, r5
 8002314:	f7fe f91c 	bl	8000550 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <mlx90632_calc_temp_object_iteration_extended+0x218>)
 8002326:	f7fe fa3d 	bl	80007a4 <__aeabi_ddiv>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 8002332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002334:	f7fe f8a2 	bl	800047c <__aeabi_i2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	a324      	add	r3, pc, #144	; (adr r3, 80023d0 <mlx90632_calc_temp_object_iteration_extended+0x1f0>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002346:	f7fe fa2d 	bl	80007a4 <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002356:	f7fe f8fb 	bl	8000550 <__aeabi_dmul>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe fa1f 	bl	80007a4 <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    first_sqrt = sqrt(calcedFa + TaTr4);
 800236e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002372:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002376:	f7fd ff35 	bl	80001e4 <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	ec43 2b17 	vmov	d7, r2, r3
 8002382:	eeb0 0a47 	vmov.f32	s0, s14
 8002386:	eef0 0a67 	vmov.f32	s1, s15
 800238a:	f009 f819 	bl	800b3c0 <sqrt>
 800238e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 8002392:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002396:	f009 f813 	bl	800b3c0 <sqrt>
 800239a:	ec51 0b10 	vmov	r0, r1, d0
 800239e:	a30e      	add	r3, pc, #56	; (adr r3, 80023d8 <mlx90632_calc_temp_object_iteration_extended+0x1f8>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fd ff1c 	bl	80001e0 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80023b4:	f7fd ff14 	bl	80001e0 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80023c0:	eeb0 0a47 	vmov.f32	s0, s14
 80023c4:	eef0 0a67 	vmov.f32	s1, s15
 80023c8:	3770      	adds	r7, #112	; 0x70
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdb0      	pop	{r4, r5, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000
 80023d4:	4202a05f 	.word	0x4202a05f
 80023d8:	66666666 	.word	0x66666666
 80023dc:	40711266 	.word	0x40711266
 80023e0:	40d00000 	.word	0x40d00000
 80023e4:	40900000 	.word	0x40900000
 80023e8:	40390000 	.word	0x40390000
 80023ec:	42300000 	.word	0x42300000
 80023f0:	540be400 	.word	0x540be400
 80023f4:	3ff00000 	.word	0x3ff00000
 80023f8:	42d00000 	.word	0x42d00000
 80023fc:	00000000 	.word	0x00000000

08002400 <mlx90632_calc_temp_object_extended>:

double mlx90632_calc_temp_object_extended(int32_t object, int32_t ambient, double reflected,
                                          int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                          int16_t Ha, int16_t Hb)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b098      	sub	sp, #96	; 0x60
 8002404:	af02      	add	r7, sp, #8
 8002406:	6178      	str	r0, [r7, #20]
 8002408:	6139      	str	r1, [r7, #16]
 800240a:	ed87 0b02 	vstr	d0, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <mlx90632_calc_temp_object_extended+0x1a8>)
 8002418:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    double tmp_emi = mlx90632_get_emissivity();
 800241c:	f7ff fb06 	bl	8001a2c <mlx90632_get_emissivity>
 8002420:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double TaTr4;
    double ta4;
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe f829 	bl	800047c <__aeabi_i2d>
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <mlx90632_calc_temp_object_extended+0x1ac>)
 8002430:	f7fe f9b8 	bl	80007a4 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    kEb = ((double)Eb) / ((double)256.0);
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f7fe f81d 	bl	800047c <__aeabi_i2d>
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <mlx90632_calc_temp_object_extended+0x1b0>)
 8002448:	f7fe f9ac 	bl	80007a4 <__aeabi_ddiv>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 8002454:	6938      	ldr	r0, [r7, #16]
 8002456:	f7fe f811 	bl	800047c <__aeabi_i2d>
 800245a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800245e:	f7fd febf 	bl	80001e0 <__aeabi_dsub>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800246e:	f7fe f999 	bl	80007a4 <__aeabi_ddiv>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <mlx90632_calc_temp_object_extended+0x1a8>)
 8002480:	f7fd feb0 	bl	80001e4 <__adddf3>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    TaTr4 = reflected + 273.15;
 800248c:	a344      	add	r3, pc, #272	; (adr r3, 80025a0 <mlx90632_calc_temp_object_extended+0x1a0>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002496:	f7fd fea5 	bl	80001e4 <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TaTr4 = TaTr4 * TaTr4;
 80024a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024aa:	f7fe f851 	bl	8000550 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TaTr4 = TaTr4 * TaTr4;
 80024b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024be:	f7fe f847 	bl	8000550 <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ta4 = TAdut + 273.15;
 80024ca:	a335      	add	r3, pc, #212	; (adr r3, 80025a0 <mlx90632_calc_temp_object_extended+0x1a0>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024d4:	f7fd fe86 	bl	80001e4 <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ta4 = ta4 * ta4;
 80024e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e8:	f7fe f832 	bl	8000550 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ta4 = ta4 * ta4;
 80024f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024fc:	f7fe f828 	bl	8000550 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TaTr4 = TaTr4 - (TaTr4 - ta4) / tmp_emi;
 8002508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002510:	f7fd fe66 	bl	80001e0 <__aeabi_dsub>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002520:	f7fe f940 	bl	80007a4 <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800252c:	f7fd fe58 	bl	80001e0 <__aeabi_dsub>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	e9c7 2308 	strd	r2, r3, [r7, #32]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8002538:	2300      	movs	r3, #0
 800253a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800253e:	e01f      	b.n	8002580 <mlx90632_calc_temp_object_extended+0x180>
    {
        temp = mlx90632_calc_temp_object_iteration_extended(temp, object, TAdut, TaTr4, Ga, Fa / 2, Fb, Ha, Hb, tmp_emi);
 8002540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002542:	0fda      	lsrs	r2, r3, #31
 8002544:	4413      	add	r3, r2
 8002546:	105b      	asrs	r3, r3, #1
 8002548:	461a      	mov	r2, r3
 800254a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 800255a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800255e:	ed97 2b08 	vldr	d2, [r7, #32]
 8002562:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800256c:	f7ff fe38 	bl	80021e0 <mlx90632_calc_temp_object_iteration_extended>
 8002570:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    for (i = 0; i < 5; ++i)
 8002574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002578:	3301      	adds	r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002580:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002584:	2b04      	cmp	r3, #4
 8002586:	dddb      	ble.n	8002540 <mlx90632_calc_temp_object_extended+0x140>
    }

    return temp;
 8002588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800258c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002590:	eeb0 0a47 	vmov.f32	s0, s14
 8002594:	eef0 0a67 	vmov.f32	s1, s15
 8002598:	3758      	adds	r7, #88	; 0x58
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	66666666 	.word	0x66666666
 80025a4:	40711266 	.word	0x40711266
 80025a8:	40390000 	.word	0x40390000
 80025ac:	40f00000 	.word	0x40f00000
 80025b0:	40700000 	.word	0x40700000

080025b4 <mlx90632_set_meas_type>:

int32_t mlx90632_set_meas_type(uint8_t type, I2C_HandleTypeDef hi2c)
{
 80025b4:	b084      	sub	sp, #16
 80025b6:	b590      	push	{r4, r7, lr}
 80025b8:	b099      	sub	sp, #100	; 0x64
 80025ba:	af14      	add	r7, sp, #80	; 0x50
 80025bc:	4604      	mov	r4, r0
 80025be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80025c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80025c6:	4623      	mov	r3, r4
 80025c8:	71fb      	strb	r3, [r7, #7]
    int32_t ret;
    uint16_t reg_ctrl;

    if ((type != MLX90632_MTYP_MEDICAL) & (type != MLX90632_MTYP_EXTENDED) & (type != MLX90632_MTYP_MEDICAL_BURST) & (type != MLX90632_MTYP_EXTENDED_BURST))
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	2b11      	cmp	r3, #17
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4013      	ands	r3, r2
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4013      	ands	r3, r2
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	2a91      	cmp	r2, #145	; 0x91
 80025fa:	bf14      	ite	ne
 80025fc:	2201      	movne	r2, #1
 80025fe:	2200      	moveq	r2, #0
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <mlx90632_set_meas_type+0x5a>
        return -EINVAL;
 8002608:	f06f 0315 	mvn.w	r3, #21
 800260c:	e086      	b.n	800271c <mlx90632_set_meas_type+0x168>

    ret = mlx90632_addressed_reset(hi2c);
 800260e:	4668      	mov	r0, sp
 8002610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002614:	2244      	movs	r2, #68	; 0x44
 8002616:	4619      	mov	r1, r3
 8002618:	f008 febc 	bl	800b394 <memcpy>
 800261c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002622:	f7ff fa23 	bl	8001a6c <mlx90632_addressed_reset>
 8002626:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	da01      	bge.n	8002632 <mlx90632_set_meas_type+0x7e>
        return ret;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	e074      	b.n	800271c <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 8002632:	f107 040a 	add.w	r4, r7, #10
 8002636:	4668      	mov	r0, sp
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	224c      	movs	r2, #76	; 0x4c
 800263e:	4619      	mov	r1, r3
 8002640:	f008 fea8 	bl	800b394 <memcpy>
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	cb0c      	ldmia	r3, {r2, r3}
 800264a:	4621      	mov	r1, r4
 800264c:	f243 0001 	movw	r0, #12289	; 0x3001
 8002650:	f7ff fa6e 	bl	8001b30 <mlx90632_i2c_read>
 8002654:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	da01      	bge.n	8002660 <mlx90632_set_meas_type+0xac>
        return ret;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	e05d      	b.n	800271c <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & (~MLX90632_CFG_MTYP_MASK & ~MLX90632_CFG_PWR_MASK);
 8002660:	897b      	ldrh	r3, [r7, #10]
 8002662:	817b      	strh	r3, [r7, #10]
    reg_ctrl |= (MLX90632_MTYP_STATUS(MLX90632_MEASUREMENT_TYPE_STATUS(type)) | MLX90632_PWR_STATUS_HALT);
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	b21b      	sxth	r3, r3
 800266a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800266e:	b21a      	sxth	r2, r3
 8002670:	897b      	ldrh	r3, [r7, #10]
 8002672:	b21b      	sxth	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b21b      	sxth	r3, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	817b      	strh	r3, [r7, #10]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 800267c:	897c      	ldrh	r4, [r7, #10]
 800267e:	4668      	mov	r0, sp
 8002680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002684:	224c      	movs	r2, #76	; 0x4c
 8002686:	4619      	mov	r1, r3
 8002688:	f008 fe84 	bl	800b394 <memcpy>
 800268c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002690:	cb0c      	ldmia	r3, {r2, r3}
 8002692:	4621      	mov	r1, r4
 8002694:	f243 0001 	movw	r0, #12289	; 0x3001
 8002698:	f7ff faa7 	bl	8001bea <mlx90632_i2c_write>
 800269c:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da01      	bge.n	80026a8 <mlx90632_set_meas_type+0xf4>
        return ret;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	e039      	b.n	800271c <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 80026a8:	f107 040a 	add.w	r4, r7, #10
 80026ac:	4668      	mov	r0, sp
 80026ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b2:	224c      	movs	r2, #76	; 0x4c
 80026b4:	4619      	mov	r1, r3
 80026b6:	f008 fe6d 	bl	800b394 <memcpy>
 80026ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026be:	cb0c      	ldmia	r3, {r2, r3}
 80026c0:	4621      	mov	r1, r4
 80026c2:	f243 0001 	movw	r0, #12289	; 0x3001
 80026c6:	f7ff fa33 	bl	8001b30 <mlx90632_i2c_read>
 80026ca:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da01      	bge.n	80026d6 <mlx90632_set_meas_type+0x122>
        return ret;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	e022      	b.n	800271c <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & ~MLX90632_CFG_PWR_MASK;
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	817b      	strh	r3, [r7, #10]
    if (MLX90632_MEASUREMENT_BURST_STATUS(type))
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da05      	bge.n	80026ee <mlx90632_set_meas_type+0x13a>
    {
        reg_ctrl |= MLX90632_PWR_STATUS_SLEEP_STEP;
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	817b      	strh	r3, [r7, #10]
 80026ec:	e004      	b.n	80026f8 <mlx90632_set_meas_type+0x144>
    }
    else
    {
        reg_ctrl |= MLX90632_PWR_STATUS_CONTINUOUS;
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	f043 0306 	orr.w	r3, r3, #6
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	817b      	strh	r3, [r7, #10]
    }

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 80026f8:	897c      	ldrh	r4, [r7, #10]
 80026fa:	4668      	mov	r0, sp
 80026fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002700:	224c      	movs	r2, #76	; 0x4c
 8002702:	4619      	mov	r1, r3
 8002704:	f008 fe46 	bl	800b394 <memcpy>
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	cb0c      	ldmia	r3, {r2, r3}
 800270e:	4621      	mov	r1, r4
 8002710:	f243 0001 	movw	r0, #12289	; 0x3001
 8002714:	f7ff fa69 	bl	8001bea <mlx90632_i2c_write>
 8002718:	60f8      	str	r0, [r7, #12]

    return ret;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002726:	b004      	add	sp, #16
 8002728:	4770      	bx	lr
	...

0800272c <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 800272c:	b084      	sub	sp, #16
 800272e:	b590      	push	{r4, r7, lr}
 8002730:	b097      	sub	sp, #92	; 0x5c
 8002732:	af14      	add	r7, sp, #80	; 0x50
 8002734:	f107 0418 	add.w	r4, r7, #24
 8002738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 800273c:	f000 fb90 	bl	8002e60 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <SSD1306_Init+0x44>)
 8002742:	4618      	mov	r0, r3
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	2254      	movs	r2, #84	; 0x54
 800274a:	4619      	mov	r1, r3
 800274c:	f008 fe22 	bl	800b394 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002750:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002754:	2201      	movs	r2, #1
 8002756:	2178      	movs	r1, #120	; 0x78
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <SSD1306_Init+0x44>)
 800275a:	f001 ff4d 	bl	80045f8 <HAL_I2C_IsDeviceReady>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8002764:	2300      	movs	r3, #0
 8002766:	e1ee      	b.n	8002b46 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002768:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800276c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800276e:	e004      	b.n	800277a <SSD1306_Init+0x4e>
 8002770:	20000a24 	.word	0x20000a24
		p--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
	while(p>0)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002780:	4ce1      	ldr	r4, [pc, #900]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002782:	23ae      	movs	r3, #174	; 0xae
 8002784:	9313      	str	r3, [sp, #76]	; 0x4c
 8002786:	4668      	mov	r0, sp
 8002788:	f104 0308 	add.w	r3, r4, #8
 800278c:	224c      	movs	r2, #76	; 0x4c
 800278e:	4619      	mov	r1, r3
 8002790:	f008 fe00 	bl	800b394 <memcpy>
 8002794:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002798:	2100      	movs	r1, #0
 800279a:	2078      	movs	r0, #120	; 0x78
 800279c:	f000 fbbe 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80027a0:	4cd9      	ldr	r4, [pc, #868]	; (8002b08 <SSD1306_Init+0x3dc>)
 80027a2:	2320      	movs	r3, #32
 80027a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80027a6:	4668      	mov	r0, sp
 80027a8:	f104 0308 	add.w	r3, r4, #8
 80027ac:	224c      	movs	r2, #76	; 0x4c
 80027ae:	4619      	mov	r1, r3
 80027b0:	f008 fdf0 	bl	800b394 <memcpy>
 80027b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027b8:	2100      	movs	r1, #0
 80027ba:	2078      	movs	r0, #120	; 0x78
 80027bc:	f000 fbae 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80027c0:	4cd1      	ldr	r4, [pc, #836]	; (8002b08 <SSD1306_Init+0x3dc>)
 80027c2:	2310      	movs	r3, #16
 80027c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80027c6:	4668      	mov	r0, sp
 80027c8:	f104 0308 	add.w	r3, r4, #8
 80027cc:	224c      	movs	r2, #76	; 0x4c
 80027ce:	4619      	mov	r1, r3
 80027d0:	f008 fde0 	bl	800b394 <memcpy>
 80027d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027d8:	2100      	movs	r1, #0
 80027da:	2078      	movs	r0, #120	; 0x78
 80027dc:	f000 fb9e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80027e0:	4cc9      	ldr	r4, [pc, #804]	; (8002b08 <SSD1306_Init+0x3dc>)
 80027e2:	23b0      	movs	r3, #176	; 0xb0
 80027e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80027e6:	4668      	mov	r0, sp
 80027e8:	f104 0308 	add.w	r3, r4, #8
 80027ec:	224c      	movs	r2, #76	; 0x4c
 80027ee:	4619      	mov	r1, r3
 80027f0:	f008 fdd0 	bl	800b394 <memcpy>
 80027f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027f8:	2100      	movs	r1, #0
 80027fa:	2078      	movs	r0, #120	; 0x78
 80027fc:	f000 fb8e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002800:	4cc1      	ldr	r4, [pc, #772]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002802:	23c8      	movs	r3, #200	; 0xc8
 8002804:	9313      	str	r3, [sp, #76]	; 0x4c
 8002806:	4668      	mov	r0, sp
 8002808:	f104 0308 	add.w	r3, r4, #8
 800280c:	224c      	movs	r2, #76	; 0x4c
 800280e:	4619      	mov	r1, r3
 8002810:	f008 fdc0 	bl	800b394 <memcpy>
 8002814:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002818:	2100      	movs	r1, #0
 800281a:	2078      	movs	r0, #120	; 0x78
 800281c:	f000 fb7e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002820:	4cb9      	ldr	r4, [pc, #740]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002822:	2300      	movs	r3, #0
 8002824:	9313      	str	r3, [sp, #76]	; 0x4c
 8002826:	4668      	mov	r0, sp
 8002828:	f104 0308 	add.w	r3, r4, #8
 800282c:	224c      	movs	r2, #76	; 0x4c
 800282e:	4619      	mov	r1, r3
 8002830:	f008 fdb0 	bl	800b394 <memcpy>
 8002834:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002838:	2100      	movs	r1, #0
 800283a:	2078      	movs	r0, #120	; 0x78
 800283c:	f000 fb6e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002840:	4cb1      	ldr	r4, [pc, #708]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002842:	2310      	movs	r3, #16
 8002844:	9313      	str	r3, [sp, #76]	; 0x4c
 8002846:	4668      	mov	r0, sp
 8002848:	f104 0308 	add.w	r3, r4, #8
 800284c:	224c      	movs	r2, #76	; 0x4c
 800284e:	4619      	mov	r1, r3
 8002850:	f008 fda0 	bl	800b394 <memcpy>
 8002854:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002858:	2100      	movs	r1, #0
 800285a:	2078      	movs	r0, #120	; 0x78
 800285c:	f000 fb5e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002860:	4ca9      	ldr	r4, [pc, #676]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002862:	2340      	movs	r3, #64	; 0x40
 8002864:	9313      	str	r3, [sp, #76]	; 0x4c
 8002866:	4668      	mov	r0, sp
 8002868:	f104 0308 	add.w	r3, r4, #8
 800286c:	224c      	movs	r2, #76	; 0x4c
 800286e:	4619      	mov	r1, r3
 8002870:	f008 fd90 	bl	800b394 <memcpy>
 8002874:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002878:	2100      	movs	r1, #0
 800287a:	2078      	movs	r0, #120	; 0x78
 800287c:	f000 fb4e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002880:	4ca1      	ldr	r4, [pc, #644]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002882:	2381      	movs	r3, #129	; 0x81
 8002884:	9313      	str	r3, [sp, #76]	; 0x4c
 8002886:	4668      	mov	r0, sp
 8002888:	f104 0308 	add.w	r3, r4, #8
 800288c:	224c      	movs	r2, #76	; 0x4c
 800288e:	4619      	mov	r1, r3
 8002890:	f008 fd80 	bl	800b394 <memcpy>
 8002894:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002898:	2100      	movs	r1, #0
 800289a:	2078      	movs	r0, #120	; 0x78
 800289c:	f000 fb3e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80028a0:	4c99      	ldr	r4, [pc, #612]	; (8002b08 <SSD1306_Init+0x3dc>)
 80028a2:	23ff      	movs	r3, #255	; 0xff
 80028a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80028a6:	4668      	mov	r0, sp
 80028a8:	f104 0308 	add.w	r3, r4, #8
 80028ac:	224c      	movs	r2, #76	; 0x4c
 80028ae:	4619      	mov	r1, r3
 80028b0:	f008 fd70 	bl	800b394 <memcpy>
 80028b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028b8:	2100      	movs	r1, #0
 80028ba:	2078      	movs	r0, #120	; 0x78
 80028bc:	f000 fb2e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80028c0:	4c91      	ldr	r4, [pc, #580]	; (8002b08 <SSD1306_Init+0x3dc>)
 80028c2:	23a1      	movs	r3, #161	; 0xa1
 80028c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80028c6:	4668      	mov	r0, sp
 80028c8:	f104 0308 	add.w	r3, r4, #8
 80028cc:	224c      	movs	r2, #76	; 0x4c
 80028ce:	4619      	mov	r1, r3
 80028d0:	f008 fd60 	bl	800b394 <memcpy>
 80028d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028d8:	2100      	movs	r1, #0
 80028da:	2078      	movs	r0, #120	; 0x78
 80028dc:	f000 fb1e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80028e0:	4c89      	ldr	r4, [pc, #548]	; (8002b08 <SSD1306_Init+0x3dc>)
 80028e2:	23a6      	movs	r3, #166	; 0xa6
 80028e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80028e6:	4668      	mov	r0, sp
 80028e8:	f104 0308 	add.w	r3, r4, #8
 80028ec:	224c      	movs	r2, #76	; 0x4c
 80028ee:	4619      	mov	r1, r3
 80028f0:	f008 fd50 	bl	800b394 <memcpy>
 80028f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028f8:	2100      	movs	r1, #0
 80028fa:	2078      	movs	r0, #120	; 0x78
 80028fc:	f000 fb0e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002900:	4c81      	ldr	r4, [pc, #516]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002902:	23a8      	movs	r3, #168	; 0xa8
 8002904:	9313      	str	r3, [sp, #76]	; 0x4c
 8002906:	4668      	mov	r0, sp
 8002908:	f104 0308 	add.w	r3, r4, #8
 800290c:	224c      	movs	r2, #76	; 0x4c
 800290e:	4619      	mov	r1, r3
 8002910:	f008 fd40 	bl	800b394 <memcpy>
 8002914:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002918:	2100      	movs	r1, #0
 800291a:	2078      	movs	r0, #120	; 0x78
 800291c:	f000 fafe 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002920:	4c79      	ldr	r4, [pc, #484]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002922:	233f      	movs	r3, #63	; 0x3f
 8002924:	9313      	str	r3, [sp, #76]	; 0x4c
 8002926:	4668      	mov	r0, sp
 8002928:	f104 0308 	add.w	r3, r4, #8
 800292c:	224c      	movs	r2, #76	; 0x4c
 800292e:	4619      	mov	r1, r3
 8002930:	f008 fd30 	bl	800b394 <memcpy>
 8002934:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002938:	2100      	movs	r1, #0
 800293a:	2078      	movs	r0, #120	; 0x78
 800293c:	f000 faee 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002940:	4c71      	ldr	r4, [pc, #452]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002942:	23a4      	movs	r3, #164	; 0xa4
 8002944:	9313      	str	r3, [sp, #76]	; 0x4c
 8002946:	4668      	mov	r0, sp
 8002948:	f104 0308 	add.w	r3, r4, #8
 800294c:	224c      	movs	r2, #76	; 0x4c
 800294e:	4619      	mov	r1, r3
 8002950:	f008 fd20 	bl	800b394 <memcpy>
 8002954:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002958:	2100      	movs	r1, #0
 800295a:	2078      	movs	r0, #120	; 0x78
 800295c:	f000 fade 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002960:	4c69      	ldr	r4, [pc, #420]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002962:	23d3      	movs	r3, #211	; 0xd3
 8002964:	9313      	str	r3, [sp, #76]	; 0x4c
 8002966:	4668      	mov	r0, sp
 8002968:	f104 0308 	add.w	r3, r4, #8
 800296c:	224c      	movs	r2, #76	; 0x4c
 800296e:	4619      	mov	r1, r3
 8002970:	f008 fd10 	bl	800b394 <memcpy>
 8002974:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002978:	2100      	movs	r1, #0
 800297a:	2078      	movs	r0, #120	; 0x78
 800297c:	f000 face 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002980:	4c61      	ldr	r4, [pc, #388]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002982:	2300      	movs	r3, #0
 8002984:	9313      	str	r3, [sp, #76]	; 0x4c
 8002986:	4668      	mov	r0, sp
 8002988:	f104 0308 	add.w	r3, r4, #8
 800298c:	224c      	movs	r2, #76	; 0x4c
 800298e:	4619      	mov	r1, r3
 8002990:	f008 fd00 	bl	800b394 <memcpy>
 8002994:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002998:	2100      	movs	r1, #0
 800299a:	2078      	movs	r0, #120	; 0x78
 800299c:	f000 fabe 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80029a0:	4c59      	ldr	r4, [pc, #356]	; (8002b08 <SSD1306_Init+0x3dc>)
 80029a2:	23d5      	movs	r3, #213	; 0xd5
 80029a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80029a6:	4668      	mov	r0, sp
 80029a8:	f104 0308 	add.w	r3, r4, #8
 80029ac:	224c      	movs	r2, #76	; 0x4c
 80029ae:	4619      	mov	r1, r3
 80029b0:	f008 fcf0 	bl	800b394 <memcpy>
 80029b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029b8:	2100      	movs	r1, #0
 80029ba:	2078      	movs	r0, #120	; 0x78
 80029bc:	f000 faae 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80029c0:	4c51      	ldr	r4, [pc, #324]	; (8002b08 <SSD1306_Init+0x3dc>)
 80029c2:	23f0      	movs	r3, #240	; 0xf0
 80029c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80029c6:	4668      	mov	r0, sp
 80029c8:	f104 0308 	add.w	r3, r4, #8
 80029cc:	224c      	movs	r2, #76	; 0x4c
 80029ce:	4619      	mov	r1, r3
 80029d0:	f008 fce0 	bl	800b394 <memcpy>
 80029d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029d8:	2100      	movs	r1, #0
 80029da:	2078      	movs	r0, #120	; 0x78
 80029dc:	f000 fa9e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80029e0:	4c49      	ldr	r4, [pc, #292]	; (8002b08 <SSD1306_Init+0x3dc>)
 80029e2:	23d9      	movs	r3, #217	; 0xd9
 80029e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80029e6:	4668      	mov	r0, sp
 80029e8:	f104 0308 	add.w	r3, r4, #8
 80029ec:	224c      	movs	r2, #76	; 0x4c
 80029ee:	4619      	mov	r1, r3
 80029f0:	f008 fcd0 	bl	800b394 <memcpy>
 80029f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029f8:	2100      	movs	r1, #0
 80029fa:	2078      	movs	r0, #120	; 0x78
 80029fc:	f000 fa8e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002a00:	4c41      	ldr	r4, [pc, #260]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002a02:	2322      	movs	r3, #34	; 0x22
 8002a04:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a06:	4668      	mov	r0, sp
 8002a08:	f104 0308 	add.w	r3, r4, #8
 8002a0c:	224c      	movs	r2, #76	; 0x4c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f008 fcc0 	bl	800b394 <memcpy>
 8002a14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2078      	movs	r0, #120	; 0x78
 8002a1c:	f000 fa7e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002a20:	4c39      	ldr	r4, [pc, #228]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002a22:	23da      	movs	r3, #218	; 0xda
 8002a24:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a26:	4668      	mov	r0, sp
 8002a28:	f104 0308 	add.w	r3, r4, #8
 8002a2c:	224c      	movs	r2, #76	; 0x4c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f008 fcb0 	bl	800b394 <memcpy>
 8002a34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2078      	movs	r0, #120	; 0x78
 8002a3c:	f000 fa6e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002a40:	4c31      	ldr	r4, [pc, #196]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002a42:	2312      	movs	r3, #18
 8002a44:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a46:	4668      	mov	r0, sp
 8002a48:	f104 0308 	add.w	r3, r4, #8
 8002a4c:	224c      	movs	r2, #76	; 0x4c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f008 fca0 	bl	800b394 <memcpy>
 8002a54:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2078      	movs	r0, #120	; 0x78
 8002a5c:	f000 fa5e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002a60:	4c29      	ldr	r4, [pc, #164]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002a62:	23db      	movs	r3, #219	; 0xdb
 8002a64:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a66:	4668      	mov	r0, sp
 8002a68:	f104 0308 	add.w	r3, r4, #8
 8002a6c:	224c      	movs	r2, #76	; 0x4c
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f008 fc90 	bl	800b394 <memcpy>
 8002a74:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2078      	movs	r0, #120	; 0x78
 8002a7c:	f000 fa4e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002a80:	4c21      	ldr	r4, [pc, #132]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002a82:	2320      	movs	r3, #32
 8002a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a86:	4668      	mov	r0, sp
 8002a88:	f104 0308 	add.w	r3, r4, #8
 8002a8c:	224c      	movs	r2, #76	; 0x4c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f008 fc80 	bl	800b394 <memcpy>
 8002a94:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2078      	movs	r0, #120	; 0x78
 8002a9c:	f000 fa3e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002aa0:	4c19      	ldr	r4, [pc, #100]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002aa2:	238d      	movs	r3, #141	; 0x8d
 8002aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002aa6:	4668      	mov	r0, sp
 8002aa8:	f104 0308 	add.w	r3, r4, #8
 8002aac:	224c      	movs	r2, #76	; 0x4c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f008 fc70 	bl	800b394 <memcpy>
 8002ab4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2078      	movs	r0, #120	; 0x78
 8002abc:	f000 fa2e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002ac0:	4c11      	ldr	r4, [pc, #68]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002ac2:	2314      	movs	r3, #20
 8002ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ac6:	4668      	mov	r0, sp
 8002ac8:	f104 0308 	add.w	r3, r4, #8
 8002acc:	224c      	movs	r2, #76	; 0x4c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f008 fc60 	bl	800b394 <memcpy>
 8002ad4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2078      	movs	r0, #120	; 0x78
 8002adc:	f000 fa1e 	bl	8002f1c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002ae0:	4c09      	ldr	r4, [pc, #36]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002ae2:	23af      	movs	r3, #175	; 0xaf
 8002ae4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ae6:	4668      	mov	r0, sp
 8002ae8:	f104 0308 	add.w	r3, r4, #8
 8002aec:	224c      	movs	r2, #76	; 0x4c
 8002aee:	4619      	mov	r1, r3
 8002af0:	f008 fc50 	bl	800b394 <memcpy>
 8002af4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002af8:	2100      	movs	r1, #0
 8002afa:	2078      	movs	r0, #120	; 0x78
 8002afc:	f000 fa0e 	bl	8002f1c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002b00:	4c01      	ldr	r4, [pc, #4]	; (8002b08 <SSD1306_Init+0x3dc>)
 8002b02:	232e      	movs	r3, #46	; 0x2e
 8002b04:	e002      	b.n	8002b0c <SSD1306_Init+0x3e0>
 8002b06:	bf00      	nop
 8002b08:	20000a24 	.word	0x20000a24
 8002b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b0e:	4668      	mov	r0, sp
 8002b10:	f104 0308 	add.w	r3, r4, #8
 8002b14:	224c      	movs	r2, #76	; 0x4c
 8002b16:	4619      	mov	r1, r3
 8002b18:	f008 fc3c 	bl	800b394 <memcpy>
 8002b1c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b20:	2100      	movs	r1, #0
 8002b22:	2078      	movs	r0, #120	; 0x78
 8002b24:	f000 f9fa 	bl	8002f1c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f000 f865 	bl	8002bf8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002b2e:	f000 f813 	bl	8002b58 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <SSD1306_Init+0x428>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <SSD1306_Init+0x428>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <SSD1306_Init+0x428>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002b44:	2301      	movs	r3, #1
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002b50:	b004      	add	sp, #16
 8002b52:	4770      	bx	lr
 8002b54:	20000658 	.word	0x20000658

08002b58 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b097      	sub	sp, #92	; 0x5c
 8002b5c:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002b5e:	2300      	movs	r3, #0
 8002b60:	71fb      	strb	r3, [r7, #7]
 8002b62:	e03d      	b.n	8002be0 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	3b50      	subs	r3, #80	; 0x50
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	4c21      	ldr	r4, [pc, #132]	; (8002bf0 <SSD1306_UpdateScreen+0x98>)
 8002b6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b6e:	4668      	mov	r0, sp
 8002b70:	f104 0308 	add.w	r3, r4, #8
 8002b74:	224c      	movs	r2, #76	; 0x4c
 8002b76:	4619      	mov	r1, r3
 8002b78:	f008 fc0c 	bl	800b394 <memcpy>
 8002b7c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b80:	2100      	movs	r1, #0
 8002b82:	2078      	movs	r0, #120	; 0x78
 8002b84:	f000 f9ca 	bl	8002f1c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002b88:	4c19      	ldr	r4, [pc, #100]	; (8002bf0 <SSD1306_UpdateScreen+0x98>)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b8e:	4668      	mov	r0, sp
 8002b90:	f104 0308 	add.w	r3, r4, #8
 8002b94:	224c      	movs	r2, #76	; 0x4c
 8002b96:	4619      	mov	r1, r3
 8002b98:	f008 fbfc 	bl	800b394 <memcpy>
 8002b9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2078      	movs	r0, #120	; 0x78
 8002ba4:	f000 f9ba 	bl	8002f1c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002ba8:	4c11      	ldr	r4, [pc, #68]	; (8002bf0 <SSD1306_UpdateScreen+0x98>)
 8002baa:	2310      	movs	r3, #16
 8002bac:	9313      	str	r3, [sp, #76]	; 0x4c
 8002bae:	4668      	mov	r0, sp
 8002bb0:	f104 0308 	add.w	r3, r4, #8
 8002bb4:	224c      	movs	r2, #76	; 0x4c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f008 fbec 	bl	800b394 <memcpy>
 8002bbc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2078      	movs	r0, #120	; 0x78
 8002bc4:	f000 f9aa 	bl	8002f1c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	01db      	lsls	r3, r3, #7
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <SSD1306_UpdateScreen+0x9c>)
 8002bce:	441a      	add	r2, r3
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	2140      	movs	r1, #64	; 0x40
 8002bd4:	2078      	movs	r0, #120	; 0x78
 8002bd6:	f000 f959 	bl	8002e8c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	71fb      	strb	r3, [r7, #7]
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b07      	cmp	r3, #7
 8002be4:	d9be      	bls.n	8002b64 <SSD1306_UpdateScreen+0xc>
	}
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	20000a24 	.word	0x20000a24
 8002bf4:	20000258 	.word	0x20000258

08002bf8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <SSD1306_Fill+0x14>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <SSD1306_Fill+0x16>
 8002c0c:	23ff      	movs	r3, #255	; 0xff
 8002c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c12:	4619      	mov	r1, r3
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <SSD1306_Fill+0x2c>)
 8002c16:	f008 fbcb 	bl	800b3b0 <memset>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000258 	.word	0x20000258

08002c28 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
 8002c32:	460b      	mov	r3, r1
 8002c34:	80bb      	strh	r3, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	70fb      	strb	r3, [r7, #3]
	if (
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c3e:	d848      	bhi.n	8002cd2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	2b3f      	cmp	r3, #63	; 0x3f
 8002c44:	d845      	bhi.n	8002cd2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <SSD1306_DrawPixel+0xb8>)
 8002c48:	791b      	ldrb	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11a      	bne.n	8002c98 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	88bb      	ldrh	r3, [r7, #4]
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	b298      	uxth	r0, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	01db      	lsls	r3, r3, #7
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <SSD1306_DrawPixel+0xbc>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	88bb      	ldrh	r3, [r7, #4]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b259      	sxtb	r1, r3
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	01db      	lsls	r3, r3, #7
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2c9      	uxtb	r1, r1
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <SSD1306_DrawPixel+0xbc>)
 8002c94:	54d1      	strb	r1, [r2, r3]
 8002c96:	e01d      	b.n	8002cd4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	b298      	uxth	r0, r3
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	01db      	lsls	r3, r3, #7
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <SSD1306_DrawPixel+0xbc>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	b25a      	sxtb	r2, r3
 8002cac:	88bb      	ldrh	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	b259      	sxtb	r1, r3
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	01db      	lsls	r3, r3, #7
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2c9      	uxtb	r1, r1
 8002ccc:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <SSD1306_DrawPixel+0xbc>)
 8002cce:	54d1      	strb	r1, [r2, r3]
 8002cd0:	e000      	b.n	8002cd4 <SSD1306_DrawPixel+0xac>
		return;
 8002cd2:	bf00      	nop
	}
}
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000658 	.word	0x20000658
 8002ce4:	20000258 	.word	0x20000258

08002ce8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	80fb      	strh	r3, [r7, #6]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002cf8:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <SSD1306_GotoXY+0x28>)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <SSD1306_GotoXY+0x28>)
 8002d00:	88bb      	ldrh	r3, [r7, #4]
 8002d02:	8053      	strh	r3, [r2, #2]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	20000658 	.word	0x20000658

08002d14 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
	if (
 8002d30:	2b7f      	cmp	r3, #127	; 0x7f
 8002d32:	dc07      	bgt.n	8002d44 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002d36:	885b      	ldrh	r3, [r3, #2]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002d40:	2b3f      	cmp	r3, #63	; 0x3f
 8002d42:	dd01      	ble.n	8002d48 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e05e      	b.n	8002e06 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e04b      	b.n	8002de6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	3b20      	subs	r3, #32
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	7849      	ldrb	r1, [r1, #1]
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	440b      	add	r3, r1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e030      	b.n	8002dd4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002d84:	881a      	ldrh	r2, [r3, #0]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b298      	uxth	r0, r3
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002d90:	885a      	ldrh	r2, [r3, #2]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	79ba      	ldrb	r2, [r7, #6]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f7ff ff43 	bl	8002c28 <SSD1306_DrawPixel>
 8002da2:	e014      	b.n	8002dce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	b298      	uxth	r0, r3
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002db2:	885a      	ldrh	r2, [r3, #2]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b299      	uxth	r1, r3
 8002dbc:	79bb      	ldrb	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f7ff ff2d 	bl	8002c28 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d3c8      	bcc.n	8002d72 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3301      	adds	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	461a      	mov	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d3ad      	bcc.n	8002d4e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <SSD1306_Putc+0xfc>)
 8002e02:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002e04:	79fb      	ldrb	r3, [r7, #7]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000658 	.word	0x20000658

08002e14 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002e22:	e012      	b.n	8002e4a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	79fa      	ldrb	r2, [r7, #7]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff71 	bl	8002d14 <SSD1306_Putc>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d002      	beq.n	8002e44 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	e008      	b.n	8002e56 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3301      	adds	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e8      	bne.n	8002e24 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	781b      	ldrb	r3, [r3, #0]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <ssd1306_I2C_Init+0x28>)
 8002e68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e6a:	e002      	b.n	8002e72 <ssd1306_I2C_Init+0x12>
		p--;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	0003d090 	.word	0x0003d090

08002e8c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b0c7      	sub	sp, #284	; 0x11c
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	4604      	mov	r4, r0
 8002e94:	4608      	mov	r0, r1
 8002e96:	4639      	mov	r1, r7
 8002e98:	600a      	str	r2, [r1, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	1dbb      	adds	r3, r7, #6
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	460a      	mov	r2, r1
 8002eac:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002eae:	f107 030c 	add.w	r3, r7, #12
 8002eb2:	1dba      	adds	r2, r7, #6
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002ebe:	e010      	b.n	8002ee2 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8002ec0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ec4:	463a      	mov	r2, r7
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	441a      	add	r2, r3
 8002eca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ece:	3301      	adds	r3, #1
 8002ed0:	7811      	ldrb	r1, [r2, #0]
 8002ed2:	f107 020c 	add.w	r2, r7, #12
 8002ed6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002ed8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002edc:	3301      	adds	r3, #1
 8002ede:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002ee2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	1d3a      	adds	r2, r7, #4
 8002eea:	8812      	ldrh	r2, [r2, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d8e7      	bhi.n	8002ec0 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b299      	uxth	r1, r3
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f107 020c 	add.w	r2, r7, #12
 8002f02:	200a      	movs	r0, #10
 8002f04:	9000      	str	r0, [sp, #0]
 8002f06:	4804      	ldr	r0, [pc, #16]	; (8002f18 <ssd1306_I2C_WriteMulti+0x8c>)
 8002f08:	f000 ff58 	bl	8003dbc <HAL_I2C_Master_Transmit>
}
 8002f0c:	bf00      	nop
 8002f0e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000a24 	.word	0x20000a24

08002f1c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af02      	add	r7, sp, #8
 8002f24:	f107 0c18 	add.w	ip, r7, #24
 8002f28:	e88c 000c 	stmia.w	ip, {r2, r3}
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
 8002f30:	460b      	mov	r3, r1
 8002f32:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8002f34:	79bb      	ldrb	r3, [r7, #6]
 8002f36:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002f38:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002f3c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	b299      	uxth	r1, r3
 8002f42:	f107 020c 	add.w	r2, r7, #12
 8002f46:	230a      	movs	r3, #10
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f107 0018 	add.w	r0, r7, #24
 8002f50:	f000 ff34 	bl	8003dbc <HAL_I2C_Master_Transmit>
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f5e:	b002      	add	sp, #8
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08e      	sub	sp, #56	; 0x38
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5b      	ldr	r2, [pc, #364]	; (8003140 <HAL_I2C_MspInit+0x18c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12c      	bne.n	8003030 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff2:	23c0      	movs	r3, #192	; 0xc0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff6:	2312      	movs	r3, #18
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003002:	2304      	movs	r3, #4
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300a:	4619      	mov	r1, r3
 800300c:	484e      	ldr	r0, [pc, #312]	; (8003148 <HAL_I2C_MspInit+0x194>)
 800300e:	f000 fba9 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a4a      	ldr	r2, [pc, #296]	; (8003144 <HAL_I2C_MspInit+0x190>)
 800301c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800302e:	e083      	b.n	8003138 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a45      	ldr	r2, [pc, #276]	; (800314c <HAL_I2C_MspInit+0x198>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d12d      	bne.n	8003096 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a40      	ldr	r2, [pc, #256]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_I2C_MspInit+0x190>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003056:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800305c:	2312      	movs	r3, #18
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003068:	2304      	movs	r3, #4
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003070:	4619      	mov	r1, r3
 8003072:	4835      	ldr	r0, [pc, #212]	; (8003148 <HAL_I2C_MspInit+0x194>)
 8003074:	f000 fb76 	bl	8003764 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_I2C_MspInit+0x190>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003082:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003086:	6413      	str	r3, [r2, #64]	; 0x40
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_I2C_MspInit+0x190>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]
}
 8003094:	e050      	b.n	8003138 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <HAL_I2C_MspInit+0x19c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d14b      	bne.n	8003138 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_I2C_MspInit+0x190>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_I2C_MspInit+0x190>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	6313      	str	r3, [r2, #48]	; 0x30
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_I2C_MspInit+0x190>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_I2C_MspInit+0x190>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_I2C_MspInit+0x190>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6313      	str	r3, [r2, #48]	; 0x30
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_I2C_MspInit+0x190>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030de:	2312      	movs	r3, #18
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030ea:	2304      	movs	r3, #4
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	4619      	mov	r1, r3
 80030f4:	4817      	ldr	r0, [pc, #92]	; (8003154 <HAL_I2C_MspInit+0x1a0>)
 80030f6:	f000 fb35 	bl	8003764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003100:	2312      	movs	r3, #18
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800310c:	2304      	movs	r3, #4
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003114:	4619      	mov	r1, r3
 8003116:	4810      	ldr	r0, [pc, #64]	; (8003158 <HAL_I2C_MspInit+0x1a4>)
 8003118:	f000 fb24 	bl	8003764 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_I2C_MspInit+0x190>)
 8003126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800312a:	6413      	str	r3, [r2, #64]	; 0x40
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_I2C_MspInit+0x190>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
}
 8003138:	bf00      	nop
 800313a:	3738      	adds	r7, #56	; 0x38
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40005400 	.word	0x40005400
 8003144:	40023800 	.word	0x40023800
 8003148:	40020400 	.word	0x40020400
 800314c:	40005800 	.word	0x40005800
 8003150:	40005c00 	.word	0x40005c00
 8003154:	40020800 	.word	0x40020800
 8003158:	40020000 	.word	0x40020000

0800315c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_UART_MspInit+0x94>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d133      	bne.n	80031e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <HAL_UART_MspInit+0x98>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_UART_MspInit+0x98>)
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_UART_MspInit+0x98>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_UART_MspInit+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_UART_MspInit+0x98>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_UART_MspInit+0x98>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031b6:	230c      	movs	r3, #12
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031c6:	2307      	movs	r3, #7
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	4809      	ldr	r0, [pc, #36]	; (80031f8 <HAL_UART_MspInit+0x9c>)
 80031d2:	f000 fac7 	bl	8003764 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2026      	movs	r0, #38	; 0x26
 80031dc:	f000 f9f9 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031e0:	2026      	movs	r0, #38	; 0x26
 80031e2:	f000 fa12 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031e6:	bf00      	nop
 80031e8:	3728      	adds	r7, #40	; 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40004400 	.word	0x40004400
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020000 	.word	0x40020000

080031fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <NMI_Handler+0x4>

08003202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <HardFault_Handler+0x4>

08003208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <MemManage_Handler+0x4>

0800320e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003212:	e7fe      	b.n	8003212 <BusFault_Handler+0x4>

08003214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003218:	e7fe      	b.n	8003218 <UsageFault_Handler+0x4>

0800321a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003248:	f000 f8a4 	bl	8003394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <USART2_IRQHandler+0x10>)
 8003256:	f003 fd1f 	bl	8006c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200009e0 	.word	0x200009e0

08003264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <OTG_FS_IRQHandler+0x10>)
 800326a:	f002 f820 	bl	80052ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20001f58 	.word	0x20001f58

08003278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <SystemInit+0x20>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <SystemInit+0x20>)
 8003284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800329c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032a2:	490e      	ldr	r1, [pc, #56]	; (80032dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a8:	e002      	b.n	80032b0 <LoopCopyDataInit>

080032aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ae:	3304      	adds	r3, #4

080032b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b4:	d3f9      	bcc.n	80032aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032b8:	4c0b      	ldr	r4, [pc, #44]	; (80032e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032bc:	e001      	b.n	80032c2 <LoopFillZerobss>

080032be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c0:	3204      	adds	r2, #4

080032c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c4:	d3fb      	bcc.n	80032be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032c6:	f7ff ffd7 	bl	8003278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ca:	f008 f83f 	bl	800b34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ce:	f7fe f945 	bl	800155c <main>
  bx  lr    
 80032d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032dc:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80032e0:	0800c410 	.word	0x0800c410
  ldr r2, =_sbss
 80032e4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80032e8:	20002360 	.word	0x20002360

080032ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC_IRQHandler>
	...

080032f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <HAL_Init+0x40>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_Init+0x40>)
 8003306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_Init+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_Init+0x40>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f000 f94f 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331e:	200f      	movs	r0, #15
 8003320:	f000 f808 	bl	8003334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003324:	f7ff fe1e 	bl	8002f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_InitTick+0x54>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x58>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334a:	fbb3 f3f1 	udiv	r3, r3, r1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f967 	bl	8003626 <HAL_SYSTICK_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00e      	b.n	8003380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d80a      	bhi.n	800337e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003368:	2200      	movs	r2, #0
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003370:	f000 f92f 	bl	80035d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <HAL_InitTick+0x5c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	2000003c 	.word	0x2000003c
 800338c:	20000044 	.word	0x20000044
 8003390:	20000040 	.word	0x20000040

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000044 	.word	0x20000044
 80033b8:	20000a84 	.word	0x20000a84

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000a84 	.word	0x20000a84

080033d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff ffee 	bl	80033bc <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ec:	d005      	beq.n	80033fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_Delay+0x44>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fa:	bf00      	nop
 80033fc:	f7ff ffde 	bl	80033bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d8f7      	bhi.n	80033fc <HAL_Delay+0x28>
  {
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000044 	.word	0x20000044

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	; (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	; (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800359c:	f7ff ff8e 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff29 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff3e 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff8e 	bl	8003510 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5d 	bl	80034bc <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff31 	bl	8003480 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff feb6 	bl	80033bc <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d008      	beq.n	8003670 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e052      	b.n	8003716 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0216 	bic.w	r2, r2, #22
 800367e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <HAL_DMA_Abort+0x62>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0208 	bic.w	r2, r2, #8
 80036ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c0:	e013      	b.n	80036ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036c2:	f7ff fe7b 	bl	80033bc <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d90c      	bls.n	80036ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e015      	b.n	8003716 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e4      	bne.n	80036c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	223f      	movs	r2, #63	; 0x3f
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d004      	beq.n	800373c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e00c      	b.n	8003756 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2205      	movs	r2, #5
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e16b      	b.n	8003a58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003780:	2201      	movs	r2, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	f040 815a 	bne.w	8003a52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d005      	beq.n	80037b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d130      	bne.n	8003818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 0201 	and.w	r2, r3, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b03      	cmp	r3, #3
 8003822:	d017      	beq.n	8003854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d123      	bne.n	80038a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	08da      	lsrs	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3208      	adds	r2, #8
 8003868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	220f      	movs	r2, #15
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3208      	adds	r2, #8
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0203 	and.w	r2, r3, #3
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80b4 	beq.w	8003a52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <HAL_GPIO_Init+0x30c>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <HAL_GPIO_Init+0x30c>)
 80038f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	4b5d      	ldr	r3, [pc, #372]	; (8003a70 <HAL_GPIO_Init+0x30c>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003906:	4a5b      	ldr	r2, [pc, #364]	; (8003a74 <HAL_GPIO_Init+0x310>)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_GPIO_Init+0x314>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02b      	beq.n	800398a <HAL_GPIO_Init+0x226>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <HAL_GPIO_Init+0x318>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d025      	beq.n	8003986 <HAL_GPIO_Init+0x222>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_GPIO_Init+0x31c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01f      	beq.n	8003982 <HAL_GPIO_Init+0x21e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <HAL_GPIO_Init+0x320>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d019      	beq.n	800397e <HAL_GPIO_Init+0x21a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4e      	ldr	r2, [pc, #312]	; (8003a88 <HAL_GPIO_Init+0x324>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_GPIO_Init+0x216>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4d      	ldr	r2, [pc, #308]	; (8003a8c <HAL_GPIO_Init+0x328>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00d      	beq.n	8003976 <HAL_GPIO_Init+0x212>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4c      	ldr	r2, [pc, #304]	; (8003a90 <HAL_GPIO_Init+0x32c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <HAL_GPIO_Init+0x20e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <HAL_GPIO_Init+0x330>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_GPIO_Init+0x20a>
 800396a:	2307      	movs	r3, #7
 800396c:	e00e      	b.n	800398c <HAL_GPIO_Init+0x228>
 800396e:	2308      	movs	r3, #8
 8003970:	e00c      	b.n	800398c <HAL_GPIO_Init+0x228>
 8003972:	2306      	movs	r3, #6
 8003974:	e00a      	b.n	800398c <HAL_GPIO_Init+0x228>
 8003976:	2305      	movs	r3, #5
 8003978:	e008      	b.n	800398c <HAL_GPIO_Init+0x228>
 800397a:	2304      	movs	r3, #4
 800397c:	e006      	b.n	800398c <HAL_GPIO_Init+0x228>
 800397e:	2303      	movs	r3, #3
 8003980:	e004      	b.n	800398c <HAL_GPIO_Init+0x228>
 8003982:	2302      	movs	r3, #2
 8003984:	e002      	b.n	800398c <HAL_GPIO_Init+0x228>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_GPIO_Init+0x228>
 800398a:	2300      	movs	r3, #0
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f002 0203 	and.w	r2, r2, #3
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	4093      	lsls	r3, r2
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399c:	4935      	ldr	r1, [pc, #212]	; (8003a74 <HAL_GPIO_Init+0x310>)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	3302      	adds	r3, #2
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_GPIO_Init+0x334>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ce:	4a32      	ldr	r2, [pc, #200]	; (8003a98 <HAL_GPIO_Init+0x334>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_GPIO_Init+0x334>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_GPIO_Init+0x334>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fe:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_GPIO_Init+0x334>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_GPIO_Init+0x334>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_GPIO_Init+0x334>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a4c:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <HAL_GPIO_Init+0x334>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b0f      	cmp	r3, #15
 8003a5c:	f67f ae90 	bls.w	8003780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40020400 	.word	0x40020400
 8003a80:	40020800 	.word	0x40020800
 8003a84:	40020c00 	.word	0x40020c00
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40021400 	.word	0x40021400
 8003a90:	40021800 	.word	0x40021800
 8003a94:	40021c00 	.word	0x40021c00
 8003a98:	40013c00 	.word	0x40013c00

08003a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e001      	b.n	8003abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003adc:	787b      	ldrb	r3, [r7, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ae8:	e003      	b.n	8003af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aea:	887b      	ldrh	r3, [r7, #2]
 8003aec:	041a      	lsls	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	619a      	str	r2, [r3, #24]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b10:	887a      	ldrh	r2, [r7, #2]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	041a      	lsls	r2, r3, #16
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43d9      	mvns	r1, r3
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	400b      	ands	r3, r1
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	619a      	str	r2, [r3, #24]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e12b      	b.n	8003d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff fa2a 	bl	8002fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	; 0x24
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b98:	f003 f808 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8003b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a81      	ldr	r2, [pc, #516]	; (8003da8 <HAL_I2C_Init+0x274>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d807      	bhi.n	8003bb8 <HAL_I2C_Init+0x84>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a80      	ldr	r2, [pc, #512]	; (8003dac <HAL_I2C_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	bf94      	ite	ls
 8003bb0:	2301      	movls	r3, #1
 8003bb2:	2300      	movhi	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e006      	b.n	8003bc6 <HAL_I2C_Init+0x92>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a7d      	ldr	r2, [pc, #500]	; (8003db0 <HAL_I2C_Init+0x27c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bf94      	ite	ls
 8003bc0:	2301      	movls	r3, #1
 8003bc2:	2300      	movhi	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0e7      	b.n	8003d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a78      	ldr	r2, [pc, #480]	; (8003db4 <HAL_I2C_Init+0x280>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0c9b      	lsrs	r3, r3, #18
 8003bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a6a      	ldr	r2, [pc, #424]	; (8003da8 <HAL_I2C_Init+0x274>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d802      	bhi.n	8003c08 <HAL_I2C_Init+0xd4>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3301      	adds	r3, #1
 8003c06:	e009      	b.n	8003c1c <HAL_I2C_Init+0xe8>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	4a69      	ldr	r2, [pc, #420]	; (8003db8 <HAL_I2C_Init+0x284>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	495c      	ldr	r1, [pc, #368]	; (8003da8 <HAL_I2C_Init+0x274>)
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	d819      	bhi.n	8003c70 <HAL_I2C_Init+0x13c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e59      	subs	r1, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c4a:	1c59      	adds	r1, r3, #1
 8003c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c50:	400b      	ands	r3, r1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_I2C_Init+0x138>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1e59      	subs	r1, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6a:	e051      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	e04f      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d111      	bne.n	8003c9c <HAL_I2C_Init+0x168>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	440b      	add	r3, r1
 8003c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e012      	b.n	8003cc2 <HAL_I2C_Init+0x18e>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Init+0x196>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e022      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_I2C_Init+0x1bc>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e58      	subs	r0, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	440b      	add	r3, r1
 8003ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cee:	e00f      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	6809      	ldr	r1, [r1, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6911      	ldr	r1, [r2, #16]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	4311      	orrs	r1, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	000186a0 	.word	0x000186a0
 8003dac:	001e847f 	.word	0x001e847f
 8003db0:	003d08ff 	.word	0x003d08ff
 8003db4:	431bde83 	.word	0x431bde83
 8003db8:	10624dd3 	.word	0x10624dd3

08003dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	460b      	mov	r3, r1
 8003dca:	817b      	strh	r3, [r7, #10]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff faf4 	bl	80033bc <HAL_GetTick>
 8003dd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	f040 80e0 	bne.w	8003fa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	4970      	ldr	r1, [pc, #448]	; (8003fb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 ff30 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0d3      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_I2C_Master_Transmit+0x50>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d007      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2221      	movs	r2, #33	; 0x21
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	893a      	ldrh	r2, [r7, #8]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a50      	ldr	r2, [pc, #320]	; (8003fb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fcea 	bl	8004854 <I2C_MasterRequestWrite>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e08d      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ea0:	e066      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	6a39      	ldr	r1, [r7, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 ffaa 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d107      	bne.n	8003eca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06b      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d11b      	bne.n	8003f44 <HAL_I2C_Master_Transmit+0x188>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	6a39      	ldr	r1, [r7, #32]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 ff9a 	bl	8004e82 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d107      	bne.n	8003f6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e01a      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d194      	bne.n	8003ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	00100002 	.word	0x00100002
 8003fb4:	ffff0000 	.word	0xffff0000

08003fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	817b      	strh	r3, [r7, #10]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	813b      	strh	r3, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd2:	f7ff f9f3 	bl	80033bc <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	f040 80d9 	bne.w	8004198 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2319      	movs	r3, #25
 8003fec:	2201      	movs	r2, #1
 8003fee:	496d      	ldr	r1, [pc, #436]	; (80041a4 <HAL_I2C_Mem_Write+0x1ec>)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fe2f 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0cc      	b.n	800419a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_I2C_Mem_Write+0x56>
 800400a:	2302      	movs	r3, #2
 800400c:	e0c5      	b.n	800419a <HAL_I2C_Mem_Write+0x1e2>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d007      	beq.n	8004034 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2221      	movs	r2, #33	; 0x21
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a3a      	ldr	r2, [r7, #32]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004076:	88f8      	ldrh	r0, [r7, #6]
 8004078:	893a      	ldrh	r2, [r7, #8]
 800407a:	8979      	ldrh	r1, [r7, #10]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4603      	mov	r3, r0
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fc66 	bl	8004958 <I2C_RequestMemoryWrite>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d052      	beq.n	8004138 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e081      	b.n	800419a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 feb0 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d107      	bne.n	80040be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06b      	b.n	800419a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11b      	bne.n	8004138 <HAL_I2C_Mem_Write+0x180>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1aa      	bne.n	8004096 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fe9c 	bl	8004e82 <I2C_WaitOnBTFFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2b04      	cmp	r3, #4
 8004156:	d107      	bne.n	8004168 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e016      	b.n	800419a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	00100002 	.word	0x00100002
 80041a8:	ffff0000 	.word	0xffff0000

080041ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	460b      	mov	r3, r1
 80041c0:	813b      	strh	r3, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c6:	f7ff f8f9 	bl	80033bc <HAL_GetTick>
 80041ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	f040 8208 	bne.w	80045ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	2319      	movs	r3, #25
 80041e0:	2201      	movs	r2, #1
 80041e2:	497b      	ldr	r1, [pc, #492]	; (80043d0 <HAL_I2C_Mem_Read+0x224>)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fd35 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
 80041f2:	e1fb      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_I2C_Mem_Read+0x56>
 80041fe:	2302      	movs	r3, #2
 8004200:	e1f4      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d007      	beq.n	8004228 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2222      	movs	r2, #34	; 0x22
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2240      	movs	r2, #64	; 0x40
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_I2C_Mem_Read+0x228>)
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800426a:	88f8      	ldrh	r0, [r7, #6]
 800426c:	893a      	ldrh	r2, [r7, #8]
 800426e:	8979      	ldrh	r1, [r7, #10]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4603      	mov	r3, r0
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fc02 	bl	8004a84 <I2C_RequestMemoryRead>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e1b0      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	2b00      	cmp	r3, #0
 8004290:	d113      	bne.n	80042ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e184      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d11b      	bne.n	80042fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e164      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d11b      	bne.n	800433a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	e144      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004350:	e138      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	2b03      	cmp	r3, #3
 8004358:	f200 80f1 	bhi.w	800453e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b01      	cmp	r3, #1
 8004362:	d123      	bne.n	80043ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fdcb 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e139      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043aa:	e10b      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d14e      	bne.n	8004452 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2200      	movs	r2, #0
 80043bc:	4906      	ldr	r1, [pc, #24]	; (80043d8 <HAL_I2C_Mem_Read+0x22c>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fc48 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e10e      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
 80043ce:	bf00      	nop
 80043d0:	00100002 	.word	0x00100002
 80043d4:	ffff0000 	.word	0xffff0000
 80043d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004450:	e0b8      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2200      	movs	r2, #0
 800445a:	4966      	ldr	r1, [pc, #408]	; (80045f4 <HAL_I2C_Mem_Read+0x448>)
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fbf9 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0bf      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2200      	movs	r2, #0
 80044b6:	494f      	ldr	r1, [pc, #316]	; (80045f4 <HAL_I2C_Mem_Read+0x448>)
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fbcb 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e091      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800453c:	e042      	b.n	80045c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fcde 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e04c      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d118      	bne.n	80045c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f47f aec2 	bne.w	8004352 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3728      	adds	r7, #40	; 0x28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	00010004 	.word	0x00010004

080045f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	460b      	mov	r3, r1
 8004606:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004608:	f7fe fed8 	bl	80033bc <HAL_GetTick>
 800460c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 8111 	bne.w	8004842 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2319      	movs	r3, #25
 8004626:	2201      	movs	r2, #1
 8004628:	4988      	ldr	r1, [pc, #544]	; (800484c <HAL_I2C_IsDeviceReady+0x254>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fb12 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
 8004638:	e104      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_I2C_IsDeviceReady+0x50>
 8004644:	2302      	movs	r3, #2
 8004646:	e0fd      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d007      	beq.n	800466e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2224      	movs	r2, #36	; 0x24
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a70      	ldr	r2, [pc, #448]	; (8004850 <HAL_I2C_IsDeviceReady+0x258>)
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fad0 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c8:	d103      	bne.n	80046d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0b6      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046d6:	897b      	ldrh	r3, [r7, #10]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fe fe69 	bl	80033bc <HAL_GetTick>
 80046ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	bf0c      	ite	eq
 80046fa:	2301      	moveq	r3, #1
 80046fc:	2300      	movne	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800471a:	e025      	b.n	8004768 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fe fe4e 	bl	80033bc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <HAL_I2C_IsDeviceReady+0x13a>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	22a0      	movs	r2, #160	; 0xa0
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2ba0      	cmp	r3, #160	; 0xa0
 8004772:	d005      	beq.n	8004780 <HAL_I2C_IsDeviceReady+0x188>
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <HAL_I2C_IsDeviceReady+0x188>
 800477a:	7dbb      	ldrb	r3, [r7, #22]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0cd      	beq.n	800471c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d129      	bne.n	80047ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2319      	movs	r3, #25
 80047c2:	2201      	movs	r2, #1
 80047c4:	4921      	ldr	r1, [pc, #132]	; (800484c <HAL_I2C_IsDeviceReady+0x254>)
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fa44 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e036      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e02c      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004802:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2319      	movs	r3, #25
 800480a:	2201      	movs	r2, #1
 800480c:	490f      	ldr	r1, [pc, #60]	; (800484c <HAL_I2C_IsDeviceReady+0x254>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fa20 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e012      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3301      	adds	r3, #1
 8004822:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	f4ff af32 	bcc.w	8004692 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	00100002 	.word	0x00100002
 8004850:	ffff0000 	.word	0xffff0000

08004854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d006      	beq.n	800487e <I2C_MasterRequestWrite+0x2a>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d003      	beq.n	800487e <I2C_MasterRequestWrite+0x2a>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800487c:	d108      	bne.n	8004890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e00b      	b.n	80048a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b12      	cmp	r3, #18
 8004896:	d107      	bne.n	80048a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9cd 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d103      	bne.n	80048d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e035      	b.n	8004948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d108      	bne.n	80048f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f4:	611a      	str	r2, [r3, #16]
 80048f6:	e01b      	b.n	8004930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048f8:	897b      	ldrh	r3, [r7, #10]
 80048fa:	11db      	asrs	r3, r3, #7
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 0306 	and.w	r3, r3, #6
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f063 030f 	orn	r3, r3, #15
 8004908:	b2da      	uxtb	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	490e      	ldr	r1, [pc, #56]	; (8004950 <I2C_MasterRequestWrite+0xfc>)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f9f3 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e010      	b.n	8004948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004926:	897b      	ldrh	r3, [r7, #10]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4907      	ldr	r1, [pc, #28]	; (8004954 <I2C_MasterRequestWrite+0x100>)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f9e3 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	00010008 	.word	0x00010008
 8004954:	00010002 	.word	0x00010002

08004958 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	817b      	strh	r3, [r7, #10]
 800496a:	460b      	mov	r3, r1
 800496c:	813b      	strh	r3, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f960 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d103      	bne.n	80049b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e05f      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	492d      	ldr	r1, [pc, #180]	; (8004a80 <I2C_RequestMemoryWrite+0x128>)
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f998 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04c      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa02 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e02b      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a24:	893b      	ldrh	r3, [r7, #8]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	e021      	b.n	8004a74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6a39      	ldr	r1, [r7, #32]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f9dc 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d107      	bne.n	8004a66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e005      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6a:	893b      	ldrh	r3, [r7, #8]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00010002 	.word	0x00010002

08004a84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f8c2 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	d103      	bne.n	8004aee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0aa      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	4952      	ldr	r1, [pc, #328]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f8fa 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e097      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6a39      	ldr	r1, [r7, #32]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f964 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e076      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e021      	b.n	8004bb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	6a39      	ldr	r1, [r7, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f93e 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e050      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba6:	893b      	ldrh	r3, [r7, #8]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f923 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d107      	bne.n	8004bd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e035      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f82b 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d103      	bne.n	8004c1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e013      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c20:	897b      	ldrh	r3, [r7, #10]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f863 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	00010002 	.word	0x00010002

08004c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	e025      	b.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6c:	d021      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe fba5 	bl	80033bc <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d116      	bne.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e023      	b.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10d      	bne.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	e00c      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0b6      	beq.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d10:	e051      	b.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d123      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e046      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d70:	d021      	beq.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fe fb23 	bl	80033bc <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d116      	bne.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e020      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10c      	bne.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e00b      	b.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d18d      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e02d      	b.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8ce 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e02d      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e24:	d021      	beq.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fe fac9 	bl	80033bc <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d116      	bne.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e007      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d1ca      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8e:	e02d      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f88d 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e02d      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea6:	d021      	beq.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	f7fe fa88 	bl	80033bc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d1ca      	bne.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f10:	e042      	b.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d119      	bne.n	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e029      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fe fa32 	bl	80033bc <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e007      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d1b5      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d11b      	bne.n	8005000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800500e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005010:	b08f      	sub	sp, #60	; 0x3c
 8005012:	af0a      	add	r7, sp, #40	; 0x28
 8005014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e10f      	b.n	8005240 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f005 fe6c 	bl	800ad18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2203      	movs	r2, #3
 8005044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f002 fd49 	bl	8007af6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	687e      	ldr	r6, [r7, #4]
 800506c:	466d      	mov	r5, sp
 800506e:	f106 0410 	add.w	r4, r6, #16
 8005072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800507a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800507e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005082:	1d33      	adds	r3, r6, #4
 8005084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f002 fc20 	bl	80078cc <USB_CoreInit>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0d0      	b.n	8005240 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fd37 	bl	8007b18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
 80050ae:	e04a      	b.n	8005146 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	333d      	adds	r3, #61	; 0x3d
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050c4:	7bfa      	ldrb	r2, [r7, #15]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	333c      	adds	r3, #60	; 0x3c
 80050d4:	7bfa      	ldrb	r2, [r7, #15]
 80050d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050d8:	7bfa      	ldrb	r2, [r7, #15]
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	b298      	uxth	r0, r3
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	3342      	adds	r3, #66	; 0x42
 80050ec:	4602      	mov	r2, r0
 80050ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050f0:	7bfa      	ldrb	r2, [r7, #15]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	333f      	adds	r3, #63	; 0x3f
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005104:	7bfa      	ldrb	r2, [r7, #15]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3344      	adds	r3, #68	; 0x44
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	3348      	adds	r3, #72	; 0x48
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	3350      	adds	r3, #80	; 0x50
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	3301      	adds	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d3af      	bcc.n	80050b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	e044      	b.n	80051e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800517e:	7bfa      	ldrb	r2, [r7, #15]
 8005180:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005198:	7bfa      	ldrb	r2, [r7, #15]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051c4:	7bfa      	ldrb	r2, [r7, #15]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	3301      	adds	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	7bfa      	ldrb	r2, [r7, #15]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d3b5      	bcc.n	8005156 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	687e      	ldr	r6, [r7, #4]
 80051f2:	466d      	mov	r5, sp
 80051f4:	f106 0410 	add.w	r4, r6, #16
 80051f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005200:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005204:	e885 0003 	stmia.w	r5, {r0, r1}
 8005208:	1d33      	adds	r3, r6, #4
 800520a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800520c:	6838      	ldr	r0, [r7, #0]
 800520e:	f002 fccf 	bl	8007bb0 <USB_DevInit>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e00d      	b.n	8005240 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f003 fd4b 	bl	8008cd4 <USB_DevDisconnect>

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005248 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_PCD_Start+0x1c>
 8005260:	2302      	movs	r3, #2
 8005262:	e020      	b.n	80052a6 <HAL_PCD_Start+0x5e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	2b01      	cmp	r3, #1
 8005272:	d109      	bne.n	8005288 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005278:	2b01      	cmp	r3, #1
 800527a:	d005      	beq.n	8005288 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f002 fc21 	bl	8007ad4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f003 fcfb 	bl	8008c92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052ae:	b590      	push	{r4, r7, lr}
 80052b0:	b08d      	sub	sp, #52	; 0x34
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f003 fdb9 	bl	8008e3c <USB_GetMode>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 839d 	bne.w	8005a0c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f003 fd1d 	bl	8008d16 <USB_ReadInterrupts>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8393 	beq.w	8005a0a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f003 fd14 	bl	8008d16 <USB_ReadInterrupts>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d107      	bne.n	8005308 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f002 0202 	and.w	r2, r2, #2
 8005306:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f003 fd02 	bl	8008d16 <USB_ReadInterrupts>
 8005312:	4603      	mov	r3, r0
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b10      	cmp	r3, #16
 800531a:	d161      	bne.n	80053e0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4413      	add	r3, r2
 8005348:	3304      	adds	r3, #4
 800534a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	0c5b      	lsrs	r3, r3, #17
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2b02      	cmp	r3, #2
 8005356:	d124      	bne.n	80053a2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d035      	beq.n	80053d0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800536e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6a38      	ldr	r0, [r7, #32]
 8005378:	f003 fb39 	bl	80089ee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005388:	441a      	add	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539a:	441a      	add	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	619a      	str	r2, [r3, #24]
 80053a0:	e016      	b.n	80053d0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	0c5b      	lsrs	r3, r3, #17
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d110      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053b4:	2208      	movs	r2, #8
 80053b6:	4619      	mov	r1, r3
 80053b8:	6a38      	ldr	r0, [r7, #32]
 80053ba:	f003 fb18 	bl	80089ee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ca:	441a      	add	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0210 	orr.w	r2, r2, #16
 80053de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f003 fc96 	bl	8008d16 <USB_ReadInterrupts>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053f4:	d16e      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f003 fc9c 	bl	8008d3c <USB_ReadDevAllOutEpInterrupt>
 8005404:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005406:	e062      	b.n	80054ce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d057      	beq.n	80054c2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f003 fcc1 	bl	8008da4 <USB_ReadDevOutEPInterrupt>
 8005422:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00c      	beq.n	8005448 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	2301      	movs	r3, #1
 800543e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fdb0 	bl	8005fa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	2308      	movs	r3, #8
 8005462:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 feaa 	bl	80061c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	461a      	mov	r2, r3
 8005484:	2310      	movs	r3, #16
 8005486:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	461a      	mov	r2, r3
 80054a0:	2320      	movs	r3, #32
 80054a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	461a      	mov	r2, r3
 80054bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	3301      	adds	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d199      	bne.n	8005408 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f003 fc1c 	bl	8008d16 <USB_ReadInterrupts>
 80054de:	4603      	mov	r3, r0
 80054e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e8:	f040 80c0 	bne.w	800566c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f003 fc3d 	bl	8008d70 <USB_ReadDevAllInEpInterrupt>
 80054f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80054fc:	e0b2      	b.n	8005664 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a7 	beq.w	8005658 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f003 fc63 	bl	8008de0 <USB_ReadDevInEPInterrupt>
 800551a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d057      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	2201      	movs	r2, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	43db      	mvns	r3, r3
 8005540:	69f9      	ldr	r1, [r7, #28]
 8005542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005546:	4013      	ands	r3, r2
 8005548:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	461a      	mov	r2, r3
 8005558:	2301      	movs	r3, #1
 800555a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d132      	bne.n	80055ca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3348      	adds	r3, #72	; 0x48
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4403      	add	r3, r0
 8005584:	3344      	adds	r3, #68	; 0x44
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4419      	add	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4403      	add	r3, r0
 8005598:	3348      	adds	r3, #72	; 0x48
 800559a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d113      	bne.n	80055ca <HAL_PCD_IRQHandler+0x31c>
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3350      	adds	r3, #80	; 0x50
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d108      	bne.n	80055ca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055c2:	461a      	mov	r2, r3
 80055c4:	2101      	movs	r1, #1
 80055c6:	f003 fc6b 	bl	8008ea0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f005 fc22 	bl	800ae1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	461a      	mov	r2, r3
 80055ee:	2308      	movs	r3, #8
 80055f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	461a      	mov	r2, r3
 800560a:	2310      	movs	r3, #16
 800560c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	2340      	movs	r3, #64	; 0x40
 8005628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	2302      	movs	r3, #2
 8005644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fc1b 	bl	8005e8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	3301      	adds	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	2b00      	cmp	r3, #0
 8005668:	f47f af49 	bne.w	80054fe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f003 fb50 	bl	8008d16 <USB_ReadInterrupts>
 8005676:	4603      	mov	r3, r0
 8005678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800567c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005680:	d122      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800569c:	2b01      	cmp	r3, #1
 800569e:	d108      	bne.n	80056b2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056a8:	2100      	movs	r1, #0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fe26 	bl	80062fc <HAL_PCDEx_LPM_Callback>
 80056b0:	e002      	b.n	80056b8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f005 fc28 	bl	800af08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80056c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f003 fb22 	bl	8008d16 <USB_ReadInterrupts>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056dc:	d112      	bne.n	8005704 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d102      	bne.n	80056f4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f005 fbe4 	bl	800aebc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005702:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f003 fb04 	bl	8008d16 <USB_ReadInterrupts>
 800570e:	4603      	mov	r3, r0
 8005710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	f040 80c7 	bne.w	80058aa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2110      	movs	r1, #16
 8005736:	4618      	mov	r0, r3
 8005738:	f002 fb9e 	bl	8007e78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005740:	e056      	b.n	80057f0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	461a      	mov	r2, r3
 8005750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005754:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005774:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005790:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	461a      	mov	r2, r3
 80057a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	3301      	adds	r3, #1
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d3a3      	bcc.n	8005742 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005808:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800580c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005826:	f043 030b 	orr.w	r3, r3, #11
 800582a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583c:	f043 030b 	orr.w	r3, r3, #11
 8005840:	6453      	str	r3, [r2, #68]	; 0x44
 8005842:	e015      	b.n	8005870 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005852:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005856:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800585a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586a:	f043 030b 	orr.w	r3, r3, #11
 800586e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005882:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005894:	461a      	mov	r2, r3
 8005896:	f003 fb03 	bl	8008ea0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80058a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f003 fa31 	bl	8008d16 <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058be:	d124      	bne.n	800590a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f003 fac7 	bl	8008e58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 fb2f 	bl	8007f32 <USB_GetDevSpeed>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681c      	ldr	r4, [r3, #0]
 80058e0:	f001 f958 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 80058e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	4620      	mov	r0, r4
 80058f0:	f002 f84e 	bl	8007990 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f005 fab8 	bl	800ae6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005908:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f003 fa01 	bl	8008d16 <USB_ReadInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d10a      	bne.n	8005934 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f005 fa95 	bl	800ae4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f002 0208 	and.w	r2, r2, #8
 8005932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f003 f9ec 	bl	8008d16 <USB_ReadInterrupts>
 800593e:	4603      	mov	r3, r0
 8005940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005948:	d10f      	bne.n	800596a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f005 faf7 	bl	800af48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f003 f9d1 	bl	8008d16 <USB_ReadInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800597e:	d10f      	bne.n	80059a0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f005 faca 	bl	800af24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800599e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f003 f9b6 	bl	8008d16 <USB_ReadInterrupts>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b4:	d10a      	bne.n	80059cc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f005 fad8 	bl	800af6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f003 f9a0 	bl	8008d16 <USB_ReadInterrupts>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d115      	bne.n	8005a0c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f005 fac8 	bl	800af88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
 8005a08:	e000      	b.n	8005a0c <HAL_PCD_IRQHandler+0x75e>
      return;
 8005a0a:	bf00      	nop
    }
  }
}
 8005a0c:	3734      	adds	r7, #52	; 0x34
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd90      	pop	{r4, r7, pc}

08005a12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_PCD_SetAddress+0x1a>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e013      	b.n	8005a54 <HAL_PCD_SetAddress+0x42>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f003 f8fe 	bl	8008c46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	70fb      	strb	r3, [r7, #3]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	803b      	strh	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da0f      	bge.n	8005aa2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	4613      	mov	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	3338      	adds	r3, #56	; 0x38
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4413      	add	r3, r2
 8005a96:	3304      	adds	r3, #4
 8005a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	705a      	strb	r2, [r3, #1]
 8005aa0:	e00f      	b.n	8005ac2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3304      	adds	r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ace:	883a      	ldrh	r2, [r7, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	78ba      	ldrb	r2, [r7, #2]
 8005ad8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005aec:	78bb      	ldrb	r3, [r7, #2]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d102      	bne.n	8005af8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_PCD_EP_Open+0xaa>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e00e      	b.n	8005b24 <HAL_PCD_EP_Open+0xc8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f002 fa31 	bl	8007f7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005b22:	7afb      	ldrb	r3, [r7, #11]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da0f      	bge.n	8005b60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 020f 	and.w	r2, r3, #15
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	3338      	adds	r3, #56	; 0x38
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4413      	add	r3, r2
 8005b54:	3304      	adds	r3, #4
 8005b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	705a      	strb	r2, [r3, #1]
 8005b5e:	e00f      	b.n	8005b80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	f003 020f 	and.w	r2, r3, #15
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_PCD_EP_Close+0x6e>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e00e      	b.n	8005bb8 <HAL_PCD_EP_Close+0x8c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f002 fa6f 	bl	800808c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	3304      	adds	r3, #4
 8005be8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c02:	7afb      	ldrb	r3, [r7, #11]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d102      	bne.n	8005c1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c1c:	7afb      	ldrb	r3, [r7, #11]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	f002 fd4a 	bl	80086cc <USB_EP0StartXfer>
 8005c38:	e008      	b.n	8005c4c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6979      	ldr	r1, [r7, #20]
 8005c48:	f002 fafc 	bl	8008244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c78:	681b      	ldr	r3, [r3, #0]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	460b      	mov	r3, r1
 8005c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	f003 020f 	and.w	r2, r3, #15
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	3338      	adds	r3, #56	; 0x38
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	3304      	adds	r3, #4
 8005cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ce0:	7afb      	ldrb	r3, [r7, #11]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6979      	ldr	r1, [r7, #20]
 8005cf8:	f002 fce8 	bl	80086cc <USB_EP0StartXfer>
 8005cfc:	e008      	b.n	8005d10 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	f002 fa9a 	bl	8008244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	f003 020f 	and.w	r2, r3, #15
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d901      	bls.n	8005d38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e050      	b.n	8005dda <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da0f      	bge.n	8005d60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	4613      	mov	r3, r2
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	3338      	adds	r3, #56	; 0x38
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	3304      	adds	r3, #4
 8005d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	705a      	strb	r2, [r3, #1]
 8005d5e:	e00d      	b.n	8005d7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4413      	add	r3, r2
 8005d72:	3304      	adds	r3, #4
 8005d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_PCD_EP_SetStall+0x82>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e01e      	b.n	8005dda <HAL_PCD_EP_SetStall+0xc0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 fe77 	bl	8008a9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	b2d9      	uxtb	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f003 f868 	bl	8008ea0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	460b      	mov	r3, r1
 8005dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d901      	bls.n	8005e00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e042      	b.n	8005e86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da0f      	bge.n	8005e28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 020f 	and.w	r2, r3, #15
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	3338      	adds	r3, #56	; 0x38
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	705a      	strb	r2, [r3, #1]
 8005e26:	e00f      	b.n	8005e48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 020f 	and.w	r2, r3, #15
 8005e2e:	4613      	mov	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3304      	adds	r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_PCD_EP_ClrStall+0x86>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e00e      	b.n	8005e86 <HAL_PCD_EP_ClrStall+0xa4>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f002 fe7f 	bl	8008b7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b08a      	sub	sp, #40	; 0x28
 8005e92:	af02      	add	r7, sp, #8
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	3338      	adds	r3, #56	; 0x38
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d901      	bls.n	8005ec6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06c      	b.n	8005fa0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d902      	bls.n	8005ee2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	3303      	adds	r3, #3
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eea:	e02b      	b.n	8005f44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d902      	bls.n	8005f08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	089b      	lsrs	r3, r3, #2
 8005f0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68d9      	ldr	r1, [r3, #12]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4603      	mov	r3, r0
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f002 fd23 	bl	8008972 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	441a      	add	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	441a      	add	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d809      	bhi.n	8005f6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d203      	bcs.n	8005f6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1be      	bne.n	8005eec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d811      	bhi.n	8005f9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	2201      	movs	r2, #1
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	6939      	ldr	r1, [r7, #16]
 8005f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	333c      	adds	r3, #60	; 0x3c
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	f040 80a0 	bne.w	8006120 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d015      	beq.n	8006016 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4a72      	ldr	r2, [pc, #456]	; (80061b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	f240 80dd 	bls.w	80061ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80d7 	beq.w	80061ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006012:	6093      	str	r3, [r2, #8]
 8006014:	e0cb      	b.n	80061ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	461a      	mov	r2, r3
 800602e:	2320      	movs	r3, #32
 8006030:	6093      	str	r3, [r2, #8]
 8006032:	e0bc      	b.n	80061ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 80b7 	bne.w	80061ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a5d      	ldr	r2, [pc, #372]	; (80061b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d90f      	bls.n	8006068 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	461a      	mov	r2, r3
 8006060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006064:	6093      	str	r3, [r2, #8]
 8006066:	e0a2      	b.n	80061ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800607a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	0159      	lsls	r1, r3, #5
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	440b      	add	r3, r1
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800608e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4403      	add	r3, r0
 800609e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80060a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060b6:	6819      	ldr	r1, [r3, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4403      	add	r3, r0
 80060c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4419      	add	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4403      	add	r3, r0
 80060dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d114      	bne.n	8006112 <PCD_EP_OutXfrComplete_int+0x16a>
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d108      	bne.n	8006112 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800610a:	461a      	mov	r2, r3
 800610c:	2101      	movs	r1, #1
 800610e:	f002 fec7 	bl	8008ea0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f004 fe63 	bl	800ade4 <HAL_PCD_DataOutStageCallback>
 800611e:	e046      	b.n	80061ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4a26      	ldr	r2, [pc, #152]	; (80061bc <PCD_EP_OutXfrComplete_int+0x214>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d124      	bne.n	8006172 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	461a      	mov	r2, r3
 8006140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006144:	6093      	str	r3, [r2, #8]
 8006146:	e032      	b.n	80061ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	2320      	movs	r3, #32
 8006162:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f004 fe3a 	bl	800ade4 <HAL_PCD_DataOutStageCallback>
 8006170:	e01d      	b.n	80061ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d114      	bne.n	80061a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d108      	bne.n	80061a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800619a:	461a      	mov	r2, r3
 800619c:	2100      	movs	r1, #0
 800619e:	f002 fe7f 	bl	8008ea0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f004 fe1b 	bl	800ade4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	4f54300a 	.word	0x4f54300a
 80061bc:	4f54310a 	.word	0x4f54310a

080061c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	333c      	adds	r3, #60	; 0x3c
 80061d8:	3304      	adds	r3, #4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <PCD_EP_OutSetupPacket_int+0x88>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d90e      	bls.n	8006214 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	461a      	mov	r2, r3
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f004 fdd3 	bl	800adc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <PCD_EP_OutSetupPacket_int+0x88>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d90c      	bls.n	800623c <PCD_EP_OutSetupPacket_int+0x7c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d108      	bne.n	800623c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006234:	461a      	mov	r2, r3
 8006236:	2101      	movs	r1, #1
 8006238:	f002 fe32 	bl	8008ea0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	4f54300a 	.word	0x4f54300a

0800624c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
 8006258:	4613      	mov	r3, r2
 800625a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d107      	bne.n	800627a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800626a:	883b      	ldrh	r3, [r7, #0]
 800626c:	0419      	lsls	r1, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	430a      	orrs	r2, r1
 8006276:	629a      	str	r2, [r3, #40]	; 0x28
 8006278:	e028      	b.n	80062cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
 800628c:	e00d      	b.n	80062aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	3340      	adds	r3, #64	; 0x40
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	0c1b      	lsrs	r3, r3, #16
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	3301      	adds	r3, #1
 80062a8:	73fb      	strb	r3, [r7, #15]
 80062aa:	7bfa      	ldrb	r2, [r7, #15]
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d3ec      	bcc.n	800628e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062b4:	883b      	ldrh	r3, [r7, #0]
 80062b6:	0418      	lsls	r0, r3, #16
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6819      	ldr	r1, [r3, #0]
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	3b01      	subs	r3, #1
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4302      	orrs	r2, r0
 80062c4:	3340      	adds	r3, #64	; 0x40
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	460b      	mov	r3, r1
 80062e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e264      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d075      	beq.n	800641e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006332:	4ba3      	ldr	r3, [pc, #652]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b04      	cmp	r3, #4
 800633c:	d00c      	beq.n	8006358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633e:	4ba0      	ldr	r3, [pc, #640]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006346:	2b08      	cmp	r3, #8
 8006348:	d112      	bne.n	8006370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634a:	4b9d      	ldr	r3, [pc, #628]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006356:	d10b      	bne.n	8006370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	4b99      	ldr	r3, [pc, #612]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05b      	beq.n	800641c <HAL_RCC_OscConfig+0x108>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d157      	bne.n	800641c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e23f      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006378:	d106      	bne.n	8006388 <HAL_RCC_OscConfig+0x74>
 800637a:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a90      	ldr	r2, [pc, #576]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e01d      	b.n	80063c4 <HAL_RCC_OscConfig+0xb0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006390:	d10c      	bne.n	80063ac <HAL_RCC_OscConfig+0x98>
 8006392:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a8a      	ldr	r2, [pc, #552]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b88      	ldr	r3, [pc, #544]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a87      	ldr	r2, [pc, #540]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e00b      	b.n	80063c4 <HAL_RCC_OscConfig+0xb0>
 80063ac:	4b84      	ldr	r3, [pc, #528]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a83      	ldr	r2, [pc, #524]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	4b81      	ldr	r3, [pc, #516]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a80      	ldr	r2, [pc, #512]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d013      	beq.n	80063f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fc fff6 	bl	80033bc <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d4:	f7fc fff2 	bl	80033bc <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b64      	cmp	r3, #100	; 0x64
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e204      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e6:	4b76      	ldr	r3, [pc, #472]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0xc0>
 80063f2:	e014      	b.n	800641e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f4:	f7fc ffe2 	bl	80033bc <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063fc:	f7fc ffde 	bl	80033bc <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b64      	cmp	r3, #100	; 0x64
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e1f0      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640e:	4b6c      	ldr	r3, [pc, #432]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0xe8>
 800641a:	e000      	b.n	800641e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d063      	beq.n	80064f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800642a:	4b65      	ldr	r3, [pc, #404]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00b      	beq.n	800644e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006436:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800643e:	2b08      	cmp	r3, #8
 8006440:	d11c      	bne.n	800647c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006442:	4b5f      	ldr	r3, [pc, #380]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d116      	bne.n	800647c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644e:	4b5c      	ldr	r3, [pc, #368]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <HAL_RCC_OscConfig+0x152>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d001      	beq.n	8006466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e1c4      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006466:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4952      	ldr	r1, [pc, #328]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800647a:	e03a      	b.n	80064f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d020      	beq.n	80064c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006484:	4b4f      	ldr	r3, [pc, #316]	; (80065c4 <HAL_RCC_OscConfig+0x2b0>)
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648a:	f7fc ff97 	bl	80033bc <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006492:	f7fc ff93 	bl	80033bc <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e1a5      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a4:	4b46      	ldr	r3, [pc, #280]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b0:	4b43      	ldr	r3, [pc, #268]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4940      	ldr	r1, [pc, #256]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]
 80064c4:	e015      	b.n	80064f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c6:	4b3f      	ldr	r3, [pc, #252]	; (80065c4 <HAL_RCC_OscConfig+0x2b0>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fc ff76 	bl	80033bc <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d4:	f7fc ff72 	bl	80033bc <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e184      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e6:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d030      	beq.n	8006560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006506:	4b30      	ldr	r3, [pc, #192]	; (80065c8 <HAL_RCC_OscConfig+0x2b4>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650c:	f7fc ff56 	bl	80033bc <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006514:	f7fc ff52 	bl	80033bc <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e164      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006526:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f0      	beq.n	8006514 <HAL_RCC_OscConfig+0x200>
 8006532:	e015      	b.n	8006560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <HAL_RCC_OscConfig+0x2b4>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653a:	f7fc ff3f 	bl	80033bc <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006542:	f7fc ff3b 	bl	80033bc <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e14d      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a0 	beq.w	80066ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006572:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10f      	bne.n	800659e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800657e:	2300      	movs	r3, #0
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658c:	6413      	str	r3, [r2, #64]	; 0x40
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_RCC_OscConfig+0x2b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d121      	bne.n	80065ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065aa:	4b08      	ldr	r3, [pc, #32]	; (80065cc <HAL_RCC_OscConfig+0x2b8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a07      	ldr	r2, [pc, #28]	; (80065cc <HAL_RCC_OscConfig+0x2b8>)
 80065b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b6:	f7fc ff01 	bl	80033bc <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065bc:	e011      	b.n	80065e2 <HAL_RCC_OscConfig+0x2ce>
 80065be:	bf00      	nop
 80065c0:	40023800 	.word	0x40023800
 80065c4:	42470000 	.word	0x42470000
 80065c8:	42470e80 	.word	0x42470e80
 80065cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d0:	f7fc fef4 	bl	80033bc <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e106      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e2:	4b85      	ldr	r3, [pc, #532]	; (80067f8 <HAL_RCC_OscConfig+0x4e4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d106      	bne.n	8006604 <HAL_RCC_OscConfig+0x2f0>
 80065f6:	4b81      	ldr	r3, [pc, #516]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a80      	ldr	r2, [pc, #512]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	6713      	str	r3, [r2, #112]	; 0x70
 8006602:	e01c      	b.n	800663e <HAL_RCC_OscConfig+0x32a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b05      	cmp	r3, #5
 800660a:	d10c      	bne.n	8006626 <HAL_RCC_OscConfig+0x312>
 800660c:	4b7b      	ldr	r3, [pc, #492]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006610:	4a7a      	ldr	r2, [pc, #488]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006612:	f043 0304 	orr.w	r3, r3, #4
 8006616:	6713      	str	r3, [r2, #112]	; 0x70
 8006618:	4b78      	ldr	r3, [pc, #480]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661c:	4a77      	ldr	r2, [pc, #476]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	; 0x70
 8006624:	e00b      	b.n	800663e <HAL_RCC_OscConfig+0x32a>
 8006626:	4b75      	ldr	r3, [pc, #468]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a74      	ldr	r2, [pc, #464]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	4b72      	ldr	r3, [pc, #456]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a71      	ldr	r2, [pc, #452]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006638:	f023 0304 	bic.w	r3, r3, #4
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d015      	beq.n	8006672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fc feb9 	bl	80033bc <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664c:	e00a      	b.n	8006664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7fc feb5 	bl	80033bc <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	; 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e0c5      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006664:	4b65      	ldr	r3, [pc, #404]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0ee      	beq.n	800664e <HAL_RCC_OscConfig+0x33a>
 8006670:	e014      	b.n	800669c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006672:	f7fc fea3 	bl	80033bc <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006678:	e00a      	b.n	8006690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800667a:	f7fc fe9f 	bl	80033bc <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f241 3288 	movw	r2, #5000	; 0x1388
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e0af      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006690:	4b5a      	ldr	r3, [pc, #360]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1ee      	bne.n	800667a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d105      	bne.n	80066ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a2:	4b56      	ldr	r3, [pc, #344]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	4a55      	ldr	r2, [pc, #340]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 80066a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 809b 	beq.w	80067ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066b8:	4b50      	ldr	r3, [pc, #320]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d05c      	beq.n	800677e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d141      	bne.n	8006750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066cc:	4b4c      	ldr	r3, [pc, #304]	; (8006800 <HAL_RCC_OscConfig+0x4ec>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d2:	f7fc fe73 	bl	80033bc <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066da:	f7fc fe6f 	bl	80033bc <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e081      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ec:	4b43      	ldr	r3, [pc, #268]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	019b      	lsls	r3, r3, #6
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	3b01      	subs	r3, #1
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	4937      	ldr	r1, [pc, #220]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006722:	4b37      	ldr	r3, [pc, #220]	; (8006800 <HAL_RCC_OscConfig+0x4ec>)
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006728:	f7fc fe48 	bl	80033bc <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006730:	f7fc fe44 	bl	80033bc <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e056      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006742:	4b2e      	ldr	r3, [pc, #184]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x41c>
 800674e:	e04e      	b.n	80067ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <HAL_RCC_OscConfig+0x4ec>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006756:	f7fc fe31 	bl	80033bc <HAL_GetTick>
 800675a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675e:	f7fc fe2d 	bl	80033bc <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e03f      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006770:	4b22      	ldr	r3, [pc, #136]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f0      	bne.n	800675e <HAL_RCC_OscConfig+0x44a>
 800677c:	e037      	b.n	80067ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e032      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <HAL_RCC_OscConfig+0x4e8>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d028      	beq.n	80067ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d121      	bne.n	80067ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d11a      	bne.n	80067ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067ba:	4013      	ands	r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d111      	bne.n	80067ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d107      	bne.n	80067ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d001      	beq.n	80067ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40007000 	.word	0x40007000
 80067fc:	40023800 	.word	0x40023800
 8006800:	42470060 	.word	0x42470060

08006804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e0cc      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006818:	4b68      	ldr	r3, [pc, #416]	; (80069bc <HAL_RCC_ClockConfig+0x1b8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d90c      	bls.n	8006840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006826:	4b65      	ldr	r3, [pc, #404]	; (80069bc <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b63      	ldr	r3, [pc, #396]	; (80069bc <HAL_RCC_ClockConfig+0x1b8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0b8      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d020      	beq.n	800688e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006858:	4b59      	ldr	r3, [pc, #356]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4a58      	ldr	r2, [pc, #352]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006870:	4b53      	ldr	r3, [pc, #332]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	4a52      	ldr	r2, [pc, #328]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800687a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687c:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	494d      	ldr	r1, [pc, #308]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d044      	beq.n	8006924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d119      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e07f      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d003      	beq.n	80068c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d107      	bne.n	80068d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c2:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e06f      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d2:	4b3b      	ldr	r3, [pc, #236]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e067      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068e2:	4b37      	ldr	r3, [pc, #220]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	4934      	ldr	r1, [pc, #208]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068f4:	f7fc fd62 	bl	80033bc <HAL_GetTick>
 80068f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fa:	e00a      	b.n	8006912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fc:	f7fc fd5e 	bl	80033bc <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f241 3288 	movw	r2, #5000	; 0x1388
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e04f      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006912:	4b2b      	ldr	r3, [pc, #172]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 020c 	and.w	r2, r3, #12
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	429a      	cmp	r2, r3
 8006922:	d1eb      	bne.n	80068fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006924:	4b25      	ldr	r3, [pc, #148]	; (80069bc <HAL_RCC_ClockConfig+0x1b8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d20c      	bcs.n	800694c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b22      	ldr	r3, [pc, #136]	; (80069bc <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800693a:	4b20      	ldr	r3, [pc, #128]	; (80069bc <HAL_RCC_ClockConfig+0x1b8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e032      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006958:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4916      	ldr	r1, [pc, #88]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	490e      	ldr	r1, [pc, #56]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	4313      	orrs	r3, r2
 8006988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800698a:	f000 f821 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 800698e:	4602      	mov	r2, r0
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	091b      	lsrs	r3, r3, #4
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	490a      	ldr	r1, [pc, #40]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 800699c:	5ccb      	ldrb	r3, [r1, r3]
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	4a09      	ldr	r2, [pc, #36]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_RCC_ClockConfig+0x1c8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fc fcc2 	bl	8003334 <HAL_InitTick>

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40023c00 	.word	0x40023c00
 80069c0:	40023800 	.word	0x40023800
 80069c4:	0800c3e8 	.word	0x0800c3e8
 80069c8:	2000003c 	.word	0x2000003c
 80069cc:	20000040 	.word	0x20000040

080069d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	2300      	movs	r3, #0
 80069e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e8:	4b67      	ldr	r3, [pc, #412]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 030c 	and.w	r3, r3, #12
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d00d      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0x40>
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	f200 80bd 	bhi.w	8006b74 <HAL_RCC_GetSysClockFreq+0x1a4>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <HAL_RCC_GetSysClockFreq+0x34>
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d003      	beq.n	8006a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a02:	e0b7      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a04:	4b61      	ldr	r3, [pc, #388]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a06:	60bb      	str	r3, [r7, #8]
       break;
 8006a08:	e0b7      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a0a:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006a0c:	60bb      	str	r3, [r7, #8]
      break;
 8006a0e:	e0b4      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a10:	4b5d      	ldr	r3, [pc, #372]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a1a:	4b5b      	ldr	r3, [pc, #364]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d04d      	beq.n	8006ac2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a26:	4b58      	ldr	r3, [pc, #352]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	099b      	lsrs	r3, r3, #6
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a36:	f04f 0100 	mov.w	r1, #0
 8006a3a:	ea02 0800 	and.w	r8, r2, r0
 8006a3e:	ea03 0901 	and.w	r9, r3, r1
 8006a42:	4640      	mov	r0, r8
 8006a44:	4649      	mov	r1, r9
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	014b      	lsls	r3, r1, #5
 8006a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a54:	0142      	lsls	r2, r0, #5
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	ebb0 0008 	subs.w	r0, r0, r8
 8006a5e:	eb61 0109 	sbc.w	r1, r1, r9
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	018b      	lsls	r3, r1, #6
 8006a6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a70:	0182      	lsls	r2, r0, #6
 8006a72:	1a12      	subs	r2, r2, r0
 8006a74:	eb63 0301 	sbc.w	r3, r3, r1
 8006a78:	f04f 0000 	mov.w	r0, #0
 8006a7c:	f04f 0100 	mov.w	r1, #0
 8006a80:	00d9      	lsls	r1, r3, #3
 8006a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a86:	00d0      	lsls	r0, r2, #3
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	eb12 0208 	adds.w	r2, r2, r8
 8006a90:	eb43 0309 	adc.w	r3, r3, r9
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f04f 0100 	mov.w	r1, #0
 8006a9c:	0259      	lsls	r1, r3, #9
 8006a9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006aa2:	0250      	lsls	r0, r2, #9
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	f7fa f874 	bl	8000ba0 <__aeabi_uldivmod>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4613      	mov	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e04a      	b.n	8006b58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac2:	4b31      	ldr	r3, [pc, #196]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	099b      	lsrs	r3, r3, #6
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ad2:	f04f 0100 	mov.w	r1, #0
 8006ad6:	ea02 0400 	and.w	r4, r2, r0
 8006ada:	ea03 0501 	and.w	r5, r3, r1
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	014b      	lsls	r3, r1, #5
 8006aec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006af0:	0142      	lsls	r2, r0, #5
 8006af2:	4610      	mov	r0, r2
 8006af4:	4619      	mov	r1, r3
 8006af6:	1b00      	subs	r0, r0, r4
 8006af8:	eb61 0105 	sbc.w	r1, r1, r5
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	018b      	lsls	r3, r1, #6
 8006b06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b0a:	0182      	lsls	r2, r0, #6
 8006b0c:	1a12      	subs	r2, r2, r0
 8006b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f04f 0100 	mov.w	r1, #0
 8006b1a:	00d9      	lsls	r1, r3, #3
 8006b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b20:	00d0      	lsls	r0, r2, #3
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	1912      	adds	r2, r2, r4
 8006b28:	eb45 0303 	adc.w	r3, r5, r3
 8006b2c:	f04f 0000 	mov.w	r0, #0
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	0299      	lsls	r1, r3, #10
 8006b36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b3a:	0290      	lsls	r0, r2, #10
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	f7fa f828 	bl	8000ba0 <__aeabi_uldivmod>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4613      	mov	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	3301      	adds	r3, #1
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	60bb      	str	r3, [r7, #8]
      break;
 8006b72:	e002      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b76:	60bb      	str	r3, [r7, #8]
      break;
 8006b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b86:	bf00      	nop
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	007a1200 	.word	0x007a1200

08006b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	2000003c 	.word	0x2000003c

08006bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bb0:	f7ff fff0 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0a9b      	lsrs	r3, r3, #10
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4903      	ldr	r1, [pc, #12]	; (8006bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bc2:	5ccb      	ldrb	r3, [r1, r3]
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	0800c3f8 	.word	0x0800c3f8

08006bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bd8:	f7ff ffdc 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0b5b      	lsrs	r3, r3, #13
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	; (8006bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800c3f8 	.word	0x0800c3f8

08006bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e03f      	b.n	8006c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fc fa9a 	bl	800315c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2224      	movs	r2, #36	; 0x24
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fc7b 	bl	800753c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b0ba      	sub	sp, #232	; 0xe8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <HAL_UART_IRQHandler+0x66>
 8006cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb65 	bl	80073c6 <UART_Receive_IT>
      return;
 8006cfc:	e256      	b.n	80071ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80de 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x22c>
 8006d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80d1 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <HAL_UART_IRQHandler+0xae>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f043 0201 	orr.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_UART_IRQHandler+0xd2>
 8006d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f043 0202 	orr.w	r2, r3, #2
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <HAL_UART_IRQHandler+0xf6>
 8006d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f043 0204 	orr.w	r2, r3, #4
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d011      	beq.n	8006dbe <HAL_UART_IRQHandler+0x126>
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d105      	bne.n	8006db2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f043 0208 	orr.w	r2, r3, #8
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 81ed 	beq.w	80071a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_UART_IRQHandler+0x14e>
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 faf0 	bl	80073c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	bf0c      	ite	eq
 8006df4:	2301      	moveq	r3, #1
 8006df6:	2300      	movne	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <HAL_UART_IRQHandler+0x17a>
 8006e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d04f      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9f8 	bl	8007208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d141      	bne.n	8006eaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3314      	adds	r3, #20
 8006e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1d9      	bne.n	8006e26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d013      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	4a7d      	ldr	r2, [pc, #500]	; (8007074 <HAL_UART_IRQHandler+0x3dc>)
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fc fc49 	bl	800371e <HAL_DMA_Abort_IT>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d016      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	e00e      	b.n	8006ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f99a 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	e00a      	b.n	8006ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f996 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	e006      	b.n	8006ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f992 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ebe:	e170      	b.n	80071a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	bf00      	nop
    return;
 8006ec2:	e16e      	b.n	80071a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	f040 814a 	bne.w	8007162 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 8143 	beq.w	8007162 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 813c 	beq.w	8007162 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	f040 80b4 	bne.w	8007078 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8140 	beq.w	80071a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	f080 8139 	bcs.w	80071a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	f000 8088 	beq.w	800705a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1d9      	bne.n	8006f4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3314      	adds	r3, #20
 8006f9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e1      	bne.n	8006f96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3314      	adds	r3, #20
 8006fd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ff6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ff8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ffc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e3      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800703c:	65ba      	str	r2, [r7, #88]	; 0x58
 800703e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e3      	bne.n	8007018 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	4618      	mov	r0, r3
 8007056:	f7fc faf2 	bl	800363e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007062:	b29b      	uxth	r3, r3
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	b29b      	uxth	r3, r3
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f8c0 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007070:	e099      	b.n	80071a6 <HAL_UART_IRQHandler+0x50e>
 8007072:	bf00      	nop
 8007074:	080072cf 	.word	0x080072cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007080:	b29b      	uxth	r3, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 808b 	beq.w	80071aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8086 	beq.w	80071aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070c2:	647a      	str	r2, [r7, #68]	; 0x44
 80070c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e3      	bne.n	800709e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	623b      	str	r3, [r7, #32]
   return(result);
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3314      	adds	r3, #20
 80070f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070fa:	633a      	str	r2, [r7, #48]	; 0x30
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e3      	bne.n	80070d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	330c      	adds	r3, #12
 8007122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	60fb      	str	r3, [r7, #12]
   return(result);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0310 	bic.w	r3, r3, #16
 8007132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	330c      	adds	r3, #12
 800713c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007140:	61fa      	str	r2, [r7, #28]
 8007142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	69b9      	ldr	r1, [r7, #24]
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	617b      	str	r3, [r7, #20]
   return(result);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e3      	bne.n	800711c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f848 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007160:	e023      	b.n	80071aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_UART_IRQHandler+0x4ea>
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8bb 	bl	80072f6 <UART_Transmit_IT>
    return;
 8007180:	e014      	b.n	80071ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00e      	beq.n	80071ac <HAL_UART_IRQHandler+0x514>
 800718e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8fb 	bl	8007396 <UART_EndTransmit_IT>
    return;
 80071a0:	e004      	b.n	80071ac <HAL_UART_IRQHandler+0x514>
    return;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <HAL_UART_IRQHandler+0x514>
      return;
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <HAL_UART_IRQHandler+0x514>
      return;
 80071aa:	bf00      	nop
  }
}
 80071ac:	37e8      	adds	r7, #232	; 0xe8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b095      	sub	sp, #84	; 0x54
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	330c      	adds	r3, #12
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007230:	643a      	str	r2, [r7, #64]	; 0x40
 8007232:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3314      	adds	r3, #20
 800724a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	61fb      	str	r3, [r7, #28]
   return(result);
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3314      	adds	r3, #20
 8007262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800726a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	2b01      	cmp	r3, #1
 800727e:	d119      	bne.n	80072b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f023 0310 	bic.w	r3, r3, #16
 8007296:	647b      	str	r3, [r7, #68]	; 0x44
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072a0:	61ba      	str	r2, [r7, #24]
 80072a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6979      	ldr	r1, [r7, #20]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	613b      	str	r3, [r7, #16]
   return(result);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e5      	bne.n	8007280 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072c2:	bf00      	nop
 80072c4:	3754      	adds	r7, #84	; 0x54
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff ff77 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b21      	cmp	r3, #33	; 0x21
 8007308:	d13e      	bne.n	8007388 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007312:	d114      	bne.n	800733e <UART_Transmit_IT+0x48>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d110      	bne.n	800733e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007330:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	1c9a      	adds	r2, r3, #2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	621a      	str	r2, [r3, #32]
 800733c:	e008      	b.n	8007350 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	1c59      	adds	r1, r3, #1
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6211      	str	r1, [r2, #32]
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4619      	mov	r1, r3
 800735e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10f      	bne.n	8007384 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007372:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007382:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	e000      	b.n	800738a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007388:	2302      	movs	r3, #2
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fefc 	bl	80071b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b08c      	sub	sp, #48	; 0x30
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b22      	cmp	r3, #34	; 0x22
 80073d8:	f040 80ab 	bne.w	8007532 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e4:	d117      	bne.n	8007416 <UART_Receive_IT+0x50>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d113      	bne.n	8007416 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007404:	b29a      	uxth	r2, r3
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	629a      	str	r2, [r3, #40]	; 0x28
 8007414:	e026      	b.n	8007464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007428:	d007      	beq.n	800743a <UART_Receive_IT+0x74>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <UART_Receive_IT+0x82>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	e008      	b.n	800745a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007454:	b2da      	uxtb	r2, r3
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29b      	uxth	r3, r3
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	4619      	mov	r1, r3
 8007472:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007474:	2b00      	cmp	r3, #0
 8007476:	d15a      	bne.n	800752e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0220 	bic.w	r2, r2, #32
 8007486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d135      	bne.n	8007524 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	613b      	str	r3, [r7, #16]
   return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f023 0310 	bic.w	r3, r3, #16
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	623a      	str	r2, [r7, #32]
 80074e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	69f9      	ldr	r1, [r7, #28]
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e5      	bne.n	80074be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d10a      	bne.n	8007516 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff fe67 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 8007522:	e002      	b.n	800752a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fe4f 	bl	80071c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e002      	b.n	8007534 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e000      	b.n	8007534 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007532:	2302      	movs	r3, #2
  }
}
 8007534:	4618      	mov	r0, r3
 8007536:	3730      	adds	r7, #48	; 0x30
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	b09f      	sub	sp, #124	; 0x7c
 8007542:	af00      	add	r7, sp, #0
 8007544:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	68d9      	ldr	r1, [r3, #12]
 8007554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	ea40 0301 	orr.w	r3, r0, r1
 800755c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800755e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	431a      	orrs	r2, r3
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	431a      	orrs	r2, r3
 800756e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	4313      	orrs	r3, r2
 8007574:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007580:	f021 010c 	bic.w	r1, r1, #12
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800758a:	430b      	orrs	r3, r1
 800758c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800758e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759a:	6999      	ldr	r1, [r3, #24]
 800759c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	ea40 0301 	orr.w	r3, r0, r1
 80075a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4bc5      	ldr	r3, [pc, #788]	; (80078c0 <UART_SetConfig+0x384>)
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d004      	beq.n	80075ba <UART_SetConfig+0x7e>
 80075b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4bc3      	ldr	r3, [pc, #780]	; (80078c4 <UART_SetConfig+0x388>)
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d103      	bne.n	80075c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075ba:	f7ff fb0b 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 80075be:	6778      	str	r0, [r7, #116]	; 0x74
 80075c0:	e002      	b.n	80075c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075c2:	f7ff faf3 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 80075c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d0:	f040 80b6 	bne.w	8007740 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d6:	461c      	mov	r4, r3
 80075d8:	f04f 0500 	mov.w	r5, #0
 80075dc:	4622      	mov	r2, r4
 80075de:	462b      	mov	r3, r5
 80075e0:	1891      	adds	r1, r2, r2
 80075e2:	6439      	str	r1, [r7, #64]	; 0x40
 80075e4:	415b      	adcs	r3, r3
 80075e6:	647b      	str	r3, [r7, #68]	; 0x44
 80075e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075ec:	1912      	adds	r2, r2, r4
 80075ee:	eb45 0303 	adc.w	r3, r5, r3
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	00d9      	lsls	r1, r3, #3
 80075fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007600:	00d0      	lsls	r0, r2, #3
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	1911      	adds	r1, r2, r4
 8007608:	6639      	str	r1, [r7, #96]	; 0x60
 800760a:	416b      	adcs	r3, r5
 800760c:	667b      	str	r3, [r7, #100]	; 0x64
 800760e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	461a      	mov	r2, r3
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	1891      	adds	r1, r2, r2
 800761a:	63b9      	str	r1, [r7, #56]	; 0x38
 800761c:	415b      	adcs	r3, r3
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007624:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007628:	f7f9 faba 	bl	8000ba0 <__aeabi_uldivmod>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4ba5      	ldr	r3, [pc, #660]	; (80078c8 <UART_SetConfig+0x38c>)
 8007632:	fba3 2302 	umull	r2, r3, r3, r2
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	011e      	lsls	r6, r3, #4
 800763a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763c:	461c      	mov	r4, r3
 800763e:	f04f 0500 	mov.w	r5, #0
 8007642:	4622      	mov	r2, r4
 8007644:	462b      	mov	r3, r5
 8007646:	1891      	adds	r1, r2, r2
 8007648:	6339      	str	r1, [r7, #48]	; 0x30
 800764a:	415b      	adcs	r3, r3
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
 800764e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007652:	1912      	adds	r2, r2, r4
 8007654:	eb45 0303 	adc.w	r3, r5, r3
 8007658:	f04f 0000 	mov.w	r0, #0
 800765c:	f04f 0100 	mov.w	r1, #0
 8007660:	00d9      	lsls	r1, r3, #3
 8007662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007666:	00d0      	lsls	r0, r2, #3
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	1911      	adds	r1, r2, r4
 800766e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007670:	416b      	adcs	r3, r5
 8007672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	461a      	mov	r2, r3
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	1891      	adds	r1, r2, r2
 8007680:	62b9      	str	r1, [r7, #40]	; 0x28
 8007682:	415b      	adcs	r3, r3
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800768a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800768e:	f7f9 fa87 	bl	8000ba0 <__aeabi_uldivmod>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4b8c      	ldr	r3, [pc, #560]	; (80078c8 <UART_SetConfig+0x38c>)
 8007698:	fba3 1302 	umull	r1, r3, r3, r2
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2164      	movs	r1, #100	; 0x64
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	3332      	adds	r3, #50	; 0x32
 80076aa:	4a87      	ldr	r2, [pc, #540]	; (80078c8 <UART_SetConfig+0x38c>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076b8:	441e      	add	r6, r3
 80076ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076bc:	4618      	mov	r0, r3
 80076be:	f04f 0100 	mov.w	r1, #0
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	1894      	adds	r4, r2, r2
 80076c8:	623c      	str	r4, [r7, #32]
 80076ca:	415b      	adcs	r3, r3
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
 80076ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076d2:	1812      	adds	r2, r2, r0
 80076d4:	eb41 0303 	adc.w	r3, r1, r3
 80076d8:	f04f 0400 	mov.w	r4, #0
 80076dc:	f04f 0500 	mov.w	r5, #0
 80076e0:	00dd      	lsls	r5, r3, #3
 80076e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076e6:	00d4      	lsls	r4, r2, #3
 80076e8:	4622      	mov	r2, r4
 80076ea:	462b      	mov	r3, r5
 80076ec:	1814      	adds	r4, r2, r0
 80076ee:	653c      	str	r4, [r7, #80]	; 0x50
 80076f0:	414b      	adcs	r3, r1
 80076f2:	657b      	str	r3, [r7, #84]	; 0x54
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	461a      	mov	r2, r3
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	1891      	adds	r1, r2, r2
 8007700:	61b9      	str	r1, [r7, #24]
 8007702:	415b      	adcs	r3, r3
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800770a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800770e:	f7f9 fa47 	bl	8000ba0 <__aeabi_uldivmod>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4b6c      	ldr	r3, [pc, #432]	; (80078c8 <UART_SetConfig+0x38c>)
 8007718:	fba3 1302 	umull	r1, r3, r3, r2
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	2164      	movs	r1, #100	; 0x64
 8007720:	fb01 f303 	mul.w	r3, r1, r3
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	3332      	adds	r3, #50	; 0x32
 800772a:	4a67      	ldr	r2, [pc, #412]	; (80078c8 <UART_SetConfig+0x38c>)
 800772c:	fba2 2303 	umull	r2, r3, r2, r3
 8007730:	095b      	lsrs	r3, r3, #5
 8007732:	f003 0207 	and.w	r2, r3, #7
 8007736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4432      	add	r2, r6
 800773c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800773e:	e0b9      	b.n	80078b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007742:	461c      	mov	r4, r3
 8007744:	f04f 0500 	mov.w	r5, #0
 8007748:	4622      	mov	r2, r4
 800774a:	462b      	mov	r3, r5
 800774c:	1891      	adds	r1, r2, r2
 800774e:	6139      	str	r1, [r7, #16]
 8007750:	415b      	adcs	r3, r3
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007758:	1912      	adds	r2, r2, r4
 800775a:	eb45 0303 	adc.w	r3, r5, r3
 800775e:	f04f 0000 	mov.w	r0, #0
 8007762:	f04f 0100 	mov.w	r1, #0
 8007766:	00d9      	lsls	r1, r3, #3
 8007768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800776c:	00d0      	lsls	r0, r2, #3
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	eb12 0804 	adds.w	r8, r2, r4
 8007776:	eb43 0905 	adc.w	r9, r3, r5
 800777a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	f04f 0100 	mov.w	r1, #0
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	008b      	lsls	r3, r1, #2
 800778e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007792:	0082      	lsls	r2, r0, #2
 8007794:	4640      	mov	r0, r8
 8007796:	4649      	mov	r1, r9
 8007798:	f7f9 fa02 	bl	8000ba0 <__aeabi_uldivmod>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4b49      	ldr	r3, [pc, #292]	; (80078c8 <UART_SetConfig+0x38c>)
 80077a2:	fba3 2302 	umull	r2, r3, r3, r2
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	011e      	lsls	r6, r3, #4
 80077aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ac:	4618      	mov	r0, r3
 80077ae:	f04f 0100 	mov.w	r1, #0
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	1894      	adds	r4, r2, r2
 80077b8:	60bc      	str	r4, [r7, #8]
 80077ba:	415b      	adcs	r3, r3
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077c2:	1812      	adds	r2, r2, r0
 80077c4:	eb41 0303 	adc.w	r3, r1, r3
 80077c8:	f04f 0400 	mov.w	r4, #0
 80077cc:	f04f 0500 	mov.w	r5, #0
 80077d0:	00dd      	lsls	r5, r3, #3
 80077d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077d6:	00d4      	lsls	r4, r2, #3
 80077d8:	4622      	mov	r2, r4
 80077da:	462b      	mov	r3, r5
 80077dc:	1814      	adds	r4, r2, r0
 80077de:	64bc      	str	r4, [r7, #72]	; 0x48
 80077e0:	414b      	adcs	r3, r1
 80077e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f04f 0100 	mov.w	r1, #0
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	008b      	lsls	r3, r1, #2
 80077f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077fc:	0082      	lsls	r2, r0, #2
 80077fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007802:	f7f9 f9cd 	bl	8000ba0 <__aeabi_uldivmod>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4b2f      	ldr	r3, [pc, #188]	; (80078c8 <UART_SetConfig+0x38c>)
 800780c:	fba3 1302 	umull	r1, r3, r3, r2
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	2164      	movs	r1, #100	; 0x64
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	3332      	adds	r3, #50	; 0x32
 800781e:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <UART_SetConfig+0x38c>)
 8007820:	fba2 2303 	umull	r2, r3, r2, r3
 8007824:	095b      	lsrs	r3, r3, #5
 8007826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800782a:	441e      	add	r6, r3
 800782c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800782e:	4618      	mov	r0, r3
 8007830:	f04f 0100 	mov.w	r1, #0
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	1894      	adds	r4, r2, r2
 800783a:	603c      	str	r4, [r7, #0]
 800783c:	415b      	adcs	r3, r3
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007844:	1812      	adds	r2, r2, r0
 8007846:	eb41 0303 	adc.w	r3, r1, r3
 800784a:	f04f 0400 	mov.w	r4, #0
 800784e:	f04f 0500 	mov.w	r5, #0
 8007852:	00dd      	lsls	r5, r3, #3
 8007854:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007858:	00d4      	lsls	r4, r2, #3
 800785a:	4622      	mov	r2, r4
 800785c:	462b      	mov	r3, r5
 800785e:	eb12 0a00 	adds.w	sl, r2, r0
 8007862:	eb43 0b01 	adc.w	fp, r3, r1
 8007866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	4618      	mov	r0, r3
 800786c:	f04f 0100 	mov.w	r1, #0
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	008b      	lsls	r3, r1, #2
 800787a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800787e:	0082      	lsls	r2, r0, #2
 8007880:	4650      	mov	r0, sl
 8007882:	4659      	mov	r1, fp
 8007884:	f7f9 f98c 	bl	8000ba0 <__aeabi_uldivmod>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <UART_SetConfig+0x38c>)
 800788e:	fba3 1302 	umull	r1, r3, r3, r2
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	2164      	movs	r1, #100	; 0x64
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	3332      	adds	r3, #50	; 0x32
 80078a0:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <UART_SetConfig+0x38c>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4432      	add	r2, r6
 80078b2:	609a      	str	r2, [r3, #8]
}
 80078b4:	bf00      	nop
 80078b6:	377c      	adds	r7, #124	; 0x7c
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	40011000 	.word	0x40011000
 80078c4:	40011400 	.word	0x40011400
 80078c8:	51eb851f 	.word	0x51eb851f

080078cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078cc:	b084      	sub	sp, #16
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	f107 001c 	add.w	r0, r7, #28
 80078da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d122      	bne.n	800792a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800790c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d105      	bne.n	800791e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fb1c 	bl	8008f5c <USB_CoreReset>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	e01a      	b.n	8007960 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fb10 	bl	8008f5c <USB_CoreReset>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
 8007952:	e005      	b.n	8007960 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	2b01      	cmp	r3, #1
 8007964:	d10b      	bne.n	800797e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f043 0206 	orr.w	r2, r3, #6
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800798a:	b004      	add	sp, #16
 800798c:	4770      	bx	lr
	...

08007990 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d165      	bne.n	8007a70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a41      	ldr	r2, [pc, #260]	; (8007aac <USB_SetTurnaroundTime+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d906      	bls.n	80079ba <USB_SetTurnaroundTime+0x2a>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4a40      	ldr	r2, [pc, #256]	; (8007ab0 <USB_SetTurnaroundTime+0x120>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d202      	bcs.n	80079ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079b4:	230f      	movs	r3, #15
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e062      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4a3c      	ldr	r2, [pc, #240]	; (8007ab0 <USB_SetTurnaroundTime+0x120>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d306      	bcc.n	80079d0 <USB_SetTurnaroundTime+0x40>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4a3b      	ldr	r2, [pc, #236]	; (8007ab4 <USB_SetTurnaroundTime+0x124>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d202      	bcs.n	80079d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079ca:	230e      	movs	r3, #14
 80079cc:	617b      	str	r3, [r7, #20]
 80079ce:	e057      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4a38      	ldr	r2, [pc, #224]	; (8007ab4 <USB_SetTurnaroundTime+0x124>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d306      	bcc.n	80079e6 <USB_SetTurnaroundTime+0x56>
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4a37      	ldr	r2, [pc, #220]	; (8007ab8 <USB_SetTurnaroundTime+0x128>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d202      	bcs.n	80079e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079e0:	230d      	movs	r3, #13
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	e04c      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4a33      	ldr	r2, [pc, #204]	; (8007ab8 <USB_SetTurnaroundTime+0x128>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d306      	bcc.n	80079fc <USB_SetTurnaroundTime+0x6c>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	4a32      	ldr	r2, [pc, #200]	; (8007abc <USB_SetTurnaroundTime+0x12c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d802      	bhi.n	80079fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079f6:	230c      	movs	r3, #12
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e041      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4a2f      	ldr	r2, [pc, #188]	; (8007abc <USB_SetTurnaroundTime+0x12c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d906      	bls.n	8007a12 <USB_SetTurnaroundTime+0x82>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4a2e      	ldr	r2, [pc, #184]	; (8007ac0 <USB_SetTurnaroundTime+0x130>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d802      	bhi.n	8007a12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a0c:	230b      	movs	r3, #11
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	e036      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <USB_SetTurnaroundTime+0x130>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d906      	bls.n	8007a28 <USB_SetTurnaroundTime+0x98>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <USB_SetTurnaroundTime+0x134>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d802      	bhi.n	8007a28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a22:	230a      	movs	r3, #10
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e02b      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <USB_SetTurnaroundTime+0x134>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d906      	bls.n	8007a3e <USB_SetTurnaroundTime+0xae>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4a25      	ldr	r2, [pc, #148]	; (8007ac8 <USB_SetTurnaroundTime+0x138>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d202      	bcs.n	8007a3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a38:	2309      	movs	r3, #9
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e020      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4a21      	ldr	r2, [pc, #132]	; (8007ac8 <USB_SetTurnaroundTime+0x138>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d306      	bcc.n	8007a54 <USB_SetTurnaroundTime+0xc4>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4a20      	ldr	r2, [pc, #128]	; (8007acc <USB_SetTurnaroundTime+0x13c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d802      	bhi.n	8007a54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a4e:	2308      	movs	r3, #8
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e015      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4a1d      	ldr	r2, [pc, #116]	; (8007acc <USB_SetTurnaroundTime+0x13c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d906      	bls.n	8007a6a <USB_SetTurnaroundTime+0xda>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <USB_SetTurnaroundTime+0x140>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d202      	bcs.n	8007a6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a64:	2307      	movs	r3, #7
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e00a      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a6a:	2306      	movs	r3, #6
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e007      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a76:	2309      	movs	r3, #9
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	e001      	b.n	8007a80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a7c:	2309      	movs	r3, #9
 8007a7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	029b      	lsls	r3, r3, #10
 8007a94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	00d8acbf 	.word	0x00d8acbf
 8007ab0:	00e4e1c0 	.word	0x00e4e1c0
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	01067380 	.word	0x01067380
 8007abc:	011a499f 	.word	0x011a499f
 8007ac0:	01312cff 	.word	0x01312cff
 8007ac4:	014ca43f 	.word	0x014ca43f
 8007ac8:	016e3600 	.word	0x016e3600
 8007acc:	01a6ab1f 	.word	0x01a6ab1f
 8007ad0:	01e84800 	.word	0x01e84800

08007ad4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f043 0201 	orr.w	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f023 0201 	bic.w	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d115      	bne.n	8007b66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b46:	2001      	movs	r0, #1
 8007b48:	f7fb fc44 	bl	80033d4 <HAL_Delay>
      ms++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f972 	bl	8008e3c <USB_GetMode>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d01e      	beq.n	8007b9c <USB_SetCurrentMode+0x84>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b31      	cmp	r3, #49	; 0x31
 8007b62:	d9f0      	bls.n	8007b46 <USB_SetCurrentMode+0x2e>
 8007b64:	e01a      	b.n	8007b9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d115      	bne.n	8007b98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b78:	2001      	movs	r0, #1
 8007b7a:	f7fb fc2b 	bl	80033d4 <HAL_Delay>
      ms++;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 f959 	bl	8008e3c <USB_GetMode>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <USB_SetCurrentMode+0x84>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b31      	cmp	r3, #49	; 0x31
 8007b94:	d9f0      	bls.n	8007b78 <USB_SetCurrentMode+0x60>
 8007b96:	e001      	b.n	8007b9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e005      	b.n	8007ba8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b32      	cmp	r3, #50	; 0x32
 8007ba0:	d101      	bne.n	8007ba6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b086      	sub	sp, #24
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	e009      	b.n	8007be4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3340      	adds	r3, #64	; 0x40
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	3301      	adds	r3, #1
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b0e      	cmp	r3, #14
 8007be8:	d9f2      	bls.n	8007bd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d11c      	bne.n	8007c2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bfe:	f043 0302 	orr.w	r3, r3, #2
 8007c02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
 8007c28:	e00b      	b.n	8007c42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	4619      	mov	r1, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	680b      	ldr	r3, [r1, #0]
 8007c60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d10c      	bne.n	8007c82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f945 	bl	8007f00 <USB_SetDevSpeed>
 8007c76:	e008      	b.n	8007c8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c78:	2101      	movs	r1, #1
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f940 	bl	8007f00 <USB_SetDevSpeed>
 8007c80:	e003      	b.n	8007c8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c82:	2103      	movs	r1, #3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f93b 	bl	8007f00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c8a:	2110      	movs	r1, #16
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8f3 	bl	8007e78 <USB_FlushTxFifo>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f90f 	bl	8007ec0 <USB_FlushRxFifo>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	e043      	b.n	8007d5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cec:	d118      	bne.n	8007d20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d00:	461a      	mov	r2, r3
 8007d02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e013      	b.n	8007d32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d16:	461a      	mov	r2, r3
 8007d18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e008      	b.n	8007d32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2300      	movs	r3, #0
 8007d42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	461a      	mov	r2, r3
 8007d52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d3b7      	bcc.n	8007cd6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	e043      	b.n	8007df4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d82:	d118      	bne.n	8007db6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d96:	461a      	mov	r2, r3
 8007d98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	e013      	b.n	8007dc8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dac:	461a      	mov	r2, r3
 8007dae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	e008      	b.n	8007dc8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	461a      	mov	r2, r3
 8007de8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3b7      	bcc.n	8007d6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	f043 0210 	orr.w	r2, r3, #16
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <USB_DevInit+0x2c4>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f043 0208 	orr.w	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d107      	bne.n	8007e64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e5c:	f043 0304 	orr.w	r3, r3, #4
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e70:	b004      	add	sp, #16
 8007e72:	4770      	bx	lr
 8007e74:	803c3800 	.word	0x803c3800

08007e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	019b      	lsls	r3, r3, #6
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <USB_FlushTxFifo+0x44>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d901      	bls.n	8007ea2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e006      	b.n	8007eb0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d0f1      	beq.n	8007e92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	00030d40 	.word	0x00030d40

08007ec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2210      	movs	r2, #16
 8007ed0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <USB_FlushRxFifo+0x3c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e006      	b.n	8007ef0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d0f1      	beq.n	8007ed2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	00030d40 	.word	0x00030d40

08007f00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f20:	4313      	orrs	r3, r2
 8007f22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0306 	and.w	r3, r3, #6
 8007f4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]
 8007f56:	e00a      	b.n	8007f6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d002      	beq.n	8007f64 <USB_GetDevSpeed+0x32>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b06      	cmp	r3, #6
 8007f62:	d102      	bne.n	8007f6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f64:	2302      	movs	r3, #2
 8007f66:	75fb      	strb	r3, [r7, #23]
 8007f68:	e001      	b.n	8007f6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f6a:	230f      	movs	r3, #15
 8007f6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d13a      	bne.n	800800e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	68f9      	ldr	r1, [r7, #12]
 8007fb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d155      	bne.n	800807c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	78db      	ldrb	r3, [r3, #3]
 8007fea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	059b      	lsls	r3, r3, #22
 8007ff2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	e036      	b.n	800807c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	2101      	movs	r1, #1
 8008020:	fa01 f303 	lsl.w	r3, r1, r3
 8008024:	041b      	lsls	r3, r3, #16
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800802c:	4313      	orrs	r3, r2
 800802e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d11a      	bne.n	800807c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	78db      	ldrb	r3, [r3, #3]
 8008060:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008062:	430b      	orrs	r3, r1
 8008064:	4313      	orrs	r3, r2
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d161      	bne.n	800816c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080be:	d11f      	bne.n	8008100 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	2101      	movs	r1, #1
 8008112:	fa01 f303 	lsl.w	r3, r1, r3
 8008116:	b29b      	uxth	r3, r3
 8008118:	43db      	mvns	r3, r3
 800811a:	68f9      	ldr	r1, [r7, #12]
 800811c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008120:	4013      	ands	r3, r2
 8008122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	2101      	movs	r1, #1
 8008136:	fa01 f303 	lsl.w	r3, r1, r3
 800813a:	b29b      	uxth	r3, r3
 800813c:	43db      	mvns	r3, r3
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008144:	4013      	ands	r3, r2
 8008146:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	0159      	lsls	r1, r3, #5
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	440b      	add	r3, r1
 800815e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008162:	4619      	mov	r1, r3
 8008164:	4b35      	ldr	r3, [pc, #212]	; (800823c <USB_DeactivateEndpoint+0x1b0>)
 8008166:	4013      	ands	r3, r2
 8008168:	600b      	str	r3, [r1, #0]
 800816a:	e060      	b.n	800822e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800817e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008182:	d11f      	bne.n	80081c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	440a      	add	r2, r1
 800819a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	2101      	movs	r1, #1
 80081d6:	fa01 f303 	lsl.w	r3, r1, r3
 80081da:	041b      	lsls	r3, r3, #16
 80081dc:	43db      	mvns	r3, r3
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e4:	4013      	ands	r3, r2
 80081e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ee:	69da      	ldr	r2, [r3, #28]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f303 	lsl.w	r3, r1, r3
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	43db      	mvns	r3, r3
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008208:	4013      	ands	r3, r2
 800820a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	0159      	lsls	r1, r3, #5
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	440b      	add	r3, r1
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	4619      	mov	r1, r3
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <USB_DeactivateEndpoint+0x1b4>)
 800822a:	4013      	ands	r3, r2
 800822c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	ec337800 	.word	0xec337800
 8008240:	eff37800 	.word	0xeff37800

08008244 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b01      	cmp	r3, #1
 8008262:	f040 815c 	bne.w	800851e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d132      	bne.n	80082d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800828c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082cc:	0cdb      	lsrs	r3, r3, #19
 80082ce:	04db      	lsls	r3, r3, #19
 80082d0:	6113      	str	r3, [r2, #16]
 80082d2:	e074      	b.n	80083be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ee:	0cdb      	lsrs	r3, r3, #19
 80082f0:	04db      	lsls	r3, r3, #19
 80082f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6959      	ldr	r1, [r3, #20]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	440b      	add	r3, r1
 8008330:	1e59      	subs	r1, r3, #1
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	fbb1 f3f3 	udiv	r3, r1, r3
 800833a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800833c:	4b9d      	ldr	r3, [pc, #628]	; (80085b4 <USB_EPStartXfer+0x370>)
 800833e:	400b      	ands	r3, r1
 8008340:	69b9      	ldr	r1, [r7, #24]
 8008342:	0148      	lsls	r0, r1, #5
 8008344:	69f9      	ldr	r1, [r7, #28]
 8008346:	4401      	add	r1, r0
 8008348:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800834c:	4313      	orrs	r3, r2
 800834e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835c:	691a      	ldr	r2, [r3, #16]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008366:	69b9      	ldr	r1, [r7, #24]
 8008368:	0148      	lsls	r0, r1, #5
 800836a:	69f9      	ldr	r1, [r7, #28]
 800836c:	4401      	add	r1, r0
 800836e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008372:	4313      	orrs	r3, r2
 8008374:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	78db      	ldrb	r3, [r3, #3]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d11f      	bne.n	80083be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	440a      	add	r2, r1
 8008394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008398:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800839c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d14b      	bne.n	800845c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d009      	beq.n	80083e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d8:	461a      	mov	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	78db      	ldrb	r3, [r3, #3]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d128      	bne.n	800843a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d110      	bne.n	800841a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	e00f      	b.n	800843a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008438:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008454:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e12f      	b.n	80086bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008476:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800847a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	78db      	ldrb	r3, [r3, #3]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d015      	beq.n	80084b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8117 	beq.w	80086bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	2101      	movs	r1, #1
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	69f9      	ldr	r1, [r7, #28]
 80084a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084aa:	4313      	orrs	r3, r2
 80084ac:	634b      	str	r3, [r1, #52]	; 0x34
 80084ae:	e105      	b.n	80086bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d110      	bne.n	80084e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	e00f      	b.n	8008502 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008500:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	68d9      	ldr	r1, [r3, #12]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	b298      	uxth	r0, r3
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4603      	mov	r3, r0
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 fa2b 	bl	8008972 <USB_WritePacket>
 800851c:	e0ce      	b.n	80086bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	0151      	lsls	r1, r2, #5
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	440a      	add	r2, r1
 8008534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008538:	0cdb      	lsrs	r3, r3, #19
 800853a:	04db      	lsls	r3, r3, #19
 800853c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	440a      	add	r2, r1
 8008554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800855c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008560:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d126      	bne.n	80085b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008580:	69b9      	ldr	r1, [r7, #24]
 8008582:	0148      	lsls	r0, r1, #5
 8008584:	69f9      	ldr	r1, [r7, #28]
 8008586:	4401      	add	r1, r0
 8008588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800858c:	4313      	orrs	r3, r2
 800858e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ae:	6113      	str	r3, [r2, #16]
 80085b0:	e036      	b.n	8008620 <USB_EPStartXfer+0x3dc>
 80085b2:	bf00      	nop
 80085b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	4413      	add	r3, r2
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	8afb      	ldrh	r3, [r7, #22]
 80085de:	04d9      	lsls	r1, r3, #19
 80085e0:	4b39      	ldr	r3, [pc, #228]	; (80086c8 <USB_EPStartXfer+0x484>)
 80085e2:	400b      	ands	r3, r1
 80085e4:	69b9      	ldr	r1, [r7, #24]
 80085e6:	0148      	lsls	r0, r1, #5
 80085e8:	69f9      	ldr	r1, [r7, #28]
 80085ea:	4401      	add	r1, r0
 80085ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085f0:	4313      	orrs	r3, r2
 80085f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	691a      	ldr	r2, [r3, #16]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	8af9      	ldrh	r1, [r7, #22]
 8008608:	fb01 f303 	mul.w	r3, r1, r3
 800860c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008610:	69b9      	ldr	r1, [r7, #24]
 8008612:	0148      	lsls	r0, r1, #5
 8008614:	69f9      	ldr	r1, [r7, #28]
 8008616:	4401      	add	r1, r0
 8008618:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800861c:	4313      	orrs	r3, r2
 800861e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d10d      	bne.n	8008642 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	68d9      	ldr	r1, [r3, #12]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863e:	460a      	mov	r2, r1
 8008640:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d128      	bne.n	800869c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008656:	2b00      	cmp	r3, #0
 8008658:	d110      	bne.n	800867c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	0151      	lsls	r1, r2, #5
 800866c:	69fa      	ldr	r2, [r7, #28]
 800866e:	440a      	add	r2, r1
 8008670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	e00f      	b.n	800869c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	440a      	add	r2, r1
 8008692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800869a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3720      	adds	r7, #32
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	1ff80000 	.word	0x1ff80000

080086cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	4613      	mov	r3, r2
 80086d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	f040 80cd 	bne.w	8008888 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d132      	bne.n	800875c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	0151      	lsls	r1, r2, #5
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	440a      	add	r2, r1
 800870c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	440a      	add	r2, r1
 8008730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008754:	0cdb      	lsrs	r3, r3, #19
 8008756:	04db      	lsls	r3, r3, #19
 8008758:	6113      	str	r3, [r2, #16]
 800875a:	e04e      	b.n	80087fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008776:	0cdb      	lsrs	r3, r3, #19
 8008778:	04db      	lsls	r3, r3, #19
 800877a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008796:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800879a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800879e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	695a      	ldr	r2, [r3, #20]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d903      	bls.n	80087b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ea:	6939      	ldr	r1, [r7, #16]
 80087ec:	0148      	lsls	r0, r1, #5
 80087ee:	6979      	ldr	r1, [r7, #20]
 80087f0:	4401      	add	r1, r0
 80087f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087f6:	4313      	orrs	r3, r2
 80087f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d11e      	bne.n	800883e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d009      	beq.n	800881c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	461a      	mov	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	440a      	add	r2, r1
 8008832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e092      	b.n	8008964 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	440a      	add	r2, r1
 8008854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800885c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d07e      	beq.n	8008964 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	2101      	movs	r1, #1
 8008878:	fa01 f303 	lsl.w	r3, r1, r3
 800887c:	6979      	ldr	r1, [r7, #20]
 800887e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008882:	4313      	orrs	r3, r2
 8008884:	634b      	str	r3, [r1, #52]	; 0x34
 8008886:	e06d      	b.n	8008964 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a2:	0cdb      	lsrs	r3, r3, #19
 80088a4:	04db      	lsls	r3, r3, #19
 80088a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008912:	6939      	ldr	r1, [r7, #16]
 8008914:	0148      	lsls	r0, r1, #5
 8008916:	6979      	ldr	r1, [r7, #20]
 8008918:	4401      	add	r1, r0
 800891a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800891e:	4313      	orrs	r3, r2
 8008920:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d10d      	bne.n	8008944 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	68d9      	ldr	r1, [r3, #12]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	460a      	mov	r2, r1
 8008942:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	440a      	add	r2, r1
 800895a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008962:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	371c      	adds	r7, #28
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008972:	b480      	push	{r7}
 8008974:	b089      	sub	sp, #36	; 0x24
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	4611      	mov	r1, r2
 800897e:	461a      	mov	r2, r3
 8008980:	460b      	mov	r3, r1
 8008982:	71fb      	strb	r3, [r7, #7]
 8008984:	4613      	mov	r3, r2
 8008986:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008994:	2b00      	cmp	r3, #0
 8008996:	d123      	bne.n	80089e0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008998:	88bb      	ldrh	r3, [r7, #4]
 800899a:	3303      	adds	r3, #3
 800899c:	089b      	lsrs	r3, r3, #2
 800899e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
 80089a4:	e018      	b.n	80089d8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	031a      	lsls	r2, r3, #12
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b2:	461a      	mov	r2, r3
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	3301      	adds	r3, #1
 80089be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	3301      	adds	r3, #1
 80089c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	3301      	adds	r3, #1
 80089ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	3301      	adds	r3, #1
 80089d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	3301      	adds	r3, #1
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d3e2      	bcc.n	80089a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3724      	adds	r7, #36	; 0x24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b08b      	sub	sp, #44	; 0x2c
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	4613      	mov	r3, r2
 80089fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	089b      	lsrs	r3, r3, #2
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	f003 0303 	and.w	r3, r3, #3
 8008a12:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a14:	2300      	movs	r3, #0
 8008a16:	623b      	str	r3, [r7, #32]
 8008a18:	e014      	b.n	8008a44 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	3301      	adds	r3, #1
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	3301      	adds	r3, #1
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	3301      	adds	r3, #1
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	3301      	adds	r3, #1
 8008a42:	623b      	str	r3, [r7, #32]
 8008a44:	6a3a      	ldr	r2, [r7, #32]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d3e6      	bcc.n	8008a1a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a4c:	8bfb      	ldrh	r3, [r7, #30]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01e      	beq.n	8008a90 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	701a      	strb	r2, [r3, #0]
      i++;
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	3301      	adds	r3, #1
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a84:	8bfb      	ldrh	r3, [r7, #30]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a8a:	8bfb      	ldrh	r3, [r7, #30]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1ea      	bne.n	8008a66 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	372c      	adds	r7, #44	; 0x2c
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d12c      	bne.n	8008b14 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db12      	blt.n	8008af2 <USB_EPSetStall+0x54>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00f      	beq.n	8008af2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008af0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	e02b      	b.n	8008b6c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	db12      	blt.n	8008b4c <USB_EPSetStall+0xae>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00f      	beq.n	8008b4c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b4a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d128      	bne.n	8008be8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	78db      	ldrb	r3, [r3, #3]
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d003      	beq.n	8008bc6 <USB_EPClearStall+0x4c>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	78db      	ldrb	r3, [r3, #3]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d138      	bne.n	8008c38 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	e027      	b.n	8008c38 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d003      	beq.n	8008c18 <USB_EPClearStall+0x9e>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	78db      	ldrb	r3, [r3, #3]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d10f      	bne.n	8008c38 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c36:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c68:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c80:	4313      	orrs	r3, r2
 8008c82:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cac:	f023 0303 	bic.w	r3, r3, #3
 8008cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cc0:	f023 0302 	bic.w	r3, r3, #2
 8008cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cee:	f023 0303 	bic.w	r3, r3, #3
 8008cf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d02:	f043 0302 	orr.w	r3, r3, #2
 8008d06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	0c1b      	lsrs	r3, r3, #16
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	4013      	ands	r3, r2
 8008d92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	b29b      	uxth	r3, r3
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e02:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e10:	01db      	lsls	r3, r3, #7
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f003 0301 	and.w	r3, r3, #1
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e72:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e76:	f023 0307 	bic.w	r3, r3, #7
 8008e7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	333c      	adds	r3, #60	; 0x3c
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <USB_EP0_OutStart+0xb8>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d90a      	bls.n	8008eda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed4:	d101      	bne.n	8008eda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e037      	b.n	8008f4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f08:	f043 0318 	orr.w	r3, r3, #24
 8008f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d10f      	bne.n	8008f48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	4f54300a 	.word	0x4f54300a

08008f5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	4a13      	ldr	r2, [pc, #76]	; (8008fbc <USB_CoreReset+0x60>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d901      	bls.n	8008f78 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e01a      	b.n	8008fae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	daf3      	bge.n	8008f68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f043 0201 	orr.w	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <USB_CoreReset+0x60>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d901      	bls.n	8008fa0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d0f1      	beq.n	8008f90 <USB_CoreReset+0x34>

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	00030d40 	.word	0x00030d40

08008fc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fd0:	f002 f972 	bl	800b2b8 <USBD_static_malloc>
 8008fd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d105      	bne.n	8008fe8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e066      	b.n	80090b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	7c1b      	ldrb	r3, [r3, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d119      	bne.n	800902c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	2181      	movs	r1, #129	; 0x81
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f002 f836 	bl	800b072 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800900c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009010:	2202      	movs	r2, #2
 8009012:	2101      	movs	r1, #1
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 f82c 	bl	800b072 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2210      	movs	r2, #16
 8009026:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800902a:	e016      	b.n	800905a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	2202      	movs	r2, #2
 8009030:	2181      	movs	r1, #129	; 0x81
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f002 f81d 	bl	800b072 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800903e:	2340      	movs	r3, #64	; 0x40
 8009040:	2202      	movs	r2, #2
 8009042:	2101      	movs	r1, #1
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f002 f814 	bl	800b072 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2210      	movs	r2, #16
 8009056:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800905a:	2308      	movs	r3, #8
 800905c:	2203      	movs	r2, #3
 800905e:	2182      	movs	r1, #130	; 0x82
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f002 f806 	bl	800b072 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	7c1b      	ldrb	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d109      	bne.n	80090a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800909a:	2101      	movs	r1, #1
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f002 f8d7 	bl	800b250 <USBD_LL_PrepareReceive>
 80090a2:	e007      	b.n	80090b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090aa:	2340      	movs	r3, #64	; 0x40
 80090ac:	2101      	movs	r1, #1
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f002 f8ce 	bl	800b250 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090ca:	2181      	movs	r1, #129	; 0x81
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 fff6 	bl	800b0be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090d8:	2101      	movs	r1, #1
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 ffef 	bl	800b0be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090e8:	2182      	movs	r1, #130	; 0x82
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 ffe7 	bl	800b0be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800911a:	4618      	mov	r0, r3
 800911c:	f002 f8da 	bl	800b2d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009144:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009158:	2303      	movs	r3, #3
 800915a:	e0af      	b.n	80092bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009164:	2b00      	cmp	r3, #0
 8009166:	d03f      	beq.n	80091e8 <USBD_CDC_Setup+0xb4>
 8009168:	2b20      	cmp	r3, #32
 800916a:	f040 809f 	bne.w	80092ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88db      	ldrh	r3, [r3, #6]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d02e      	beq.n	80091d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	b25b      	sxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	da16      	bge.n	80091ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800918c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	88d2      	ldrh	r2, [r2, #6]
 8009192:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	88db      	ldrh	r3, [r3, #6]
 8009198:	2b07      	cmp	r3, #7
 800919a:	bf28      	it	cs
 800919c:	2307      	movcs	r3, #7
 800919e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	89fa      	ldrh	r2, [r7, #14]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 fb19 	bl	800a7de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80091ac:	e085      	b.n	80092ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	785a      	ldrb	r2, [r3, #1]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	88db      	ldrh	r3, [r3, #6]
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80091c4:	6939      	ldr	r1, [r7, #16]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	88db      	ldrh	r3, [r3, #6]
 80091ca:	461a      	mov	r2, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 fb32 	bl	800a836 <USBD_CtlPrepareRx>
      break;
 80091d2:	e072      	b.n	80092ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	7850      	ldrb	r0, [r2, #1]
 80091e0:	2200      	movs	r2, #0
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	4798      	blx	r3
      break;
 80091e6:	e068      	b.n	80092ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785b      	ldrb	r3, [r3, #1]
 80091ec:	2b0b      	cmp	r3, #11
 80091ee:	d852      	bhi.n	8009296 <USBD_CDC_Setup+0x162>
 80091f0:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <USBD_CDC_Setup+0xc4>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	08009229 	.word	0x08009229
 80091fc:	080092a5 	.word	0x080092a5
 8009200:	08009297 	.word	0x08009297
 8009204:	08009297 	.word	0x08009297
 8009208:	08009297 	.word	0x08009297
 800920c:	08009297 	.word	0x08009297
 8009210:	08009297 	.word	0x08009297
 8009214:	08009297 	.word	0x08009297
 8009218:	08009297 	.word	0x08009297
 800921c:	08009297 	.word	0x08009297
 8009220:	08009253 	.word	0x08009253
 8009224:	0800927d 	.word	0x0800927d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b03      	cmp	r3, #3
 8009232:	d107      	bne.n	8009244 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009234:	f107 030a 	add.w	r3, r7, #10
 8009238:	2202      	movs	r2, #2
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 face 	bl	800a7de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009242:	e032      	b.n	80092aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fa58 	bl	800a6fc <USBD_CtlError>
            ret = USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	75fb      	strb	r3, [r7, #23]
          break;
 8009250:	e02b      	b.n	80092aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b03      	cmp	r3, #3
 800925c:	d107      	bne.n	800926e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800925e:	f107 030d 	add.w	r3, r7, #13
 8009262:	2201      	movs	r2, #1
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 fab9 	bl	800a7de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800926c:	e01d      	b.n	80092aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 fa43 	bl	800a6fc <USBD_CtlError>
            ret = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	75fb      	strb	r3, [r7, #23]
          break;
 800927a:	e016      	b.n	80092aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b03      	cmp	r3, #3
 8009286:	d00f      	beq.n	80092a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 fa36 	bl	800a6fc <USBD_CtlError>
            ret = USBD_FAIL;
 8009290:	2303      	movs	r3, #3
 8009292:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009294:	e008      	b.n	80092a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 fa2f 	bl	800a6fc <USBD_CtlError>
          ret = USBD_FAIL;
 800929e:	2303      	movs	r3, #3
 80092a0:	75fb      	strb	r3, [r7, #23]
          break;
 80092a2:	e002      	b.n	80092aa <USBD_CDC_Setup+0x176>
          break;
 80092a4:	bf00      	nop
 80092a6:	e008      	b.n	80092ba <USBD_CDC_Setup+0x186>
          break;
 80092a8:	bf00      	nop
      }
      break;
 80092aa:	e006      	b.n	80092ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 fa24 	bl	800a6fc <USBD_CtlError>
      ret = USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	75fb      	strb	r3, [r7, #23]
      break;
 80092b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e04f      	b.n	8009386 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	3318      	adds	r3, #24
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d029      	beq.n	8009358 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	3318      	adds	r3, #24
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	78f9      	ldrb	r1, [r7, #3]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	460b      	mov	r3, r1
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	1a5b      	subs	r3, r3, r1
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4403      	add	r3, r0
 8009324:	3344      	adds	r3, #68	; 0x44
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	fbb2 f1f3 	udiv	r1, r2, r3
 800932c:	fb03 f301 	mul.w	r3, r3, r1
 8009330:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009332:	2b00      	cmp	r3, #0
 8009334:	d110      	bne.n	8009358 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	3318      	adds	r3, #24
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800934a:	78f9      	ldrb	r1, [r7, #3]
 800934c:	2300      	movs	r3, #0
 800934e:	2200      	movs	r2, #0
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 ff5c 	bl	800b20e <USBD_LL_Transmit>
 8009356:	e015      	b.n	8009384 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e015      	b.n	80093dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 ff6c 	bl	800b292 <USBD_LL_GetRxDataSize>
 80093ba:	4602      	mov	r2, r0
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093d6:	4611      	mov	r1, r2
 80093d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e01b      	b.n	8009436 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d015      	beq.n	8009434 <USBD_CDC_EP0_RxReady+0x50>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800940e:	2bff      	cmp	r3, #255	; 0xff
 8009410:	d010      	beq.n	8009434 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009420:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009428:	b292      	uxth	r2, r2
 800942a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	22ff      	movs	r2, #255	; 0xff
 8009430:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2243      	movs	r2, #67	; 0x43
 800944c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800944e:	4b03      	ldr	r3, [pc, #12]	; (800945c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	200000d0 	.word	0x200000d0

08009460 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2243      	movs	r2, #67	; 0x43
 800946c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800946e:	4b03      	ldr	r3, [pc, #12]	; (800947c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	2000008c 	.word	0x2000008c

08009480 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2243      	movs	r2, #67	; 0x43
 800948c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800948e:	4b03      	ldr	r3, [pc, #12]	; (800949c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	20000114 	.word	0x20000114

080094a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	220a      	movs	r2, #10
 80094ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094ae:	4b03      	ldr	r3, [pc, #12]	; (80094bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20000048 	.word	0x20000048

080094c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e004      	b.n	80094de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b087      	sub	sp, #28
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	e008      	b.n	800951a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009536:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	e004      	b.n	800954c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009566:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009568:	2301      	movs	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009576:	2303      	movs	r3, #3
 8009578:	e01a      	b.n	80095b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009580:	2b00      	cmp	r3, #0
 8009582:	d114      	bne.n	80095ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2201      	movs	r2, #1
 8009588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095a2:	2181      	movs	r1, #129	; 0x81
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 fe32 	bl	800b20e <USBD_LL_Transmit>

    ret = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e016      	b.n	8009604 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7c1b      	ldrb	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d109      	bne.n	80095f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095e8:	2101      	movs	r1, #1
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fe30 	bl	800b250 <USBD_LL_PrepareReceive>
 80095f0:	e007      	b.n	8009602 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	2101      	movs	r1, #1
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 fe27 	bl	800b250 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	e01f      	b.n	8009664 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	79fa      	ldrb	r2, [r7, #7]
 8009656:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f001 fca3 	bl	800afa4 <USBD_LL_Init>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	e016      	b.n	80096b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	f107 020e 	add.w	r2, r7, #14
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	4602      	mov	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f001 fcba 	bl	800b03c <USBD_LL_Start>
 80096c8:	4603      	mov	r3, r0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	78fa      	ldrb	r2, [r7, #3]
 800970c:	4611      	mov	r1, r2
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d007      	beq.n	8009746 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	4611      	mov	r1, r2
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
  }

  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 ff90 	bl	800a688 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009776:	461a      	mov	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009784:	f003 031f 	and.w	r3, r3, #31
 8009788:	2b02      	cmp	r3, #2
 800978a:	d01a      	beq.n	80097c2 <USBD_LL_SetupStage+0x72>
 800978c:	2b02      	cmp	r3, #2
 800978e:	d822      	bhi.n	80097d6 <USBD_LL_SetupStage+0x86>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <USBD_LL_SetupStage+0x4a>
 8009794:	2b01      	cmp	r3, #1
 8009796:	d00a      	beq.n	80097ae <USBD_LL_SetupStage+0x5e>
 8009798:	e01d      	b.n	80097d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa62 	bl	8009c6c <USBD_StdDevReq>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
      break;
 80097ac:	e020      	b.n	80097f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fac6 	bl	8009d48 <USBD_StdItfReq>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
      break;
 80097c0:	e016      	b.n	80097f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fb05 	bl	8009dda <USBD_StdEPReq>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]
      break;
 80097d4:	e00c      	b.n	80097f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fc89 	bl	800b0fc <USBD_LL_StallEP>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]
      break;
 80097ee:	bf00      	nop
  }

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	460b      	mov	r3, r1
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009808:	7afb      	ldrb	r3, [r7, #11]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d138      	bne.n	8009880 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009814:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800981c:	2b03      	cmp	r3, #3
 800981e:	d14a      	bne.n	80098b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	429a      	cmp	r2, r3
 800982a:	d913      	bls.n	8009854 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	1ad2      	subs	r2, r2, r3
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	4293      	cmp	r3, r2
 8009844:	bf28      	it	cs
 8009846:	4613      	movcs	r3, r2
 8009848:	461a      	mov	r2, r3
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f001 f80f 	bl	800a870 <USBD_CtlContinueRx>
 8009852:	e030      	b.n	80098b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b03      	cmp	r3, #3
 800985e:	d10b      	bne.n	8009878 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f001 f80a 	bl	800a892 <USBD_CtlSendStatus>
 800987e:	e01a      	b.n	80098b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b03      	cmp	r3, #3
 800988a:	d114      	bne.n	80098b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00e      	beq.n	80098b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	7afa      	ldrb	r2, [r7, #11]
 80098a2:	4611      	mov	r1, r2
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	4798      	blx	r3
 80098a8:	4603      	mov	r3, r0
 80098aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	e000      	b.n	80098b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	460b      	mov	r3, r1
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d16b      	bne.n	80099ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3314      	adds	r3, #20
 80098d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d156      	bne.n	8009992 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d914      	bls.n	800991a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	1ad2      	subs	r2, r2, r3
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	461a      	mov	r2, r3
 8009904:	6879      	ldr	r1, [r7, #4]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 ff84 	bl	800a814 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800990c:	2300      	movs	r3, #0
 800990e:	2200      	movs	r2, #0
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f001 fc9c 	bl	800b250 <USBD_LL_PrepareReceive>
 8009918:	e03b      	b.n	8009992 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	d11c      	bne.n	8009960 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800992e:	429a      	cmp	r2, r3
 8009930:	d316      	bcc.n	8009960 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800993c:	429a      	cmp	r2, r3
 800993e:	d20f      	bcs.n	8009960 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009940:	2200      	movs	r2, #0
 8009942:	2100      	movs	r1, #0
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 ff65 	bl	800a814 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009952:	2300      	movs	r3, #0
 8009954:	2200      	movs	r2, #0
 8009956:	2100      	movs	r1, #0
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f001 fc79 	bl	800b250 <USBD_LL_PrepareReceive>
 800995e:	e018      	b.n	8009992 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b03      	cmp	r3, #3
 800996a:	d10b      	bne.n	8009984 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009984:	2180      	movs	r1, #128	; 0x80
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f001 fbb8 	bl	800b0fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 ff93 	bl	800a8b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009998:	2b01      	cmp	r3, #1
 800999a:	d122      	bne.n	80099e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fe98 	bl	80096d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099aa:	e01a      	b.n	80099e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d114      	bne.n	80099e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00e      	beq.n	80099e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	7afa      	ldrb	r2, [r7, #11]
 80099ce:	4611      	mov	r1, r2
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	4798      	blx	r3
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	e000      	b.n	80099e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e02f      	b.n	8009a80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00f      	beq.n	8009a4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d009      	beq.n	8009a4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6852      	ldr	r2, [r2, #4]
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	4611      	mov	r1, r2
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a4a:	2340      	movs	r3, #64	; 0x40
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2100      	movs	r1, #0
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f001 fb0e 	bl	800b072 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2240      	movs	r2, #64	; 0x40
 8009a62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2180      	movs	r1, #128	; 0x80
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f001 fb00 	bl	800b072 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2240      	movs	r2, #64	; 0x40
 8009a7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d106      	bne.n	8009af6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e012      	b.n	8009b40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d10b      	bne.n	8009b3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e014      	b.n	8009b8c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d10d      	bne.n	8009b8a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	4611      	mov	r1, r2
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e014      	b.n	8009bd8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d10d      	bne.n	8009bd6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6852      	ldr	r2, [r2, #4]
 8009c1c:	b2d2      	uxtb	r2, r2
 8009c1e:	4611      	mov	r1, r2
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	4798      	blx	r3
  }

  return USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b087      	sub	sp, #28
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	3301      	adds	r3, #1
 8009c44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c4c:	8a3b      	ldrh	r3, [r7, #16]
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	b21a      	sxth	r2, r3
 8009c52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	b21b      	sxth	r3, r3
 8009c5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c5c:	89fb      	ldrh	r3, [r7, #14]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	371c      	adds	r7, #28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c82:	2b40      	cmp	r3, #64	; 0x40
 8009c84:	d005      	beq.n	8009c92 <USBD_StdDevReq+0x26>
 8009c86:	2b40      	cmp	r3, #64	; 0x40
 8009c88:	d853      	bhi.n	8009d32 <USBD_StdDevReq+0xc6>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <USBD_StdDevReq+0x3a>
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d14f      	bne.n	8009d32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca4:	e04a      	b.n	8009d3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2b09      	cmp	r3, #9
 8009cac:	d83b      	bhi.n	8009d26 <USBD_StdDevReq+0xba>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <USBD_StdDevReq+0x48>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009d09 	.word	0x08009d09
 8009cb8:	08009d1d 	.word	0x08009d1d
 8009cbc:	08009d27 	.word	0x08009d27
 8009cc0:	08009d13 	.word	0x08009d13
 8009cc4:	08009d27 	.word	0x08009d27
 8009cc8:	08009ce7 	.word	0x08009ce7
 8009ccc:	08009cdd 	.word	0x08009cdd
 8009cd0:	08009d27 	.word	0x08009d27
 8009cd4:	08009cff 	.word	0x08009cff
 8009cd8:	08009cf1 	.word	0x08009cf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f9de 	bl	800a0a0 <USBD_GetDescriptor>
          break;
 8009ce4:	e024      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fb43 	bl	800a374 <USBD_SetAddress>
          break;
 8009cee:	e01f      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fb82 	bl	800a3fc <USBD_SetConfig>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
          break;
 8009cfc:	e018      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fc21 	bl	800a548 <USBD_GetConfig>
          break;
 8009d06:	e013      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fc52 	bl	800a5b4 <USBD_GetStatus>
          break;
 8009d10:	e00e      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fc81 	bl	800a61c <USBD_SetFeature>
          break;
 8009d1a:	e009      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fc90 	bl	800a644 <USBD_ClrFeature>
          break;
 8009d24:	e004      	b.n	8009d30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fce7 	bl	800a6fc <USBD_CtlError>
          break;
 8009d2e:	bf00      	nop
      }
      break;
 8009d30:	e004      	b.n	8009d3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fce1 	bl	800a6fc <USBD_CtlError>
      break;
 8009d3a:	bf00      	nop
  }

  return ret;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop

08009d48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d005      	beq.n	8009d6e <USBD_StdItfReq+0x26>
 8009d62:	2b40      	cmp	r3, #64	; 0x40
 8009d64:	d82f      	bhi.n	8009dc6 <USBD_StdItfReq+0x7e>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <USBD_StdItfReq+0x26>
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	d12b      	bne.n	8009dc6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d81d      	bhi.n	8009db8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	889b      	ldrh	r3, [r3, #4]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d813      	bhi.n	8009dae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	4798      	blx	r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	88db      	ldrh	r3, [r3, #6]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d110      	bne.n	8009dc2 <USBD_StdItfReq+0x7a>
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10d      	bne.n	8009dc2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fd73 	bl	800a892 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dac:	e009      	b.n	8009dc2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fca3 	bl	800a6fc <USBD_CtlError>
          break;
 8009db6:	e004      	b.n	8009dc2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fc9e 	bl	800a6fc <USBD_CtlError>
          break;
 8009dc0:	e000      	b.n	8009dc4 <USBD_StdItfReq+0x7c>
          break;
 8009dc2:	bf00      	nop
      }
      break;
 8009dc4:	e004      	b.n	8009dd0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fc97 	bl	800a6fc <USBD_CtlError>
      break;
 8009dce:	bf00      	nop
  }

  return ret;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	889b      	ldrh	r3, [r3, #4]
 8009dec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009df6:	2b40      	cmp	r3, #64	; 0x40
 8009df8:	d007      	beq.n	8009e0a <USBD_StdEPReq+0x30>
 8009dfa:	2b40      	cmp	r3, #64	; 0x40
 8009dfc:	f200 8145 	bhi.w	800a08a <USBD_StdEPReq+0x2b0>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00c      	beq.n	8009e1e <USBD_StdEPReq+0x44>
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	f040 8140 	bne.w	800a08a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4798      	blx	r3
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1c:	e13a      	b.n	800a094 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	785b      	ldrb	r3, [r3, #1]
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d007      	beq.n	8009e36 <USBD_StdEPReq+0x5c>
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	f300 8129 	bgt.w	800a07e <USBD_StdEPReq+0x2a4>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d07f      	beq.n	8009f30 <USBD_StdEPReq+0x156>
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d03c      	beq.n	8009eae <USBD_StdEPReq+0xd4>
 8009e34:	e123      	b.n	800a07e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d002      	beq.n	8009e48 <USBD_StdEPReq+0x6e>
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d016      	beq.n	8009e74 <USBD_StdEPReq+0x9a>
 8009e46:	e02c      	b.n	8009ea2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00d      	beq.n	8009e6a <USBD_StdEPReq+0x90>
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b80      	cmp	r3, #128	; 0x80
 8009e52:	d00a      	beq.n	8009e6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f94f 	bl	800b0fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e5e:	2180      	movs	r1, #128	; 0x80
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f94b 	bl	800b0fc <USBD_LL_StallEP>
 8009e66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e68:	e020      	b.n	8009eac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc45 	bl	800a6fc <USBD_CtlError>
              break;
 8009e72:	e01b      	b.n	8009eac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	885b      	ldrh	r3, [r3, #2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10e      	bne.n	8009e9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00b      	beq.n	8009e9a <USBD_StdEPReq+0xc0>
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	2b80      	cmp	r3, #128	; 0x80
 8009e86:	d008      	beq.n	8009e9a <USBD_StdEPReq+0xc0>
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	88db      	ldrh	r3, [r3, #6]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f931 	bl	800b0fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fcf9 	bl	800a892 <USBD_CtlSendStatus>

              break;
 8009ea0:	e004      	b.n	8009eac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fc29 	bl	800a6fc <USBD_CtlError>
              break;
 8009eaa:	bf00      	nop
          }
          break;
 8009eac:	e0ec      	b.n	800a088 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d002      	beq.n	8009ec0 <USBD_StdEPReq+0xe6>
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d016      	beq.n	8009eec <USBD_StdEPReq+0x112>
 8009ebe:	e030      	b.n	8009f22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <USBD_StdEPReq+0x108>
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b80      	cmp	r3, #128	; 0x80
 8009eca:	d00a      	beq.n	8009ee2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f913 	bl	800b0fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ed6:	2180      	movs	r1, #128	; 0x80
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f90f 	bl	800b0fc <USBD_LL_StallEP>
 8009ede:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ee0:	e025      	b.n	8009f2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fc09 	bl	800a6fc <USBD_CtlError>
              break;
 8009eea:	e020      	b.n	8009f2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	885b      	ldrh	r3, [r3, #2]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11b      	bne.n	8009f2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 f919 	bl	800b13a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fcc2 	bl	800a892 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f20:	e004      	b.n	8009f2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fbe9 	bl	800a6fc <USBD_CtlError>
              break;
 8009f2a:	e000      	b.n	8009f2e <USBD_StdEPReq+0x154>
              break;
 8009f2c:	bf00      	nop
          }
          break;
 8009f2e:	e0ab      	b.n	800a088 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d002      	beq.n	8009f42 <USBD_StdEPReq+0x168>
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d032      	beq.n	8009fa6 <USBD_StdEPReq+0x1cc>
 8009f40:	e097      	b.n	800a072 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d007      	beq.n	8009f58 <USBD_StdEPReq+0x17e>
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	2b80      	cmp	r3, #128	; 0x80
 8009f4c:	d004      	beq.n	8009f58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fbd3 	bl	800a6fc <USBD_CtlError>
                break;
 8009f56:	e091      	b.n	800a07c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	da0b      	bge.n	8009f78 <USBD_StdEPReq+0x19e>
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	3310      	adds	r3, #16
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4413      	add	r3, r2
 8009f74:	3304      	adds	r3, #4
 8009f76:	e00b      	b.n	8009f90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	3304      	adds	r3, #4
 8009f90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fc1d 	bl	800a7de <USBD_CtlSendData>
              break;
 8009fa4:	e06a      	b.n	800a07c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da11      	bge.n	8009fd2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	3324      	adds	r3, #36	; 0x24
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d117      	bne.n	8009ff8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fb96 	bl	800a6fc <USBD_CtlError>
                  break;
 8009fd0:	e054      	b.n	800a07c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	f003 020f 	and.w	r2, r3, #15
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fb83 	bl	800a6fc <USBD_CtlError>
                  break;
 8009ff6:	e041      	b.n	800a07c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	da0b      	bge.n	800a018 <USBD_StdEPReq+0x23e>
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	3310      	adds	r3, #16
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	3304      	adds	r3, #4
 800a016:	e00b      	b.n	800a030 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	3304      	adds	r3, #4
 800a030:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <USBD_StdEPReq+0x264>
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b80      	cmp	r3, #128	; 0x80
 800a03c:	d103      	bne.n	800a046 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	e00e      	b.n	800a064 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 f894 	bl	800b178 <USBD_LL_IsStallEP>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2201      	movs	r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e002      	b.n	800a064 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2200      	movs	r2, #0
 800a062:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2202      	movs	r2, #2
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fbb7 	bl	800a7de <USBD_CtlSendData>
              break;
 800a070:	e004      	b.n	800a07c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fb41 	bl	800a6fc <USBD_CtlError>
              break;
 800a07a:	bf00      	nop
          }
          break;
 800a07c:	e004      	b.n	800a088 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb3b 	bl	800a6fc <USBD_CtlError>
          break;
 800a086:	bf00      	nop
      }
      break;
 800a088:	e004      	b.n	800a094 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fb35 	bl	800a6fc <USBD_CtlError>
      break;
 800a092:	bf00      	nop
  }

  return ret;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	2b06      	cmp	r3, #6
 800a0c2:	f200 8128 	bhi.w	800a316 <USBD_GetDescriptor+0x276>
 800a0c6:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <USBD_GetDescriptor+0x2c>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a0e9 	.word	0x0800a0e9
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a141 	.word	0x0800a141
 800a0d8:	0800a317 	.word	0x0800a317
 800a0dc:	0800a317 	.word	0x0800a317
 800a0e0:	0800a2b7 	.word	0x0800a2b7
 800a0e4:	0800a2e3 	.word	0x0800a2e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	7c12      	ldrb	r2, [r2, #16]
 800a0f4:	f107 0108 	add.w	r1, r7, #8
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	4798      	blx	r3
 800a0fc:	60f8      	str	r0, [r7, #12]
      break;
 800a0fe:	e112      	b.n	800a326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	7c1b      	ldrb	r3, [r3, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10d      	bne.n	800a124 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	f107 0208 	add.w	r2, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3301      	adds	r3, #1
 800a11e:	2202      	movs	r2, #2
 800a120:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a122:	e100      	b.n	800a326 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	f107 0208 	add.w	r2, r7, #8
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3301      	adds	r3, #1
 800a13a:	2202      	movs	r2, #2
 800a13c:	701a      	strb	r2, [r3, #0]
      break;
 800a13e:	e0f2      	b.n	800a326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	885b      	ldrh	r3, [r3, #2]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b05      	cmp	r3, #5
 800a148:	f200 80ac 	bhi.w	800a2a4 <USBD_GetDescriptor+0x204>
 800a14c:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBD_GetDescriptor+0xb4>)
 800a14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a152:	bf00      	nop
 800a154:	0800a16d 	.word	0x0800a16d
 800a158:	0800a1a1 	.word	0x0800a1a1
 800a15c:	0800a1d5 	.word	0x0800a1d5
 800a160:	0800a209 	.word	0x0800a209
 800a164:	0800a23d 	.word	0x0800a23d
 800a168:	0800a271 	.word	0x0800a271
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	7c12      	ldrb	r2, [r2, #16]
 800a184:	f107 0108 	add.w	r1, r7, #8
 800a188:	4610      	mov	r0, r2
 800a18a:	4798      	blx	r3
 800a18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a18e:	e091      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fab2 	bl	800a6fc <USBD_CtlError>
            err++;
 800a198:	7afb      	ldrb	r3, [r7, #11]
 800a19a:	3301      	adds	r3, #1
 800a19c:	72fb      	strb	r3, [r7, #11]
          break;
 800a19e:	e089      	b.n	800a2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7c12      	ldrb	r2, [r2, #16]
 800a1b8:	f107 0108 	add.w	r1, r7, #8
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4798      	blx	r3
 800a1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1c2:	e077      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fa98 	bl	800a6fc <USBD_CtlError>
            err++;
 800a1cc:	7afb      	ldrb	r3, [r7, #11]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1d2:	e06f      	b.n	800a2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00b      	beq.n	800a1f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	7c12      	ldrb	r2, [r2, #16]
 800a1ec:	f107 0108 	add.w	r1, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1f6:	e05d      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa7e 	bl	800a6fc <USBD_CtlError>
            err++;
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	3301      	adds	r3, #1
 800a204:	72fb      	strb	r3, [r7, #11]
          break;
 800a206:	e055      	b.n	800a2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	7c12      	ldrb	r2, [r2, #16]
 800a220:	f107 0108 	add.w	r1, r7, #8
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22a:	e043      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa64 	bl	800a6fc <USBD_CtlError>
            err++;
 800a234:	7afb      	ldrb	r3, [r7, #11]
 800a236:	3301      	adds	r3, #1
 800a238:	72fb      	strb	r3, [r7, #11]
          break;
 800a23a:	e03b      	b.n	800a2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7c12      	ldrb	r2, [r2, #16]
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a25e:	e029      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa4a 	bl	800a6fc <USBD_CtlError>
            err++;
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	3301      	adds	r3, #1
 800a26c:	72fb      	strb	r3, [r7, #11]
          break;
 800a26e:	e021      	b.n	800a2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7c12      	ldrb	r2, [r2, #16]
 800a288:	f107 0108 	add.w	r1, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a292:	e00f      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa30 	bl	800a6fc <USBD_CtlError>
            err++;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a2:	e007      	b.n	800a2b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fa28 	bl	800a6fc <USBD_CtlError>
          err++;
 800a2ac:	7afb      	ldrb	r3, [r7, #11]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a2b2:	bf00      	nop
      }
      break;
 800a2b4:	e037      	b.n	800a326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	7c1b      	ldrb	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	f107 0208 	add.w	r2, r7, #8
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4798      	blx	r3
 800a2ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2d0:	e029      	b.n	800a326 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa11 	bl	800a6fc <USBD_CtlError>
        err++;
 800a2da:	7afb      	ldrb	r3, [r7, #11]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	72fb      	strb	r3, [r7, #11]
      break;
 800a2e0:	e021      	b.n	800a326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	7c1b      	ldrb	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10d      	bne.n	800a306 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f2:	f107 0208 	add.w	r2, r7, #8
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	4798      	blx	r3
 800a2fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3301      	adds	r3, #1
 800a300:	2207      	movs	r2, #7
 800a302:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a304:	e00f      	b.n	800a326 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9f7 	bl	800a6fc <USBD_CtlError>
        err++;
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	3301      	adds	r3, #1
 800a312:	72fb      	strb	r3, [r7, #11]
      break;
 800a314:	e007      	b.n	800a326 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f9ef 	bl	800a6fc <USBD_CtlError>
      err++;
 800a31e:	7afb      	ldrb	r3, [r7, #11]
 800a320:	3301      	adds	r3, #1
 800a322:	72fb      	strb	r3, [r7, #11]
      break;
 800a324:	bf00      	nop
  }

  if (err != 0U)
 800a326:	7afb      	ldrb	r3, [r7, #11]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d11e      	bne.n	800a36a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	88db      	ldrh	r3, [r3, #6]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d016      	beq.n	800a362 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a334:	893b      	ldrh	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00e      	beq.n	800a358 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	88da      	ldrh	r2, [r3, #6]
 800a33e:	893b      	ldrh	r3, [r7, #8]
 800a340:	4293      	cmp	r3, r2
 800a342:	bf28      	it	cs
 800a344:	4613      	movcs	r3, r2
 800a346:	b29b      	uxth	r3, r3
 800a348:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a34a:	893b      	ldrh	r3, [r7, #8]
 800a34c:	461a      	mov	r2, r3
 800a34e:	68f9      	ldr	r1, [r7, #12]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fa44 	bl	800a7de <USBD_CtlSendData>
 800a356:	e009      	b.n	800a36c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9ce 	bl	800a6fc <USBD_CtlError>
 800a360:	e004      	b.n	800a36c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa95 	bl	800a892 <USBD_CtlSendStatus>
 800a368:	e000      	b.n	800a36c <USBD_GetDescriptor+0x2cc>
    return;
 800a36a:	bf00      	nop
  }
}
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop

0800a374 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	889b      	ldrh	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d131      	bne.n	800a3ea <USBD_SetAddress+0x76>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	88db      	ldrh	r3, [r3, #6]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d12d      	bne.n	800a3ea <USBD_SetAddress+0x76>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	885b      	ldrh	r3, [r3, #2]
 800a392:	2b7f      	cmp	r3, #127	; 0x7f
 800a394:	d829      	bhi.n	800a3ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	885b      	ldrh	r3, [r3, #2]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d104      	bne.n	800a3b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f9a3 	bl	800a6fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b6:	e01d      	b.n	800a3f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7bfa      	ldrb	r2, [r7, #15]
 800a3bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 ff03 	bl	800b1d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa61 	bl	800a892 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3de:	e009      	b.n	800a3f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e8:	e004      	b.n	800a3f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f985 	bl	800a6fc <USBD_CtlError>
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	885b      	ldrh	r3, [r3, #2]
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	4b4c      	ldr	r3, [pc, #304]	; (800a544 <USBD_SetConfig+0x148>)
 800a412:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a414:	4b4b      	ldr	r3, [pc, #300]	; (800a544 <USBD_SetConfig+0x148>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d905      	bls.n	800a428 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f96c 	bl	800a6fc <USBD_CtlError>
    return USBD_FAIL;
 800a424:	2303      	movs	r3, #3
 800a426:	e088      	b.n	800a53a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d002      	beq.n	800a43a <USBD_SetConfig+0x3e>
 800a434:	2b03      	cmp	r3, #3
 800a436:	d025      	beq.n	800a484 <USBD_SetConfig+0x88>
 800a438:	e071      	b.n	800a51e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a43a:	4b42      	ldr	r3, [pc, #264]	; (800a544 <USBD_SetConfig+0x148>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d01c      	beq.n	800a47c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a442:	4b40      	ldr	r3, [pc, #256]	; (800a544 <USBD_SetConfig+0x148>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a44c:	4b3d      	ldr	r3, [pc, #244]	; (800a544 <USBD_SetConfig+0x148>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff f948 	bl	80096e8 <USBD_SetClassConfig>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f949 	bl	800a6fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a46a:	e065      	b.n	800a538 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fa10 	bl	800a892 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2203      	movs	r2, #3
 800a476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a47a:	e05d      	b.n	800a538 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fa08 	bl	800a892 <USBD_CtlSendStatus>
      break;
 800a482:	e059      	b.n	800a538 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a484:	4b2f      	ldr	r3, [pc, #188]	; (800a544 <USBD_SetConfig+0x148>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d112      	bne.n	800a4b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a494:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <USBD_SetConfig+0x148>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a49e:	4b29      	ldr	r3, [pc, #164]	; (800a544 <USBD_SetConfig+0x148>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff f93b 	bl	8009720 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f9f1 	bl	800a892 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4b0:	e042      	b.n	800a538 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a4b2:	4b24      	ldr	r3, [pc, #144]	; (800a544 <USBD_SetConfig+0x148>)
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d02a      	beq.n	800a516 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff f929 	bl	8009720 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4ce:	4b1d      	ldr	r3, [pc, #116]	; (800a544 <USBD_SetConfig+0x148>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4d8:	4b1a      	ldr	r3, [pc, #104]	; (800a544 <USBD_SetConfig+0x148>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff f902 	bl	80096e8 <USBD_SetClassConfig>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00f      	beq.n	800a50e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f903 	bl	800a6fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff f90e 	bl	8009720 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a50c:	e014      	b.n	800a538 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f9bf 	bl	800a892 <USBD_CtlSendStatus>
      break;
 800a514:	e010      	b.n	800a538 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f9bb 	bl	800a892 <USBD_CtlSendStatus>
      break;
 800a51c:	e00c      	b.n	800a538 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f8eb 	bl	800a6fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a526:	4b07      	ldr	r3, [pc, #28]	; (800a544 <USBD_SetConfig+0x148>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff f8f7 	bl	8009720 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	73fb      	strb	r3, [r7, #15]
      break;
 800a536:	bf00      	nop
  }

  return ret;
 800a538:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	2000065e 	.word	0x2000065e

0800a548 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	88db      	ldrh	r3, [r3, #6]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d004      	beq.n	800a564 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f8cd 	bl	800a6fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a562:	e023      	b.n	800a5ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	dc02      	bgt.n	800a576 <USBD_GetConfig+0x2e>
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc03      	bgt.n	800a57c <USBD_GetConfig+0x34>
 800a574:	e015      	b.n	800a5a2 <USBD_GetConfig+0x5a>
 800a576:	2b03      	cmp	r3, #3
 800a578:	d00b      	beq.n	800a592 <USBD_GetConfig+0x4a>
 800a57a:	e012      	b.n	800a5a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	3308      	adds	r3, #8
 800a586:	2201      	movs	r2, #1
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f927 	bl	800a7de <USBD_CtlSendData>
        break;
 800a590:	e00c      	b.n	800a5ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3304      	adds	r3, #4
 800a596:	2201      	movs	r2, #1
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f91f 	bl	800a7de <USBD_CtlSendData>
        break;
 800a5a0:	e004      	b.n	800a5ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f8a9 	bl	800a6fc <USBD_CtlError>
        break;
 800a5aa:	bf00      	nop
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d81e      	bhi.n	800a60a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	88db      	ldrh	r3, [r3, #6]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d004      	beq.n	800a5de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f890 	bl	800a6fc <USBD_CtlError>
        break;
 800a5dc:	e01a      	b.n	800a614 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d005      	beq.n	800a5fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f043 0202 	orr.w	r2, r3, #2
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	330c      	adds	r3, #12
 800a5fe:	2202      	movs	r2, #2
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f8eb 	bl	800a7de <USBD_CtlSendData>
      break;
 800a608:	e004      	b.n	800a614 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f875 	bl	800a6fc <USBD_CtlError>
      break;
 800a612:	bf00      	nop
  }
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	885b      	ldrh	r3, [r3, #2]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d106      	bne.n	800a63c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f92b 	bl	800a892 <USBD_CtlSendStatus>
  }
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a654:	b2db      	uxtb	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d80b      	bhi.n	800a674 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	885b      	ldrh	r3, [r3, #2]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d10c      	bne.n	800a67e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f910 	bl	800a892 <USBD_CtlSendStatus>
      }
      break;
 800a672:	e004      	b.n	800a67e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f840 	bl	800a6fc <USBD_CtlError>
      break;
 800a67c:	e000      	b.n	800a680 <USBD_ClrFeature+0x3c>
      break;
 800a67e:	bf00      	nop
  }
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff fabb 	bl	8009c2e <SWAPBYTE>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7ff faae 	bl	8009c2e <SWAPBYTE>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff faa1 	bl	8009c2e <SWAPBYTE>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	80da      	strh	r2, [r3, #6]
}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a706:	2180      	movs	r1, #128	; 0x80
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fcf7 	bl	800b0fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a70e:	2100      	movs	r1, #0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fcf3 	bl	800b0fc <USBD_LL_StallEP>
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b086      	sub	sp, #24
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d036      	beq.n	800a7a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a738:	6938      	ldr	r0, [r7, #16]
 800a73a:	f000 f836 	bl	800a7aa <USBD_GetLen>
 800a73e:	4603      	mov	r3, r0
 800a740:	3301      	adds	r3, #1
 800a742:	b29b      	uxth	r3, r3
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	4413      	add	r3, r2
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	701a      	strb	r2, [r3, #0]
  idx++;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	3301      	adds	r3, #1
 800a75c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	2203      	movs	r2, #3
 800a766:	701a      	strb	r2, [r3, #0]
  idx++;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	3301      	adds	r3, #1
 800a76c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a76e:	e013      	b.n	800a798 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	4413      	add	r3, r2
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	7812      	ldrb	r2, [r2, #0]
 800a77a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3301      	adds	r3, #1
 800a780:	613b      	str	r3, [r7, #16]
    idx++;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	3301      	adds	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4413      	add	r3, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	701a      	strb	r2, [r3, #0]
    idx++;
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	3301      	adds	r3, #1
 800a796:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e7      	bne.n	800a770 <USBD_GetString+0x52>
 800a7a0:	e000      	b.n	800a7a4 <USBD_GetString+0x86>
    return;
 800a7a2:	bf00      	nop
  }
}
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7ba:	e005      	b.n	800a7c8 <USBD_GetLen+0x1e>
  {
    len++;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1f5      	bne.n	800a7bc <USBD_GetLen+0x12>
  }

  return len;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	2100      	movs	r1, #0
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fd02 	bl	800b20e <USBD_LL_Transmit>

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	2100      	movs	r1, #0
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 fcf1 	bl	800b20e <USBD_LL_Transmit>

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2203      	movs	r2, #3
 800a846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	2100      	movs	r1, #0
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fcf5 	bl	800b250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	2100      	movs	r1, #0
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 fce4 	bl	800b250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b082      	sub	sp, #8
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2204      	movs	r2, #4
 800a89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fcb0 	bl	800b20e <USBD_LL_Transmit>

  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fcbe 	bl	800b250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4912      	ldr	r1, [pc, #72]	; (800a930 <MX_USB_DEVICE_Init+0x50>)
 800a8e8:	4812      	ldr	r0, [pc, #72]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a8ea:	f7fe fe8f 	bl	800960c <USBD_Init>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8f4:	f7f7 f814 	bl	8001920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a8f8:	490f      	ldr	r1, [pc, #60]	; (800a938 <MX_USB_DEVICE_Init+0x58>)
 800a8fa:	480e      	ldr	r0, [pc, #56]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a8fc:	f7fe feb6 	bl	800966c <USBD_RegisterClass>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a906:	f7f7 f80b 	bl	8001920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a90a:	490c      	ldr	r1, [pc, #48]	; (800a93c <MX_USB_DEVICE_Init+0x5c>)
 800a90c:	4809      	ldr	r0, [pc, #36]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a90e:	f7fe fdd7 	bl	80094c0 <USBD_CDC_RegisterInterface>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a918:	f7f7 f802 	bl	8001920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a91c:	4805      	ldr	r0, [pc, #20]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a91e:	f7fe fecc 	bl	80096ba <USBD_Start>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a928:	f7f6 fffa 	bl	8001920 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a92c:	bf00      	nop
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	2000016c 	.word	0x2000016c
 800a934:	20000a88 	.word	0x20000a88
 800a938:	20000054 	.word	0x20000054
 800a93c:	20000158 	.word	0x20000158

0800a940 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a944:	2200      	movs	r2, #0
 800a946:	4905      	ldr	r1, [pc, #20]	; (800a95c <CDC_Init_FS+0x1c>)
 800a948:	4805      	ldr	r0, [pc, #20]	; (800a960 <CDC_Init_FS+0x20>)
 800a94a:	f7fe fdce 	bl	80094ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a94e:	4905      	ldr	r1, [pc, #20]	; (800a964 <CDC_Init_FS+0x24>)
 800a950:	4803      	ldr	r0, [pc, #12]	; (800a960 <CDC_Init_FS+0x20>)
 800a952:	f7fe fde8 	bl	8009526 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a956:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a958:	4618      	mov	r0, r3
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20001558 	.word	0x20001558
 800a960:	20000a88 	.word	0x20000a88
 800a964:	20000d58 	.word	0x20000d58

0800a968 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a96c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a96e:	4618      	mov	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
 800a984:	4613      	mov	r3, r2
 800a986:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	2b23      	cmp	r3, #35	; 0x23
 800a98c:	d84a      	bhi.n	800aa24 <CDC_Control_FS+0xac>
 800a98e:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <CDC_Control_FS+0x1c>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800aa25 	.word	0x0800aa25
 800a998:	0800aa25 	.word	0x0800aa25
 800a99c:	0800aa25 	.word	0x0800aa25
 800a9a0:	0800aa25 	.word	0x0800aa25
 800a9a4:	0800aa25 	.word	0x0800aa25
 800a9a8:	0800aa25 	.word	0x0800aa25
 800a9ac:	0800aa25 	.word	0x0800aa25
 800a9b0:	0800aa25 	.word	0x0800aa25
 800a9b4:	0800aa25 	.word	0x0800aa25
 800a9b8:	0800aa25 	.word	0x0800aa25
 800a9bc:	0800aa25 	.word	0x0800aa25
 800a9c0:	0800aa25 	.word	0x0800aa25
 800a9c4:	0800aa25 	.word	0x0800aa25
 800a9c8:	0800aa25 	.word	0x0800aa25
 800a9cc:	0800aa25 	.word	0x0800aa25
 800a9d0:	0800aa25 	.word	0x0800aa25
 800a9d4:	0800aa25 	.word	0x0800aa25
 800a9d8:	0800aa25 	.word	0x0800aa25
 800a9dc:	0800aa25 	.word	0x0800aa25
 800a9e0:	0800aa25 	.word	0x0800aa25
 800a9e4:	0800aa25 	.word	0x0800aa25
 800a9e8:	0800aa25 	.word	0x0800aa25
 800a9ec:	0800aa25 	.word	0x0800aa25
 800a9f0:	0800aa25 	.word	0x0800aa25
 800a9f4:	0800aa25 	.word	0x0800aa25
 800a9f8:	0800aa25 	.word	0x0800aa25
 800a9fc:	0800aa25 	.word	0x0800aa25
 800aa00:	0800aa25 	.word	0x0800aa25
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa25 	.word	0x0800aa25
 800aa0c:	0800aa25 	.word	0x0800aa25
 800aa10:	0800aa25 	.word	0x0800aa25
 800aa14:	0800aa25 	.word	0x0800aa25
 800aa18:	0800aa25 	.word	0x0800aa25
 800aa1c:	0800aa25 	.word	0x0800aa25
 800aa20:	0800aa25 	.word	0x0800aa25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa24:	bf00      	nop
  }

  return (USBD_OK);
 800aa26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	480f      	ldr	r0, [pc, #60]	; (800aa80 <CDC_Receive_FS+0x4c>)
 800aa42:	f7fe fd70 	bl	8009526 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa46:	480e      	ldr	r0, [pc, #56]	; (800aa80 <CDC_Receive_FS+0x4c>)
 800aa48:	f7fe fdb6 	bl	80095b8 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 800aa4c:	2240      	movs	r2, #64	; 0x40
 800aa4e:	2100      	movs	r1, #0
 800aa50:	480c      	ldr	r0, [pc, #48]	; (800aa84 <CDC_Receive_FS+0x50>)
 800aa52:	f000 fcad 	bl	800b3b0 <memset>
  uint8_t len = (uint8_t)*Len;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	4808      	ldr	r0, [pc, #32]	; (800aa84 <CDC_Receive_FS+0x50>)
 800aa64:	f000 fc96 	bl	800b394 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fc9e 	bl	800b3b0 <memset>

  return (USBD_OK);
 800aa74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000a88 	.word	0x20000a88
 800aa84:	2000098c 	.word	0x2000098c

0800aa88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa98:	4b0d      	ldr	r3, [pc, #52]	; (800aad0 <CDC_Transmit_FS+0x48>)
 800aa9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e00b      	b.n	800aac6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aaae:	887b      	ldrh	r3, [r7, #2]
 800aab0:	461a      	mov	r2, r3
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4806      	ldr	r0, [pc, #24]	; (800aad0 <CDC_Transmit_FS+0x48>)
 800aab6:	f7fe fd18 	bl	80094ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aaba:	4805      	ldr	r0, [pc, #20]	; (800aad0 <CDC_Transmit_FS+0x48>)
 800aabc:	f7fe fd4c 	bl	8009558 <USBD_CDC_TransmitPacket>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000a88 	.word	0x20000a88

0800aad4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	4613      	mov	r3, r2
 800aae0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	371c      	adds	r7, #28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4603      	mov	r3, r0
 800ab00:	6039      	str	r1, [r7, #0]
 800ab02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2212      	movs	r2, #18
 800ab08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab0a:	4b03      	ldr	r3, [pc, #12]	; (800ab18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	20000188 	.word	0x20000188

0800ab1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	6039      	str	r1, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab2e:	4b03      	ldr	r3, [pc, #12]	; (800ab3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	2000019c 	.word	0x2000019c

0800ab40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	4907      	ldr	r1, [pc, #28]	; (800ab74 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab56:	4808      	ldr	r0, [pc, #32]	; (800ab78 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab58:	f7ff fde1 	bl	800a71e <USBD_GetString>
 800ab5c:	e004      	b.n	800ab68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	4904      	ldr	r1, [pc, #16]	; (800ab74 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab62:	4805      	ldr	r0, [pc, #20]	; (800ab78 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab64:	f7ff fddb 	bl	800a71e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab68:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20001d58 	.word	0x20001d58
 800ab78:	0800b648 	.word	0x0800b648

0800ab7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	4904      	ldr	r1, [pc, #16]	; (800ab9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab8c:	4804      	ldr	r0, [pc, #16]	; (800aba0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab8e:	f7ff fdc6 	bl	800a71e <USBD_GetString>
  return USBD_StrDesc;
 800ab92:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20001d58 	.word	0x20001d58
 800aba0:	0800b65c 	.word	0x0800b65c

0800aba4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	6039      	str	r1, [r7, #0]
 800abae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	221a      	movs	r2, #26
 800abb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abb6:	f000 f843 	bl	800ac40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800abba:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	200001a0 	.word	0x200001a0

0800abc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	6039      	str	r1, [r7, #0]
 800abd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800abd4:	79fb      	ldrb	r3, [r7, #7]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	4907      	ldr	r1, [pc, #28]	; (800abfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800abde:	4808      	ldr	r0, [pc, #32]	; (800ac00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abe0:	f7ff fd9d 	bl	800a71e <USBD_GetString>
 800abe4:	e004      	b.n	800abf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	4904      	ldr	r1, [pc, #16]	; (800abfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800abea:	4805      	ldr	r0, [pc, #20]	; (800ac00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abec:	f7ff fd97 	bl	800a71e <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf0:	4b02      	ldr	r3, [pc, #8]	; (800abfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20001d58 	.word	0x20001d58
 800ac00:	0800b670 	.word	0x0800b670

0800ac04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d105      	bne.n	800ac22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4907      	ldr	r1, [pc, #28]	; (800ac38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac1a:	4808      	ldr	r0, [pc, #32]	; (800ac3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac1c:	f7ff fd7f 	bl	800a71e <USBD_GetString>
 800ac20:	e004      	b.n	800ac2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4904      	ldr	r1, [pc, #16]	; (800ac38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac26:	4805      	ldr	r0, [pc, #20]	; (800ac3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac28:	f7ff fd79 	bl	800a71e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20001d58 	.word	0x20001d58
 800ac3c:	0800b67c 	.word	0x0800b67c

0800ac40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac46:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <Get_SerialNum+0x44>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac4c:	4b0e      	ldr	r3, [pc, #56]	; (800ac88 <Get_SerialNum+0x48>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac52:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <Get_SerialNum+0x4c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d009      	beq.n	800ac7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac66:	2208      	movs	r2, #8
 800ac68:	4909      	ldr	r1, [pc, #36]	; (800ac90 <Get_SerialNum+0x50>)
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 f814 	bl	800ac98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac70:	2204      	movs	r2, #4
 800ac72:	4908      	ldr	r1, [pc, #32]	; (800ac94 <Get_SerialNum+0x54>)
 800ac74:	68b8      	ldr	r0, [r7, #8]
 800ac76:	f000 f80f 	bl	800ac98 <IntToUnicode>
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	1fff7a10 	.word	0x1fff7a10
 800ac88:	1fff7a14 	.word	0x1fff7a14
 800ac8c:	1fff7a18 	.word	0x1fff7a18
 800ac90:	200001a2 	.word	0x200001a2
 800ac94:	200001b2 	.word	0x200001b2

0800ac98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acaa:	2300      	movs	r3, #0
 800acac:	75fb      	strb	r3, [r7, #23]
 800acae:	e027      	b.n	800ad00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	0f1b      	lsrs	r3, r3, #28
 800acb4:	2b09      	cmp	r3, #9
 800acb6:	d80b      	bhi.n	800acd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	0f1b      	lsrs	r3, r3, #28
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	4619      	mov	r1, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	440b      	add	r3, r1
 800acc8:	3230      	adds	r2, #48	; 0x30
 800acca:	b2d2      	uxtb	r2, r2
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	e00a      	b.n	800ace6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	0f1b      	lsrs	r3, r3, #28
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	4619      	mov	r1, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	440b      	add	r3, r1
 800ace0:	3237      	adds	r2, #55	; 0x37
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	3301      	adds	r3, #1
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	4413      	add	r3, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	3301      	adds	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
 800ad00:	7dfa      	ldrb	r2, [r7, #23]
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d3d3      	bcc.n	800acb0 <IntToUnicode+0x18>
  }
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	371c      	adds	r7, #28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
	...

0800ad18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08a      	sub	sp, #40	; 0x28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad20:	f107 0314 	add.w	r3, r7, #20
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	605a      	str	r2, [r3, #4]
 800ad2a:	609a      	str	r2, [r3, #8]
 800ad2c:	60da      	str	r2, [r3, #12]
 800ad2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad38:	d13a      	bne.n	800adb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	4a1d      	ldr	r2, [pc, #116]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	6313      	str	r3, [r2, #48]	; 0x30
 800ad4a:	4b1b      	ldr	r3, [pc, #108]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad64:	2303      	movs	r3, #3
 800ad66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad68:	230a      	movs	r3, #10
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad6c:	f107 0314 	add.w	r3, r7, #20
 800ad70:	4619      	mov	r1, r3
 800ad72:	4812      	ldr	r0, [pc, #72]	; (800adbc <HAL_PCD_MspInit+0xa4>)
 800ad74:	f7f8 fcf6 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad78:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7c:	4a0e      	ldr	r2, [pc, #56]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad82:	6353      	str	r3, [r2, #52]	; 0x34
 800ad84:	2300      	movs	r3, #0
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	4b0b      	ldr	r3, [pc, #44]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8c:	4a0a      	ldr	r2, [pc, #40]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad92:	6453      	str	r3, [r2, #68]	; 0x44
 800ad94:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <HAL_PCD_MspInit+0xa0>)
 800ad96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ada0:	2200      	movs	r2, #0
 800ada2:	2100      	movs	r1, #0
 800ada4:	2043      	movs	r0, #67	; 0x43
 800ada6:	f7f8 fc14 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800adaa:	2043      	movs	r0, #67	; 0x43
 800adac:	f7f8 fc2d 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800adb0:	bf00      	nop
 800adb2:	3728      	adds	r7, #40	; 0x28
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	40023800 	.word	0x40023800
 800adbc:	40020000 	.word	0x40020000

0800adc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7fe fcba 	bl	8009750 <USBD_LL_SetupStage>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800adf6:	78fa      	ldrb	r2, [r7, #3]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f7fe fcf4 	bl	80097fa <USBD_LL_DataOutStage>
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	4613      	mov	r3, r2
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	1a9b      	subs	r3, r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	440b      	add	r3, r1
 800ae3a:	3348      	adds	r3, #72	; 0x48
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	78fb      	ldrb	r3, [r7, #3]
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7fe fd3d 	bl	80098c0 <USBD_LL_DataInStage>
}
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe fe51 	bl	8009b04 <USBD_LL_SOF>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b084      	sub	sp, #16
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae72:	2301      	movs	r3, #1
 800ae74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d102      	bne.n	800ae84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
 800ae82:	e008      	b.n	800ae96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d102      	bne.n	800ae92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	73fb      	strb	r3, [r7, #15]
 800ae90:	e001      	b.n	800ae96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae92:	f7f6 fd45 	bl	8001920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae9c:	7bfa      	ldrb	r2, [r7, #15]
 800ae9e:	4611      	mov	r1, r2
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fdf1 	bl	8009a88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe fd9d 	bl	80099ec <USBD_LL_Reset>
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fe fdec 	bl	8009aa8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6812      	ldr	r2, [r2, #0]
 800aede:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <HAL_PCD_SuspendCallback+0x48>)
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	4a03      	ldr	r2, [pc, #12]	; (800af04 <HAL_PCD_SuspendCallback+0x48>)
 800aef6:	f043 0306 	orr.w	r3, r3, #6
 800aefa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	e000ed00 	.word	0xe000ed00

0800af08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fddc 	bl	8009ad4 <USBD_LL_Resume>
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af36:	78fa      	ldrb	r2, [r7, #3]
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fe2a 	bl	8009b94 <USBD_LL_IsoOUTIncomplete>
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	4611      	mov	r1, r2
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fdf2 	bl	8009b48 <USBD_LL_IsoINIncomplete>
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fe30 	bl	8009be0 <USBD_LL_DevConnected>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fe2d 	bl	8009bf6 <USBD_LL_DevDisconnected>
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d13c      	bne.n	800b02e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800afb4:	4a20      	ldr	r2, [pc, #128]	; (800b038 <USBD_LL_Init+0x94>)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a1e      	ldr	r2, [pc, #120]	; (800b038 <USBD_LL_Init+0x94>)
 800afc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <USBD_LL_Init+0x94>)
 800afc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800afca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800afcc:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <USBD_LL_Init+0x94>)
 800afce:	2204      	movs	r2, #4
 800afd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800afd2:	4b19      	ldr	r3, [pc, #100]	; (800b038 <USBD_LL_Init+0x94>)
 800afd4:	2202      	movs	r2, #2
 800afd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800afd8:	4b17      	ldr	r3, [pc, #92]	; (800b038 <USBD_LL_Init+0x94>)
 800afda:	2200      	movs	r2, #0
 800afdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afde:	4b16      	ldr	r3, [pc, #88]	; (800b038 <USBD_LL_Init+0x94>)
 800afe0:	2202      	movs	r2, #2
 800afe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800afe4:	4b14      	ldr	r3, [pc, #80]	; (800b038 <USBD_LL_Init+0x94>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <USBD_LL_Init+0x94>)
 800afec:	2200      	movs	r2, #0
 800afee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aff0:	4b11      	ldr	r3, [pc, #68]	; (800b038 <USBD_LL_Init+0x94>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <USBD_LL_Init+0x94>)
 800aff8:	2200      	movs	r2, #0
 800affa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800affc:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <USBD_LL_Init+0x94>)
 800affe:	2200      	movs	r2, #0
 800b000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b002:	480d      	ldr	r0, [pc, #52]	; (800b038 <USBD_LL_Init+0x94>)
 800b004:	f7fa f803 	bl	800500e <HAL_PCD_Init>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b00e:	f7f6 fc87 	bl	8001920 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b012:	2180      	movs	r1, #128	; 0x80
 800b014:	4808      	ldr	r0, [pc, #32]	; (800b038 <USBD_LL_Init+0x94>)
 800b016:	f7fb f960 	bl	80062da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b01a:	2240      	movs	r2, #64	; 0x40
 800b01c:	2100      	movs	r1, #0
 800b01e:	4806      	ldr	r0, [pc, #24]	; (800b038 <USBD_LL_Init+0x94>)
 800b020:	f7fb f914 	bl	800624c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b024:	2280      	movs	r2, #128	; 0x80
 800b026:	2101      	movs	r1, #1
 800b028:	4803      	ldr	r0, [pc, #12]	; (800b038 <USBD_LL_Init+0x94>)
 800b02a:	f7fb f90f 	bl	800624c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20001f58 	.word	0x20001f58

0800b03c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fa f8f8 	bl	8005248 <HAL_PCD_Start>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 f942 	bl	800b2e8 <USBD_Get_USB_Status>
 800b064:	4603      	mov	r3, r0
 800b066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b068:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	4608      	mov	r0, r1
 800b07c:	4611      	mov	r1, r2
 800b07e:	461a      	mov	r2, r3
 800b080:	4603      	mov	r3, r0
 800b082:	70fb      	strb	r3, [r7, #3]
 800b084:	460b      	mov	r3, r1
 800b086:	70bb      	strb	r3, [r7, #2]
 800b088:	4613      	mov	r3, r2
 800b08a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b09a:	78bb      	ldrb	r3, [r7, #2]
 800b09c:	883a      	ldrh	r2, [r7, #0]
 800b09e:	78f9      	ldrb	r1, [r7, #3]
 800b0a0:	f7fa fcdc 	bl	8005a5c <HAL_PCD_EP_Open>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f91c 	bl	800b2e8 <USBD_Get_USB_Status>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0d8:	78fa      	ldrb	r2, [r7, #3]
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fa fd25 	bl	8005b2c <HAL_PCD_EP_Close>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 f8fd 	bl	800b2e8 <USBD_Get_USB_Status>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b116:	78fa      	ldrb	r2, [r7, #3]
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fa fdfd 	bl	8005d1a <HAL_PCD_EP_SetStall>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f8de 	bl	800b2e8 <USBD_Get_USB_Status>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b130:	7bbb      	ldrb	r3, [r7, #14]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b154:	78fa      	ldrb	r2, [r7, #3]
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fa fe42 	bl	8005de2 <HAL_PCD_EP_ClrStall>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f8bf 	bl	800b2e8 <USBD_Get_USB_Status>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b18a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b18c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b190:	2b00      	cmp	r3, #0
 800b192:	da0b      	bge.n	800b1ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b19a:	68f9      	ldr	r1, [r7, #12]
 800b19c:	4613      	mov	r3, r2
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	1a9b      	subs	r3, r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	333e      	adds	r3, #62	; 0x3e
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	e00b      	b.n	800b1c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1b2:	68f9      	ldr	r1, [r7, #12]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	00db      	lsls	r3, r3, #3
 800b1b8:	1a9b      	subs	r3, r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	440b      	add	r3, r1
 800b1be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1ea:	78fa      	ldrb	r2, [r7, #3]
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fa fc0f 	bl	8005a12 <HAL_PCD_SetAddress>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 f874 	bl	800b2e8 <USBD_Get_USB_Status>
 800b200:	4603      	mov	r3, r0
 800b202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b204:	7bbb      	ldrb	r3, [r7, #14]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b086      	sub	sp, #24
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
 800b21a:	460b      	mov	r3, r1
 800b21c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b22c:	7af9      	ldrb	r1, [r7, #11]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	f7fa fd28 	bl	8005c86 <HAL_PCD_EP_Transmit>
 800b236:	4603      	mov	r3, r0
 800b238:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 f853 	bl	800b2e8 <USBD_Get_USB_Status>
 800b242:	4603      	mov	r3, r0
 800b244:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b246:	7dbb      	ldrb	r3, [r7, #22]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	607a      	str	r2, [r7, #4]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	460b      	mov	r3, r1
 800b25e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b26e:	7af9      	ldrb	r1, [r7, #11]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	f7fa fca4 	bl	8005bc0 <HAL_PCD_EP_Receive>
 800b278:	4603      	mov	r3, r0
 800b27a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 f832 	bl	800b2e8 <USBD_Get_USB_Status>
 800b284:	4603      	mov	r3, r0
 800b286:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b288:	7dbb      	ldrb	r3, [r7, #22]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b082      	sub	sp, #8
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	460b      	mov	r3, r1
 800b29c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2a4:	78fa      	ldrb	r2, [r7, #3]
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fa fcd4 	bl	8005c56 <HAL_PCD_EP_GetRxCount>
 800b2ae:	4603      	mov	r3, r0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2c0:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <USBD_static_malloc+0x18>)
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	20000660 	.word	0x20000660

0800b2d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]

}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d817      	bhi.n	800b32c <USBD_Get_USB_Status+0x44>
 800b2fc:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <USBD_Get_USB_Status+0x1c>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b31b 	.word	0x0800b31b
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b327 	.word	0x0800b327
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
    break;
 800b318:	e00b      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b31a:	2303      	movs	r3, #3
 800b31c:	73fb      	strb	r3, [r7, #15]
    break;
 800b31e:	e008      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b320:	2301      	movs	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]
    break;
 800b324:	e005      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	73fb      	strb	r3, [r7, #15]
    break;
 800b32a:	e002      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b32c:	2303      	movs	r3, #3
 800b32e:	73fb      	strb	r3, [r7, #15]
    break;
 800b330:	bf00      	nop
  }
  return usb_status;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <__errno>:
 800b340:	4b01      	ldr	r3, [pc, #4]	; (800b348 <__errno+0x8>)
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	200001bc 	.word	0x200001bc

0800b34c <__libc_init_array>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	4d0d      	ldr	r5, [pc, #52]	; (800b384 <__libc_init_array+0x38>)
 800b350:	4c0d      	ldr	r4, [pc, #52]	; (800b388 <__libc_init_array+0x3c>)
 800b352:	1b64      	subs	r4, r4, r5
 800b354:	10a4      	asrs	r4, r4, #2
 800b356:	2600      	movs	r6, #0
 800b358:	42a6      	cmp	r6, r4
 800b35a:	d109      	bne.n	800b370 <__libc_init_array+0x24>
 800b35c:	4d0b      	ldr	r5, [pc, #44]	; (800b38c <__libc_init_array+0x40>)
 800b35e:	4c0c      	ldr	r4, [pc, #48]	; (800b390 <__libc_init_array+0x44>)
 800b360:	f000 f916 	bl	800b590 <_init>
 800b364:	1b64      	subs	r4, r4, r5
 800b366:	10a4      	asrs	r4, r4, #2
 800b368:	2600      	movs	r6, #0
 800b36a:	42a6      	cmp	r6, r4
 800b36c:	d105      	bne.n	800b37a <__libc_init_array+0x2e>
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	f855 3b04 	ldr.w	r3, [r5], #4
 800b374:	4798      	blx	r3
 800b376:	3601      	adds	r6, #1
 800b378:	e7ee      	b.n	800b358 <__libc_init_array+0xc>
 800b37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b37e:	4798      	blx	r3
 800b380:	3601      	adds	r6, #1
 800b382:	e7f2      	b.n	800b36a <__libc_init_array+0x1e>
 800b384:	0800c408 	.word	0x0800c408
 800b388:	0800c408 	.word	0x0800c408
 800b38c:	0800c408 	.word	0x0800c408
 800b390:	0800c40c 	.word	0x0800c40c

0800b394 <memcpy>:
 800b394:	440a      	add	r2, r1
 800b396:	4291      	cmp	r1, r2
 800b398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b39c:	d100      	bne.n	800b3a0 <memcpy+0xc>
 800b39e:	4770      	bx	lr
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3aa:	4291      	cmp	r1, r2
 800b3ac:	d1f9      	bne.n	800b3a2 <memcpy+0xe>
 800b3ae:	bd10      	pop	{r4, pc}

0800b3b0 <memset>:
 800b3b0:	4402      	add	r2, r0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d100      	bne.n	800b3ba <memset+0xa>
 800b3b8:	4770      	bx	lr
 800b3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b3be:	e7f9      	b.n	800b3b4 <memset+0x4>

0800b3c0 <sqrt>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	ed2d 8b02 	vpush	{d8}
 800b3c6:	ec55 4b10 	vmov	r4, r5, d0
 800b3ca:	f000 f82d 	bl	800b428 <__ieee754_sqrt>
 800b3ce:	4b15      	ldr	r3, [pc, #84]	; (800b424 <sqrt+0x64>)
 800b3d0:	eeb0 8a40 	vmov.f32	s16, s0
 800b3d4:	eef0 8a60 	vmov.f32	s17, s1
 800b3d8:	f993 3000 	ldrsb.w	r3, [r3]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	d019      	beq.n	800b414 <sqrt+0x54>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f5 fb4c 	bl	8000a84 <__aeabi_dcmpun>
 800b3ec:	b990      	cbnz	r0, 800b414 <sqrt+0x54>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	f7f5 fb1d 	bl	8000a34 <__aeabi_dcmplt>
 800b3fa:	b158      	cbz	r0, 800b414 <sqrt+0x54>
 800b3fc:	f7ff ffa0 	bl	800b340 <__errno>
 800b400:	2321      	movs	r3, #33	; 0x21
 800b402:	6003      	str	r3, [r0, #0]
 800b404:	2200      	movs	r2, #0
 800b406:	2300      	movs	r3, #0
 800b408:	4610      	mov	r0, r2
 800b40a:	4619      	mov	r1, r3
 800b40c:	f7f5 f9ca 	bl	80007a4 <__aeabi_ddiv>
 800b410:	ec41 0b18 	vmov	d8, r0, r1
 800b414:	eeb0 0a48 	vmov.f32	s0, s16
 800b418:	eef0 0a68 	vmov.f32	s1, s17
 800b41c:	ecbd 8b02 	vpop	{d8}
 800b420:	bd38      	pop	{r3, r4, r5, pc}
 800b422:	bf00      	nop
 800b424:	20000220 	.word	0x20000220

0800b428 <__ieee754_sqrt>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	ec55 4b10 	vmov	r4, r5, d0
 800b430:	4e56      	ldr	r6, [pc, #344]	; (800b58c <__ieee754_sqrt+0x164>)
 800b432:	43ae      	bics	r6, r5
 800b434:	ee10 0a10 	vmov	r0, s0
 800b438:	ee10 3a10 	vmov	r3, s0
 800b43c:	4629      	mov	r1, r5
 800b43e:	462a      	mov	r2, r5
 800b440:	d110      	bne.n	800b464 <__ieee754_sqrt+0x3c>
 800b442:	ee10 2a10 	vmov	r2, s0
 800b446:	462b      	mov	r3, r5
 800b448:	f7f5 f882 	bl	8000550 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f4 fec6 	bl	80001e4 <__adddf3>
 800b458:	4604      	mov	r4, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	ec45 4b10 	vmov	d0, r4, r5
 800b460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b464:	2d00      	cmp	r5, #0
 800b466:	dc10      	bgt.n	800b48a <__ieee754_sqrt+0x62>
 800b468:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b46c:	4330      	orrs	r0, r6
 800b46e:	d0f5      	beq.n	800b45c <__ieee754_sqrt+0x34>
 800b470:	b15d      	cbz	r5, 800b48a <__ieee754_sqrt+0x62>
 800b472:	ee10 2a10 	vmov	r2, s0
 800b476:	462b      	mov	r3, r5
 800b478:	ee10 0a10 	vmov	r0, s0
 800b47c:	f7f4 feb0 	bl	80001e0 <__aeabi_dsub>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	f7f5 f98e 	bl	80007a4 <__aeabi_ddiv>
 800b488:	e7e6      	b.n	800b458 <__ieee754_sqrt+0x30>
 800b48a:	1509      	asrs	r1, r1, #20
 800b48c:	d076      	beq.n	800b57c <__ieee754_sqrt+0x154>
 800b48e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b492:	07ce      	lsls	r6, r1, #31
 800b494:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b498:	bf5e      	ittt	pl
 800b49a:	0fda      	lsrpl	r2, r3, #31
 800b49c:	005b      	lslpl	r3, r3, #1
 800b49e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b4a2:	0fda      	lsrs	r2, r3, #31
 800b4a4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b4a8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	106d      	asrs	r5, r5, #1
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	f04f 0e16 	mov.w	lr, #22
 800b4b6:	4684      	mov	ip, r0
 800b4b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4bc:	eb0c 0401 	add.w	r4, ip, r1
 800b4c0:	4294      	cmp	r4, r2
 800b4c2:	bfde      	ittt	le
 800b4c4:	1b12      	suble	r2, r2, r4
 800b4c6:	eb04 0c01 	addle.w	ip, r4, r1
 800b4ca:	1840      	addle	r0, r0, r1
 800b4cc:	0052      	lsls	r2, r2, #1
 800b4ce:	f1be 0e01 	subs.w	lr, lr, #1
 800b4d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b4d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b4da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4de:	d1ed      	bne.n	800b4bc <__ieee754_sqrt+0x94>
 800b4e0:	4671      	mov	r1, lr
 800b4e2:	2720      	movs	r7, #32
 800b4e4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b4e8:	4562      	cmp	r2, ip
 800b4ea:	eb04 060e 	add.w	r6, r4, lr
 800b4ee:	dc02      	bgt.n	800b4f6 <__ieee754_sqrt+0xce>
 800b4f0:	d113      	bne.n	800b51a <__ieee754_sqrt+0xf2>
 800b4f2:	429e      	cmp	r6, r3
 800b4f4:	d811      	bhi.n	800b51a <__ieee754_sqrt+0xf2>
 800b4f6:	2e00      	cmp	r6, #0
 800b4f8:	eb06 0e04 	add.w	lr, r6, r4
 800b4fc:	da43      	bge.n	800b586 <__ieee754_sqrt+0x15e>
 800b4fe:	f1be 0f00 	cmp.w	lr, #0
 800b502:	db40      	blt.n	800b586 <__ieee754_sqrt+0x15e>
 800b504:	f10c 0801 	add.w	r8, ip, #1
 800b508:	eba2 020c 	sub.w	r2, r2, ip
 800b50c:	429e      	cmp	r6, r3
 800b50e:	bf88      	it	hi
 800b510:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b514:	1b9b      	subs	r3, r3, r6
 800b516:	4421      	add	r1, r4
 800b518:	46c4      	mov	ip, r8
 800b51a:	0052      	lsls	r2, r2, #1
 800b51c:	3f01      	subs	r7, #1
 800b51e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b522:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b526:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b52a:	d1dd      	bne.n	800b4e8 <__ieee754_sqrt+0xc0>
 800b52c:	4313      	orrs	r3, r2
 800b52e:	d006      	beq.n	800b53e <__ieee754_sqrt+0x116>
 800b530:	1c4c      	adds	r4, r1, #1
 800b532:	bf13      	iteet	ne
 800b534:	3101      	addne	r1, #1
 800b536:	3001      	addeq	r0, #1
 800b538:	4639      	moveq	r1, r7
 800b53a:	f021 0101 	bicne.w	r1, r1, #1
 800b53e:	1043      	asrs	r3, r0, #1
 800b540:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b544:	0849      	lsrs	r1, r1, #1
 800b546:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b54a:	07c2      	lsls	r2, r0, #31
 800b54c:	bf48      	it	mi
 800b54e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b552:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b556:	460c      	mov	r4, r1
 800b558:	463d      	mov	r5, r7
 800b55a:	e77f      	b.n	800b45c <__ieee754_sqrt+0x34>
 800b55c:	0ada      	lsrs	r2, r3, #11
 800b55e:	3815      	subs	r0, #21
 800b560:	055b      	lsls	r3, r3, #21
 800b562:	2a00      	cmp	r2, #0
 800b564:	d0fa      	beq.n	800b55c <__ieee754_sqrt+0x134>
 800b566:	02d7      	lsls	r7, r2, #11
 800b568:	d50a      	bpl.n	800b580 <__ieee754_sqrt+0x158>
 800b56a:	f1c1 0420 	rsb	r4, r1, #32
 800b56e:	fa23 f404 	lsr.w	r4, r3, r4
 800b572:	1e4d      	subs	r5, r1, #1
 800b574:	408b      	lsls	r3, r1
 800b576:	4322      	orrs	r2, r4
 800b578:	1b41      	subs	r1, r0, r5
 800b57a:	e788      	b.n	800b48e <__ieee754_sqrt+0x66>
 800b57c:	4608      	mov	r0, r1
 800b57e:	e7f0      	b.n	800b562 <__ieee754_sqrt+0x13a>
 800b580:	0052      	lsls	r2, r2, #1
 800b582:	3101      	adds	r1, #1
 800b584:	e7ef      	b.n	800b566 <__ieee754_sqrt+0x13e>
 800b586:	46e0      	mov	r8, ip
 800b588:	e7be      	b.n	800b508 <__ieee754_sqrt+0xe0>
 800b58a:	bf00      	nop
 800b58c:	7ff00000 	.word	0x7ff00000

0800b590 <_init>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	bf00      	nop
 800b594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b596:	bc08      	pop	{r3}
 800b598:	469e      	mov	lr, r3
 800b59a:	4770      	bx	lr

0800b59c <_fini>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	bf00      	nop
 800b5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a2:	bc08      	pop	{r3}
 800b5a4:	469e      	mov	lr, r3
 800b5a6:	4770      	bx	lr
