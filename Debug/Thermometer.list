
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c9c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000222c  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b050  0800b050  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b058  0800b058  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800b060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          0000205c  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021ec  200021ec  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001db7c  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a1d  00000000  00000000  0003dd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00041760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00042688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242e2  00000000  00000000  00043460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ede  00000000  00000000  00067742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70ad  00000000  00000000  0007c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001436cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004038  00000000  00000000  00143720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e0c 	.word	0x08008e0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08008e0c 	.word	0x08008e0c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <dtoc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dtoc(double digit, char* arr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ca6:	6078      	str	r0, [r7, #4]
	if (digit <= 10.0)
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <dtoc+0x154>)
 8000cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cb2:	f7ff fde1 	bl	8000878 <__aeabi_dcmple>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d017      	beq.n	8000cec <dtoc+0x50>
	{
		arr[0] = 'l';
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	226c      	movs	r2, #108	; 0x6c
 8000cc0:	701a      	strb	r2, [r3, #0]
		arr[1] = 'e';
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	2265      	movs	r2, #101	; 0x65
 8000cc8:	701a      	strb	r2, [r3, #0]
		arr[2] = 's';
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	2273      	movs	r2, #115	; 0x73
 8000cd0:	701a      	strb	r2, [r3, #0]
		arr[3] = 's';
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	2273      	movs	r2, #115	; 0x73
 8000cd8:	701a      	strb	r2, [r3, #0]
		arr[4] = '\0';
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		arr[5] = '\0';
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3305      	adds	r3, #5
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
		return;
 8000cea:	e07d      	b.n	8000de8 <dtoc+0x14c>
	}
	int l_digit = digit * 100.0;
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <dtoc+0x158>)
 8000cf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf6:	f7ff fa6f 	bl	80001d8 <__aeabi_dmul>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff fdd7 	bl	80008b4 <__aeabi_d2iz>
 8000d06:	4603      	mov	r3, r0
 8000d08:	617b      	str	r3, [r7, #20]
	arr[7] = '\0';
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
	arr[6] = 'C';
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3306      	adds	r3, #6
 8000d16:	2243      	movs	r2, #67	; 0x43
 8000d18:	701a      	strb	r2, [r3, #0]
	arr[5] = ' ';
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3305      	adds	r3, #5
 8000d1e:	2220      	movs	r2, #32
 8000d20:	701a      	strb	r2, [r3, #0]
	arr[4] = l_digit % 10 + '0';
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <dtoc+0x15c>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	1099      	asrs	r1, r3, #2
 8000d2c:	17d3      	asrs	r3, r2, #31
 8000d2e:	1ac9      	subs	r1, r1, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad1      	subs	r1, r2, r3
 8000d3a:	b2ca      	uxtb	r2, r1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3304      	adds	r3, #4
 8000d40:	3230      	adds	r2, #48	; 0x30
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <dtoc+0x15c>)
 8000d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4e:	1092      	asrs	r2, r2, #2
 8000d50:	17db      	asrs	r3, r3, #31
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
	arr[3] = l_digit % 10 + '0';
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <dtoc+0x15c>)
 8000d5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d5e:	1099      	asrs	r1, r3, #2
 8000d60:	17d3      	asrs	r3, r2, #31
 8000d62:	1ac9      	subs	r1, r1, r3
 8000d64:	460b      	mov	r3, r1
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	1ad1      	subs	r1, r2, r3
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3303      	adds	r3, #3
 8000d74:	3230      	adds	r2, #48	; 0x30
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <dtoc+0x15c>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1092      	asrs	r2, r2, #2
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
	arr[2] = ',';
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	222c      	movs	r2, #44	; 0x2c
 8000d90:	701a      	strb	r2, [r3, #0]
	arr[1] = l_digit % 10 + '0';
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <dtoc+0x15c>)
 8000d96:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9a:	1099      	asrs	r1, r3, #2
 8000d9c:	17d3      	asrs	r3, r2, #31
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	1ad1      	subs	r1, r2, r3
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	3230      	adds	r2, #48	; 0x30
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <dtoc+0x15c>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	1092      	asrs	r2, r2, #2
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
	arr[0] = l_digit % 10 + '0';
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <dtoc+0x15c>)
 8000dca:	fb83 1302 	smull	r1, r3, r3, r2
 8000dce:	1099      	asrs	r1, r3, #2
 8000dd0:	17d3      	asrs	r3, r2, #31
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	1ad1      	subs	r1, r2, r3
 8000dde:	b2cb      	uxtb	r3, r1
 8000de0:	3330      	adds	r3, #48	; 0x30
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	701a      	strb	r2, [r3, #0]
}
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40240000 	.word	0x40240000
 8000df4:	40590000 	.word	0x40590000
 8000df8:	66666667 	.word	0x66666667

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b5b0      	push	{r4, r5, r7, lr}
 8000dfe:	b09e      	sub	sp, #120	; 0x78
 8000e00:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f001 f86b 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f8cf 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f000 f991 	bl	8001130 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e0e:	f000 f933 	bl	8001078 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e12:	f000 f95f 	bl	80010d4 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000e16:	f007 fa8f 	bl	8008338 <MX_USB_DEVICE_Init>
  // 10x12 - 10 to right, 12 to below
  int mlx_address;
  float float_temp;
  char char_temp[8];
  uint8_t in_buff[2];
  char initializing_status[] = "initial...";
 8000e1a:	4a5b      	ldr	r2, [pc, #364]	; (8000f88 <main+0x18c>)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e20:	c303      	stmia	r3!, {r0, r1}
 8000e22:	801a      	strh	r2, [r3, #0]
 8000e24:	3302      	adds	r3, #2
 8000e26:	0c12      	lsrs	r2, r2, #16
 8000e28:	701a      	strb	r2, [r3, #0]
  uint8_t *data = "Hello World from USB CDC\n";
 8000e2a:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <main+0x190>)
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24

  // Initialize Display
  if (SSD1306_Init(hi2c2) != 1)
 8000e2e:	4c58      	ldr	r4, [pc, #352]	; (8000f90 <main+0x194>)
 8000e30:	4668      	mov	r0, sp
 8000e32:	f104 0310 	add.w	r3, r4, #16
 8000e36:	2244      	movs	r2, #68	; 0x44
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f007 ffd1 	bl	8008de0 <memcpy>
 8000e3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e42:	f000 fb13 	bl	800146c <SSD1306_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d00d      	beq.n	8000e68 <main+0x6c>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e50:	4850      	ldr	r0, [pc, #320]	; (8000f94 <main+0x198>)
 8000e52:	f001 fbb8 	bl	80025c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f001 f8b1 	bl	8001fc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	484c      	ldr	r0, [pc, #304]	; (8000f94 <main+0x198>)
 8000e64:	f001 fbaf 	bl	80025c6 <HAL_GPIO_TogglePin>
  }

  // Initialize MLX Sensor
  SSD1306_GotoXY (0,0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fddc 	bl	8001a28 <SSD1306_GotoXY>
  SSD1306_Puts (initializing_status, &Font_11x18, 1);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2201      	movs	r2, #1
 8000e74:	4948      	ldr	r1, [pc, #288]	; (8000f98 <main+0x19c>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fe6c 	bl	8001b54 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000e7c:	f000 fd0c 	bl	8001898 <SSD1306_UpdateScreen>

  mlx_address = MLX90614_ScanDevices(hi2c1);
 8000e80:	4c46      	ldr	r4, [pc, #280]	; (8000f9c <main+0x1a0>)
 8000e82:	4668      	mov	r0, sp
 8000e84:	f104 0310 	add.w	r3, r4, #16
 8000e88:	2244      	movs	r2, #68	; 0x44
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f007 ffa8 	bl	8008de0 <memcpy>
 8000e90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e94:	f000 fa94 	bl	80013c0 <MLX90614_ScanDevices>
 8000e98:	6238      	str	r0, [r7, #32]

  if (HAL_I2C_Mem_Read(&hi2c1, (0x00<<1), 0x07, 1, in_buff, 2, 100) != HAL_OK)
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2207      	movs	r2, #7
 8000eac:	2100      	movs	r1, #0
 8000eae:	483b      	ldr	r0, [pc, #236]	; (8000f9c <main+0x1a0>)
 8000eb0:	f001 fde6 	bl	8002a80 <HAL_I2C_Mem_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00d      	beq.n	8000ed6 <main+0xda>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ebe:	4835      	ldr	r0, [pc, #212]	; (8000f94 <main+0x198>)
 8000ec0:	f001 fb81 	bl	80025c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000ec4:	2064      	movs	r0, #100	; 0x64
 8000ec6:	f001 f87b 	bl	8001fc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	4831      	ldr	r0, [pc, #196]	; (8000f94 <main+0x198>)
 8000ed0:	f001 fb79 	bl	80025c6 <HAL_GPIO_TogglePin>
 8000ed4:	e00c      	b.n	8000ef0 <main+0xf4>
  } else {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eda:	482e      	ldr	r0, [pc, #184]	; (8000f94 <main+0x198>)
 8000edc:	f001 fb73 	bl	80025c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f001 f86d 	bl	8001fc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eea:	482a      	ldr	r0, [pc, #168]	; (8000f94 <main+0x198>)
 8000eec:	f001 fb6b 	bl	80025c6 <HAL_GPIO_TogglePin>
  }

  SSD1306_Clear();
 8000ef0:	f000 fe55 	bl	8001b9e <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	float_temp = MLX90614_ReadTemp(mlx_address, 0x07, hi2c1);
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	b2dd      	uxtb	r5, r3
 8000ef8:	4c28      	ldr	r4, [pc, #160]	; (8000f9c <main+0x1a0>)
 8000efa:	4668      	mov	r0, sp
 8000efc:	f104 0308 	add.w	r3, r4, #8
 8000f00:	224c      	movs	r2, #76	; 0x4c
 8000f02:	4619      	mov	r1, r3
 8000f04:	f007 ff6c 	bl	8008de0 <memcpy>
 8000f08:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f0c:	2107      	movs	r1, #7
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f000 fa0a 	bl	8001328 <MLX90614_ReadTemp>
 8000f14:	ed87 0a07 	vstr	s0, [r7, #28]
	dtoc(float_temp, char_temp);
 8000f18:	69f8      	ldr	r0, [r7, #28]
 8000f1a:	f7ff fbeb 	bl	80006f4 <__aeabi_f2d>
 8000f1e:	4604      	mov	r4, r0
 8000f20:	460d      	mov	r5, r1
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4618      	mov	r0, r3
 8000f28:	ec45 4b10 	vmov	d0, r4, r5
 8000f2c:	f7ff feb6 	bl	8000c9c <dtoc>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000f30:	2101      	movs	r1, #1
 8000f32:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <main+0x1a4>)
 8000f34:	f001 fb16 	bl	8002564 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10a      	bne.n	8000f54 <main+0x158>
	{
		SSD1306_GotoXY(0, 0);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fd71 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp, &Font_16x26, 1);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4915      	ldr	r1, [pc, #84]	; (8000fa4 <main+0x1a8>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fe00 	bl	8001b54 <SSD1306_Puts>
	}

	SSD1306_GotoXY(0, 29);
 8000f54:	211d      	movs	r1, #29
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 fd66 	bl	8001a28 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp, &Font_11x18, 1);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2201      	movs	r2, #1
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <main+0x19c>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fdf5 	bl	8001b54 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8000f6a:	f000 fc95 	bl	8001898 <SSD1306_UpdateScreen>

	CDC_Transmit_FS(data, strlen(data));
 8000f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f70:	f7ff f92a 	bl	80001c8 <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f7c:	f007 fab0 	bl	80084e0 <CDC_Transmit_FS>

	HAL_Delay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f001 f81d 	bl	8001fc0 <HAL_Delay>
	float_temp = MLX90614_ReadTemp(mlx_address, 0x07, hi2c1);
 8000f86:	e7b5      	b.n	8000ef4 <main+0xf8>
 8000f88:	08008e40 	.word	0x08008e40
 8000f8c:	08008e24 	.word	0x08008e24
 8000f90:	20000828 	.word	0x20000828
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	200007d4 	.word	0x200007d4
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 ff20 	bl	8008dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <SystemClock_Config+0xc8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <SystemClock_Config+0xc8>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <SystemClock_Config+0xc8>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <SystemClock_Config+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a20      	ldr	r2, [pc, #128]	; (8001074 <SystemClock_Config+0xcc>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001018:	2310      	movs	r3, #16
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800101c:	23c0      	movs	r3, #192	; 0xc0
 800101e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fd45 	bl	8004abc <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f000 f8e8 	bl	800120c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 ffa8 	bl	8004fac <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001062:	f000 f8d3 	bl	800120c <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3750      	adds	r7, #80	; 0x50
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_I2C1_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C1_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_I2C1_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010b6:	f001 faa1 	bl	80025fc <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f8a4 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200007d4 	.word	0x200007d4
 80010cc:	40005400 	.word	0x40005400
 80010d0:	000186a0 	.word	0x000186a0

080010d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C2_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_I2C2_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C2_Init+0x50>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_I2C2_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C2_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_I2C2_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_I2C2_Init+0x50>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_I2C2_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_I2C2_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_I2C2_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_I2C2_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_I2C2_Init+0x50>)
 8001112:	f001 fa73 	bl	80025fc <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 f876 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000828 	.word	0x20000828
 8001128:	40005800 	.word	0x40005800
 800112c:	00061a80 	.word	0x00061a80

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <MX_GPIO_Init+0xd0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a2c      	ldr	r2, [pc, #176]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <MX_GPIO_Init+0xd0>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_GPIO_Init+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_GPIO_Init+0xd4>)
 80011be:	f001 f9e9 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_GPIO_Init+0xd8>)
 80011d6:	f001 f829 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_GPIO_Init+0xd4>)
 80011f4:	f001 f81a 	bl	800222c <HAL_GPIO_Init>

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40020000 	.word	0x40020000

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8001224:	2300      	movs	r3, #0
 8001226:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8001228:	e015      	b.n	8001256 <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	4053      	eors	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <CRC8_Calc+0x58>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	b21a      	sxth	r2, r3
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21b      	sxth	r3, r3
 800124c:	4053      	eors	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	70fa      	strb	r2, [r7, #3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e4      	bne.n	800122a <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	08008e90 	.word	0x08008e90

08001274 <MLX90614_ReadReg>:

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c) {
 8001274:	b082      	sub	sp, #8
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b08b      	sub	sp, #44	; 0x2c
 800127a:	af04      	add	r7, sp, #16
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	460b      	mov	r3, r1
 8001284:	71bb      	strb	r3, [r7, #6]
 8001286:	4613      	mov	r3, r2
 8001288:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	b29b      	uxth	r3, r3
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	b299      	uxth	r1, r3
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	b29a      	uxth	r2, r3
 8001296:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2303      	movs	r3, #3
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	f001 fbe9 	bl	8002a80 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 80012c6:	7c3b      	ldrb	r3, [r7, #16]
 80012c8:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 80012ca:	7c7b      	ldrb	r3, [r7, #17]
 80012cc:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff9f 	bl	8001218 <CRC8_Calc>
 80012da:	4603      	mov	r3, r0
 80012dc:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 80012de:	7c7b      	ldrb	r3, [r7, #17]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	7c3b      	ldrb	r3, [r7, #16]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 80012ee:	7cbb      	ldrb	r3, [r7, #18]
 80012f0:	7d7a      	ldrb	r2, [r7, #21]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d001      	beq.n	80012fa <MLX90614_ReadReg+0x86>
		data = 0x0000;
 80012f6:	2300      	movs	r3, #0
 80012f8:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10b      	bne.n	8001318 <MLX90614_ReadReg+0xa4>
 8001300:	7cbb      	ldrb	r3, [r7, #18]
 8001302:	8afc      	ldrh	r4, [r7, #22]
 8001304:	79b8      	ldrb	r0, [r7, #6]
 8001306:	79f9      	ldrb	r1, [r7, #7]
 8001308:	7d7a      	ldrb	r2, [r7, #21]
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4623      	mov	r3, r4
 8001310:	4602      	mov	r2, r0
 8001312:	2001      	movs	r0, #1
 8001314:	f000 f896 	bl	8001444 <MLX90614_SendDebugMsg>

	//HAL_Delay(1);
	return data;
 8001318:	8afb      	ldrh	r3, [r7, #22]
}
 800131a:	4618      	mov	r0, r3
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001324:	b002      	add	sp, #8
 8001326:	4770      	bx	lr

08001328 <MLX90614_ReadTemp>:
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr, I2C_HandleTypeDef hi2c) {
 8001328:	b082      	sub	sp, #8
 800132a:	b5b0      	push	{r4, r5, r7, lr}
 800132c:	b098      	sub	sp, #96	; 0x60
 800132e:	af14      	add	r7, sp, #80	; 0x50
 8001330:	f107 0420 	add.w	r4, r7, #32
 8001334:	e884 000c 	stmia.w	r4, {r2, r3}
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	460b      	mov	r3, r1
 800133e:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF, hi2c);
 8001340:	79bd      	ldrb	r5, [r7, #6]
 8001342:	79fc      	ldrb	r4, [r7, #7]
 8001344:	4668      	mov	r0, sp
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	2250      	movs	r2, #80	; 0x50
 800134c:	4619      	mov	r1, r3
 800134e:	f007 fd47 	bl	8008de0 <memcpy>
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	2200      	movs	r2, #0
 8001356:	4629      	mov	r1, r5
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ff8b 	bl	8001274 <MLX90614_ReadReg>
 800135e:	4603      	mov	r3, r0
 8001360:	81fb      	strh	r3, [r7, #14]

	temp = data*0.02 - 273.15;
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f9b3 	bl	80006d0 <__aeabi_i2d>
 800136a:	a311      	add	r3, pc, #68	; (adr r3, 80013b0 <MLX90614_ReadTemp+0x88>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7fe ff32 	bl	80001d8 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	a30e      	add	r3, pc, #56	; (adr r3, 80013b8 <MLX90614_ReadTemp+0x90>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f857 	bl	8000434 <__aeabi_dsub>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fab9 	bl	8000904 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	60bb      	str	r3, [r7, #8]

	return temp;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	ee07 3a90 	vmov	s15, r3
}
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013a8:	b002      	add	sp, #8
 80013aa:	4770      	bx	lr
 80013ac:	f3af 8000 	nop.w
 80013b0:	47ae147b 	.word	0x47ae147b
 80013b4:	3f947ae1 	.word	0x3f947ae1
 80013b8:	66666666 	.word	0x66666666
 80013bc:	40711266 	.word	0x40711266

080013c0 <MLX90614_ScanDevices>:
int MLX90614_ScanDevices (I2C_HandleTypeDef hi2c) {
 80013c0:	b084      	sub	sp, #16
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	f107 0c10 	add.w	ip, r7, #16
 80013cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;
	for (int i = 0; i<126; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	e029      	b.n	800142a <MLX90614_ScanDevices+0x6a>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	b299      	uxth	r1, r3
 80013de:	2302      	movs	r3, #2
 80013e0:	2202      	movs	r2, #2
 80013e2:	f107 0010 	add.w	r0, r7, #16
 80013e6:	f001 fd71 	bl	8002ecc <HAL_I2C_IsDeviceReady>
 80013ea:	4603      	mov	r3, r0
 80013ec:	70fb      	strb	r3, [r7, #3]
		if (result != HAL_OK)
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <MLX90614_ScanDevices+0x3e>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <MLX90614_ScanDevices+0x80>)
 80013fa:	f001 f8e4 	bl	80025c6 <HAL_GPIO_TogglePin>
		}
		if (result == HAL_OK)
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <MLX90614_ScanDevices+0x64>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MLX90614_ScanDevices+0x80>)
 800140a:	f001 f8dc 	bl	80025c6 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001412:	f000 fdd5 	bl	8001fc0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <MLX90614_ScanDevices+0x80>)
 800141c:	f001 f8d3 	bl	80025c6 <HAL_GPIO_TogglePin>
		  return i;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	e005      	b.n	8001430 <MLX90614_ScanDevices+0x70>
	for (int i = 0; i<126; i++)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3301      	adds	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b7d      	cmp	r3, #125	; 0x7d
 800142e:	ddd2      	ble.n	80013d6 <MLX90614_ScanDevices+0x16>
		}
	}
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800143a:	b004      	add	sp, #16
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40020c00 	.word	0x40020c00

08001444 <MLX90614_SendDebugMsg>:
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc) {
 8001444:	b490      	push	{r4, r7}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4604      	mov	r4, r0
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4623      	mov	r3, r4
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	4603      	mov	r3, r0
 8001458:	71bb      	strb	r3, [r7, #6]
 800145a:	460b      	mov	r3, r1
 800145c:	717b      	strb	r3, [r7, #5]
 800145e:	4613      	mov	r3, r2
 8001460:	807b      	strh	r3, [r7, #2]
	}
	else if (op_type == MLX90614_DBG_MSG_R) {

	}

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bc90      	pop	{r4, r7}
 800146a:	4770      	bx	lr

0800146c <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 800146c:	b084      	sub	sp, #16
 800146e:	b590      	push	{r4, r7, lr}
 8001470:	b097      	sub	sp, #92	; 0x5c
 8001472:	af14      	add	r7, sp, #80	; 0x50
 8001474:	f107 0418 	add.w	r4, r7, #24
 8001478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 800147c:	f000 fb98 	bl	8001bb0 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <SSD1306_Init+0x44>)
 8001482:	4618      	mov	r0, r3
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	2254      	movs	r2, #84	; 0x54
 800148a:	4619      	mov	r1, r3
 800148c:	f007 fca8 	bl	8008de0 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001490:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001494:	2201      	movs	r2, #1
 8001496:	2178      	movs	r1, #120	; 0x78
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <SSD1306_Init+0x44>)
 800149a:	f001 fd17 	bl	8002ecc <HAL_I2C_IsDeviceReady>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e1ee      	b.n	8001886 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 80014a8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ae:	e004      	b.n	80014ba <SSD1306_Init+0x4e>
 80014b0:	200008bc 	.word	0x200008bc
		p--;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f9      	bne.n	80014b4 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014c0:	4ce1      	ldr	r4, [pc, #900]	; (8001848 <SSD1306_Init+0x3dc>)
 80014c2:	23ae      	movs	r3, #174	; 0xae
 80014c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80014c6:	4668      	mov	r0, sp
 80014c8:	f104 0308 	add.w	r3, r4, #8
 80014cc:	224c      	movs	r2, #76	; 0x4c
 80014ce:	4619      	mov	r1, r3
 80014d0:	f007 fc86 	bl	8008de0 <memcpy>
 80014d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014d8:	2100      	movs	r1, #0
 80014da:	2078      	movs	r0, #120	; 0x78
 80014dc:	f000 fbc6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80014e0:	4cd9      	ldr	r4, [pc, #868]	; (8001848 <SSD1306_Init+0x3dc>)
 80014e2:	2320      	movs	r3, #32
 80014e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80014e6:	4668      	mov	r0, sp
 80014e8:	f104 0308 	add.w	r3, r4, #8
 80014ec:	224c      	movs	r2, #76	; 0x4c
 80014ee:	4619      	mov	r1, r3
 80014f0:	f007 fc76 	bl	8008de0 <memcpy>
 80014f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fbb6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001500:	4cd1      	ldr	r4, [pc, #836]	; (8001848 <SSD1306_Init+0x3dc>)
 8001502:	2310      	movs	r3, #16
 8001504:	9313      	str	r3, [sp, #76]	; 0x4c
 8001506:	4668      	mov	r0, sp
 8001508:	f104 0308 	add.w	r3, r4, #8
 800150c:	224c      	movs	r2, #76	; 0x4c
 800150e:	4619      	mov	r1, r3
 8001510:	f007 fc66 	bl	8008de0 <memcpy>
 8001514:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 fba6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001520:	4cc9      	ldr	r4, [pc, #804]	; (8001848 <SSD1306_Init+0x3dc>)
 8001522:	23b0      	movs	r3, #176	; 0xb0
 8001524:	9313      	str	r3, [sp, #76]	; 0x4c
 8001526:	4668      	mov	r0, sp
 8001528:	f104 0308 	add.w	r3, r4, #8
 800152c:	224c      	movs	r2, #76	; 0x4c
 800152e:	4619      	mov	r1, r3
 8001530:	f007 fc56 	bl	8008de0 <memcpy>
 8001534:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fb96 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001540:	4cc1      	ldr	r4, [pc, #772]	; (8001848 <SSD1306_Init+0x3dc>)
 8001542:	23c8      	movs	r3, #200	; 0xc8
 8001544:	9313      	str	r3, [sp, #76]	; 0x4c
 8001546:	4668      	mov	r0, sp
 8001548:	f104 0308 	add.w	r3, r4, #8
 800154c:	224c      	movs	r2, #76	; 0x4c
 800154e:	4619      	mov	r1, r3
 8001550:	f007 fc46 	bl	8008de0 <memcpy>
 8001554:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 fb86 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001560:	4cb9      	ldr	r4, [pc, #740]	; (8001848 <SSD1306_Init+0x3dc>)
 8001562:	2300      	movs	r3, #0
 8001564:	9313      	str	r3, [sp, #76]	; 0x4c
 8001566:	4668      	mov	r0, sp
 8001568:	f104 0308 	add.w	r3, r4, #8
 800156c:	224c      	movs	r2, #76	; 0x4c
 800156e:	4619      	mov	r1, r3
 8001570:	f007 fc36 	bl	8008de0 <memcpy>
 8001574:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fb76 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001580:	4cb1      	ldr	r4, [pc, #708]	; (8001848 <SSD1306_Init+0x3dc>)
 8001582:	2310      	movs	r3, #16
 8001584:	9313      	str	r3, [sp, #76]	; 0x4c
 8001586:	4668      	mov	r0, sp
 8001588:	f104 0308 	add.w	r3, r4, #8
 800158c:	224c      	movs	r2, #76	; 0x4c
 800158e:	4619      	mov	r1, r3
 8001590:	f007 fc26 	bl	8008de0 <memcpy>
 8001594:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fb66 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015a0:	4ca9      	ldr	r4, [pc, #676]	; (8001848 <SSD1306_Init+0x3dc>)
 80015a2:	2340      	movs	r3, #64	; 0x40
 80015a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80015a6:	4668      	mov	r0, sp
 80015a8:	f104 0308 	add.w	r3, r4, #8
 80015ac:	224c      	movs	r2, #76	; 0x4c
 80015ae:	4619      	mov	r1, r3
 80015b0:	f007 fc16 	bl	8008de0 <memcpy>
 80015b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015b8:	2100      	movs	r1, #0
 80015ba:	2078      	movs	r0, #120	; 0x78
 80015bc:	f000 fb56 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015c0:	4ca1      	ldr	r4, [pc, #644]	; (8001848 <SSD1306_Init+0x3dc>)
 80015c2:	2381      	movs	r3, #129	; 0x81
 80015c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80015c6:	4668      	mov	r0, sp
 80015c8:	f104 0308 	add.w	r3, r4, #8
 80015cc:	224c      	movs	r2, #76	; 0x4c
 80015ce:	4619      	mov	r1, r3
 80015d0:	f007 fc06 	bl	8008de0 <memcpy>
 80015d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fb46 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015e0:	4c99      	ldr	r4, [pc, #612]	; (8001848 <SSD1306_Init+0x3dc>)
 80015e2:	23ff      	movs	r3, #255	; 0xff
 80015e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80015e6:	4668      	mov	r0, sp
 80015e8:	f104 0308 	add.w	r3, r4, #8
 80015ec:	224c      	movs	r2, #76	; 0x4c
 80015ee:	4619      	mov	r1, r3
 80015f0:	f007 fbf6 	bl	8008de0 <memcpy>
 80015f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	; 0x78
 80015fc:	f000 fb36 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001600:	4c91      	ldr	r4, [pc, #580]	; (8001848 <SSD1306_Init+0x3dc>)
 8001602:	23a1      	movs	r3, #161	; 0xa1
 8001604:	9313      	str	r3, [sp, #76]	; 0x4c
 8001606:	4668      	mov	r0, sp
 8001608:	f104 0308 	add.w	r3, r4, #8
 800160c:	224c      	movs	r2, #76	; 0x4c
 800160e:	4619      	mov	r1, r3
 8001610:	f007 fbe6 	bl	8008de0 <memcpy>
 8001614:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001618:	2100      	movs	r1, #0
 800161a:	2078      	movs	r0, #120	; 0x78
 800161c:	f000 fb26 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001620:	4c89      	ldr	r4, [pc, #548]	; (8001848 <SSD1306_Init+0x3dc>)
 8001622:	23a6      	movs	r3, #166	; 0xa6
 8001624:	9313      	str	r3, [sp, #76]	; 0x4c
 8001626:	4668      	mov	r0, sp
 8001628:	f104 0308 	add.w	r3, r4, #8
 800162c:	224c      	movs	r2, #76	; 0x4c
 800162e:	4619      	mov	r1, r3
 8001630:	f007 fbd6 	bl	8008de0 <memcpy>
 8001634:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001638:	2100      	movs	r1, #0
 800163a:	2078      	movs	r0, #120	; 0x78
 800163c:	f000 fb16 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001640:	4c81      	ldr	r4, [pc, #516]	; (8001848 <SSD1306_Init+0x3dc>)
 8001642:	23a8      	movs	r3, #168	; 0xa8
 8001644:	9313      	str	r3, [sp, #76]	; 0x4c
 8001646:	4668      	mov	r0, sp
 8001648:	f104 0308 	add.w	r3, r4, #8
 800164c:	224c      	movs	r2, #76	; 0x4c
 800164e:	4619      	mov	r1, r3
 8001650:	f007 fbc6 	bl	8008de0 <memcpy>
 8001654:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	; 0x78
 800165c:	f000 fb06 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001660:	4c79      	ldr	r4, [pc, #484]	; (8001848 <SSD1306_Init+0x3dc>)
 8001662:	233f      	movs	r3, #63	; 0x3f
 8001664:	9313      	str	r3, [sp, #76]	; 0x4c
 8001666:	4668      	mov	r0, sp
 8001668:	f104 0308 	add.w	r3, r4, #8
 800166c:	224c      	movs	r2, #76	; 0x4c
 800166e:	4619      	mov	r1, r3
 8001670:	f007 fbb6 	bl	8008de0 <memcpy>
 8001674:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f000 faf6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001680:	4c71      	ldr	r4, [pc, #452]	; (8001848 <SSD1306_Init+0x3dc>)
 8001682:	23a4      	movs	r3, #164	; 0xa4
 8001684:	9313      	str	r3, [sp, #76]	; 0x4c
 8001686:	4668      	mov	r0, sp
 8001688:	f104 0308 	add.w	r3, r4, #8
 800168c:	224c      	movs	r2, #76	; 0x4c
 800168e:	4619      	mov	r1, r3
 8001690:	f007 fba6 	bl	8008de0 <memcpy>
 8001694:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	; 0x78
 800169c:	f000 fae6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016a0:	4c69      	ldr	r4, [pc, #420]	; (8001848 <SSD1306_Init+0x3dc>)
 80016a2:	23d3      	movs	r3, #211	; 0xd3
 80016a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80016a6:	4668      	mov	r0, sp
 80016a8:	f104 0308 	add.w	r3, r4, #8
 80016ac:	224c      	movs	r2, #76	; 0x4c
 80016ae:	4619      	mov	r1, r3
 80016b0:	f007 fb96 	bl	8008de0 <memcpy>
 80016b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016b8:	2100      	movs	r1, #0
 80016ba:	2078      	movs	r0, #120	; 0x78
 80016bc:	f000 fad6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016c0:	4c61      	ldr	r4, [pc, #388]	; (8001848 <SSD1306_Init+0x3dc>)
 80016c2:	2300      	movs	r3, #0
 80016c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80016c6:	4668      	mov	r0, sp
 80016c8:	f104 0308 	add.w	r3, r4, #8
 80016cc:	224c      	movs	r2, #76	; 0x4c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f007 fb86 	bl	8008de0 <memcpy>
 80016d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016d8:	2100      	movs	r1, #0
 80016da:	2078      	movs	r0, #120	; 0x78
 80016dc:	f000 fac6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016e0:	4c59      	ldr	r4, [pc, #356]	; (8001848 <SSD1306_Init+0x3dc>)
 80016e2:	23d5      	movs	r3, #213	; 0xd5
 80016e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80016e6:	4668      	mov	r0, sp
 80016e8:	f104 0308 	add.w	r3, r4, #8
 80016ec:	224c      	movs	r2, #76	; 0x4c
 80016ee:	4619      	mov	r1, r3
 80016f0:	f007 fb76 	bl	8008de0 <memcpy>
 80016f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 fab6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001700:	4c51      	ldr	r4, [pc, #324]	; (8001848 <SSD1306_Init+0x3dc>)
 8001702:	23f0      	movs	r3, #240	; 0xf0
 8001704:	9313      	str	r3, [sp, #76]	; 0x4c
 8001706:	4668      	mov	r0, sp
 8001708:	f104 0308 	add.w	r3, r4, #8
 800170c:	224c      	movs	r2, #76	; 0x4c
 800170e:	4619      	mov	r1, r3
 8001710:	f007 fb66 	bl	8008de0 <memcpy>
 8001714:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 faa6 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001720:	4c49      	ldr	r4, [pc, #292]	; (8001848 <SSD1306_Init+0x3dc>)
 8001722:	23d9      	movs	r3, #217	; 0xd9
 8001724:	9313      	str	r3, [sp, #76]	; 0x4c
 8001726:	4668      	mov	r0, sp
 8001728:	f104 0308 	add.w	r3, r4, #8
 800172c:	224c      	movs	r2, #76	; 0x4c
 800172e:	4619      	mov	r1, r3
 8001730:	f007 fb56 	bl	8008de0 <memcpy>
 8001734:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001738:	2100      	movs	r1, #0
 800173a:	2078      	movs	r0, #120	; 0x78
 800173c:	f000 fa96 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001740:	4c41      	ldr	r4, [pc, #260]	; (8001848 <SSD1306_Init+0x3dc>)
 8001742:	2322      	movs	r3, #34	; 0x22
 8001744:	9313      	str	r3, [sp, #76]	; 0x4c
 8001746:	4668      	mov	r0, sp
 8001748:	f104 0308 	add.w	r3, r4, #8
 800174c:	224c      	movs	r2, #76	; 0x4c
 800174e:	4619      	mov	r1, r3
 8001750:	f007 fb46 	bl	8008de0 <memcpy>
 8001754:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	; 0x78
 800175c:	f000 fa86 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001760:	4c39      	ldr	r4, [pc, #228]	; (8001848 <SSD1306_Init+0x3dc>)
 8001762:	23da      	movs	r3, #218	; 0xda
 8001764:	9313      	str	r3, [sp, #76]	; 0x4c
 8001766:	4668      	mov	r0, sp
 8001768:	f104 0308 	add.w	r3, r4, #8
 800176c:	224c      	movs	r2, #76	; 0x4c
 800176e:	4619      	mov	r1, r3
 8001770:	f007 fb36 	bl	8008de0 <memcpy>
 8001774:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fa76 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001780:	4c31      	ldr	r4, [pc, #196]	; (8001848 <SSD1306_Init+0x3dc>)
 8001782:	2312      	movs	r3, #18
 8001784:	9313      	str	r3, [sp, #76]	; 0x4c
 8001786:	4668      	mov	r0, sp
 8001788:	f104 0308 	add.w	r3, r4, #8
 800178c:	224c      	movs	r2, #76	; 0x4c
 800178e:	4619      	mov	r1, r3
 8001790:	f007 fb26 	bl	8008de0 <memcpy>
 8001794:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f000 fa66 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017a0:	4c29      	ldr	r4, [pc, #164]	; (8001848 <SSD1306_Init+0x3dc>)
 80017a2:	23db      	movs	r3, #219	; 0xdb
 80017a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017a6:	4668      	mov	r0, sp
 80017a8:	f104 0308 	add.w	r3, r4, #8
 80017ac:	224c      	movs	r2, #76	; 0x4c
 80017ae:	4619      	mov	r1, r3
 80017b0:	f007 fb16 	bl	8008de0 <memcpy>
 80017b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	; 0x78
 80017bc:	f000 fa56 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017c0:	4c21      	ldr	r4, [pc, #132]	; (8001848 <SSD1306_Init+0x3dc>)
 80017c2:	2320      	movs	r3, #32
 80017c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017c6:	4668      	mov	r0, sp
 80017c8:	f104 0308 	add.w	r3, r4, #8
 80017cc:	224c      	movs	r2, #76	; 0x4c
 80017ce:	4619      	mov	r1, r3
 80017d0:	f007 fb06 	bl	8008de0 <memcpy>
 80017d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017d8:	2100      	movs	r1, #0
 80017da:	2078      	movs	r0, #120	; 0x78
 80017dc:	f000 fa46 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017e0:	4c19      	ldr	r4, [pc, #100]	; (8001848 <SSD1306_Init+0x3dc>)
 80017e2:	238d      	movs	r3, #141	; 0x8d
 80017e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017e6:	4668      	mov	r0, sp
 80017e8:	f104 0308 	add.w	r3, r4, #8
 80017ec:	224c      	movs	r2, #76	; 0x4c
 80017ee:	4619      	mov	r1, r3
 80017f0:	f007 faf6 	bl	8008de0 <memcpy>
 80017f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017f8:	2100      	movs	r1, #0
 80017fa:	2078      	movs	r0, #120	; 0x78
 80017fc:	f000 fa36 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001800:	4c11      	ldr	r4, [pc, #68]	; (8001848 <SSD1306_Init+0x3dc>)
 8001802:	2314      	movs	r3, #20
 8001804:	9313      	str	r3, [sp, #76]	; 0x4c
 8001806:	4668      	mov	r0, sp
 8001808:	f104 0308 	add.w	r3, r4, #8
 800180c:	224c      	movs	r2, #76	; 0x4c
 800180e:	4619      	mov	r1, r3
 8001810:	f007 fae6 	bl	8008de0 <memcpy>
 8001814:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 fa26 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001820:	4c09      	ldr	r4, [pc, #36]	; (8001848 <SSD1306_Init+0x3dc>)
 8001822:	23af      	movs	r3, #175	; 0xaf
 8001824:	9313      	str	r3, [sp, #76]	; 0x4c
 8001826:	4668      	mov	r0, sp
 8001828:	f104 0308 	add.w	r3, r4, #8
 800182c:	224c      	movs	r2, #76	; 0x4c
 800182e:	4619      	mov	r1, r3
 8001830:	f007 fad6 	bl	8008de0 <memcpy>
 8001834:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001838:	2100      	movs	r1, #0
 800183a:	2078      	movs	r0, #120	; 0x78
 800183c:	f000 fa16 	bl	8001c6c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001840:	4c01      	ldr	r4, [pc, #4]	; (8001848 <SSD1306_Init+0x3dc>)
 8001842:	232e      	movs	r3, #46	; 0x2e
 8001844:	e002      	b.n	800184c <SSD1306_Init+0x3e0>
 8001846:	bf00      	nop
 8001848:	200008bc 	.word	0x200008bc
 800184c:	9313      	str	r3, [sp, #76]	; 0x4c
 800184e:	4668      	mov	r0, sp
 8001850:	f104 0308 	add.w	r3, r4, #8
 8001854:	224c      	movs	r2, #76	; 0x4c
 8001856:	4619      	mov	r1, r3
 8001858:	f007 fac2 	bl	8008de0 <memcpy>
 800185c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001860:	2100      	movs	r1, #0
 8001862:	2078      	movs	r0, #120	; 0x78
 8001864:	f000 fa02 	bl	8001c6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001868:	2000      	movs	r0, #0
 800186a:	f000 f865 	bl	8001938 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800186e:	f000 f813 	bl	8001898 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <SSD1306_Init+0x428>)
 8001874:	2200      	movs	r2, #0
 8001876:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SSD1306_Init+0x428>)
 800187a:	2200      	movs	r2, #0
 800187c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SSD1306_Init+0x428>)
 8001880:	2201      	movs	r2, #1
 8001882:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001890:	b004      	add	sp, #16
 8001892:	4770      	bx	lr
 8001894:	200005ac 	.word	0x200005ac

08001898 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b097      	sub	sp, #92	; 0x5c
 800189c:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800189e:	2300      	movs	r3, #0
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	e03d      	b.n	8001920 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	3b50      	subs	r3, #80	; 0x50
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4c21      	ldr	r4, [pc, #132]	; (8001930 <SSD1306_UpdateScreen+0x98>)
 80018ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80018ae:	4668      	mov	r0, sp
 80018b0:	f104 0308 	add.w	r3, r4, #8
 80018b4:	224c      	movs	r2, #76	; 0x4c
 80018b6:	4619      	mov	r1, r3
 80018b8:	f007 fa92 	bl	8008de0 <memcpy>
 80018bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018c0:	2100      	movs	r1, #0
 80018c2:	2078      	movs	r0, #120	; 0x78
 80018c4:	f000 f9d2 	bl	8001c6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018c8:	4c19      	ldr	r4, [pc, #100]	; (8001930 <SSD1306_UpdateScreen+0x98>)
 80018ca:	2300      	movs	r3, #0
 80018cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80018ce:	4668      	mov	r0, sp
 80018d0:	f104 0308 	add.w	r3, r4, #8
 80018d4:	224c      	movs	r2, #76	; 0x4c
 80018d6:	4619      	mov	r1, r3
 80018d8:	f007 fa82 	bl	8008de0 <memcpy>
 80018dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	; 0x78
 80018e4:	f000 f9c2 	bl	8001c6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018e8:	4c11      	ldr	r4, [pc, #68]	; (8001930 <SSD1306_UpdateScreen+0x98>)
 80018ea:	2310      	movs	r3, #16
 80018ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80018ee:	4668      	mov	r0, sp
 80018f0:	f104 0308 	add.w	r3, r4, #8
 80018f4:	224c      	movs	r2, #76	; 0x4c
 80018f6:	4619      	mov	r1, r3
 80018f8:	f007 fa72 	bl	8008de0 <memcpy>
 80018fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001900:	2100      	movs	r1, #0
 8001902:	2078      	movs	r0, #120	; 0x78
 8001904:	f000 f9b2 	bl	8001c6c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4a09      	ldr	r2, [pc, #36]	; (8001934 <SSD1306_UpdateScreen+0x9c>)
 800190e:	441a      	add	r2, r3
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	2078      	movs	r0, #120	; 0x78
 8001916:	f000 f961 	bl	8001bdc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	3301      	adds	r3, #1
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b07      	cmp	r3, #7
 8001924:	d9be      	bls.n	80018a4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	200008bc 	.word	0x200008bc
 8001934:	200001ac 	.word	0x200001ac

08001938 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <SSD1306_Fill+0x14>
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <SSD1306_Fill+0x16>
 800194c:	23ff      	movs	r3, #255	; 0xff
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	4619      	mov	r1, r3
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <SSD1306_Fill+0x2c>)
 8001956:	f007 fa51 	bl	8008dfc <memset>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001ac 	.word	0x200001ac

08001968 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
 8001972:	460b      	mov	r3, r1
 8001974:	80bb      	strh	r3, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	70fb      	strb	r3, [r7, #3]
	if (
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b7f      	cmp	r3, #127	; 0x7f
 800197e:	d848      	bhi.n	8001a12 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	2b3f      	cmp	r3, #63	; 0x3f
 8001984:	d845      	bhi.n	8001a12 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SSD1306_DrawPixel+0xb8>)
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d11a      	bne.n	80019d8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	b298      	uxth	r0, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	01db      	lsls	r3, r3, #7
 80019ae:	4413      	add	r3, r2
 80019b0:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b259      	sxtb	r1, r3
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	4603      	mov	r3, r0
 80019cc:	01db      	lsls	r3, r3, #7
 80019ce:	4413      	add	r3, r2
 80019d0:	b2c9      	uxtb	r1, r1
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 80019d4:	54d1      	strb	r1, [r2, r3]
 80019d6:	e01d      	b.n	8001a14 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	b298      	uxth	r0, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4413      	add	r3, r2
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	b259      	sxtb	r1, r3
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	4603      	mov	r3, r0
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2c9      	uxtb	r1, r1
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 8001a0e:	54d1      	strb	r1, [r2, r3]
 8001a10:	e000      	b.n	8001a14 <SSD1306_DrawPixel+0xac>
		return;
 8001a12:	bf00      	nop
	}
}
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200005ac 	.word	0x200005ac
 8001a24:	200001ac 	.word	0x200001ac

08001a28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	80fb      	strh	r3, [r7, #6]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <SSD1306_GotoXY+0x28>)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <SSD1306_GotoXY+0x28>)
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	8053      	strh	r3, [r2, #2]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	200005ac 	.word	0x200005ac

08001a54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
	if (
 8001a70:	2b7f      	cmp	r3, #127	; 0x7f
 8001a72:	dc07      	bgt.n	8001a84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a80:	2b3f      	cmp	r3, #63	; 0x3f
 8001a82:	dd01      	ble.n	8001a88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e05e      	b.n	8001b46 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e04b      	b.n	8001b26 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	3b20      	subs	r3, #32
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	7849      	ldrb	r1, [r1, #1]
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e030      	b.n	8001b14 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001ac4:	881a      	ldrh	r2, [r3, #0]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b298      	uxth	r0, r3
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001ad0:	885a      	ldrh	r2, [r3, #2]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	79ba      	ldrb	r2, [r7, #6]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff ff43 	bl	8001968 <SSD1306_DrawPixel>
 8001ae2:	e014      	b.n	8001b0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b298      	uxth	r0, r3
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001af2:	885a      	ldrh	r2, [r3, #2]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b299      	uxth	r1, r3
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f7ff ff2d 	bl	8001968 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	3301      	adds	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d3c8      	bcc.n	8001ab2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	785b      	ldrb	r3, [r3, #1]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d3ad      	bcc.n	8001a8e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001b42:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200005ac 	.word	0x200005ac

08001b54 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b62:	e012      	b.n	8001b8a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff71 	bl	8001a54 <SSD1306_Putc>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d002      	beq.n	8001b84 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	e008      	b.n	8001b96 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e8      	bne.n	8001b64 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	781b      	ldrb	r3, [r3, #0]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fec8 	bl	8001938 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ba8:	f7ff fe76 	bl	8001898 <SSD1306_UpdateScreen>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <ssd1306_I2C_Init+0x28>)
 8001bb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bba:	e002      	b.n	8001bc2 <ssd1306_I2C_Init+0x12>
		p--;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	0003d090 	.word	0x0003d090

08001bdc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b0c7      	sub	sp, #284	; 0x11c
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	4604      	mov	r4, r0
 8001be4:	4608      	mov	r0, r1
 8001be6:	4639      	mov	r1, r7
 8001be8:	600a      	str	r2, [r1, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	4622      	mov	r2, r4
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	1dba      	adds	r2, r7, #6
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c0e:	e010      	b.n	8001c32 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001c10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c14:	463a      	mov	r2, r7
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c1e:	3301      	adds	r3, #1
 8001c20:	7811      	ldrb	r1, [r2, #0]
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001c28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	1d3a      	adds	r2, r7, #4
 8001c3a:	8812      	ldrh	r2, [r2, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8e7      	bhi.n	8001c10 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b299      	uxth	r1, r3
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f107 020c 	add.w	r2, r7, #12
 8001c52:	200a      	movs	r0, #10
 8001c54:	9000      	str	r0, [sp, #0]
 8001c56:	4804      	ldr	r0, [pc, #16]	; (8001c68 <ssd1306_I2C_WriteMulti+0x8c>)
 8001c58:	f000 fe14 	bl	8002884 <HAL_I2C_Master_Transmit>
}
 8001c5c:	bf00      	nop
 8001c5e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200008bc 	.word	0x200008bc

08001c6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af02      	add	r7, sp, #8
 8001c74:	f107 0c18 	add.w	ip, r7, #24
 8001c78:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	460b      	mov	r3, r1
 8001c82:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c88:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001c8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	230a      	movs	r3, #10
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f107 0018 	add.w	r0, r7, #24
 8001ca0:	f000 fdf0 	bl	8002884 <HAL_I2C_Master_Transmit>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cae:	b002      	add	sp, #8
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_I2C_MspInit+0xe8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12c      	bne.n	8001d80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a30      	ldr	r2, [pc, #192]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d46:	2312      	movs	r3, #18
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d52:	2304      	movs	r3, #4
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <HAL_I2C_MspInit+0xf0>)
 8001d5e:	f000 fa65 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d7e:	e031      	b.n	8001de4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_I2C_MspInit+0xf4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12c      	bne.n	8001de4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	2312      	movs	r3, #18
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001db8:	2304      	movs	r3, #4
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480c      	ldr	r0, [pc, #48]	; (8001df4 <HAL_I2C_MspInit+0xf0>)
 8001dc4:	f000 fa32 	bl	800222c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3730      	adds	r7, #48	; 0x30
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40005400 	.word	0x40005400
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40005800 	.word	0x40005800

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 f89a 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <OTG_FS_IRQHandler+0x10>)
 8001e56:	f001 fdfe 	bl	8003a56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20001de4 	.word	0x20001de4

08001e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea4:	4c0b      	ldr	r4, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb2:	f7ff ffd7 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f006 ff6f 	bl	8008d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7fe ff9f 	bl	8000dfc <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001ecc:	0800b060 	.word	0x0800b060
  ldr r2, =_sbss
 8001ed0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001ed4:	200021ec 	.word	0x200021ec

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f94f 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fed0 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f967 	bl	8002212 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	f000 f92f 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000010 	.word	0x20000010
 8001f78:	20000018 	.word	0x20000018
 8001f7c:	20000014 	.word	0x20000014

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000018 	.word	0x20000018
 8001fa4:	20000910 	.word	0x20000910

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000910 	.word	0x20000910

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000018 	.word	0x20000018

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e16b      	b.n	8002520 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 815a 	bne.w	800251a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80b4 	beq.w	800251a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b60      	ldr	r3, [pc, #384]	; (8002538 <HAL_GPIO_Init+0x30c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a5f      	ldr	r2, [pc, #380]	; (8002538 <HAL_GPIO_Init+0x30c>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <HAL_GPIO_Init+0x30c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ce:	4a5b      	ldr	r2, [pc, #364]	; (800253c <HAL_GPIO_Init+0x310>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_GPIO_Init+0x314>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <HAL_GPIO_Init+0x226>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a51      	ldr	r2, [pc, #324]	; (8002544 <HAL_GPIO_Init+0x318>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x222>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_GPIO_Init+0x31c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x21e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4f      	ldr	r2, [pc, #316]	; (800254c <HAL_GPIO_Init+0x320>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x21a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_GPIO_Init+0x324>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x216>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_GPIO_Init+0x328>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x212>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_GPIO_Init+0x32c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_GPIO_Init+0x330>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x20a>
 8002432:	2307      	movs	r3, #7
 8002434:	e00e      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002436:	2308      	movs	r3, #8
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800243a:	2306      	movs	r3, #6
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	; (800253c <HAL_GPIO_Init+0x310>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002472:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <HAL_GPIO_Init+0x334>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002496:	4a32      	ldr	r2, [pc, #200]	; (8002560 <HAL_GPIO_Init+0x334>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_GPIO_Init+0x334>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_GPIO_Init+0x334>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_GPIO_Init+0x334>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_GPIO_Init+0x334>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_GPIO_Init+0x334>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_GPIO_Init+0x334>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae90 	bls.w	8002248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40021c00 	.word	0x40021c00
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e001      	b.n	8002586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4013      	ands	r3, r2
 80025de:	041a      	lsls	r2, r3, #16
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	400b      	ands	r3, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e12b      	b.n	8002866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fb6e 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002660:	f002 fe4c 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8002664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a81      	ldr	r2, [pc, #516]	; (8002870 <HAL_I2C_Init+0x274>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d807      	bhi.n	8002680 <HAL_I2C_Init+0x84>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <HAL_I2C_Init+0x278>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e006      	b.n	800268e <HAL_I2C_Init+0x92>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <HAL_I2C_Init+0x27c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0e7      	b.n	8002866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a78      	ldr	r2, [pc, #480]	; (800287c <HAL_I2C_Init+0x280>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_I2C_Init+0x274>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d802      	bhi.n	80026d0 <HAL_I2C_Init+0xd4>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	e009      	b.n	80026e4 <HAL_I2C_Init+0xe8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_I2C_Init+0x284>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	3301      	adds	r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	495c      	ldr	r1, [pc, #368]	; (8002870 <HAL_I2C_Init+0x274>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d819      	bhi.n	8002738 <HAL_I2C_Init+0x13c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e59      	subs	r1, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002718:	400b      	ands	r3, r1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_I2C_Init+0x138>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	e051      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002734:	2304      	movs	r3, #4
 8002736:	e04f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_I2C_Init+0x168>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_I2C_Init+0x18e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x196>
 800278e:	2301      	movs	r3, #1
 8002790:	e022      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <HAL_I2C_Init+0x1bc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e58      	subs	r0, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	440b      	add	r3, r1
 80027a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6911      	ldr	r1, [r2, #16]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	430b      	orrs	r3, r1
 800281a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	000186a0 	.word	0x000186a0
 8002874:	001e847f 	.word	0x001e847f
 8002878:	003d08ff 	.word	0x003d08ff
 800287c:	431bde83 	.word	0x431bde83
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	460b      	mov	r3, r1
 8002892:	817b      	strh	r3, [r7, #10]
 8002894:	4613      	mov	r3, r2
 8002896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff fb86 	bl	8001fa8 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	f040 80e0 	bne.w	8002a6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	4970      	ldr	r1, [pc, #448]	; (8002a78 <HAL_I2C_Master_Transmit+0x1f4>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fda0 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0d3      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2C_Master_Transmit+0x50>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0cc      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2221      	movs	r2, #33	; 0x21
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2210      	movs	r2, #16
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a50      	ldr	r2, [pc, #320]	; (8002a7c <HAL_I2C_Master_Transmit+0x1f8>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fbf0 	bl	8003128 <I2C_MasterRequestWrite>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e08d      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002968:	e066      	b.n	8002a38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	6a39      	ldr	r1, [r7, #32]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fe1a 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b04      	cmp	r3, #4
 8002980:	d107      	bne.n	8002992 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06b      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d11b      	bne.n	8002a0c <HAL_I2C_Master_Transmit+0x188>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d017      	beq.n	8002a0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fe0a 	bl	800362a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d107      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e01a      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d194      	bne.n	800296a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	00100002 	.word	0x00100002
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a9a:	f7ff fa85 	bl	8001fa8 <HAL_GetTick>
 8002a9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	f040 8208 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2319      	movs	r3, #25
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	497b      	ldr	r1, [pc, #492]	; (8002ca4 <HAL_I2C_Mem_Read+0x224>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fc9f 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e1fb      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x56>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e1f4      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d007      	beq.n	8002afc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2222      	movs	r2, #34	; 0x22
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_I2C_Mem_Read+0x228>)
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b3e:	88f8      	ldrh	r0, [r7, #6]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fb6c 	bl	800322c <I2C_RequestMemoryRead>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1b0      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d113      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e184      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d11b      	bne.n	8002bce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e164      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d11b      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	e144      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c24:	e138      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	f200 80f1 	bhi.w	8002e12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d123      	bne.n	8002c80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fd35 	bl	80036ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e139      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7e:	e10b      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d14e      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <HAL_I2C_Mem_Read+0x22c>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fbb2 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e10e      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000
 8002cac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d24:	e0b8      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4966      	ldr	r1, [pc, #408]	; (8002ec8 <HAL_I2C_Mem_Read+0x448>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb63 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0bf      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2200      	movs	r2, #0
 8002d8a:	494f      	ldr	r1, [pc, #316]	; (8002ec8 <HAL_I2C_Mem_Read+0x448>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fb35 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e091      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e10:	e042      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fc48 	bl	80036ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e04c      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d118      	bne.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f aec2 	bne.w	8002c26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010004 	.word	0x00010004

08002ecc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff f864 	bl	8001fa8 <HAL_GetTick>
 8002ee0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 8111 	bne.w	8003116 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2319      	movs	r3, #25
 8002efa:	2201      	movs	r2, #1
 8002efc:	4988      	ldr	r1, [pc, #544]	; (8003120 <HAL_I2C_IsDeviceReady+0x254>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fa7c 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e104      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_I2C_IsDeviceReady+0x50>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0fd      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d007      	beq.n	8002f42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2224      	movs	r2, #36	; 0x24
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a70      	ldr	r2, [pc, #448]	; (8003124 <HAL_I2C_IsDeviceReady+0x258>)
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fa3a 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9c:	d103      	bne.n	8002fa6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0b6      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fff5 	bl	8001fa8 <HAL_GetTick>
 8002fbe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fee:	e025      	b.n	800303c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fe ffda 	bl	8001fa8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <HAL_I2C_IsDeviceReady+0x13a>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	22a0      	movs	r2, #160	; 0xa0
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2ba0      	cmp	r3, #160	; 0xa0
 8003046:	d005      	beq.n	8003054 <HAL_I2C_IsDeviceReady+0x188>
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_I2C_IsDeviceReady+0x188>
 800304e:	7dbb      	ldrb	r3, [r7, #22]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0cd      	beq.n	8002ff0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d129      	bne.n	80030be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003078:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2319      	movs	r3, #25
 8003096:	2201      	movs	r2, #1
 8003098:	4921      	ldr	r1, [pc, #132]	; (8003120 <HAL_I2C_IsDeviceReady+0x254>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f9ae 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e036      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e02c      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2319      	movs	r3, #25
 80030de:	2201      	movs	r2, #1
 80030e0:	490f      	ldr	r1, [pc, #60]	; (8003120 <HAL_I2C_IsDeviceReady+0x254>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f98a 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e012      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	3301      	adds	r3, #1
 80030f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f4ff af32 	bcc.w	8002f66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00100002 	.word	0x00100002
 8003124:	ffff0000 	.word	0xffff0000

08003128 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d006      	beq.n	8003152 <I2C_MasterRequestWrite+0x2a>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d003      	beq.n	8003152 <I2C_MasterRequestWrite+0x2a>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003150:	d108      	bne.n	8003164 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e00b      	b.n	800317c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b12      	cmp	r3, #18
 800316a:	d107      	bne.n	800317c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800317a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f937 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a2:	d103      	bne.n	80031ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e035      	b.n	800321c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b8:	d108      	bne.n	80031cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c8:	611a      	str	r2, [r3, #16]
 80031ca:	e01b      	b.n	8003204 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031cc:	897b      	ldrh	r3, [r7, #10]
 80031ce:	11db      	asrs	r3, r3, #7
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0306 	and.w	r3, r3, #6
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f063 030f 	orn	r3, r3, #15
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <I2C_MasterRequestWrite+0xfc>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f95d 	bl	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e010      	b.n	800321c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4907      	ldr	r1, [pc, #28]	; (8003228 <I2C_MasterRequestWrite+0x100>)
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f94d 	bl	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	00010008 	.word	0x00010008
 8003228:	00010002 	.word	0x00010002

0800322c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	817b      	strh	r3, [r7, #10]
 800323e:	460b      	mov	r3, r1
 8003240:	813b      	strh	r3, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003254:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2200      	movs	r2, #0
 800326e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f8c2 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328c:	d103      	bne.n	8003296 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0aa      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	4952      	ldr	r1, [pc, #328]	; (80033f8 <I2C_RequestMemoryRead+0x1cc>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f8fa 	bl	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e097      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	6a39      	ldr	r1, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f964 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d107      	bne.n	80032fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e076      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e021      	b.n	8003358 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003314:	893b      	ldrh	r3, [r7, #8]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b29b      	uxth	r3, r3
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003324:	6a39      	ldr	r1, [r7, #32]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f93e 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b04      	cmp	r3, #4
 8003338:	d107      	bne.n	800334a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e050      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	6a39      	ldr	r1, [r7, #32]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f923 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b04      	cmp	r3, #4
 800336e:	d107      	bne.n	8003380 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e035      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003392:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2200      	movs	r2, #0
 800339c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f82b 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ba:	d103      	bne.n	80033c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e013      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033c8:	897b      	ldrh	r3, [r7, #10]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	6a3a      	ldr	r2, [r7, #32]
 80033dc:	4906      	ldr	r1, [pc, #24]	; (80033f8 <I2C_RequestMemoryRead+0x1cc>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f863 	bl	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	00010002 	.word	0x00010002

080033fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340c:	e025      	b.n	800345a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003414:	d021      	beq.n	800345a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fe fdc7 	bl	8001fa8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e023      	b.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10d      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	e00c      	b.n	800349a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf0c      	ite	eq
 8003492:	2301      	moveq	r3, #1
 8003494:	2300      	movne	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	429a      	cmp	r2, r3
 800349e:	d0b6      	beq.n	800340e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b8:	e051      	b.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c8:	d123      	bne.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f043 0204 	orr.w	r2, r3, #4
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e046      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003518:	d021      	beq.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fd45 	bl	8001fa8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e020      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10c      	bne.n	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e00b      	b.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	43da      	mvns	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d18d      	bne.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b4:	e02d      	b.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f8ce 	bl	8003758 <I2C_IsAcknowledgeFailed>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e02d      	b.n	8003622 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035cc:	d021      	beq.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe fceb 	bl	8001fa8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d116      	bne.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d1ca      	bne.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003636:	e02d      	b.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f88d 	bl	8003758 <I2C_IsAcknowledgeFailed>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e02d      	b.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364e:	d021      	beq.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003650:	f7fe fcaa 	bl	8001fa8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	d302      	bcc.n	8003666 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d1ca      	bne.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036b8:	e042      	b.n	8003740 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d119      	bne.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0210 	mvn.w	r2, #16
 80036d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e029      	b.n	8003750 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fe fc54 	bl	8001fa8 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d1b5      	bne.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376e:	d11b      	bne.n	80037a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003778:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b8:	b08f      	sub	sp, #60	; 0x3c
 80037ba:	af0a      	add	r7, sp, #40	; 0x28
 80037bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e10f      	b.n	80039e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f004 ffc4 	bl	8008770 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f001 fea1 	bl	800554e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	687e      	ldr	r6, [r7, #4]
 8003814:	466d      	mov	r5, sp
 8003816:	f106 0410 	add.w	r4, r6, #16
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003822:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003826:	e885 0003 	stmia.w	r5, {r0, r1}
 800382a:	1d33      	adds	r3, r6, #4
 800382c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	f001 fd78 	bl	8005324 <USB_CoreInit>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0d0      	b.n	80039e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 fe8f 	bl	8005570 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e04a      	b.n	80038ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	333d      	adds	r3, #61	; 0x3d
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	333c      	adds	r3, #60	; 0x3c
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	b298      	uxth	r0, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3342      	adds	r3, #66	; 0x42
 8003894:	4602      	mov	r2, r0
 8003896:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	333f      	adds	r3, #63	; 0x3f
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3344      	adds	r3, #68	; 0x44
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3348      	adds	r3, #72	; 0x48
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3350      	adds	r3, #80	; 0x50
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	3301      	adds	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3af      	bcc.n	8003858 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e044      	b.n	8003988 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3301      	adds	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d3b5      	bcc.n	80038fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	687e      	ldr	r6, [r7, #4]
 800399a:	466d      	mov	r5, sp
 800399c:	f106 0410 	add.w	r4, r6, #16
 80039a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80039b0:	1d33      	adds	r3, r6, #4
 80039b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b4:	6838      	ldr	r0, [r7, #0]
 80039b6:	f001 fe27 	bl	8005608 <USB_DevInit>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e00d      	b.n	80039e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 fea3 	bl	800672c <USB_DevDisconnect>

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_PCD_Start+0x1c>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e020      	b.n	8003a4e <HAL_PCD_Start+0x5e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d109      	bne.n	8003a30 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d005      	beq.n	8003a30 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fd79 	bl	800552c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f002 fe53 	bl	80066ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b08d      	sub	sp, #52	; 0x34
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f002 ff11 	bl	8006894 <USB_GetMode>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 839d 	bne.w	80041b4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fe75 	bl	800676e <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8393 	beq.w	80041b2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 fe6c 	bl	800676e <USB_ReadInterrupts>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d107      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f002 0202 	and.w	r2, r2, #2
 8003aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 fe5a 	bl	800676e <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d161      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0210 	bic.w	r2, r2, #16
 8003ad2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	0c5b      	lsrs	r3, r3, #17
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d124      	bne.n	8003b4a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d035      	beq.n	8003b78 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6a38      	ldr	r0, [r7, #32]
 8003b20:	f002 fc91 	bl	8006446 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b30:	441a      	add	r2, r3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b42:	441a      	add	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	e016      	b.n	8003b78 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	0c5b      	lsrs	r3, r3, #17
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d110      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6a38      	ldr	r0, [r7, #32]
 8003b62:	f002 fc70 	bl	8006446 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b72:	441a      	add	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0210 	orr.w	r2, r2, #16
 8003b86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f002 fdee 	bl	800676e <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b9c:	d16e      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 fdf4 	bl	8006794 <USB_ReadDevAllOutEpInterrupt>
 8003bac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bae:	e062      	b.n	8003c76 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d057      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f002 fe19 	bl	80067fc <USB_ReadDevOutEPInterrupt>
 8003bca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2301      	movs	r3, #1
 8003be6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fdb0 	bl	8004750 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	461a      	mov	r2, r3
 8003c08:	2308      	movs	r3, #8
 8003c0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 feaa 	bl	8004968 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	2320      	movs	r3, #32
 8003c4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	461a      	mov	r2, r3
 8003c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d199      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f002 fd74 	bl	800676e <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c90:	f040 80c0 	bne.w	8003e14 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f002 fd95 	bl	80067c8 <USB_ReadDevAllInEpInterrupt>
 8003c9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ca4:	e0b2      	b.n	8003e0c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a7 	beq.w	8003e00 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f002 fdbb 	bl	8006838 <USB_ReadDevInEPInterrupt>
 8003cc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d057      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cee:	4013      	ands	r3, r2
 8003cf0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2301      	movs	r3, #1
 8003d02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d132      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3348      	adds	r3, #72	; 0x48
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	3344      	adds	r3, #68	; 0x44
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4419      	add	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	3348      	adds	r3, #72	; 0x48
 8003d42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d113      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x31c>
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3350      	adds	r3, #80	; 0x50
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	f002 fdc3 	bl	80068f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f004 fd7a 	bl	8008872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	461a      	mov	r2, r3
 8003d96:	2308      	movs	r3, #8
 8003d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	2310      	movs	r3, #16
 8003db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2340      	movs	r3, #64	; 0x40
 8003dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	461a      	mov	r2, r3
 8003dea:	2302      	movs	r3, #2
 8003dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fc1b 	bl	8004636 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f47f af49 	bne.w	8003ca6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f002 fca8 	bl	800676e <USB_ReadInterrupts>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e28:	d122      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e50:	2100      	movs	r1, #0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fe26 	bl	8004aa4 <HAL_PCDEx_LPM_Callback>
 8003e58:	e002      	b.n	8003e60 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f004 fd80 	bl	8008960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fc7a 	bl	800676e <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e84:	d112      	bne.n	8003eac <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f004 fd3c 	bl	8008914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003eaa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f002 fc5c 	bl	800676e <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	f040 80c7 	bne.w	8004052 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2110      	movs	r1, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fcf6 	bl	80058d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee8:	e056      	b.n	8003f98 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003efc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f1c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	3301      	adds	r3, #1
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3a3      	bcc.n	8003eea <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f043 030b 	orr.w	r3, r3, #11
 8003fd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe4:	f043 030b 	orr.w	r3, r3, #11
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	e015      	b.n	8004018 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ffe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004002:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f043 030b 	orr.w	r3, r3, #11
 8004016:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800402a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800403c:	461a      	mov	r2, r3
 800403e:	f002 fc5b 	bl	80068f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f002 fb89 	bl	800676e <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	d124      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 fc1f 	bl	80068b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f001 fc87 	bl	800598a <USB_GetDevSpeed>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	f001 f92c 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4620      	mov	r0, r4
 8004098:	f001 f9a6 	bl	80053e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f004 fc10 	bl	80088c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 fb59 	bl	800676e <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d10a      	bne.n	80040dc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f004 fbed 	bl	80088a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f002 0208 	and.w	r2, r2, #8
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f002 fb44 	bl	800676e <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f0:	d10f      	bne.n	8004112 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f004 fc4f 	bl	80089a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 fb29 	bl	800676e <USB_ReadInterrupts>
 800411c:	4603      	mov	r3, r0
 800411e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004126:	d10f      	bne.n	8004148 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f004 fc22 	bl	800897c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f002 fb0e 	bl	800676e <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d10a      	bne.n	8004174 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f004 fc30 	bl	80089c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f002 faf8 	bl	800676e <USB_ReadInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d115      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f004 fc20 	bl	80089e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e000      	b.n	80041b4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80041b2:	bf00      	nop
    }
  }
}
 80041b4:	3734      	adds	r7, #52	; 0x34
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}

080041ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_PCD_SetAddress+0x1a>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e013      	b.n	80041fc <HAL_PCD_SetAddress+0x42>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 fa56 	bl	800669e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4603      	mov	r3, r0
 8004214:	70fb      	strb	r3, [r7, #3]
 8004216:	460b      	mov	r3, r1
 8004218:	803b      	strh	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	da0f      	bge.n	800424a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	3338      	adds	r3, #56	; 0x38
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	705a      	strb	r2, [r3, #1]
 8004248:	e00f      	b.n	800426a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004276:	883a      	ldrh	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	78ba      	ldrb	r2, [r7, #2]
 8004280:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004294:	78bb      	ldrb	r3, [r7, #2]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d102      	bne.n	80042a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_PCD_EP_Open+0xaa>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e00e      	b.n	80042cc <HAL_PCD_EP_Open+0xc8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fb89 	bl	80059d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0f      	bge.n	8004308 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3338      	adds	r3, #56	; 0x38
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00f      	b.n	8004328 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_PCD_EP_Close+0x6e>
 800433e:	2302      	movs	r3, #2
 8004340:	e00e      	b.n	8004360 <HAL_PCD_EP_Close+0x8c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f001 fbc7 	bl	8005ae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2200      	movs	r2, #0
 80043a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	f001 fea2 	bl	8006124 <USB_EP0StartXfer>
 80043e0:	e008      	b.n	80043f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	f001 fc54 	bl	8005c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004420:	681b      	ldr	r3, [r3, #0]
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	460b      	mov	r3, r1
 800443c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	3338      	adds	r3, #56	; 0x38
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	3304      	adds	r3, #4
 8004454:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2201      	movs	r2, #1
 800446c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800446e:	7afb      	ldrb	r3, [r7, #11]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004488:	7afb      	ldrb	r3, [r7, #11]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	f001 fe40 	bl	8006124 <USB_EP0StartXfer>
 80044a4:	e008      	b.n	80044b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	f001 fbf2 	bl	8005c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d901      	bls.n	80044e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e050      	b.n	8004582 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da0f      	bge.n	8004508 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	3338      	adds	r3, #56	; 0x38
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	705a      	strb	r2, [r3, #1]
 8004506:	e00d      	b.n	8004524 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_PCD_EP_SetStall+0x82>
 8004540:	2302      	movs	r3, #2
 8004542:	e01e      	b.n	8004582 <HAL_PCD_EP_SetStall+0xc0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	f001 ffcf 	bl	80064f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	b2d9      	uxtb	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004572:	461a      	mov	r2, r3
 8004574:	f002 f9c0 	bl	80068f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d901      	bls.n	80045a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e042      	b.n	800462e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da0f      	bge.n	80045d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	3338      	adds	r3, #56	; 0x38
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	3304      	adds	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	705a      	strb	r2, [r3, #1]
 80045ce:	e00f      	b.n	80045f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_PCD_EP_ClrStall+0x86>
 800460c:	2302      	movs	r3, #2
 800460e:	e00e      	b.n	800462e <HAL_PCD_EP_ClrStall+0xa4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	4618      	mov	r0, r3
 8004620:	f001 ffd7 	bl	80065d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b08a      	sub	sp, #40	; 0x28
 800463a:	af02      	add	r7, sp, #8
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	3338      	adds	r3, #56	; 0x38
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	429a      	cmp	r2, r3
 8004668:	d901      	bls.n	800466e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e06c      	b.n	8004748 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3303      	adds	r3, #3
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004692:	e02b      	b.n	80046ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d902      	bls.n	80046b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	3303      	adds	r3, #3
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68d9      	ldr	r1, [r3, #12]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f001 fe7b 	bl	80063ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d809      	bhi.n	8004716 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800470a:	429a      	cmp	r2, r3
 800470c:	d203      	bcs.n	8004716 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1be      	bne.n	8004694 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	429a      	cmp	r2, r3
 8004720:	d811      	bhi.n	8004746 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	43db      	mvns	r3, r3
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004742:	4013      	ands	r3, r2
 8004744:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 80a0 	bne.w	80048c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d015      	beq.n	80047be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a72      	ldr	r2, [pc, #456]	; (8004960 <PCD_EP_OutXfrComplete_int+0x210>)
 8004796:	4293      	cmp	r3, r2
 8004798:	f240 80dd 	bls.w	8004956 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80d7 	beq.w	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	461a      	mov	r2, r3
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	6093      	str	r3, [r2, #8]
 80047bc:	e0cb      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2320      	movs	r3, #32
 80047d8:	6093      	str	r3, [r2, #8]
 80047da:	e0bc      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 80b7 	bne.w	8004956 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a5d      	ldr	r2, [pc, #372]	; (8004960 <PCD_EP_OutXfrComplete_int+0x210>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d90f      	bls.n	8004810 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480c:	6093      	str	r3, [r2, #8]
 800480e:	e0a2      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004822:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	440b      	add	r3, r1
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004836:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4403      	add	r3, r0
 8004846:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800484a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4403      	add	r3, r0
 800486e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4419      	add	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4403      	add	r3, r0
 8004884:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004888:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d114      	bne.n	80048ba <PCD_EP_OutXfrComplete_int+0x16a>
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d108      	bne.n	80048ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048b2:	461a      	mov	r2, r3
 80048b4:	2101      	movs	r1, #1
 80048b6:	f002 f81f 	bl	80068f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f003 ffbb 	bl	800883c <HAL_PCD_DataOutStageCallback>
 80048c6:	e046      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <PCD_EP_OutXfrComplete_int+0x214>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d124      	bne.n	800491a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	461a      	mov	r2, r3
 80048e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	e032      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2320      	movs	r3, #32
 800490a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f003 ff92 	bl	800883c <HAL_PCD_DataOutStageCallback>
 8004918:	e01d      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d114      	bne.n	800494a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004942:	461a      	mov	r2, r3
 8004944:	2100      	movs	r1, #0
 8004946:	f001 ffd7 	bl	80068f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f003 ff73 	bl	800883c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	4f54300a 	.word	0x4f54300a
 8004964:	4f54310a 	.word	0x4f54310a

08004968 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	333c      	adds	r3, #60	; 0x3c
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d90e      	bls.n	80049bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f003 ff2b 	bl	8008818 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d90c      	bls.n	80049e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049dc:	461a      	mov	r2, r3
 80049de:	2101      	movs	r1, #1
 80049e0:	f001 ff8a 	bl	80068f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	4f54300a 	.word	0x4f54300a

080049f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
 8004a00:	4613      	mov	r3, r2
 8004a02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a12:	883b      	ldrh	r3, [r7, #0]
 8004a14:	0419      	lsls	r1, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e028      	b.n	8004a74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]
 8004a34:	e00d      	b.n	8004a52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	3340      	adds	r3, #64	; 0x40
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	7bfa      	ldrb	r2, [r7, #15]
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d3ec      	bcc.n	8004a36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a5c:	883b      	ldrh	r3, [r7, #0]
 8004a5e:	0418      	lsls	r0, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4302      	orrs	r2, r0
 8004a6c:	3340      	adds	r3, #64	; 0x40
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e264      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ada:	4ba3      	ldr	r3, [pc, #652]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b99      	ldr	r3, [pc, #612]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x108>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e23f      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x74>
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a90      	ldr	r2, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x98>
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a87      	ldr	r2, [pc, #540]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b54:	4b84      	ldr	r3, [pc, #528]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd fa18 	bl	8001fa8 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd fa14 	bl	8001fa8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e204      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc0>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fa04 	bl	8001fa8 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fa00 	bl	8001fa8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1f0      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xe8>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c4      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4952      	ldr	r1, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd f9b9 	bl	8001fa8 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd f9b5 	bl	8001fa8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1a5      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4940      	ldr	r1, [pc, #256]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd f998 	bl	8001fa8 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f994 	bl	8001fa8 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e184      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d030      	beq.n	8004d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd f978 	bl	8001fa8 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fd f974 	bl	8001fa8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e164      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x200>
 8004cda:	e015      	b.n	8004d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd f961 	bl	8001fa8 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fd f95d 	bl	8001fa8 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e14d      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80a0 	beq.w	8004e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd f923 	bl	8001fa8 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e011      	b.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
 8004d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d78:	f7fd f916 	bl	8001fa8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e106      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x4e4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x2f0>
 8004d9e:	4b81      	ldr	r3, [pc, #516]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a80      	ldr	r2, [pc, #512]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	e01c      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x312>
 8004db4:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a7a      	ldr	r2, [pc, #488]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc0:	4b78      	ldr	r3, [pc, #480]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a77      	ldr	r2, [pc, #476]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e00b      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dce:	4b75      	ldr	r3, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a74      	ldr	r2, [pc, #464]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b72      	ldr	r3, [pc, #456]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a71      	ldr	r2, [pc, #452]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd f8db 	bl	8001fa8 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fd f8d7 	bl	8001fa8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0c5      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <HAL_RCC_OscConfig+0x33a>
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd f8c5 	bl	8001fa8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd f8c1 	bl	8001fa8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0af      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ee      	bne.n	8004e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a55      	ldr	r2, [pc, #340]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 809b 	beq.w	8004f96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e60:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d05c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d141      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7a:	f7fd f895 	bl	8001fa8 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fd f891 	bl	8001fa8 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e081      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	019b      	lsls	r3, r3, #6
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	4937      	ldr	r1, [pc, #220]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fd f86a 	bl	8001fa8 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd f866 	bl	8001fa8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e056      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x41c>
 8004ef6:	e04e      	b.n	8004f96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd f853 	bl	8001fa8 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd f84f 	bl	8001fa8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e03f      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x44a>
 8004f24:	e037      	b.n	8004f96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e032      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d028      	beq.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d121      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d11a      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d111      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	42470060 	.word	0x42470060

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0cc      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b68      	ldr	r3, [pc, #416]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90c      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b65      	ldr	r3, [pc, #404]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a58      	ldr	r2, [pc, #352]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800500a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d044      	beq.n	80050cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d119      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	2b03      	cmp	r3, #3
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e067      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4934      	ldr	r1, [pc, #208]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fc ff84 	bl	8001fa8 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fc ff80 	bl	8001fa8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b25      	ldr	r3, [pc, #148]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d20c      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc fee4 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00
 8005168:	40023800 	.word	0x40023800
 800516c:	0800b038 	.word	0x0800b038
 8005170:	20000010 	.word	0x20000010
 8005174:	20000014 	.word	0x20000014

08005178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800517e:	2100      	movs	r1, #0
 8005180:	6079      	str	r1, [r7, #4]
 8005182:	2100      	movs	r1, #0
 8005184:	60f9      	str	r1, [r7, #12]
 8005186:	2100      	movs	r1, #0
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800518a:	2100      	movs	r1, #0
 800518c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800518e:	4952      	ldr	r1, [pc, #328]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005190:	6889      	ldr	r1, [r1, #8]
 8005192:	f001 010c 	and.w	r1, r1, #12
 8005196:	2908      	cmp	r1, #8
 8005198:	d00d      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800519a:	2908      	cmp	r1, #8
 800519c:	f200 8094 	bhi.w	80052c8 <HAL_RCC_GetSysClockFreq+0x150>
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d002      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x32>
 80051a4:	2904      	cmp	r1, #4
 80051a6:	d003      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x38>
 80051a8:	e08e      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051aa:	4b4c      	ldr	r3, [pc, #304]	; (80052dc <HAL_RCC_GetSysClockFreq+0x164>)
 80051ac:	60bb      	str	r3, [r7, #8]
       break;
 80051ae:	e08e      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051b0:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051b2:	60bb      	str	r3, [r7, #8]
      break;
 80051b4:	e08b      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b6:	4948      	ldr	r1, [pc, #288]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051b8:	6849      	ldr	r1, [r1, #4]
 80051ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80051be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c0:	4945      	ldr	r1, [pc, #276]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051c2:	6849      	ldr	r1, [r1, #4]
 80051c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80051c8:	2900      	cmp	r1, #0
 80051ca:	d024      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051cc:	4942      	ldr	r1, [pc, #264]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051ce:	6849      	ldr	r1, [r1, #4]
 80051d0:	0989      	lsrs	r1, r1, #6
 80051d2:	4608      	mov	r0, r1
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80051dc:	f04f 0500 	mov.w	r5, #0
 80051e0:	ea00 0204 	and.w	r2, r0, r4
 80051e4:	ea01 0305 	and.w	r3, r1, r5
 80051e8:	493d      	ldr	r1, [pc, #244]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051ea:	fb01 f003 	mul.w	r0, r1, r3
 80051ee:	2100      	movs	r1, #0
 80051f0:	fb01 f102 	mul.w	r1, r1, r2
 80051f4:	1844      	adds	r4, r0, r1
 80051f6:	493a      	ldr	r1, [pc, #232]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051f8:	fba2 0101 	umull	r0, r1, r2, r1
 80051fc:	1863      	adds	r3, r4, r1
 80051fe:	4619      	mov	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	461a      	mov	r2, r3
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f7fb fbcc 	bl	80009a4 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4613      	mov	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e04a      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	461a      	mov	r2, r3
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	ea02 0400 	and.w	r4, r2, r0
 800522e:	ea03 0501 	and.w	r5, r3, r1
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	014b      	lsls	r3, r1, #5
 8005240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005244:	0142      	lsls	r2, r0, #5
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	1b00      	subs	r0, r0, r4
 800524c:	eb61 0105 	sbc.w	r1, r1, r5
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	018b      	lsls	r3, r1, #6
 800525a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800525e:	0182      	lsls	r2, r0, #6
 8005260:	1a12      	subs	r2, r2, r0
 8005262:	eb63 0301 	sbc.w	r3, r3, r1
 8005266:	f04f 0000 	mov.w	r0, #0
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	00d9      	lsls	r1, r3, #3
 8005270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005274:	00d0      	lsls	r0, r2, #3
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	1912      	adds	r2, r2, r4
 800527c:	eb45 0303 	adc.w	r3, r5, r3
 8005280:	f04f 0000 	mov.w	r0, #0
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	0299      	lsls	r1, r3, #10
 800528a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800528e:	0290      	lsls	r0, r2, #10
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	461a      	mov	r2, r3
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	f7fb fb80 	bl	80009a4 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	60bb      	str	r3, [r7, #8]
      break;
 80052c6:	e002      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_RCC_GetSysClockFreq+0x164>)
 80052ca:	60bb      	str	r3, [r7, #8]
      break;
 80052cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ce:	68bb      	ldr	r3, [r7, #8]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bdb0      	pop	{r4, r5, r7, pc}
 80052d8:	40023800 	.word	0x40023800
 80052dc:	00f42400 	.word	0x00f42400
 80052e0:	017d7840 	.word	0x017d7840

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000010 	.word	0x20000010

080052fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005300:	f7ff fff0 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0a9b      	lsrs	r3, r3, #10
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40023800 	.word	0x40023800
 8005320:	0800b048 	.word	0x0800b048

08005324 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005324:	b084      	sub	sp, #16
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	f107 001c 	add.w	r0, r7, #28
 8005332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	2b01      	cmp	r3, #1
 800533a:	d122      	bne.n	8005382 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 fb1c 	bl	80069b4 <USB_CoreReset>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	e01a      	b.n	80053b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fb10 	bl	80069b4 <USB_CoreReset>
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
 80053aa:	e005      	b.n	80053b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d10b      	bne.n	80053d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f043 0206 	orr.w	r2, r3, #6
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f043 0220 	orr.w	r2, r3, #32
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e2:	b004      	add	sp, #16
 80053e4:	4770      	bx	lr
	...

080053e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d165      	bne.n	80054c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4a41      	ldr	r2, [pc, #260]	; (8005504 <USB_SetTurnaroundTime+0x11c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d906      	bls.n	8005412 <USB_SetTurnaroundTime+0x2a>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4a40      	ldr	r2, [pc, #256]	; (8005508 <USB_SetTurnaroundTime+0x120>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d202      	bcs.n	8005412 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800540c:	230f      	movs	r3, #15
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e062      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4a3c      	ldr	r2, [pc, #240]	; (8005508 <USB_SetTurnaroundTime+0x120>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d306      	bcc.n	8005428 <USB_SetTurnaroundTime+0x40>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4a3b      	ldr	r2, [pc, #236]	; (800550c <USB_SetTurnaroundTime+0x124>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d202      	bcs.n	8005428 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005422:	230e      	movs	r3, #14
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e057      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4a38      	ldr	r2, [pc, #224]	; (800550c <USB_SetTurnaroundTime+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d306      	bcc.n	800543e <USB_SetTurnaroundTime+0x56>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4a37      	ldr	r2, [pc, #220]	; (8005510 <USB_SetTurnaroundTime+0x128>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d202      	bcs.n	800543e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005438:	230d      	movs	r3, #13
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e04c      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4a33      	ldr	r2, [pc, #204]	; (8005510 <USB_SetTurnaroundTime+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d306      	bcc.n	8005454 <USB_SetTurnaroundTime+0x6c>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4a32      	ldr	r2, [pc, #200]	; (8005514 <USB_SetTurnaroundTime+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d802      	bhi.n	8005454 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800544e:	230c      	movs	r3, #12
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e041      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4a2f      	ldr	r2, [pc, #188]	; (8005514 <USB_SetTurnaroundTime+0x12c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d906      	bls.n	800546a <USB_SetTurnaroundTime+0x82>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a2e      	ldr	r2, [pc, #184]	; (8005518 <USB_SetTurnaroundTime+0x130>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d802      	bhi.n	800546a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005464:	230b      	movs	r3, #11
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e036      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <USB_SetTurnaroundTime+0x130>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d906      	bls.n	8005480 <USB_SetTurnaroundTime+0x98>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4a29      	ldr	r2, [pc, #164]	; (800551c <USB_SetTurnaroundTime+0x134>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d802      	bhi.n	8005480 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800547a:	230a      	movs	r3, #10
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e02b      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4a26      	ldr	r2, [pc, #152]	; (800551c <USB_SetTurnaroundTime+0x134>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d906      	bls.n	8005496 <USB_SetTurnaroundTime+0xae>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <USB_SetTurnaroundTime+0x138>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d202      	bcs.n	8005496 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005490:	2309      	movs	r3, #9
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e020      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4a21      	ldr	r2, [pc, #132]	; (8005520 <USB_SetTurnaroundTime+0x138>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d306      	bcc.n	80054ac <USB_SetTurnaroundTime+0xc4>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a20      	ldr	r2, [pc, #128]	; (8005524 <USB_SetTurnaroundTime+0x13c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d802      	bhi.n	80054ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054a6:	2308      	movs	r3, #8
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e015      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <USB_SetTurnaroundTime+0x13c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d906      	bls.n	80054c2 <USB_SetTurnaroundTime+0xda>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <USB_SetTurnaroundTime+0x140>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d202      	bcs.n	80054c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054bc:	2307      	movs	r3, #7
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e00a      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054c2:	2306      	movs	r3, #6
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e007      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054ce:	2309      	movs	r3, #9
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e001      	b.n	80054d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054d4:	2309      	movs	r3, #9
 80054d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	00d8acbf 	.word	0x00d8acbf
 8005508:	00e4e1c0 	.word	0x00e4e1c0
 800550c:	00f42400 	.word	0x00f42400
 8005510:	01067380 	.word	0x01067380
 8005514:	011a499f 	.word	0x011a499f
 8005518:	01312cff 	.word	0x01312cff
 800551c:	014ca43f 	.word	0x014ca43f
 8005520:	016e3600 	.word	0x016e3600
 8005524:	01a6ab1f 	.word	0x01a6ab1f
 8005528:	01e84800 	.word	0x01e84800

0800552c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d115      	bne.n	80055be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800559e:	2001      	movs	r0, #1
 80055a0:	f7fc fd0e 	bl	8001fc0 <HAL_Delay>
      ms++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 f972 	bl	8006894 <USB_GetMode>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d01e      	beq.n	80055f4 <USB_SetCurrentMode+0x84>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b31      	cmp	r3, #49	; 0x31
 80055ba:	d9f0      	bls.n	800559e <USB_SetCurrentMode+0x2e>
 80055bc:	e01a      	b.n	80055f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d115      	bne.n	80055f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055d0:	2001      	movs	r0, #1
 80055d2:	f7fc fcf5 	bl	8001fc0 <HAL_Delay>
      ms++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 f959 	bl	8006894 <USB_GetMode>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <USB_SetCurrentMode+0x84>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b31      	cmp	r3, #49	; 0x31
 80055ec:	d9f0      	bls.n	80055d0 <USB_SetCurrentMode+0x60>
 80055ee:	e001      	b.n	80055f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e005      	b.n	8005600 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b32      	cmp	r3, #50	; 0x32
 80055f8:	d101      	bne.n	80055fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005608:	b084      	sub	sp, #16
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e009      	b.n	800563c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	3340      	adds	r3, #64	; 0x40
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	2200      	movs	r2, #0
 8005634:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	3301      	adds	r3, #1
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b0e      	cmp	r3, #14
 8005640:	d9f2      	bls.n	8005628 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11c      	bne.n	8005682 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005656:	f043 0302 	orr.w	r3, r3, #2
 800565a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
 8005680:	e00b      	b.n	800569a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	4619      	mov	r1, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	461a      	mov	r2, r3
 80056b6:	680b      	ldr	r3, [r1, #0]
 80056b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10c      	bne.n	80056da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056c6:	2100      	movs	r1, #0
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f945 	bl	8005958 <USB_SetDevSpeed>
 80056ce:	e008      	b.n	80056e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056d0:	2101      	movs	r1, #1
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f940 	bl	8005958 <USB_SetDevSpeed>
 80056d8:	e003      	b.n	80056e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056da:	2103      	movs	r1, #3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f93b 	bl	8005958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056e2:	2110      	movs	r1, #16
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f8f3 	bl	80058d0 <USB_FlushTxFifo>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f90f 	bl	8005918 <USB_FlushRxFifo>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e043      	b.n	80057b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005744:	d118      	bne.n	8005778 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e013      	b.n	800578a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	461a      	mov	r2, r3
 8005770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e008      	b.n	800578a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	461a      	mov	r2, r3
 80057aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3b7      	bcc.n	800572e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e043      	b.n	800584c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057da:	d118      	bne.n	800580e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e013      	b.n	8005820 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	461a      	mov	r2, r3
 8005806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e008      	b.n	8005820 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	461a      	mov	r2, r3
 8005840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d3b7      	bcc.n	80057c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f043 0210 	orr.w	r2, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <USB_DevInit+0x2c4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f043 0208 	orr.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d107      	bne.n	80058bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c8:	b004      	add	sp, #16
 80058ca:	4770      	bx	lr
 80058cc:	803c3800 	.word	0x803c3800

080058d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <USB_FlushTxFifo+0x44>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e006      	b.n	8005908 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b20      	cmp	r3, #32
 8005904:	d0f1      	beq.n	80058ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	00030d40 	.word	0x00030d40

08005918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2210      	movs	r2, #16
 8005928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <USB_FlushRxFifo+0x3c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e006      	b.n	8005948 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b10      	cmp	r3, #16
 8005944:	d0f1      	beq.n	800592a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	00030d40 	.word	0x00030d40

08005958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0306 	and.w	r3, r3, #6
 80059a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
 80059ae:	e00a      	b.n	80059c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d002      	beq.n	80059bc <USB_GetDevSpeed+0x32>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d102      	bne.n	80059c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059bc:	2302      	movs	r3, #2
 80059be:	75fb      	strb	r3, [r7, #23]
 80059c0:	e001      	b.n	80059c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059c2:	230f      	movs	r3, #15
 80059c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d13a      	bne.n	8005a66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d155      	bne.n	8005ad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	059b      	lsls	r3, r3, #22
 8005a4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	e036      	b.n	8005ad4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	2101      	movs	r1, #1
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d11a      	bne.n	8005ad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aba:	430b      	orrs	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d161      	bne.n	8005bc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	d11f      	bne.n	8005b58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b78:	4013      	ands	r3, r2
 8005b7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4b35      	ldr	r3, [pc, #212]	; (8005c94 <USB_DeactivateEndpoint+0x1b0>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
 8005bc2:	e060      	b.n	8005c86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bda:	d11f      	bne.n	8005c1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	43db      	mvns	r3, r3
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4013      	ands	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	0159      	lsls	r1, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	440b      	add	r3, r1
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <USB_DeactivateEndpoint+0x1b4>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	ec337800 	.word	0xec337800
 8005c98:	eff37800 	.word	0xeff37800

08005c9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	; 0x28
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 815c 	bne.w	8005f76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d132      	bne.n	8005d2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	0cdb      	lsrs	r3, r3, #19
 8005d26:	04db      	lsls	r3, r3, #19
 8005d28:	6113      	str	r3, [r2, #16]
 8005d2a:	e074      	b.n	8005e16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	0cdb      	lsrs	r3, r3, #19
 8005d48:	04db      	lsls	r3, r3, #19
 8005d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6959      	ldr	r1, [r3, #20]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	440b      	add	r3, r1
 8005d88:	1e59      	subs	r1, r3, #1
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d94:	4b9d      	ldr	r3, [pc, #628]	; (800600c <USB_EPStartXfer+0x370>)
 8005d96:	400b      	ands	r3, r1
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	0148      	lsls	r0, r1, #5
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	4401      	add	r1, r0
 8005da0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005da4:	4313      	orrs	r3, r2
 8005da6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbe:	69b9      	ldr	r1, [r7, #24]
 8005dc0:	0148      	lsls	r0, r1, #5
 8005dc2:	69f9      	ldr	r1, [r7, #28]
 8005dc4:	4401      	add	r1, r0
 8005dc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11f      	bne.n	8005e16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005df4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d14b      	bne.n	8005eb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	78db      	ldrb	r3, [r3, #3]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d128      	bne.n	8005e92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d110      	bne.n	8005e72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e00f      	b.n	8005e92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e12f      	b.n	8006114 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ed2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d015      	beq.n	8005f08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8117 	beq.w	8006114 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	69f9      	ldr	r1, [r7, #28]
 8005efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f02:	4313      	orrs	r3, r2
 8005f04:	634b      	str	r3, [r1, #52]	; 0x34
 8005f06:	e105      	b.n	8006114 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	e00f      	b.n	8005f5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	b298      	uxth	r0, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fa2b 	bl	80063ca <USB_WritePacket>
 8005f74:	e0ce      	b.n	8006114 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	0cdb      	lsrs	r3, r3, #19
 8005f92:	04db      	lsls	r3, r3, #19
 8005f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d126      	bne.n	8006010 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006006:	6113      	str	r3, [r2, #16]
 8006008:	e036      	b.n	8006078 <USB_EPStartXfer+0x3dc>
 800600a:	bf00      	nop
 800600c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4413      	add	r3, r2
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	8afb      	ldrh	r3, [r7, #22]
 8006036:	04d9      	lsls	r1, r3, #19
 8006038:	4b39      	ldr	r3, [pc, #228]	; (8006120 <USB_EPStartXfer+0x484>)
 800603a:	400b      	ands	r3, r1
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	0148      	lsls	r0, r1, #5
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	4401      	add	r1, r0
 8006044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006048:	4313      	orrs	r3, r2
 800604a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	8af9      	ldrh	r1, [r7, #22]
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	0148      	lsls	r0, r1, #5
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	4401      	add	r1, r0
 8006070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d10d      	bne.n	800609a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	68d9      	ldr	r1, [r3, #12]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	460a      	mov	r2, r1
 8006098:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	78db      	ldrb	r3, [r3, #3]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d128      	bne.n	80060f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d110      	bne.n	80060d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e00f      	b.n	80060f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	1ff80000 	.word	0x1ff80000

08006124 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	f040 80cd 	bne.w	80062e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d132      	bne.n	80061b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800616c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	0cdb      	lsrs	r3, r3, #19
 80061ae:	04db      	lsls	r3, r3, #19
 80061b0:	6113      	str	r3, [r2, #16]
 80061b2:	e04e      	b.n	8006252 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ce:	0cdb      	lsrs	r3, r3, #19
 80061d0:	04db      	lsls	r3, r3, #19
 80061d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006242:	6939      	ldr	r1, [r7, #16]
 8006244:	0148      	lsls	r0, r1, #5
 8006246:	6979      	ldr	r1, [r7, #20]
 8006248:	4401      	add	r1, r0
 800624a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800624e:	4313      	orrs	r3, r2
 8006250:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11e      	bne.n	8006296 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	461a      	mov	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e092      	b.n	80063bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d07e      	beq.n	80063bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	2101      	movs	r1, #1
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	6979      	ldr	r1, [r7, #20]
 80062d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062da:	4313      	orrs	r3, r2
 80062dc:	634b      	str	r3, [r1, #52]	; 0x34
 80062de:	e06d      	b.n	80063bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fa:	0cdb      	lsrs	r3, r3, #19
 80062fc:	04db      	lsls	r3, r3, #19
 80062fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800631e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006322:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	0148      	lsls	r0, r1, #5
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	4401      	add	r1, r0
 8006372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10d      	bne.n	800639c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	68d9      	ldr	r1, [r3, #12]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	460a      	mov	r2, r1
 800639a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b089      	sub	sp, #36	; 0x24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4611      	mov	r1, r2
 80063d6:	461a      	mov	r2, r3
 80063d8:	460b      	mov	r3, r1
 80063da:	71fb      	strb	r3, [r7, #7]
 80063dc:	4613      	mov	r3, r2
 80063de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d123      	bne.n	8006438 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063f0:	88bb      	ldrh	r3, [r7, #4]
 80063f2:	3303      	adds	r3, #3
 80063f4:	089b      	lsrs	r3, r3, #2
 80063f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e018      	b.n	8006430 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	031a      	lsls	r2, r3, #12
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4413      	add	r3, r2
 8006406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640a:	461a      	mov	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3301      	adds	r3, #1
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	429a      	cmp	r2, r3
 8006436:	d3e2      	bcc.n	80063fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006446:	b480      	push	{r7}
 8006448:	b08b      	sub	sp, #44	; 0x2c
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	089b      	lsrs	r3, r3, #2
 8006460:	b29b      	uxth	r3, r3
 8006462:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800646c:	2300      	movs	r3, #0
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	e014      	b.n	800649c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	601a      	str	r2, [r3, #0]
    pDest++;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	3301      	adds	r3, #1
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	3301      	adds	r3, #1
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	3301      	adds	r3, #1
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	3301      	adds	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	3301      	adds	r3, #1
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3e6      	bcc.n	8006472 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064a4:	8bfb      	ldrh	r3, [r7, #30]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01e      	beq.n	80064e8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b4:	461a      	mov	r2, r3
 80064b6:	f107 0310 	add.w	r3, r7, #16
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	701a      	strb	r2, [r3, #0]
      i++;
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	3301      	adds	r3, #1
 80064d4:	623b      	str	r3, [r7, #32]
      pDest++;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	3301      	adds	r3, #1
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064dc:	8bfb      	ldrh	r3, [r7, #30]
 80064de:	3b01      	subs	r3, #1
 80064e0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064e2:	8bfb      	ldrh	r3, [r7, #30]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ea      	bne.n	80064be <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	372c      	adds	r7, #44	; 0x2c
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d12c      	bne.n	800656c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	db12      	blt.n	800654a <USB_EPSetStall+0x54>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006548:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e02b      	b.n	80065c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	db12      	blt.n	80065a4 <USB_EPSetStall+0xae>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d128      	bne.n	8006640 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800660c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	78db      	ldrb	r3, [r3, #3]
 8006612:	2b03      	cmp	r3, #3
 8006614:	d003      	beq.n	800661e <USB_EPClearStall+0x4c>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d138      	bne.n	8006690 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e027      	b.n	8006690 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800665e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	78db      	ldrb	r3, [r3, #3]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d003      	beq.n	8006670 <USB_EPClearStall+0x9e>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d10f      	bne.n	8006690 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d8:	4313      	orrs	r3, r2
 80066da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006704:	f023 0303 	bic.w	r3, r3, #3
 8006708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006718:	f023 0302 	bic.w	r3, r3, #2
 800671c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675a:	f043 0302 	orr.w	r3, r3, #2
 800675e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4013      	ands	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006786:	68fb      	ldr	r3, [r7, #12]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	0c1b      	lsrs	r3, r3, #16
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	4013      	ands	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	b29b      	uxth	r3, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800682a:	68bb      	ldr	r3, [r7, #8]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
 8006868:	01db      	lsls	r3, r3, #7
 800686a:	b2db      	uxtb	r3, r3
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4013      	ands	r3, r2
 8006884:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006886:	68bb      	ldr	r3, [r7, #8]
}
 8006888:	4618      	mov	r0, r3
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0301 	and.w	r3, r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068ce:	f023 0307 	bic.w	r3, r3, #7
 80068d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	460b      	mov	r3, r1
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	333c      	adds	r3, #60	; 0x3c
 800690e:	3304      	adds	r3, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4a26      	ldr	r2, [pc, #152]	; (80069b0 <USB_EP0_OutStart+0xb8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d90a      	bls.n	8006932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d101      	bne.n	8006932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e037      	b.n	80069a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006960:	f043 0318 	orr.w	r3, r3, #24
 8006964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10f      	bne.n	80069a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800699e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	4f54300a 	.word	0x4f54300a

080069b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <USB_CoreReset+0x60>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e01a      	b.n	8006a06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	daf3      	bge.n	80069c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f043 0201 	orr.w	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <USB_CoreReset+0x60>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e006      	b.n	8006a06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d0f1      	beq.n	80069e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	00030d40 	.word	0x00030d40

08006a18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a28:	f002 f972 	bl	8008d10 <USBD_static_malloc>
 8006a2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e066      	b.n	8006b0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7c1b      	ldrb	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d119      	bne.n	8006a84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a54:	2202      	movs	r2, #2
 8006a56:	2181      	movs	r1, #129	; 0x81
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 f836 	bl	8008aca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a68:	2202      	movs	r2, #2
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f002 f82c 	bl	8008aca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006a82:	e016      	b.n	8006ab2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	2202      	movs	r2, #2
 8006a88:	2181      	movs	r1, #129	; 0x81
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f002 f81d 	bl	8008aca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	2202      	movs	r2, #2
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f814 	bl	8008aca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2210      	movs	r2, #16
 8006aae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	2182      	movs	r1, #130	; 0x82
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 f806 	bl	8008aca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	7c1b      	ldrb	r3, [r3, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af2:	2101      	movs	r1, #1
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f002 f8d7 	bl	8008ca8 <USBD_LL_PrepareReceive>
 8006afa:	e007      	b.n	8006b0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f002 f8ce 	bl	8008ca8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b22:	2181      	movs	r1, #129	; 0x81
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 fff6 	bl	8008b16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b30:	2101      	movs	r1, #1
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 ffef 	bl	8008b16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b40:	2182      	movs	r1, #130	; 0x82
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 ffe7 	bl	8008b16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 f8da 	bl	8008d2c <USBD_static_free>
    pdev->pClassData = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0af      	b.n	8006d14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d03f      	beq.n	8006c40 <USBD_CDC_Setup+0xb4>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	f040 809f 	bne.w	8006d04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d02e      	beq.n	8006c2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da16      	bge.n	8006c06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006be4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	88d2      	ldrh	r2, [r2, #6]
 8006bea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	88db      	ldrh	r3, [r3, #6]
 8006bf0:	2b07      	cmp	r3, #7
 8006bf2:	bf28      	it	cs
 8006bf4:	2307      	movcs	r3, #7
 8006bf6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	89fa      	ldrh	r2, [r7, #14]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 fb19 	bl	8008236 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006c04:	e085      	b.n	8006d12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	785a      	ldrb	r2, [r3, #1]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	88db      	ldrh	r3, [r3, #6]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c1c:	6939      	ldr	r1, [r7, #16]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	88db      	ldrh	r3, [r3, #6]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fb32 	bl	800828e <USBD_CtlPrepareRx>
      break;
 8006c2a:	e072      	b.n	8006d12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	7850      	ldrb	r0, [r2, #1]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	4798      	blx	r3
      break;
 8006c3e:	e068      	b.n	8006d12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	d852      	bhi.n	8006cee <USBD_CDC_Setup+0x162>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <USBD_CDC_Setup+0xc4>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006cfd 	.word	0x08006cfd
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006cef 	.word	0x08006cef
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006cef 	.word	0x08006cef
 8006c68:	08006cef 	.word	0x08006cef
 8006c6c:	08006cef 	.word	0x08006cef
 8006c70:	08006cef 	.word	0x08006cef
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006cab 	.word	0x08006cab
 8006c7c:	08006cd5 	.word	0x08006cd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d107      	bne.n	8006c9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c8c:	f107 030a 	add.w	r3, r7, #10
 8006c90:	2202      	movs	r2, #2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 face 	bl	8008236 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c9a:	e032      	b.n	8006d02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fa58 	bl	8008154 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ca8:	e02b      	b.n	8006d02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cb6:	f107 030d 	add.w	r3, r7, #13
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fab9 	bl	8008236 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc4:	e01d      	b.n	8006d02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fa43 	bl	8008154 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd2:	e016      	b.n	8006d02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d00f      	beq.n	8006d00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fa36 	bl	8008154 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cec:	e008      	b.n	8006d00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 fa2f 	bl	8008154 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfa:	e002      	b.n	8006d02 <USBD_CDC_Setup+0x176>
          break;
 8006cfc:	bf00      	nop
 8006cfe:	e008      	b.n	8006d12 <USBD_CDC_Setup+0x186>
          break;
 8006d00:	bf00      	nop
      }
      break;
 8006d02:	e006      	b.n	8006d12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fa24 	bl	8008154 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d10:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e04f      	b.n	8006dde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	3318      	adds	r3, #24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d029      	beq.n	8006db0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	3318      	adds	r3, #24
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	78f9      	ldrb	r1, [r7, #3]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	460b      	mov	r3, r1
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	1a5b      	subs	r3, r3, r1
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4403      	add	r3, r0
 8006d7c:	3344      	adds	r3, #68	; 0x44
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d84:	fb03 f301 	mul.w	r3, r3, r1
 8006d88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d110      	bne.n	8006db0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3318      	adds	r3, #24
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006da2:	78f9      	ldrb	r1, [r7, #3]
 8006da4:	2300      	movs	r3, #0
 8006da6:	2200      	movs	r2, #0
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 ff5c 	bl	8008c66 <USBD_LL_Transmit>
 8006dae:	e015      	b.n	8006ddc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e015      	b.n	8006e34 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 ff6c 	bl	8008cea <USBD_LL_GetRxDataSize>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e01b      	b.n	8006e8e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d015      	beq.n	8006e8c <USBD_CDC_EP0_RxReady+0x50>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e66:	2bff      	cmp	r3, #255	; 0xff
 8006e68:	d010      	beq.n	8006e8c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e80:	b292      	uxth	r2, r2
 8006e82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	22ff      	movs	r2, #255	; 0xff
 8006e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2243      	movs	r2, #67	; 0x43
 8006ea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ea6:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	200000a4 	.word	0x200000a4

08006eb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2243      	movs	r2, #67	; 0x43
 8006ec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ec6:	4b03      	ldr	r3, [pc, #12]	; (8006ed4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20000060 	.word	0x20000060

08006ed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2243      	movs	r2, #67	; 0x43
 8006ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006ee6:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	200000e8 	.word	0x200000e8

08006ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	220a      	movs	r2, #10
 8006f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f06:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	2000001c 	.word	0x2000001c

08006f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e004      	b.n	8006f36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f54:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e008      	b.n	8006f72 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e004      	b.n	8006fa4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e01a      	b.n	8007008 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d114      	bne.n	8007006 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ffa:	2181      	movs	r1, #129	; 0x81
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fe32 	bl	8008c66 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	e016      	b.n	800705c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c1b      	ldrb	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800703c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007040:	2101      	movs	r1, #1
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fe30 	bl	8008ca8 <USBD_LL_PrepareReceive>
 8007048:	e007      	b.n	800705a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fe27 	bl	8008ca8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e01f      	b.n	80070bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f001 fca3 	bl	80089fc <USBD_LL_Init>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	e016      	b.n	800710a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	f107 020e 	add.w	r2, r7, #14
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	4602      	mov	r2, r0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fcba 	bl	8008a94 <USBD_LL_Start>
 8007120:	4603      	mov	r3, r0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800714c:	2303      	movs	r3, #3
 800714e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	4611      	mov	r1, r2
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
 800716a:	4603      	mov	r3, r0
 800716c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	4611      	mov	r1, r2
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
  }

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 ff90 	bl	80080e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d01a      	beq.n	800721a <USBD_LL_SetupStage+0x72>
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d822      	bhi.n	800722e <USBD_LL_SetupStage+0x86>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <USBD_LL_SetupStage+0x4a>
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d00a      	beq.n	8007206 <USBD_LL_SetupStage+0x5e>
 80071f0:	e01d      	b.n	800722e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa62 	bl	80076c4 <USBD_StdDevReq>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
      break;
 8007204:	e020      	b.n	8007248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fac6 	bl	80077a0 <USBD_StdItfReq>
 8007214:	4603      	mov	r3, r0
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e016      	b.n	8007248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb05 	bl	8007832 <USBD_StdEPReq>
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
      break;
 800722c:	e00c      	b.n	8007248 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fc89 	bl	8008b54 <USBD_LL_StallEP>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	460b      	mov	r3, r1
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d138      	bne.n	80072d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800726c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007274:	2b03      	cmp	r3, #3
 8007276:	d14a      	bne.n	800730e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	429a      	cmp	r2, r3
 8007282:	d913      	bls.n	80072ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	1ad2      	subs	r2, r2, r3
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	4293      	cmp	r3, r2
 800729c:	bf28      	it	cs
 800729e:	4613      	movcs	r3, r2
 80072a0:	461a      	mov	r2, r3
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f001 f80f 	bl	80082c8 <USBD_CtlContinueRx>
 80072aa:	e030      	b.n	800730e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d10b      	bne.n	80072d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 f80a 	bl	80082ea <USBD_CtlSendStatus>
 80072d6:	e01a      	b.n	800730e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d114      	bne.n	800730e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	4611      	mov	r1, r2
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	4798      	blx	r3
 8007300:	4603      	mov	r3, r0
 8007302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	e000      	b.n	8007310 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	460b      	mov	r3, r1
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d16b      	bne.n	8007404 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3314      	adds	r3, #20
 8007330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007338:	2b02      	cmp	r3, #2
 800733a:	d156      	bne.n	80073ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d914      	bls.n	8007372 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	1ad2      	subs	r2, r2, r3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	461a      	mov	r2, r3
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 ff84 	bl	800826c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007364:	2300      	movs	r3, #0
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f001 fc9c 	bl	8008ca8 <USBD_LL_PrepareReceive>
 8007370:	e03b      	b.n	80073ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	429a      	cmp	r2, r3
 800737c:	d11c      	bne.n	80073b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007386:	429a      	cmp	r2, r3
 8007388:	d316      	bcc.n	80073b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007394:	429a      	cmp	r2, r3
 8007396:	d20f      	bcs.n	80073b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007398:	2200      	movs	r2, #0
 800739a:	2100      	movs	r1, #0
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 ff65 	bl	800826c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073aa:	2300      	movs	r3, #0
 80073ac:	2200      	movs	r2, #0
 80073ae:	2100      	movs	r1, #0
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f001 fc79 	bl	8008ca8 <USBD_LL_PrepareReceive>
 80073b6:	e018      	b.n	80073ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d10b      	bne.n	80073dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073dc:	2180      	movs	r1, #128	; 0x80
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 fbb8 	bl	8008b54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 ff93 	bl	8008310 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d122      	bne.n	800743a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fe98 	bl	800712a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007402:	e01a      	b.n	800743a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b03      	cmp	r3, #3
 800740e:	d114      	bne.n	800743a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00e      	beq.n	800743a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	7afa      	ldrb	r2, [r7, #11]
 8007426:	4611      	mov	r1, r2
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	4798      	blx	r3
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	e000      	b.n	800743c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e02f      	b.n	80074d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00f      	beq.n	80074a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6852      	ldr	r2, [r2, #4]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4611      	mov	r1, r2
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a2:	2340      	movs	r3, #64	; 0x40
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 fb0e 	bl	8008aca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2240      	movs	r2, #64	; 0x40
 80074ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	2200      	movs	r2, #0
 80074c2:	2180      	movs	r1, #128	; 0x80
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fb00 	bl	8008aca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	78fa      	ldrb	r2, [r7, #3]
 80074f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750e:	b2da      	uxtb	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2204      	movs	r2, #4
 800751a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b04      	cmp	r3, #4
 800753e:	d106      	bne.n	800754e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007546:	b2da      	uxtb	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	e012      	b.n	8007598 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d10b      	bne.n	8007596 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e014      	b.n	80075e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d10d      	bne.n	80075e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	4611      	mov	r1, r2
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	e014      	b.n	8007630 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d10d      	bne.n	800762e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	4611      	mov	r1, r2
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d009      	beq.n	800767c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6852      	ldr	r2, [r2, #4]
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	4611      	mov	r1, r2
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
  }

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007686:	b480      	push	{r7}
 8007688:	b087      	sub	sp, #28
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	3301      	adds	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a4:	8a3b      	ldrh	r3, [r7, #16]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	b21a      	sxth	r2, r3
 80076aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b21b      	sxth	r3, r3
 80076b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b4:	89fb      	ldrh	r3, [r7, #14]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <USBD_StdDevReq+0x26>
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d853      	bhi.n	800778a <USBD_StdDevReq+0xc6>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <USBD_StdDevReq+0x3a>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d14f      	bne.n	800778a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	e04a      	b.n	8007794 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b09      	cmp	r3, #9
 8007704:	d83b      	bhi.n	800777e <USBD_StdDevReq+0xba>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <USBD_StdDevReq+0x48>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007761 	.word	0x08007761
 8007710:	08007775 	.word	0x08007775
 8007714:	0800777f 	.word	0x0800777f
 8007718:	0800776b 	.word	0x0800776b
 800771c:	0800777f 	.word	0x0800777f
 8007720:	0800773f 	.word	0x0800773f
 8007724:	08007735 	.word	0x08007735
 8007728:	0800777f 	.word	0x0800777f
 800772c:	08007757 	.word	0x08007757
 8007730:	08007749 	.word	0x08007749
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9de 	bl	8007af8 <USBD_GetDescriptor>
          break;
 800773c:	e024      	b.n	8007788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb43 	bl	8007dcc <USBD_SetAddress>
          break;
 8007746:	e01f      	b.n	8007788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fb82 	bl	8007e54 <USBD_SetConfig>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
          break;
 8007754:	e018      	b.n	8007788 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc21 	bl	8007fa0 <USBD_GetConfig>
          break;
 800775e:	e013      	b.n	8007788 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fc52 	bl	800800c <USBD_GetStatus>
          break;
 8007768:	e00e      	b.n	8007788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc81 	bl	8008074 <USBD_SetFeature>
          break;
 8007772:	e009      	b.n	8007788 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fc90 	bl	800809c <USBD_ClrFeature>
          break;
 800777c:	e004      	b.n	8007788 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fce7 	bl	8008154 <USBD_CtlError>
          break;
 8007786:	bf00      	nop
      }
      break;
 8007788:	e004      	b.n	8007794 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fce1 	bl	8008154 <USBD_CtlError>
      break;
 8007792:	bf00      	nop
  }

  return ret;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop

080077a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d005      	beq.n	80077c6 <USBD_StdItfReq+0x26>
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d82f      	bhi.n	800781e <USBD_StdItfReq+0x7e>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <USBD_StdItfReq+0x26>
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	d12b      	bne.n	800781e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d81d      	bhi.n	8007810 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	889b      	ldrh	r3, [r3, #4]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d813      	bhi.n	8007806 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	88db      	ldrh	r3, [r3, #6]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d110      	bne.n	800781a <USBD_StdItfReq+0x7a>
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fd73 	bl	80082ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007804:	e009      	b.n	800781a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fca3 	bl	8008154 <USBD_CtlError>
          break;
 800780e:	e004      	b.n	800781a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc9e 	bl	8008154 <USBD_CtlError>
          break;
 8007818:	e000      	b.n	800781c <USBD_StdItfReq+0x7c>
          break;
 800781a:	bf00      	nop
      }
      break;
 800781c:	e004      	b.n	8007828 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fc97 	bl	8008154 <USBD_CtlError>
      break;
 8007826:	bf00      	nop
  }

  return ret;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	889b      	ldrh	r3, [r3, #4]
 8007844:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d007      	beq.n	8007862 <USBD_StdEPReq+0x30>
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	f200 8145 	bhi.w	8007ae2 <USBD_StdEPReq+0x2b0>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <USBD_StdEPReq+0x44>
 800785c:	2b20      	cmp	r3, #32
 800785e:	f040 8140 	bne.w	8007ae2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
      break;
 8007874:	e13a      	b.n	8007aec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d007      	beq.n	800788e <USBD_StdEPReq+0x5c>
 800787e:	2b03      	cmp	r3, #3
 8007880:	f300 8129 	bgt.w	8007ad6 <USBD_StdEPReq+0x2a4>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d07f      	beq.n	8007988 <USBD_StdEPReq+0x156>
 8007888:	2b01      	cmp	r3, #1
 800788a:	d03c      	beq.n	8007906 <USBD_StdEPReq+0xd4>
 800788c:	e123      	b.n	8007ad6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d002      	beq.n	80078a0 <USBD_StdEPReq+0x6e>
 800789a:	2b03      	cmp	r3, #3
 800789c:	d016      	beq.n	80078cc <USBD_StdEPReq+0x9a>
 800789e:	e02c      	b.n	80078fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00d      	beq.n	80078c2 <USBD_StdEPReq+0x90>
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b80      	cmp	r3, #128	; 0x80
 80078aa:	d00a      	beq.n	80078c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f94f 	bl	8008b54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078b6:	2180      	movs	r1, #128	; 0x80
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f94b 	bl	8008b54 <USBD_LL_StallEP>
 80078be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078c0:	e020      	b.n	8007904 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fc45 	bl	8008154 <USBD_CtlError>
              break;
 80078ca:	e01b      	b.n	8007904 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	885b      	ldrh	r3, [r3, #2]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10e      	bne.n	80078f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <USBD_StdEPReq+0xc0>
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b80      	cmp	r3, #128	; 0x80
 80078de:	d008      	beq.n	80078f2 <USBD_StdEPReq+0xc0>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	88db      	ldrh	r3, [r3, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d104      	bne.n	80078f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f931 	bl	8008b54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fcf9 	bl	80082ea <USBD_CtlSendStatus>

              break;
 80078f8:	e004      	b.n	8007904 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc29 	bl	8008154 <USBD_CtlError>
              break;
 8007902:	bf00      	nop
          }
          break;
 8007904:	e0ec      	b.n	8007ae0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d002      	beq.n	8007918 <USBD_StdEPReq+0xe6>
 8007912:	2b03      	cmp	r3, #3
 8007914:	d016      	beq.n	8007944 <USBD_StdEPReq+0x112>
 8007916:	e030      	b.n	800797a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00d      	beq.n	800793a <USBD_StdEPReq+0x108>
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d00a      	beq.n	800793a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f913 	bl	8008b54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800792e:	2180      	movs	r1, #128	; 0x80
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 f90f 	bl	8008b54 <USBD_LL_StallEP>
 8007936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007938:	e025      	b.n	8007986 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc09 	bl	8008154 <USBD_CtlError>
              break;
 8007942:	e020      	b.n	8007986 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	885b      	ldrh	r3, [r3, #2]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d11b      	bne.n	8007984 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007952:	2b00      	cmp	r3, #0
 8007954:	d004      	beq.n	8007960 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f919 	bl	8008b92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fcc2 	bl	80082ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007978:	e004      	b.n	8007984 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbe9 	bl	8008154 <USBD_CtlError>
              break;
 8007982:	e000      	b.n	8007986 <USBD_StdEPReq+0x154>
              break;
 8007984:	bf00      	nop
          }
          break;
 8007986:	e0ab      	b.n	8007ae0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d002      	beq.n	800799a <USBD_StdEPReq+0x168>
 8007994:	2b03      	cmp	r3, #3
 8007996:	d032      	beq.n	80079fe <USBD_StdEPReq+0x1cc>
 8007998:	e097      	b.n	8007aca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <USBD_StdEPReq+0x17e>
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d004      	beq.n	80079b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fbd3 	bl	8008154 <USBD_CtlError>
                break;
 80079ae:	e091      	b.n	8007ad4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da0b      	bge.n	80079d0 <USBD_StdEPReq+0x19e>
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	3310      	adds	r3, #16
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	3304      	adds	r3, #4
 80079ce:	e00b      	b.n	80079e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	3304      	adds	r3, #4
 80079e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2202      	movs	r2, #2
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fc1d 	bl	8008236 <USBD_CtlSendData>
              break;
 80079fc:	e06a      	b.n	8007ad4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da11      	bge.n	8007a2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	f003 020f 	and.w	r2, r3, #15
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d117      	bne.n	8007a50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fb96 	bl	8008154 <USBD_CtlError>
                  break;
 8007a28:	e054      	b.n	8007ad4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fb83 	bl	8008154 <USBD_CtlError>
                  break;
 8007a4e:	e041      	b.n	8007ad4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da0b      	bge.n	8007a70 <USBD_StdEPReq+0x23e>
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	3310      	adds	r3, #16
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	e00b      	b.n	8007a88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	3304      	adds	r3, #4
 8007a88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <USBD_StdEPReq+0x264>
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d103      	bne.n	8007a9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e00e      	b.n	8007abc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f894 	bl	8008bd0 <USBD_LL_IsStallEP>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e002      	b.n	8007abc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fbb7 	bl	8008236 <USBD_CtlSendData>
              break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb41 	bl	8008154 <USBD_CtlError>
              break;
 8007ad2:	bf00      	nop
          }
          break;
 8007ad4:	e004      	b.n	8007ae0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb3b 	bl	8008154 <USBD_CtlError>
          break;
 8007ade:	bf00      	nop
      }
      break;
 8007ae0:	e004      	b.n	8007aec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fb35 	bl	8008154 <USBD_CtlError>
      break;
 8007aea:	bf00      	nop
  }

  return ret;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b06      	cmp	r3, #6
 8007b1a:	f200 8128 	bhi.w	8007d6e <USBD_GetDescriptor+0x276>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <USBD_GetDescriptor+0x2c>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b41 	.word	0x08007b41
 8007b28:	08007b59 	.word	0x08007b59
 8007b2c:	08007b99 	.word	0x08007b99
 8007b30:	08007d6f 	.word	0x08007d6f
 8007b34:	08007d6f 	.word	0x08007d6f
 8007b38:	08007d0f 	.word	0x08007d0f
 8007b3c:	08007d3b 	.word	0x08007d3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
      break;
 8007b56:	e112      	b.n	8007d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7c1b      	ldrb	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10d      	bne.n	8007b7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	2202      	movs	r2, #2
 8007b78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b7a:	e100      	b.n	8007d7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f107 0208 	add.w	r2, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
      break;
 8007b96:	e0f2      	b.n	8007d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	885b      	ldrh	r3, [r3, #2]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	f200 80ac 	bhi.w	8007cfc <USBD_GetDescriptor+0x204>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_GetDescriptor+0xb4>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bf9 	.word	0x08007bf9
 8007bb4:	08007c2d 	.word	0x08007c2d
 8007bb8:	08007c61 	.word	0x08007c61
 8007bbc:	08007c95 	.word	0x08007c95
 8007bc0:	08007cc9 	.word	0x08007cc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7c12      	ldrb	r2, [r2, #16]
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007be6:	e091      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fab2 	bl	8008154 <USBD_CtlError>
            err++;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bf6:	e089      	b.n	8007d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1a:	e077      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa98 	bl	8008154 <USBD_CtlError>
            err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2a:	e06f      	b.n	8007d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4e:	e05d      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa7e 	bl	8008154 <USBD_CtlError>
            err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5e:	e055      	b.n	8007d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c82:	e043      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa64 	bl	8008154 <USBD_CtlError>
            err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
          break;
 8007c92:	e03b      	b.n	8007d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb6:	e029      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa4a 	bl	8008154 <USBD_CtlError>
            err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc6:	e021      	b.n	8007d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cea:	e00f      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa30 	bl	8008154 <USBD_CtlError>
            err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfa:	e007      	b.n	8007d0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa28 	bl	8008154 <USBD_CtlError>
          err++;
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	3301      	adds	r3, #1
 8007d08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007d0a:	bf00      	nop
      }
      break;
 8007d0c:	e037      	b.n	8007d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7c1b      	ldrb	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	f107 0208 	add.w	r2, r7, #8
 8007d22:	4610      	mov	r0, r2
 8007d24:	4798      	blx	r3
 8007d26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d28:	e029      	b.n	8007d7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa11 	bl	8008154 <USBD_CtlError>
        err++;
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	3301      	adds	r3, #1
 8007d36:	72fb      	strb	r3, [r7, #11]
      break;
 8007d38:	e021      	b.n	8007d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7c1b      	ldrb	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10d      	bne.n	8007d5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4798      	blx	r3
 8007d52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	2207      	movs	r2, #7
 8007d5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d5c:	e00f      	b.n	8007d7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9f7 	bl	8008154 <USBD_CtlError>
        err++;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6c:	e007      	b.n	8007d7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f9ef 	bl	8008154 <USBD_CtlError>
      err++;
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d7c:	bf00      	nop
  }

  if (err != 0U)
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11e      	bne.n	8007dc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	88db      	ldrh	r3, [r3, #6]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d016      	beq.n	8007dba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d8c:	893b      	ldrh	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00e      	beq.n	8007db0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	88da      	ldrh	r2, [r3, #6]
 8007d96:	893b      	ldrh	r3, [r7, #8]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	bf28      	it	cs
 8007d9c:	4613      	movcs	r3, r2
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007da2:	893b      	ldrh	r3, [r7, #8]
 8007da4:	461a      	mov	r2, r3
 8007da6:	68f9      	ldr	r1, [r7, #12]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fa44 	bl	8008236 <USBD_CtlSendData>
 8007dae:	e009      	b.n	8007dc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f9ce 	bl	8008154 <USBD_CtlError>
 8007db8:	e004      	b.n	8007dc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa95 	bl	80082ea <USBD_CtlSendStatus>
 8007dc0:	e000      	b.n	8007dc4 <USBD_GetDescriptor+0x2cc>
    return;
 8007dc2:	bf00      	nop
  }
}
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	889b      	ldrh	r3, [r3, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d131      	bne.n	8007e42 <USBD_SetAddress+0x76>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d12d      	bne.n	8007e42 <USBD_SetAddress+0x76>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	2b7f      	cmp	r3, #127	; 0x7f
 8007dec:	d829      	bhi.n	8007e42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	885b      	ldrh	r3, [r3, #2]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d104      	bne.n	8007e10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9a3 	bl	8008154 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	e01d      	b.n	8007e4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7bfa      	ldrb	r2, [r7, #15]
 8007e14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 ff03 	bl	8008c28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa61 	bl	80082ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d004      	beq.n	8007e38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2202      	movs	r2, #2
 8007e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	e009      	b.n	8007e4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e40:	e004      	b.n	8007e4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f985 	bl	8008154 <USBD_CtlError>
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	885b      	ldrh	r3, [r3, #2]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	4b4c      	ldr	r3, [pc, #304]	; (8007f9c <USBD_SetConfig+0x148>)
 8007e6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e6c:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <USBD_SetConfig+0x148>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d905      	bls.n	8007e80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f96c 	bl	8008154 <USBD_CtlError>
    return USBD_FAIL;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e088      	b.n	8007f92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d002      	beq.n	8007e92 <USBD_SetConfig+0x3e>
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d025      	beq.n	8007edc <USBD_SetConfig+0x88>
 8007e90:	e071      	b.n	8007f76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e92:	4b42      	ldr	r3, [pc, #264]	; (8007f9c <USBD_SetConfig+0x148>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01c      	beq.n	8007ed4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007e9a:	4b40      	ldr	r3, [pc, #256]	; (8007f9c <USBD_SetConfig+0x148>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ea4:	4b3d      	ldr	r3, [pc, #244]	; (8007f9c <USBD_SetConfig+0x148>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff f948 	bl	8007140 <USBD_SetClassConfig>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f949 	bl	8008154 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ec2:	e065      	b.n	8007f90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fa10 	bl	80082ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ed2:	e05d      	b.n	8007f90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fa08 	bl	80082ea <USBD_CtlSendStatus>
      break;
 8007eda:	e059      	b.n	8007f90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007edc:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <USBD_SetConfig+0x148>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d112      	bne.n	8007f0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007eec:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <USBD_SetConfig+0x148>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ef6:	4b29      	ldr	r3, [pc, #164]	; (8007f9c <USBD_SetConfig+0x148>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff f93b 	bl	8007178 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9f1 	bl	80082ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f08:	e042      	b.n	8007f90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <USBD_SetConfig+0x148>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d02a      	beq.n	8007f6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff f929 	bl	8007178 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <USBD_SetConfig+0x148>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <USBD_SetConfig+0x148>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff f902 	bl	8007140 <USBD_SetClassConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f903 	bl	8008154 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff f90e 	bl	8007178 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f64:	e014      	b.n	8007f90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9bf 	bl	80082ea <USBD_CtlSendStatus>
      break;
 8007f6c:	e010      	b.n	8007f90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9bb 	bl	80082ea <USBD_CtlSendStatus>
      break;
 8007f74:	e00c      	b.n	8007f90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f8eb 	bl	8008154 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f7e:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <USBD_SetConfig+0x148>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff f8f7 	bl	8007178 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8e:	bf00      	nop
  }

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200005b2 	.word	0x200005b2

08007fa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d004      	beq.n	8007fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8cd 	bl	8008154 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fba:	e023      	b.n	8008004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	dc02      	bgt.n	8007fce <USBD_GetConfig+0x2e>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc03      	bgt.n	8007fd4 <USBD_GetConfig+0x34>
 8007fcc:	e015      	b.n	8007ffa <USBD_GetConfig+0x5a>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d00b      	beq.n	8007fea <USBD_GetConfig+0x4a>
 8007fd2:	e012      	b.n	8007ffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f927 	bl	8008236 <USBD_CtlSendData>
        break;
 8007fe8:	e00c      	b.n	8008004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3304      	adds	r3, #4
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f91f 	bl	8008236 <USBD_CtlSendData>
        break;
 8007ff8:	e004      	b.n	8008004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f8a9 	bl	8008154 <USBD_CtlError>
        break;
 8008002:	bf00      	nop
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b02      	cmp	r3, #2
 8008022:	d81e      	bhi.n	8008062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	88db      	ldrh	r3, [r3, #6]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d004      	beq.n	8008036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f890 	bl	8008154 <USBD_CtlError>
        break;
 8008034:	e01a      	b.n	800806c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f043 0202 	orr.w	r2, r3, #2
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	330c      	adds	r3, #12
 8008056:	2202      	movs	r2, #2
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8eb 	bl	8008236 <USBD_CtlSendData>
      break;
 8008060:	e004      	b.n	800806c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f875 	bl	8008154 <USBD_CtlError>
      break;
 800806a:	bf00      	nop
  }
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d106      	bne.n	8008094 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f92b 	bl	80082ea <USBD_CtlSendStatus>
  }
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d80b      	bhi.n	80080cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	885b      	ldrh	r3, [r3, #2]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d10c      	bne.n	80080d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f910 	bl	80082ea <USBD_CtlSendStatus>
      }
      break;
 80080ca:	e004      	b.n	80080d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f840 	bl	8008154 <USBD_CtlError>
      break;
 80080d4:	e000      	b.n	80080d8 <USBD_ClrFeature+0x3c>
      break;
 80080d6:	bf00      	nop
  }
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff fabb 	bl	8007686 <SWAPBYTE>
 8008110:	4603      	mov	r3, r0
 8008112:	461a      	mov	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f7ff faae 	bl	8007686 <SWAPBYTE>
 800812a:	4603      	mov	r3, r0
 800812c:	461a      	mov	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff faa1 	bl	8007686 <SWAPBYTE>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	80da      	strh	r2, [r3, #6]
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800815e:	2180      	movs	r1, #128	; 0x80
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fcf7 	bl	8008b54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008166:	2100      	movs	r1, #0
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fcf3 	bl	8008b54 <USBD_LL_StallEP>
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d036      	beq.n	80081fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008190:	6938      	ldr	r0, [r7, #16]
 8008192:	f000 f836 	bl	8008202 <USBD_GetLen>
 8008196:	4603      	mov	r3, r0
 8008198:	3301      	adds	r3, #1
 800819a:	b29b      	uxth	r3, r3
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	7812      	ldrb	r2, [r2, #0]
 80081ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	3301      	adds	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	4413      	add	r3, r2
 80081bc:	2203      	movs	r2, #3
 80081be:	701a      	strb	r2, [r3, #0]
  idx++;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	3301      	adds	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081c6:	e013      	b.n	80081f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
    idx++;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	3301      	adds	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	3301      	adds	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e7      	bne.n	80081c8 <USBD_GetString+0x52>
 80081f8:	e000      	b.n	80081fc <USBD_GetString+0x86>
    return;
 80081fa:	bf00      	nop
  }
}
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008212:	e005      	b.n	8008220 <USBD_GetLen+0x1e>
  {
    len++;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	3301      	adds	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3301      	adds	r3, #1
 800821e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f5      	bne.n	8008214 <USBD_GetLen+0x12>
  }

  return len;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2202      	movs	r2, #2
 8008246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	2100      	movs	r1, #0
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 fd02 	bl	8008c66 <USBD_LL_Transmit>

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fcf1 	bl	8008c66 <USBD_LL_Transmit>

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2203      	movs	r2, #3
 800829e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	2100      	movs	r1, #0
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fcf5 	bl	8008ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	2100      	movs	r1, #0
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fce4 	bl	8008ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2204      	movs	r2, #4
 80082f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fcb0 	bl	8008c66 <USBD_LL_Transmit>

  return USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2205      	movs	r2, #5
 800831c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008320:	2300      	movs	r3, #0
 8008322:	2200      	movs	r2, #0
 8008324:	2100      	movs	r1, #0
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fcbe 	bl	8008ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800833c:	2200      	movs	r2, #0
 800833e:	4912      	ldr	r1, [pc, #72]	; (8008388 <MX_USB_DEVICE_Init+0x50>)
 8008340:	4812      	ldr	r0, [pc, #72]	; (800838c <MX_USB_DEVICE_Init+0x54>)
 8008342:	f7fe fe8f 	bl	8007064 <USBD_Init>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800834c:	f7f8 ff5e 	bl	800120c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008350:	490f      	ldr	r1, [pc, #60]	; (8008390 <MX_USB_DEVICE_Init+0x58>)
 8008352:	480e      	ldr	r0, [pc, #56]	; (800838c <MX_USB_DEVICE_Init+0x54>)
 8008354:	f7fe feb6 	bl	80070c4 <USBD_RegisterClass>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800835e:	f7f8 ff55 	bl	800120c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008362:	490c      	ldr	r1, [pc, #48]	; (8008394 <MX_USB_DEVICE_Init+0x5c>)
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <MX_USB_DEVICE_Init+0x54>)
 8008366:	f7fe fdd7 	bl	8006f18 <USBD_CDC_RegisterInterface>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008370:	f7f8 ff4c 	bl	800120c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008374:	4805      	ldr	r0, [pc, #20]	; (800838c <MX_USB_DEVICE_Init+0x54>)
 8008376:	f7fe fecc 	bl	8007112 <USBD_Start>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008380:	f7f8 ff44 	bl	800120c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008384:	bf00      	nop
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20000140 	.word	0x20000140
 800838c:	20000914 	.word	0x20000914
 8008390:	20000028 	.word	0x20000028
 8008394:	2000012c 	.word	0x2000012c

08008398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800839c:	2200      	movs	r2, #0
 800839e:	4905      	ldr	r1, [pc, #20]	; (80083b4 <CDC_Init_FS+0x1c>)
 80083a0:	4805      	ldr	r0, [pc, #20]	; (80083b8 <CDC_Init_FS+0x20>)
 80083a2:	f7fe fdce 	bl	8006f42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083a6:	4905      	ldr	r1, [pc, #20]	; (80083bc <CDC_Init_FS+0x24>)
 80083a8:	4803      	ldr	r0, [pc, #12]	; (80083b8 <CDC_Init_FS+0x20>)
 80083aa:	f7fe fde8 	bl	8006f7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	200013e4 	.word	0x200013e4
 80083b8:	20000914 	.word	0x20000914
 80083bc:	20000be4 	.word	0x20000be4

080083c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
 80083dc:	4613      	mov	r3, r2
 80083de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	2b23      	cmp	r3, #35	; 0x23
 80083e4:	d84a      	bhi.n	800847c <CDC_Control_FS+0xac>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <CDC_Control_FS+0x1c>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	0800847d 	.word	0x0800847d
 80083f0:	0800847d 	.word	0x0800847d
 80083f4:	0800847d 	.word	0x0800847d
 80083f8:	0800847d 	.word	0x0800847d
 80083fc:	0800847d 	.word	0x0800847d
 8008400:	0800847d 	.word	0x0800847d
 8008404:	0800847d 	.word	0x0800847d
 8008408:	0800847d 	.word	0x0800847d
 800840c:	0800847d 	.word	0x0800847d
 8008410:	0800847d 	.word	0x0800847d
 8008414:	0800847d 	.word	0x0800847d
 8008418:	0800847d 	.word	0x0800847d
 800841c:	0800847d 	.word	0x0800847d
 8008420:	0800847d 	.word	0x0800847d
 8008424:	0800847d 	.word	0x0800847d
 8008428:	0800847d 	.word	0x0800847d
 800842c:	0800847d 	.word	0x0800847d
 8008430:	0800847d 	.word	0x0800847d
 8008434:	0800847d 	.word	0x0800847d
 8008438:	0800847d 	.word	0x0800847d
 800843c:	0800847d 	.word	0x0800847d
 8008440:	0800847d 	.word	0x0800847d
 8008444:	0800847d 	.word	0x0800847d
 8008448:	0800847d 	.word	0x0800847d
 800844c:	0800847d 	.word	0x0800847d
 8008450:	0800847d 	.word	0x0800847d
 8008454:	0800847d 	.word	0x0800847d
 8008458:	0800847d 	.word	0x0800847d
 800845c:	0800847d 	.word	0x0800847d
 8008460:	0800847d 	.word	0x0800847d
 8008464:	0800847d 	.word	0x0800847d
 8008468:	0800847d 	.word	0x0800847d
 800846c:	0800847d 	.word	0x0800847d
 8008470:	0800847d 	.word	0x0800847d
 8008474:	0800847d 	.word	0x0800847d
 8008478:	0800847d 	.word	0x0800847d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800847c:	bf00      	nop
  }

  return (USBD_OK);
 800847e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	480f      	ldr	r0, [pc, #60]	; (80084d8 <CDC_Receive_FS+0x4c>)
 800849a:	f7fe fd70 	bl	8006f7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800849e:	480e      	ldr	r0, [pc, #56]	; (80084d8 <CDC_Receive_FS+0x4c>)
 80084a0:	f7fe fdb6 	bl	8007010 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 80084a4:	2240      	movs	r2, #64	; 0x40
 80084a6:	2100      	movs	r1, #0
 80084a8:	480c      	ldr	r0, [pc, #48]	; (80084dc <CDC_Receive_FS+0x50>)
 80084aa:	f000 fca7 	bl	8008dfc <memset>
  uint8_t len = (uint8_t)*Len;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	4808      	ldr	r0, [pc, #32]	; (80084dc <CDC_Receive_FS+0x50>)
 80084bc:	f000 fc90 	bl	8008de0 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	461a      	mov	r2, r3
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fc98 	bl	8008dfc <memset>

  return (USBD_OK);
 80084cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000914 	.word	0x20000914
 80084dc:	2000087c 	.word	0x2000087c

080084e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084f0:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <CDC_Transmit_FS+0x48>)
 80084f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008502:	2301      	movs	r3, #1
 8008504:	e00b      	b.n	800851e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008506:	887b      	ldrh	r3, [r7, #2]
 8008508:	461a      	mov	r2, r3
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4806      	ldr	r0, [pc, #24]	; (8008528 <CDC_Transmit_FS+0x48>)
 800850e:	f7fe fd18 	bl	8006f42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008512:	4805      	ldr	r0, [pc, #20]	; (8008528 <CDC_Transmit_FS+0x48>)
 8008514:	f7fe fd4c 	bl	8006fb0 <USBD_CDC_TransmitPacket>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20000914 	.word	0x20000914

0800852c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800853e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	6039      	str	r1, [r7, #0]
 800855a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2212      	movs	r2, #18
 8008560:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008562:	4b03      	ldr	r3, [pc, #12]	; (8008570 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	2000015c 	.word	0x2000015c

08008574 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2204      	movs	r2, #4
 8008584:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008586:	4b03      	ldr	r3, [pc, #12]	; (8008594 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	20000170 	.word	0x20000170

08008598 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	6039      	str	r1, [r7, #0]
 80085a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4907      	ldr	r1, [pc, #28]	; (80085cc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ae:	4808      	ldr	r0, [pc, #32]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085b0:	f7ff fde1 	bl	8008176 <USBD_GetString>
 80085b4:	e004      	b.n	80085c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4904      	ldr	r1, [pc, #16]	; (80085cc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ba:	4805      	ldr	r0, [pc, #20]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085bc:	f7ff fddb 	bl	8008176 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20001be4 	.word	0x20001be4
 80085d0:	08008e4c 	.word	0x08008e4c

080085d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	4904      	ldr	r1, [pc, #16]	; (80085f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085e4:	4804      	ldr	r0, [pc, #16]	; (80085f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085e6:	f7ff fdc6 	bl	8008176 <USBD_GetString>
  return USBD_StrDesc;
 80085ea:	4b02      	ldr	r3, [pc, #8]	; (80085f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20001be4 	.word	0x20001be4
 80085f8:	08008e60 	.word	0x08008e60

080085fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	221a      	movs	r2, #26
 800860c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800860e:	f000 f843 	bl	8008698 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008612:	4b02      	ldr	r3, [pc, #8]	; (800861c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000174 	.word	0x20000174

08008620 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4907      	ldr	r1, [pc, #28]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008636:	4808      	ldr	r0, [pc, #32]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008638:	f7ff fd9d 	bl	8008176 <USBD_GetString>
 800863c:	e004      	b.n	8008648 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008642:	4805      	ldr	r0, [pc, #20]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008644:	f7ff fd97 	bl	8008176 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20001be4 	.word	0x20001be4
 8008658:	08008e74 	.word	0x08008e74

0800865c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d105      	bne.n	800867a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4907      	ldr	r1, [pc, #28]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008672:	4808      	ldr	r0, [pc, #32]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008674:	f7ff fd7f 	bl	8008176 <USBD_GetString>
 8008678:	e004      	b.n	8008684 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	4904      	ldr	r1, [pc, #16]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800867e:	4805      	ldr	r0, [pc, #20]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008680:	f7ff fd79 	bl	8008176 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008684:	4b02      	ldr	r3, [pc, #8]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20001be4 	.word	0x20001be4
 8008694:	08008e80 	.word	0x08008e80

08008698 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <Get_SerialNum+0x44>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086a4:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <Get_SerialNum+0x48>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086aa:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <Get_SerialNum+0x4c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4413      	add	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086be:	2208      	movs	r2, #8
 80086c0:	4909      	ldr	r1, [pc, #36]	; (80086e8 <Get_SerialNum+0x50>)
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 f814 	bl	80086f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086c8:	2204      	movs	r2, #4
 80086ca:	4908      	ldr	r1, [pc, #32]	; (80086ec <Get_SerialNum+0x54>)
 80086cc:	68b8      	ldr	r0, [r7, #8]
 80086ce:	f000 f80f 	bl	80086f0 <IntToUnicode>
  }
}
 80086d2:	bf00      	nop
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	1fff7a10 	.word	0x1fff7a10
 80086e0:	1fff7a14 	.word	0x1fff7a14
 80086e4:	1fff7a18 	.word	0x1fff7a18
 80086e8:	20000176 	.word	0x20000176
 80086ec:	20000186 	.word	0x20000186

080086f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]
 8008706:	e027      	b.n	8008758 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	0f1b      	lsrs	r3, r3, #28
 800870c:	2b09      	cmp	r3, #9
 800870e:	d80b      	bhi.n	8008728 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	0f1b      	lsrs	r3, r3, #28
 8008714:	b2da      	uxtb	r2, r3
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	4619      	mov	r1, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	440b      	add	r3, r1
 8008720:	3230      	adds	r2, #48	; 0x30
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e00a      	b.n	800873e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	0f1b      	lsrs	r3, r3, #28
 800872c:	b2da      	uxtb	r2, r3
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	4619      	mov	r1, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	440b      	add	r3, r1
 8008738:	3237      	adds	r2, #55	; 0x37
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008744:	7dfb      	ldrb	r3, [r7, #23]
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	3301      	adds	r3, #1
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	3301      	adds	r3, #1
 8008756:	75fb      	strb	r3, [r7, #23]
 8008758:	7dfa      	ldrb	r2, [r7, #23]
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	429a      	cmp	r2, r3
 800875e:	d3d3      	bcc.n	8008708 <IntToUnicode+0x18>
  }
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	609a      	str	r2, [r3, #8]
 8008784:	60da      	str	r2, [r3, #12]
 8008786:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008790:	d13a      	bne.n	8008808 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008792:	2300      	movs	r3, #0
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	4a1d      	ldr	r2, [pc, #116]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	6313      	str	r3, [r2, #48]	; 0x30
 80087a2:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b4:	2302      	movs	r3, #2
 80087b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087bc:	2303      	movs	r3, #3
 80087be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087c0:	230a      	movs	r3, #10
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087c4:	f107 0314 	add.w	r3, r7, #20
 80087c8:	4619      	mov	r1, r3
 80087ca:	4812      	ldr	r0, [pc, #72]	; (8008814 <HAL_PCD_MspInit+0xa4>)
 80087cc:	f7f9 fd2e 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087d0:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	4a0e      	ldr	r2, [pc, #56]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 80087d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087da:	6353      	str	r3, [r2, #52]	; 0x34
 80087dc:	2300      	movs	r3, #0
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 80087e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e4:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 80087e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087ea:	6453      	str	r3, [r2, #68]	; 0x44
 80087ec:	4b08      	ldr	r3, [pc, #32]	; (8008810 <HAL_PCD_MspInit+0xa0>)
 80087ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087f8:	2200      	movs	r2, #0
 80087fa:	2100      	movs	r1, #0
 80087fc:	2043      	movs	r0, #67	; 0x43
 80087fe:	f7f9 fcde 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008802:	2043      	movs	r0, #67	; 0x43
 8008804:	f7f9 fcf7 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008808:	bf00      	nop
 800880a:	3728      	adds	r7, #40	; 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40023800 	.word	0x40023800
 8008814:	40020000 	.word	0x40020000

08008818 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fe fcba 	bl	80071a8 <USBD_LL_SetupStage>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	4619      	mov	r1, r3
 8008866:	f7fe fcf4 	bl	8007252 <USBD_LL_DataOutStage>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	3348      	adds	r3, #72	; 0x48
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	4619      	mov	r1, r3
 800889a:	f7fe fd3d 	bl	8007318 <USBD_LL_DataInStage>
}
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fe51 	bl	800755c <USBD_LL_SOF>
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088ca:	2301      	movs	r3, #1
 80088cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
 80088da:	e008      	b.n	80088ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d102      	bne.n	80088ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e001      	b.n	80088ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088ea:	f7f8 fc8f 	bl	800120c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088f4:	7bfa      	ldrb	r2, [r7, #15]
 80088f6:	4611      	mov	r1, r2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe fdf1 	bl	80074e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fd9d 	bl	8007444 <USBD_LL_Reset>
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fdec 	bl	8007500 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800893a:	f043 0301 	orr.w	r3, r3, #1
 800893e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008948:	4b04      	ldr	r3, [pc, #16]	; (800895c <HAL_PCD_SuspendCallback+0x48>)
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	4a03      	ldr	r2, [pc, #12]	; (800895c <HAL_PCD_SuspendCallback+0x48>)
 800894e:	f043 0306 	orr.w	r3, r3, #6
 8008952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	e000ed00 	.word	0xe000ed00

08008960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fddc 	bl	800752c <USBD_LL_Resume>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fe2a 	bl	80075ec <USBD_LL_IsoOUTIncomplete>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089b2:	78fa      	ldrb	r2, [r7, #3]
 80089b4:	4611      	mov	r1, r2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fdf2 	bl	80075a0 <USBD_LL_IsoINIncomplete>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fe30 	bl	8007638 <USBD_LL_DevConnected>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fe2d 	bl	800764e <USBD_LL_DevDisconnected>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d13c      	bne.n	8008a86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a0c:	4a20      	ldr	r2, [pc, #128]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a1e      	ldr	r2, [pc, #120]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a24:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a26:	2204      	movs	r2, #4
 8008a28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a2a:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a30:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a36:	4b16      	ldr	r3, [pc, #88]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a38:	2202      	movs	r2, #2
 8008a3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a3c:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a48:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a4e:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a54:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a5a:	480d      	ldr	r0, [pc, #52]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a5c:	f7fa feab 	bl	80037b6 <HAL_PCD_Init>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a66:	f7f8 fbd1 	bl	800120c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a6a:	2180      	movs	r1, #128	; 0x80
 8008a6c:	4808      	ldr	r0, [pc, #32]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a6e:	f7fc f808 	bl	8004a82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a72:	2240      	movs	r2, #64	; 0x40
 8008a74:	2100      	movs	r1, #0
 8008a76:	4806      	ldr	r0, [pc, #24]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a78:	f7fb ffbc 	bl	80049f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a7c:	2280      	movs	r2, #128	; 0x80
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4803      	ldr	r0, [pc, #12]	; (8008a90 <USBD_LL_Init+0x94>)
 8008a82:	f7fb ffb7 	bl	80049f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20001de4 	.word	0x20001de4

08008a94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fa ffa0 	bl	80039f0 <HAL_PCD_Start>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f942 	bl	8008d40 <USBD_Get_USB_Status>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4603      	mov	r3, r0
 8008ada:	70fb      	strb	r3, [r7, #3]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70bb      	strb	r3, [r7, #2]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008af2:	78bb      	ldrb	r3, [r7, #2]
 8008af4:	883a      	ldrh	r2, [r7, #0]
 8008af6:	78f9      	ldrb	r1, [r7, #3]
 8008af8:	f7fb fb84 	bl	8004204 <HAL_PCD_EP_Open>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 f91c 	bl	8008d40 <USBD_Get_USB_Status>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	4611      	mov	r1, r2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fb fbcd 	bl	80042d4 <HAL_PCD_EP_Close>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f8fd 	bl	8008d40 <USBD_Get_USB_Status>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fb fca5 	bl	80044c2 <HAL_PCD_EP_SetStall>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f8de 	bl	8008d40 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fb fcea 	bl	800458a <HAL_PCD_EP_ClrStall>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 f8bf 	bl	8008d40 <USBD_Get_USB_Status>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008be2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da0b      	bge.n	8008c04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	333e      	adds	r3, #62	; 0x3e
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	e00b      	b.n	8008c1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fb fab7 	bl	80041ba <HAL_PCD_SetAddress>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f874 	bl	8008d40 <USBD_Get_USB_Status>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b086      	sub	sp, #24
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	460b      	mov	r3, r1
 8008c74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c84:	7af9      	ldrb	r1, [r7, #11]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	f7fb fbd0 	bl	800442e <HAL_PCD_EP_Transmit>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f853 	bl	8008d40 <USBD_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cc6:	7af9      	ldrb	r1, [r7, #11]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f7fb fb4c 	bl	8004368 <HAL_PCD_EP_Receive>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f832 	bl	8008d40 <USBD_Get_USB_Status>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ce0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fb fb7c 	bl	80043fe <HAL_PCD_EP_GetRxCount>
 8008d06:	4603      	mov	r3, r0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d18:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <USBD_static_malloc+0x18>)
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	200005b4 	.word	0x200005b4

08008d2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d817      	bhi.n	8008d84 <USBD_Get_USB_Status+0x44>
 8008d54:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBD_Get_USB_Status+0x1c>)
 8008d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5a:	bf00      	nop
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d73 	.word	0x08008d73
 8008d64:	08008d79 	.word	0x08008d79
 8008d68:	08008d7f 	.word	0x08008d7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d70:	e00b      	b.n	8008d8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d72:	2303      	movs	r3, #3
 8008d74:	73fb      	strb	r3, [r7, #15]
    break;
 8008d76:	e008      	b.n	8008d8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7c:	e005      	b.n	8008d8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	73fb      	strb	r3, [r7, #15]
    break;
 8008d82:	e002      	b.n	8008d8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	73fb      	strb	r3, [r7, #15]
    break;
 8008d88:	bf00      	nop
  }
  return usb_status;
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <__libc_init_array>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4d0d      	ldr	r5, [pc, #52]	; (8008dd0 <__libc_init_array+0x38>)
 8008d9c:	4c0d      	ldr	r4, [pc, #52]	; (8008dd4 <__libc_init_array+0x3c>)
 8008d9e:	1b64      	subs	r4, r4, r5
 8008da0:	10a4      	asrs	r4, r4, #2
 8008da2:	2600      	movs	r6, #0
 8008da4:	42a6      	cmp	r6, r4
 8008da6:	d109      	bne.n	8008dbc <__libc_init_array+0x24>
 8008da8:	4d0b      	ldr	r5, [pc, #44]	; (8008dd8 <__libc_init_array+0x40>)
 8008daa:	4c0c      	ldr	r4, [pc, #48]	; (8008ddc <__libc_init_array+0x44>)
 8008dac:	f000 f82e 	bl	8008e0c <_init>
 8008db0:	1b64      	subs	r4, r4, r5
 8008db2:	10a4      	asrs	r4, r4, #2
 8008db4:	2600      	movs	r6, #0
 8008db6:	42a6      	cmp	r6, r4
 8008db8:	d105      	bne.n	8008dc6 <__libc_init_array+0x2e>
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc0:	4798      	blx	r3
 8008dc2:	3601      	adds	r6, #1
 8008dc4:	e7ee      	b.n	8008da4 <__libc_init_array+0xc>
 8008dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dca:	4798      	blx	r3
 8008dcc:	3601      	adds	r6, #1
 8008dce:	e7f2      	b.n	8008db6 <__libc_init_array+0x1e>
 8008dd0:	0800b058 	.word	0x0800b058
 8008dd4:	0800b058 	.word	0x0800b058
 8008dd8:	0800b058 	.word	0x0800b058
 8008ddc:	0800b05c 	.word	0x0800b05c

08008de0 <memcpy>:
 8008de0:	440a      	add	r2, r1
 8008de2:	4291      	cmp	r1, r2
 8008de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008de8:	d100      	bne.n	8008dec <memcpy+0xc>
 8008dea:	4770      	bx	lr
 8008dec:	b510      	push	{r4, lr}
 8008dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008df6:	4291      	cmp	r1, r2
 8008df8:	d1f9      	bne.n	8008dee <memcpy+0xe>
 8008dfa:	bd10      	pop	{r4, pc}

08008dfc <memset>:
 8008dfc:	4402      	add	r2, r0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d100      	bne.n	8008e06 <memset+0xa>
 8008e04:	4770      	bx	lr
 8008e06:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0a:	e7f9      	b.n	8008e00 <memset+0x4>

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
