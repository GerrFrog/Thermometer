
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08009f0c  08009f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd0  0800acd0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800acd0  0800acd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acd8  0800acd8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ace0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000020bc  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200022ac  200022ac  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f729  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da5  00000000  00000000  0003f949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  000436f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea8  00000000  00000000  000446f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000062dc  00000000  00000000  000455a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016052  00000000  00000000  0004b87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8e41  00000000  00000000  000618ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a70f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004580  00000000  00000000  0012a764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ef4 	.word	0x08009ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	08009ef4 	.word	0x08009ef4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <float_temp_to_char_temp>:
 * @param arr Pointer to output array
 * @return void
 */
#if defined(MLX90614) || defined(MLX90632)
	void float_temp_to_char_temp(double digit, char* arr)
	{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e92:	6078      	str	r0, [r7, #4]
//			arr[3] = 's';
//			arr[4] = '\0';
//			arr[5] = '\0';
//			return;
//		}
		int l_digit = digit * 100.0;
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <float_temp_to_char_temp+0x110>)
 8000e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e9e:	f7ff fb4f 	bl	8000540 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fdf9 	bl	8000aa0 <__aeabi_d2iz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	617b      	str	r3, [r7, #20]
		arr[7] = '\0';
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3307      	adds	r3, #7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		arr[6] = '\0';
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
		arr[5] = '\0';
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3305      	adds	r3, #5
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
		arr[4] = l_digit % 10 + '0';
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000ece:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed2:	1099      	asrs	r1, r3, #2
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1ad1      	subs	r1, r2, r3
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	3230      	adds	r2, #48	; 0x30
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1092      	asrs	r2, r2, #2
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
		arr[3] = l_digit % 10 + '0';
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f02:	fb83 1302 	smull	r1, r3, r3, r2
 8000f06:	1099      	asrs	r1, r3, #2
 8000f08:	17d3      	asrs	r3, r2, #31
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	1ad1      	subs	r1, r2, r3
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	3230      	adds	r2, #48	; 0x30
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f26:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2a:	1092      	asrs	r2, r2, #2
 8000f2c:	17db      	asrs	r3, r3, #31
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
		arr[2] = ',';
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3302      	adds	r3, #2
 8000f36:	222c      	movs	r2, #44	; 0x2c
 8000f38:	701a      	strb	r2, [r3, #0]
		arr[1] = l_digit % 10 + '0';
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f42:	1099      	asrs	r1, r3, #2
 8000f44:	17d3      	asrs	r3, r2, #31
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	1ad1      	subs	r1, r2, r3
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	3230      	adds	r2, #48	; 0x30
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f62:	fb82 1203 	smull	r1, r2, r2, r3
 8000f66:	1092      	asrs	r2, r2, #2
 8000f68:	17db      	asrs	r3, r3, #31
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
		arr[0] = l_digit % 10 + '0';
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f72:	fb83 1302 	smull	r1, r3, r3, r2
 8000f76:	1099      	asrs	r1, r3, #2
 8000f78:	17d3      	asrs	r3, r2, #31
 8000f7a:	1ac9      	subs	r1, r1, r3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1ad1      	subs	r1, r2, r3
 8000f86:	b2cb      	uxtb	r3, r1
 8000f88:	3330      	adds	r3, #48	; 0x30
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
	}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40590000 	.word	0x40590000
 8000f9c:	66666667 	.word	0x66666667

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa4:	b0aa      	sub	sp, #168	; 0xa8
 8000fa6:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f001 fde4 	bl	8002b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f94c 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f000 fa3c 	bl	800142c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb4:	f000 f9b0 	bl	8001318 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fb8:	f000 f9dc 	bl	8001374 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000fbc:	f008 f968 	bl	8009290 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000fc0:	f000 fa06 	bl	80013d0 <MX_I2C3_Init>
#endif

  // Initialize Display
#ifdef SSD1306_DISPLAY
  {
	  if (SSD1306_Init(hi2c3) != 1)
 8000fc4:	4c9a      	ldr	r4, [pc, #616]	; (8001230 <main+0x290>)
 8000fc6:	4668      	mov	r0, sp
 8000fc8:	f104 0310 	add.w	r3, r4, #16
 8000fcc:	2244      	movs	r2, #68	; 0x44
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f008 fe92 	bl	8009cf8 <memcpy>
 8000fd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd8:	f001 f83c 	bl	8002054 <SSD1306_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d00d      	beq.n	8000ffe <main+0x5e>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	4893      	ldr	r0, [pc, #588]	; (8001234 <main+0x294>)
 8000fe8:	f002 f939 	bl	800325e <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f001 fe32 	bl	8002c58 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ff4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff8:	488e      	ldr	r0, [pc, #568]	; (8001234 <main+0x294>)
 8000ffa:	f002 f930 	bl	800325e <HAL_GPIO_TogglePin>
	  }

	  SSD1306_GotoXY (0,0);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2000      	movs	r0, #0
 8001002:	f001 fb05 	bl	8002610 <SSD1306_GotoXY>
	  SSD1306_Puts ("initialize", &Font_11x18, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	498b      	ldr	r1, [pc, #556]	; (8001238 <main+0x298>)
 800100a:	488c      	ldr	r0, [pc, #560]	; (800123c <main+0x29c>)
 800100c:	f001 fb96 	bl	800273c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001010:	f001 fa36 	bl	8002480 <SSD1306_UpdateScreen>
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
//	  HAL_Delay(1000);
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
//  }

  uint16_t mlx_addr_1 = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t mlx_addr_2 = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

  float float_temp_1 = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  float float_temp_2 = 0.0;
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	647b      	str	r3, [r7, #68]	; 0x44

#if defined(MLX90614)
  mlx_addr_1 = device_scanner(hi2c1);
  mlx_addr_2 = device_scanner(hi2c2);
#elif defined(MLX90632)
  mlx_addr_1 = 0x3a << 1;
 800102c:	2374      	movs	r3, #116	; 0x74
 800102e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  mlx_addr_2 = 0x3a << 1;
 8001032:	2374      	movs	r3, #116	; 0x74
 8001034:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

  float pre_ambient, pre_object, ambient, object;

  int16_t ambient_new_raw, ambient_old_raw, object_new_raw, object_old_raw,
  	  	  PR = 0x00587f5b, PG = 0x04a10289, PT = 0xfff966f8, PO = 0x00001e0f,
 8001038:	f647 735b 	movw	r3, #32603	; 0x7f5b
 800103c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001040:	f240 2389 	movw	r3, #649	; 0x289
 8001044:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001048:	f246 63f8 	movw	r3, #26360	; 0x66f8
 800104c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800104e:	f641 630f 	movw	r3, #7695	; 0x1e0f
 8001052:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  Ea = 4859535, Eb = 5686508, Fa = 53855361, Fb = 42874149,
 8001054:	f242 638f 	movw	r3, #9871	; 0x268f
 8001058:	877b      	strh	r3, [r7, #58]	; 0x3a
 800105a:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
 800105e:	873b      	strh	r3, [r7, #56]	; 0x38
 8001060:	f24c 4381 	movw	r3, #50305	; 0xc481
 8001064:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001066:	f243 5325 	movw	r3, #13605	; 0x3525
 800106a:	86bb      	strh	r3, [r7, #52]	; 0x34
		  Ga = -14556410, Ha = 16384, Hb = 0, Gb = 9728, Ka = 10752;
 800106c:	f24e 3306 	movw	r3, #58118	; 0xe306
 8001070:	867b      	strh	r3, [r7, #50]	; 0x32
 8001072:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001076:	863b      	strh	r3, [r7, #48]	; 0x30
 8001078:	2300      	movs	r3, #0
 800107a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800107c:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8001080:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001082:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001086:	857b      	strh	r3, [r7, #42]	; 0x2a
#endif

#ifdef SSD1306_DISPLAY
  SSD1306_Clear();
 8001088:	f001 fb7d 	bl	8002786 <SSD1306_Clear>
	float_temp_2 = MLX90614_ReadTemp(mlx_addr_2, MLX90614_TOBJ1, hi2c2);

	float_temp_to_char_temp(float_temp_1, char_temp_1);
	float_temp_to_char_temp(float_temp_2, char_temp_2);
#elif defined(MLX90632)
	mlx90632_read_temp_raw(&ambient_new_raw, &ambient_old_raw, &object_new_raw, &object_old_raw, hi2c1);
 800108c:	46b8      	mov	r8, r7
 800108e:	1cbe      	adds	r6, r7, #2
 8001090:	1d3d      	adds	r5, r7, #4
 8001092:	1dbc      	adds	r4, r7, #6
 8001094:	4a6a      	ldr	r2, [pc, #424]	; (8001240 <main+0x2a0>)
 8001096:	466b      	mov	r3, sp
 8001098:	4611      	mov	r1, r2
 800109a:	2254      	movs	r2, #84	; 0x54
 800109c:	4618      	mov	r0, r3
 800109e:	f008 fe2b 	bl	8009cf8 <memcpy>
 80010a2:	4643      	mov	r3, r8
 80010a4:	4632      	mov	r2, r6
 80010a6:	4629      	mov	r1, r5
 80010a8:	4620      	mov	r0, r4
 80010aa:	f000 fbd7 	bl	800185c <mlx90632_read_temp_raw>

	pre_ambient = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010b6:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fc0e 	bl	80018dc <mlx90632_preprocess_temp_ambient>
 80010c0:	ec53 2b10 	vmov	r2, r3, d0
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd12 	bl	8000af0 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
	pre_object = mlx90632_preprocess_temp_object(object_new_raw, object_old_raw, ambient_new_raw, ambient_old_raw, Ka);
 80010d0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80010d4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80010d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010dc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80010e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4623      	mov	r3, r4
 80010e8:	f000 fc5e 	bl	80019a8 <mlx90632_preprocess_temp_object>
 80010ec:	ec53 2b10 	vmov	r2, r3, d0
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fcfc 	bl	8000af0 <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	623b      	str	r3, [r7, #32]

	mlx90632_set_emissivity(0.95);
 80010fc:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8001228 <main+0x288>
 8001100:	f000 fe94 	bl	8001e2c <mlx90632_set_emissivity>

	ambient = mlx90632_calc_temp_ambient(ambient_new_raw, ambient_old_raw, PT, PR, PG, PO, Gb);
 8001104:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001108:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800110c:	f9b7 503e 	ldrsh.w	r5, [r7, #62]	; 0x3e
 8001110:	f9b7 6042 	ldrsh.w	r6, [r7, #66]	; 0x42
 8001114:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001118:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800111c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001120:	9102      	str	r1, [sp, #8]
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4633      	mov	r3, r6
 8001128:	462a      	mov	r2, r5
 800112a:	4621      	mov	r1, r4
 800112c:	f000 fcae 	bl	8001a8c <mlx90632_calc_temp_ambient>
 8001130:	ec53 2b10 	vmov	r2, r3, d0
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fcda 	bl	8000af0 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	61fb      	str	r3, [r7, #28]
	object = mlx90632_calc_temp_object(pre_object, pre_ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 8001140:	edd7 7a08 	vldr	s15, [r7, #32]
 8001144:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001148:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 8001154:	f9b7 5038 	ldrsh.w	r5, [r7, #56]	; 0x38
 8001158:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800115c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001160:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	; 0x34
 8001164:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001168:	9004      	str	r0, [sp, #16]
 800116a:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 800116e:	9003      	str	r0, [sp, #12]
 8001170:	9102      	str	r1, [sp, #8]
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	462b      	mov	r3, r5
 8001178:	4622      	mov	r2, r4
 800117a:	ee17 1a90 	vmov	r1, s15
 800117e:	ee17 0a10 	vmov	r0, s14
 8001182:	f000 fe85 	bl	8001e90 <mlx90632_calc_temp_object>
 8001186:	ec53 2b10 	vmov	r2, r3, d0
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fcaf 	bl	8000af0 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]

	float_temp_1 = object;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
	float_temp_to_char_temp(float_temp_1, char_temp_1);
 800119a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800119c:	f7ff f978 	bl	8000490 <__aeabi_f2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4618      	mov	r0, r3
 80011aa:	ec45 4b10 	vmov	d0, r4, r5
 80011ae:	f7ff fe6b 	bl	8000e88 <float_temp_to_char_temp>
#endif


	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80011b2:	2101      	movs	r1, #1
 80011b4:	4823      	ldr	r0, [pc, #140]	; (8001244 <main+0x2a4>)
 80011b6:	f002 f821 	bl	80031fc <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d115      	bne.n	80011ec <main+0x24c>
	{
#	ifdef SSD1306_DISPLAY
		SSD1306_GotoXY(0, 0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f001 fa24 	bl	8002610 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2201      	movs	r2, #1
 80011ce:	491a      	ldr	r1, [pc, #104]	; (8001238 <main+0x298>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fab3 	bl	800273c <SSD1306_Puts>

		SSD1306_GotoXY(70, 0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	2046      	movs	r0, #70	; 0x46
 80011da:	f001 fa19 	bl	8002610 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2201      	movs	r2, #1
 80011e4:	4914      	ldr	r1, [pc, #80]	; (8001238 <main+0x298>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 faa8 	bl	800273c <SSD1306_Puts>
		}
#		endif
	}

#ifdef SSD1306_DISPLAY
	SSD1306_GotoXY(0, 29);
 80011ec:	211d      	movs	r1, #29
 80011ee:	2000      	movs	r0, #0
 80011f0:	f001 fa0e 	bl	8002610 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2201      	movs	r2, #1
 80011fa:	490f      	ldr	r1, [pc, #60]	; (8001238 <main+0x298>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fa9d 	bl	800273c <SSD1306_Puts>

	SSD1306_GotoXY(70, 29);
 8001202:	211d      	movs	r1, #29
 8001204:	2046      	movs	r0, #70	; 0x46
 8001206:	f001 fa03 	bl	8002610 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2201      	movs	r2, #1
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <main+0x298>)
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fa92 	bl	800273c <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8001218:	f001 f932 	bl	8002480 <SSD1306_UpdateScreen>
		CDC_Transmit_FS((uint8_t*)char_temp_2, strlen((uint8_t*)char_temp_2));
		CDC_Transmit_FS(end, strlen(end));
	}
#	endif

	HAL_Delay(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f001 fd1b 	bl	8002c58 <HAL_Delay>
	mlx90632_read_temp_raw(&ambient_new_raw, &ambient_old_raw, &object_new_raw, &object_old_raw, hi2c1);
 8001222:	e733      	b.n	800108c <main+0xec>
 8001224:	f3af 8000 	nop.w
 8001228:	66666666 	.word	0x66666666
 800122c:	3fee6666 	.word	0x3fee6666
 8001230:	20000840 	.word	0x20000840
 8001234:	40020c00 	.word	0x40020c00
 8001238:	20000000 	.word	0x20000000
 800123c:	08009f0c 	.word	0x08009f0c
 8001240:	20000894 	.word	0x20000894
 8001244:	40020000 	.word	0x40020000

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2230      	movs	r2, #48	; 0x30
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f008 fd5c 	bl	8009d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <SystemClock_Config+0xc8>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <SystemClock_Config+0xc8>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <SystemClock_Config+0xc8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <SystemClock_Config+0xcc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a20      	ldr	r2, [pc, #128]	; (8001314 <SystemClock_Config+0xcc>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <SystemClock_Config+0xcc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2310      	movs	r3, #16
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b0:	2302      	movs	r3, #2
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012b8:	2310      	movs	r3, #16
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012bc:	23c0      	movs	r3, #192	; 0xc0
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c4:	2304      	movs	r3, #4
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fbd1 	bl	8005a74 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d8:	f000 f924 	bl	8001524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fe34 	bl	8005f64 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001302:	f000 f90f 	bl	8001524 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3750      	adds	r7, #80	; 0x50
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C1_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <MX_I2C1_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_I2C1_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_I2C1_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_I2C1_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_I2C1_Init+0x50>)
 8001356:	f001 ff9d 	bl	8003294 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 f8e0 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000894 	.word	0x20000894
 800136c:	40005400 	.word	0x40005400
 8001370:	000186a0 	.word	0x000186a0

08001374 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C2_Init+0x50>)
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <MX_I2C2_Init+0x54>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_I2C2_Init+0x58>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_I2C2_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013b2:	f001 ff6f 	bl	8003294 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f000 f8b2 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200008e8 	.word	0x200008e8
 80013c8:	40005800 	.word	0x40005800
 80013cc:	000186a0 	.word	0x000186a0

080013d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C3_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_I2C3_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_I2C3_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_I2C3_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C3_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_I2C3_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_I2C3_Init+0x50>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_I2C3_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_I2C3_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_I2C3_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_I2C3_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_I2C3_Init+0x50>)
 800140e:	f001 ff41 	bl	8003294 <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 f884 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000840 	.word	0x20000840
 8001424:	40005c00 	.word	0x40005c00
 8001428:	00061a80 	.word	0x00061a80

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <MX_GPIO_Init+0xec>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <MX_GPIO_Init+0xec>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <MX_GPIO_Init+0xec>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_GPIO_Init+0xec>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <MX_GPIO_Init+0xec>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_GPIO_Init+0xec>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_GPIO_Init+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <MX_GPIO_Init+0xec>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_GPIO_Init+0xec>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_GPIO_Init+0xec>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <MX_GPIO_Init+0xec>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_GPIO_Init+0xec>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_GPIO_Init+0xec>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <MX_GPIO_Init+0xec>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_GPIO_Init+0xec>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <MX_GPIO_Init+0xf0>)
 80014d6:	f001 fea9 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_GPIO_Init+0xf4>)
 80014ee:	f001 fce9 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_GPIO_Init+0xf0>)
 800150c:	f001 fcda 	bl	8002ec4 <HAL_GPIO_Init>

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40020000 	.word	0x40020000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>

0800152e <mlx90632_start_measurement>:
#ifndef STATIC
#define STATIC static
#endif

int mlx90632_start_measurement(I2C_HandleTypeDef hi2c)
{
 800152e:	b084      	sub	sp, #16
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b099      	sub	sp, #100	; 0x64
 8001534:	af14      	add	r7, sp, #80	; 0x50
 8001536:	f107 0420 	add.w	r4, r7, #32
 800153a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 8001542:	1dbc      	adds	r4, r7, #6
 8001544:	4668      	mov	r0, sp
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	224c      	movs	r2, #76	; 0x4c
 800154c:	4619      	mov	r1, r3
 800154e:	f008 fbd3 	bl	8009cf8 <memcpy>
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	cb0c      	ldmia	r3, {r2, r3}
 8001558:	4621      	mov	r1, r4
 800155a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800155e:	f000 fd0f 	bl	8001f80 <mlx90632_i2c_read>
 8001562:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	da01      	bge.n	800156e <mlx90632_start_measurement+0x40>
        return ret;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	e047      	b.n	80015fe <mlx90632_start_measurement+0xd0>

    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY), hi2c);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	b29c      	uxth	r4, r3
 8001576:	4668      	mov	r0, sp
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	224c      	movs	r2, #76	; 0x4c
 800157e:	4619      	mov	r1, r3
 8001580:	f008 fbba 	bl	8009cf8 <memcpy>
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	cb0c      	ldmia	r3, {r2, r3}
 800158a:	4621      	mov	r1, r4
 800158c:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001590:	f000 fd23 	bl	8001fda <mlx90632_i2c_write>
 8001594:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	da22      	bge.n	80015e2 <mlx90632_start_measurement+0xb4>
        return ret;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	e02e      	b.n	80015fe <mlx90632_start_measurement+0xd0>

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 80015a0:	1dbc      	adds	r4, r7, #6
 80015a2:	4668      	mov	r0, sp
 80015a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a8:	224c      	movs	r2, #76	; 0x4c
 80015aa:	4619      	mov	r1, r3
 80015ac:	f008 fba4 	bl	8009cf8 <memcpy>
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	cb0c      	ldmia	r3, {r2, r3}
 80015b6:	4621      	mov	r1, r4
 80015b8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80015bc:	f000 fce0 	bl	8001f80 <mlx90632_i2c_read>
 80015c0:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da01      	bge.n	80015cc <mlx90632_start_measurement+0x9e>
            return ret;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	e018      	b.n	80015fe <mlx90632_start_measurement+0xd0>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10b      	bne.n	80015ee <mlx90632_start_measurement+0xc0>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 80015d6:	f642 21f8 	movw	r1, #11000	; 0x2af8
 80015da:	f242 7010 	movw	r0, #10000	; 0x2710
 80015de:	f000 fd26 	bl	800202e <usleep>
    while (tries-- > 0)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	60fa      	str	r2, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dcd9      	bgt.n	80015a0 <mlx90632_start_measurement+0x72>
 80015ec:	e000      	b.n	80015f0 <mlx90632_start_measurement+0xc2>
            break;
 80015ee:	bf00      	nop
    }

    if (tries < 0)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da02      	bge.n	80015fc <mlx90632_start_measurement+0xce>
    {
        // data not ready
        return -ETIMEDOUT;
 80015f6:	f06f 0373 	mvn.w	r3, #115	; 0x73
 80015fa:	e000      	b.n	80015fe <mlx90632_start_measurement+0xd0>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001608:	b004      	add	sp, #16
 800160a:	4770      	bx	lr

0800160c <mlx90632_channel_new_select>:
 *
 * @retval 0 When both memory locations are updated as per ret
 * @retval -EINVAL channel_new and channel_old were not updated
 */
STATIC int32_t mlx90632_channel_new_select(int32_t ret, uint8_t *channel_new, uint8_t *channel_old)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
    switch (ret)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d003      	beq.n	8001626 <mlx90632_channel_new_select+0x1a>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d007      	beq.n	8001634 <mlx90632_channel_new_select+0x28>
 8001624:	e00d      	b.n	8001642 <mlx90632_channel_new_select+0x36>
    {
        case 1:
            *channel_new = 1;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
            *channel_old = 2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	701a      	strb	r2, [r3, #0]
            break;
 8001632:	e009      	b.n	8001648 <mlx90632_channel_new_select+0x3c>

        case 2:
            *channel_new = 2;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
            *channel_old = 1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
            break;
 8001640:	e002      	b.n	8001648 <mlx90632_channel_new_select+0x3c>

        default:
            return -EINVAL;
 8001642:	f06f 0315 	mvn.w	r3, #21
 8001646:	e000      	b.n	800164a <mlx90632_channel_new_select+0x3e>
    }
    return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <mlx90632_read_temp_ambient_raw>:
 *
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_ambient_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw, I2C_HandleTypeDef hi2c)
{
 8001656:	b082      	sub	sp, #8
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b099      	sub	sp, #100	; 0x64
 800165c:	af14      	add	r7, sp, #80	; 0x50
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	f107 0120 	add.w	r1, r7, #32
 8001666:	e881 000c 	stmia.w	r1, {r2, r3}
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &read_tmp, hi2c);
 800166a:	f107 040a 	add.w	r4, r7, #10
 800166e:	4668      	mov	r0, sp
 8001670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001674:	224c      	movs	r2, #76	; 0x4c
 8001676:	4619      	mov	r1, r3
 8001678:	f008 fb3e 	bl	8009cf8 <memcpy>
 800167c:	f107 0320 	add.w	r3, r7, #32
 8001680:	cb0c      	ldmia	r3, {r2, r3}
 8001682:	4621      	mov	r1, r4
 8001684:	f244 0005 	movw	r0, #16389	; 0x4005
 8001688:	f000 fc7a 	bl	8001f80 <mlx90632_i2c_read>
 800168c:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da01      	bge.n	8001698 <mlx90632_read_temp_ambient_raw+0x42>
        return ret;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	e01f      	b.n	80016d8 <mlx90632_read_temp_ambient_raw+0x82>
    *ambient_new_raw = (int16_t)read_tmp;
 8001698:	897b      	ldrh	r3, [r7, #10]
 800169a:	b21a      	sxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &read_tmp, hi2c);
 80016a0:	f107 040a 	add.w	r4, r7, #10
 80016a4:	4668      	mov	r0, sp
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	224c      	movs	r2, #76	; 0x4c
 80016ac:	4619      	mov	r1, r3
 80016ae:	f008 fb23 	bl	8009cf8 <memcpy>
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	cb0c      	ldmia	r3, {r2, r3}
 80016b8:	4621      	mov	r1, r4
 80016ba:	f244 0008 	movw	r0, #16392	; 0x4008
 80016be:	f000 fc5f 	bl	8001f80 <mlx90632_i2c_read>
 80016c2:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da01      	bge.n	80016ce <mlx90632_read_temp_ambient_raw+0x78>
        return ret;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	e004      	b.n	80016d8 <mlx90632_read_temp_ambient_raw+0x82>
    *ambient_old_raw = (int16_t)read_tmp;
 80016ce:	897b      	ldrh	r3, [r7, #10]
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	801a      	strh	r2, [r3, #0]

    return ret;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016e2:	b002      	add	sp, #8
 80016e4:	4770      	bx	lr

080016e6 <mlx90632_read_temp_object_raw>:
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_object_raw(int32_t start_measurement_ret,
                                             int16_t *object_new_raw, int16_t *object_old_raw, I2C_HandleTypeDef hi2c)
{
 80016e6:	b082      	sub	sp, #8
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b09c      	sub	sp, #112	; 0x70
 80016ec:	af14      	add	r7, sp, #80	; 0x50
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t ret;
    uint16_t read_tmp;
    int16_t read;
    uint8_t channel, channel_old;

    ret = mlx90632_channel_new_select(start_measurement_ret, &channel, &channel_old);
 80016f6:	f107 0216 	add.w	r2, r7, #22
 80016fa:	f107 0317 	add.w	r3, r7, #23
 80016fe:	4619      	mov	r1, r3
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff ff83 	bl	800160c <mlx90632_channel_new_select>
 8001706:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <mlx90632_read_temp_object_raw+0x2e>
        return -EINVAL;
 800170e:	f06f 0315 	mvn.w	r3, #21
 8001712:	e09c      	b.n	800184e <mlx90632_read_temp_object_raw+0x168>

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel), &read_tmp, hi2c);
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	4413      	add	r3, r2
 800171e:	b29b      	uxth	r3, r3
 8001720:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001724:	3301      	adds	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	b21c      	sxth	r4, r3
 800172a:	f107 0518 	add.w	r5, r7, #24
 800172e:	4668      	mov	r0, sp
 8001730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001734:	224c      	movs	r2, #76	; 0x4c
 8001736:	4619      	mov	r1, r3
 8001738:	f008 fade 	bl	8009cf8 <memcpy>
 800173c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001740:	cb0c      	ldmia	r3, {r2, r3}
 8001742:	4629      	mov	r1, r5
 8001744:	4620      	mov	r0, r4
 8001746:	f000 fc1b 	bl	8001f80 <mlx90632_i2c_read>
 800174a:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	da01      	bge.n	8001756 <mlx90632_read_temp_object_raw+0x70>
        return ret;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	e07b      	b.n	800184e <mlx90632_read_temp_object_raw+0x168>

    read = (int16_t)read_tmp;
 8001756:	8b3b      	ldrh	r3, [r7, #24]
 8001758:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel), &read_tmp, hi2c);
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	b29b      	uxth	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	0052      	lsls	r2, r2, #1
 8001762:	4413      	add	r3, r2
 8001764:	b29b      	uxth	r3, r3
 8001766:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21c      	sxth	r4, r3
 800176e:	f107 0518 	add.w	r5, r7, #24
 8001772:	4668      	mov	r0, sp
 8001774:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001778:	224c      	movs	r2, #76	; 0x4c
 800177a:	4619      	mov	r1, r3
 800177c:	f008 fabc 	bl	8009cf8 <memcpy>
 8001780:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001784:	cb0c      	ldmia	r3, {r2, r3}
 8001786:	4629      	mov	r1, r5
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fbf9 	bl	8001f80 <mlx90632_i2c_read>
 800178e:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da01      	bge.n	800179a <mlx90632_read_temp_object_raw+0xb4>
        return ret;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	e059      	b.n	800184e <mlx90632_read_temp_object_raw+0x168>
    *object_new_raw = (read + (int16_t)read_tmp) / 2;
 800179a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800179e:	8b3a      	ldrh	r2, [r7, #24]
 80017a0:	b212      	sxth	r2, r2
 80017a2:	4413      	add	r3, r2
 80017a4:	0fda      	lsrs	r2, r3, #31
 80017a6:	4413      	add	r3, r2
 80017a8:	105b      	asrs	r3, r3, #1
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel_old), &read_tmp, hi2c);
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	0052      	lsls	r2, r2, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80017c0:	3301      	adds	r3, #1
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b21c      	sxth	r4, r3
 80017c6:	f107 0518 	add.w	r5, r7, #24
 80017ca:	4668      	mov	r0, sp
 80017cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d0:	224c      	movs	r2, #76	; 0x4c
 80017d2:	4619      	mov	r1, r3
 80017d4:	f008 fa90 	bl	8009cf8 <memcpy>
 80017d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017dc:	cb0c      	ldmia	r3, {r2, r3}
 80017de:	4629      	mov	r1, r5
 80017e0:	4620      	mov	r0, r4
 80017e2:	f000 fbcd 	bl	8001f80 <mlx90632_i2c_read>
 80017e6:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da01      	bge.n	80017f2 <mlx90632_read_temp_object_raw+0x10c>
        return ret;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	e02d      	b.n	800184e <mlx90632_read_temp_object_raw+0x168>
    read = (int16_t)read_tmp;
 80017f2:	8b3b      	ldrh	r3, [r7, #24]
 80017f4:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel_old), &read_tmp, hi2c);
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001806:	b29b      	uxth	r3, r3
 8001808:	b21c      	sxth	r4, r3
 800180a:	f107 0518 	add.w	r5, r7, #24
 800180e:	4668      	mov	r0, sp
 8001810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001814:	224c      	movs	r2, #76	; 0x4c
 8001816:	4619      	mov	r1, r3
 8001818:	f008 fa6e 	bl	8009cf8 <memcpy>
 800181c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001820:	cb0c      	ldmia	r3, {r2, r3}
 8001822:	4629      	mov	r1, r5
 8001824:	4620      	mov	r0, r4
 8001826:	f000 fbab 	bl	8001f80 <mlx90632_i2c_read>
 800182a:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	da01      	bge.n	8001836 <mlx90632_read_temp_object_raw+0x150>
        return ret;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	e00b      	b.n	800184e <mlx90632_read_temp_object_raw+0x168>
    *object_old_raw = (read + (int16_t)read_tmp) / 2;
 8001836:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800183a:	8b3a      	ldrh	r2, [r7, #24]
 800183c:	b212      	sxth	r2, r2
 800183e:	4413      	add	r3, r2
 8001840:	0fda      	lsrs	r2, r3, #31
 8001842:	4413      	add	r3, r2
 8001844:	105b      	asrs	r3, r3, #1
 8001846:	b21a      	sxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	801a      	strh	r2, [r3, #0]

    return ret;
 800184c:	69fb      	ldr	r3, [r7, #28]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001858:	b002      	add	sp, #8
 800185a:	4770      	bx	lr

0800185c <mlx90632_read_temp_raw>:

int32_t mlx90632_read_temp_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw,
                               int16_t *object_new_raw, int16_t *object_old_raw, I2C_HandleTypeDef hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b09a      	sub	sp, #104	; 0x68
 8001860:	af14      	add	r7, sp, #80	; 0x50
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
    int32_t ret, start_measurement_ret;

    // trigger and wait for measurement to complete
    start_measurement_ret = mlx90632_start_measurement(hi2c);
 800186a:	4668      	mov	r0, sp
 800186c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001870:	2244      	movs	r2, #68	; 0x44
 8001872:	4619      	mov	r1, r3
 8001874:	f008 fa40 	bl	8009cf8 <memcpy>
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800187e:	f7ff fe56 	bl	800152e <mlx90632_start_measurement>
 8001882:	6178      	str	r0, [r7, #20]
    if (start_measurement_ret < 0)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da01      	bge.n	800188e <mlx90632_read_temp_raw+0x32>
        return start_measurement_ret;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	e022      	b.n	80018d4 <mlx90632_read_temp_raw+0x78>

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw(ambient_new_raw, ambient_old_raw, hi2c);
 800188e:	4668      	mov	r0, sp
 8001890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001894:	224c      	movs	r2, #76	; 0x4c
 8001896:	4619      	mov	r1, r3
 8001898:	f008 fa2e 	bl	8009cf8 <memcpy>
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	cb0c      	ldmia	r3, {r2, r3}
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fed6 	bl	8001656 <mlx90632_read_temp_ambient_raw>
 80018aa:	6138      	str	r0, [r7, #16]
    if (ret < 0)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da01      	bge.n	80018b6 <mlx90632_read_temp_raw+0x5a>
        return ret;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	e00e      	b.n	80018d4 <mlx90632_read_temp_raw+0x78>

    /** Read new and old **object** values from sensor */
    ret = mlx90632_read_temp_object_raw(start_measurement_ret, object_new_raw, object_old_raw, hi2c);
 80018b6:	4668      	mov	r0, sp
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	2250      	movs	r2, #80	; 0x50
 80018be:	4619      	mov	r1, r3
 80018c0:	f008 fa1a 	bl	8009cf8 <memcpy>
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff0b 	bl	80016e6 <mlx90632_read_temp_object_raw>
 80018d0:	6138      	str	r0, [r7, #16]

    return ret;
 80018d2:	693b      	ldr	r3, [r7, #16]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <mlx90632_preprocess_temp_ambient>:
}


/* DSPv5 */
double mlx90632_preprocess_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 80018ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdba 	bl	800046c <__aeabi_i2d>
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <mlx90632_preprocess_temp_ambient+0xc0>)
 80018fe:	f7fe ff49 	bl	8000794 <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 800190a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fdac 	bl	800046c <__aeabi_i2d>
 8001914:	4604      	mov	r4, r0
 8001916:	460d      	mov	r5, r1
 8001918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fda5 	bl	800046c <__aeabi_i2d>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <mlx90632_preprocess_temp_ambient+0xc4>)
 8001928:	f7fe ff34 	bl	8000794 <__aeabi_ddiv>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001938:	f7fe fe02 	bl	8000540 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fc46 	bl	80001d4 <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8001950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fd89 	bl	800046c <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <mlx90632_preprocess_temp_ambient+0xc4>)
 8001960:	f7fe ff18 	bl	8000794 <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001970:	f7fe ff10 	bl	8000794 <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <mlx90632_preprocess_temp_ambient+0xc8>)
 8001982:	f7fe fddd 	bl	8000540 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	ec43 2b17 	vmov	d7, r2, r3
}
 800198e:	eeb0 0a47 	vmov.f32	s0, s14
 8001992:	eef0 0a67 	vmov.f32	s1, s15
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	40900000 	.word	0x40900000
 80019a0:	40280000 	.word	0x40280000
 80019a4:	41200000 	.word	0x41200000

080019a8 <mlx90632_preprocess_temp_object>:

double mlx90632_preprocess_temp_object(int16_t object_new_raw, int16_t object_old_raw,
                                       int16_t ambient_new_raw, int16_t ambient_old_raw,
                                       int16_t Ka)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4603      	mov	r3, r0
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 80019c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fd4e 	bl	800046c <__aeabi_i2d>
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <mlx90632_preprocess_temp_object+0xd8>)
 80019d6:	f7fe fedd 	bl	8000794 <__aeabi_ddiv>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 80019e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd40 	bl	800046c <__aeabi_i2d>
 80019ec:	4604      	mov	r4, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd39 	bl	800046c <__aeabi_i2d>
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <mlx90632_preprocess_temp_object+0xdc>)
 8001a00:	f7fe fec8 	bl	8000794 <__aeabi_ddiv>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a10:	f7fe fd96 	bl	8000540 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fbda 	bl	80001d4 <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((((object_new_raw + object_old_raw) / 2) / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 8001a28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	0fda      	lsrs	r2, r3, #31
 8001a34:	4413      	add	r3, r2
 8001a36:	105b      	asrs	r3, r3, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd17 	bl	800046c <__aeabi_i2d>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <mlx90632_preprocess_temp_object+0xdc>)
 8001a44:	f7fe fea6 	bl	8000794 <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a54:	f7fe fe9e 	bl	8000794 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <mlx90632_preprocess_temp_object+0xe0>)
 8001a66:	f7fe fd6b 	bl	8000540 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a72:	eeb0 0a47 	vmov.f32	s0, s14
 8001a76:	eef0 0a67 	vmov.f32	s1, s15
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a80:	40900000 	.word	0x40900000
 8001a84:	40280000 	.word	0x40280000
 8001a88:	41200000 	.word	0x41200000

08001a8c <mlx90632_calc_temp_ambient>:

double mlx90632_calc_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                  int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	; 0x40
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4603      	mov	r3, r0
 8001a98:	81fb      	strh	r3, [r7, #14]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 8001a9e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8001aa2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff16 	bl	80018dc <mlx90632_preprocess_temp_ambient>
 8001ab0:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 8001ab4:	68b8      	ldr	r0, [r7, #8]
 8001ab6:	f7fe fcd9 	bl	800046c <__aeabi_i2d>
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <mlx90632_calc_temp_ambient+0xfc>)
 8001ac0:	f7fe fe68 	bl	8000794 <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = (double)AMB - ((double)P_R / (double)256.0);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7fe fccd 	bl	800046c <__aeabi_i2d>
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <mlx90632_calc_temp_ambient+0x100>)
 8001ad8:	f7fe fe5c 	bl	8000794 <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ae4:	f7fe fb74 	bl	80001d0 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 8001af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001af4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001af8:	f7fe fd22 	bl	8000540 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b04:	f7fe fd1c 	bl	8000540 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 8001b10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b12:	f7fe fcab 	bl	800046c <__aeabi_i2d>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b1e:	f7fe fe39 	bl	8000794 <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <mlx90632_calc_temp_ambient+0x104>)
 8001b30:	f7fe fd06 	bl	8000540 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 8001b3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b3e:	f7fe fc95 	bl	800046c <__aeabi_i2d>
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <mlx90632_calc_temp_ambient+0x100>)
 8001b48:	f7fe fe24 	bl	8000794 <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 8001b54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b5c:	f7fe fb3a 	bl	80001d4 <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b6c:	f7fe fb32 	bl	80001d4 <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b78:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7c:	eef0 0a67 	vmov.f32	s1, s15
 8001b80:	3740      	adds	r7, #64	; 0x40
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	42b00000 	.word	0x42b00000
 8001b8c:	40700000 	.word	0x40700000
 8001b90:	41300000 	.word	0x41300000
 8001b94:	00000000 	.word	0x00000000

08001b98 <mlx90632_calc_temp_object_iteration>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
STATIC double mlx90632_calc_temp_object_iteration(double prev_object_temp, int32_t object, double TAdut,
                                                  int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                  double emissivity)
{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b09c      	sub	sp, #112	; 0x70
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001ba2:	61f8      	str	r0, [r7, #28]
 8001ba4:	ed87 1b04 	vstr	d1, [r7, #16]
 8001ba8:	61b9      	str	r1, [r7, #24]
 8001baa:	60fa      	str	r2, [r7, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	ed87 2b00 	vstr	d2, [r7]
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;


    Ha_customer = Ha / ((double)16384.0);
 8001bb2:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc58 	bl	800046c <__aeabi_i2d>
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b93      	ldr	r3, [pc, #588]	; (8001e10 <mlx90632_calc_temp_object_iteration+0x278>)
 8001bc2:	f7fe fde7 	bl	8000794 <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 8001bce:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fc4a 	bl	800046c <__aeabi_i2d>
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b8d      	ldr	r3, [pc, #564]	; (8001e14 <mlx90632_calc_temp_object_iteration+0x27c>)
 8001bde:	f7fe fdd9 	bl	8000794 <__aeabi_ddiv>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 8001bea:	69b8      	ldr	r0, [r7, #24]
 8001bec:	f7fe fc3e 	bl	800046c <__aeabi_i2d>
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	460d      	mov	r5, r1
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <mlx90632_calc_temp_object_iteration+0x280>)
 8001bfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bfe:	f7fe fae7 	bl	80001d0 <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fc99 	bl	8000540 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b80      	ldr	r3, [pc, #512]	; (8001e1c <mlx90632_calc_temp_object_iteration+0x284>)
 8001c1c:	f7fe fdba 	bl	8000794 <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f7fe fc1f 	bl	800046c <__aeabi_i2d>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	460d      	mov	r5, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <mlx90632_calc_temp_object_iteration+0x280>)
 8001c38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c3c:	f7fe fac8 	bl	80001d0 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4620      	mov	r0, r4
 8001c46:	4629      	mov	r1, r5
 8001c48:	f7fe fc7a 	bl	8000540 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <mlx90632_calc_temp_object_iteration+0x284>)
 8001c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c5e:	f7fe fd99 	bl	8000794 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1 + calcedGa + calcedGb)) /
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c72:	496b      	ldr	r1, [pc, #428]	; (8001e20 <mlx90632_calc_temp_object_iteration+0x288>)
 8001c74:	fb01 f003 	mul.w	r0, r1, r3
 8001c78:	2102      	movs	r1, #2
 8001c7a:	fb01 f102 	mul.w	r1, r1, r2
 8001c7e:	4401      	add	r1, r0
 8001c80:	4867      	ldr	r0, [pc, #412]	; (8001e20 <mlx90632_calc_temp_object_iteration+0x288>)
 8001c82:	fba2 2300 	umull	r2, r3, r2, r0
 8001c86:	4419      	add	r1, r3
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe fc29 	bl	80004e4 <__aeabi_l2d>
 8001c92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c96:	f7fe fc53 	bl	8000540 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <mlx90632_calc_temp_object_iteration+0x28c>)
 8001ca8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cac:	f7fe fa92 	bl	80001d4 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cbc:	f7fe fa8a 	bl	80001d4 <__adddf3>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fc3a 	bl	8000540 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <mlx90632_calc_temp_object_iteration+0x290>)
 8001cda:	f7fe fd5b 	bl	8000794 <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 8001ce6:	69f8      	ldr	r0, [r7, #28]
 8001ce8:	f7fe fbc0 	bl	800046c <__aeabi_i2d>
 8001cec:	4604      	mov	r4, r0
 8001cee:	460d      	mov	r5, r1
 8001cf0:	a343      	add	r3, pc, #268	; (adr r3, 8001e00 <mlx90632_calc_temp_object_iteration+0x268>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cfa:	f7fe fd4b 	bl	8000794 <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d0a:	f7fe fc19 	bl	8000540 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4620      	mov	r0, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	f7fe fd3d 	bl	8000794 <__aeabi_ddiv>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    TAdut4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
 8001d22:	a339      	add	r3, pc, #228	; (adr r3, 8001e08 <mlx90632_calc_temp_object_iteration+0x270>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d2c:	f7fe fa52 	bl	80001d4 <__adddf3>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4614      	mov	r4, r2
 8001d36:	461d      	mov	r5, r3
 8001d38:	a333      	add	r3, pc, #204	; (adr r3, 8001e08 <mlx90632_calc_temp_object_iteration+0x270>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d42:	f7fe fa47 	bl	80001d4 <__adddf3>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fbf7 	bl	8000540 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4614      	mov	r4, r2
 8001d58:	461d      	mov	r5, r3
 8001d5a:	a32b      	add	r3, pc, #172	; (adr r3, 8001e08 <mlx90632_calc_temp_object_iteration+0x270>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d64:	f7fe fa36 	bl	80001d4 <__adddf3>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fbe6 	bl	8000540 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	a322      	add	r3, pc, #136	; (adr r3, 8001e08 <mlx90632_calc_temp_object_iteration+0x270>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d86:	f7fe fa25 	bl	80001d4 <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fbd5 	bl	8000540 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    first_sqrt = sqrt(calcedFa + TAdut4);
 8001d9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001da2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001da6:	f7fe fa15 	bl	80001d4 <__adddf3>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b17 	vmov	d7, r2, r3
 8001db2:	eeb0 0a47 	vmov.f32	s0, s14
 8001db6:	eef0 0a67 	vmov.f32	s1, s15
 8001dba:	f007 ffb3 	bl	8009d24 <sqrt>
 8001dbe:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 8001dc2:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001dc6:	f007 ffad 	bl	8009d24 <sqrt>
 8001dca:	ec51 0b10 	vmov	r0, r1, d0
 8001dce:	a30e      	add	r3, pc, #56	; (adr r3, 8001e08 <mlx90632_calc_temp_object_iteration+0x270>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe f9fc 	bl	80001d0 <__aeabi_dsub>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001de4:	f7fe f9f4 	bl	80001d0 <__aeabi_dsub>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001df0:	eeb0 0a47 	vmov.f32	s0, s14
 8001df4:	eef0 0a67 	vmov.f32	s1, s15
 8001df8:	3770      	adds	r7, #112	; 0x70
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000000 	.word	0x20000000
 8001e04:	4202a05f 	.word	0x4202a05f
 8001e08:	66666666 	.word	0x66666666
 8001e0c:	40711266 	.word	0x40711266
 8001e10:	40d00000 	.word	0x40d00000
 8001e14:	40900000 	.word	0x40900000
 8001e18:	40390000 	.word	0x40390000
 8001e1c:	42300000 	.word	0x42300000
 8001e20:	540be400 	.word	0x540be400
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	42d00000 	.word	0x42d00000

08001e2c <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 8001e36:	4905      	ldr	r1, [pc, #20]	; (8001e4c <mlx90632_set_emissivity+0x20>)
 8001e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000210 	.word	0x20000210

08001e50 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <mlx90632_get_emissivity+0x38>)
 8001e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	f7fe fdd5 	bl	8000a10 <__aeabi_dcmpeq>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <mlx90632_get_emissivity+0x3c>)
 8001e72:	e002      	b.n	8001e7a <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <mlx90632_get_emissivity+0x38>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 8001e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e82:	eef0 0a67 	vmov.f32	s1, s15
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000210 	.word	0x20000210
 8001e8c:	3ff00000 	.word	0x3ff00000

08001e90 <mlx90632_calc_temp_object>:

double mlx90632_calc_temp_object(int32_t object, int32_t ambient,
                                 int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                 int16_t Ha, int16_t Hb)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b092      	sub	sp, #72	; 0x48
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <mlx90632_calc_temp_object+0xe4>)
 8001ea4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double tmp_emi = mlx90632_get_emissivity();
 8001ea8:	f7ff ffd2 	bl	8001e50 <mlx90632_get_emissivity>
 8001eac:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe fadb 	bl	800046c <__aeabi_i2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <mlx90632_calc_temp_object+0xe8>)
 8001ebc:	f7fe fc6a 	bl	8000794 <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    kEb = ((double)Eb) / ((double)256.0);
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f7fe facf 	bl	800046c <__aeabi_i2d>
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <mlx90632_calc_temp_object+0xec>)
 8001ed4:	f7fe fc5e 	bl	8000794 <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fac3 	bl	800046c <__aeabi_i2d>
 8001ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eea:	f7fe f971 	bl	80001d0 <__aeabi_dsub>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001efa:	f7fe fc4b 	bl	8000794 <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <mlx90632_calc_temp_object+0xe4>)
 8001f0c:	f7fe f962 	bl	80001d4 <__adddf3>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f1e:	e019      	b.n	8001f54 <mlx90632_calc_temp_object+0xc4>
    {
        temp = mlx90632_calc_temp_object_iteration(temp, object, TAdut, Ga, Fa, Fb, Ha, Hb, tmp_emi);
 8001f20:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f36:	ed97 1b04 	vldr	d1, [r7, #16]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001f40:	f7ff fe2a 	bl	8001b98 <mlx90632_calc_temp_object_iteration>
 8001f44:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    for (i = 0; i < 5; ++i)
 8001f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f54:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	dde1      	ble.n	8001f20 <mlx90632_calc_temp_object+0x90>
    }
    return temp;
 8001f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f60:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	3740      	adds	r7, #64	; 0x40
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40390000 	.word	0x40390000
 8001f78:	40f00000 	.word	0x40f00000
 8001f7c:	40700000 	.word	0x40700000

08001f80 <mlx90632_i2c_read>:
/* Definition of I2C address of MLX90632 */
#define CHIP_ADDRESS 0x3a << 1
/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value, I2C_HandleTypeDef hi2c)
{
 8001f80:	b082      	sub	sp, #8
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b088      	sub	sp, #32
 8001f86:	af04      	add	r7, sp, #16
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	f107 0118 	add.w	r1, r7, #24
 8001f8e:	e881 000c 	stmia.w	r1, {r2, r3}
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	2364      	movs	r3, #100	; 0x64
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	2174      	movs	r1, #116	; 0x74
 8001faa:	f107 0018 	add.w	r0, r7, #24
 8001fae:	f001 fcad 	bl	800390c <HAL_I2C_Mem_Read>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 8001fb6:	7a7b      	ldrb	r3, [r7, #9]
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	7a3b      	ldrb	r3, [r7, #8]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	801a      	strh	r2, [r3, #0]
	return ret;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	4770      	bx	lr

08001fda <mlx90632_i2c_write>:
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
	return ret;
}

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value, I2C_HandleTypeDef hi2c) {
 8001fda:	b082      	sub	sp, #8
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	f107 0c18 	add.w	ip, r7, #24
 8001fe6:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 8001ff2:	88bb      	ldrh	r3, [r7, #4]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001ffc:	88bb      	ldrh	r3, [r7, #4]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 8002002:	88fa      	ldrh	r2, [r7, #6]
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	2302      	movs	r3, #2
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2302      	movs	r3, #2
 8002014:	2174      	movs	r1, #116	; 0x74
 8002016:	f107 0018 	add.w	r0, r7, #24
 800201a:	f001 fb7d 	bl	8003718 <HAL_I2C_Mem_Write>
 800201e:	4603      	mov	r3, r0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800202a:	b002      	add	sp, #8
 800202c:	4770      	bx	lr

0800202e <usleep>:
//	if(ret < 0)
//		return ret;
//	return 0;
//}

void usleep(int min_range, int max_range) {
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
	while(--min_range);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f9      	bne.n	8002038 <usleep+0xa>
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8002054:	b084      	sub	sp, #16
 8002056:	b590      	push	{r4, r7, lr}
 8002058:	b097      	sub	sp, #92	; 0x5c
 800205a:	af14      	add	r7, sp, #80	; 0x50
 800205c:	f107 0418 	add.w	r4, r7, #24
 8002060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8002064:	f000 fb98 	bl	8002798 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <SSD1306_Init+0x44>)
 800206a:	4618      	mov	r0, r3
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	2254      	movs	r2, #84	; 0x54
 8002072:	4619      	mov	r1, r3
 8002074:	f007 fe40 	bl	8009cf8 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002078:	f644 6320 	movw	r3, #20000	; 0x4e20
 800207c:	2201      	movs	r2, #1
 800207e:	2178      	movs	r1, #120	; 0x78
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <SSD1306_Init+0x44>)
 8002082:	f001 fe69 	bl	8003d58 <HAL_I2C_IsDeviceReady>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 800208c:	2300      	movs	r3, #0
 800208e:	e1ee      	b.n	800246e <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002090:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002094:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002096:	e004      	b.n	80020a2 <SSD1306_Init+0x4e>
 8002098:	2000097c 	.word	0x2000097c
		p--;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f9      	bne.n	800209c <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80020a8:	4ce1      	ldr	r4, [pc, #900]	; (8002430 <SSD1306_Init+0x3dc>)
 80020aa:	23ae      	movs	r3, #174	; 0xae
 80020ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80020ae:	4668      	mov	r0, sp
 80020b0:	f104 0308 	add.w	r3, r4, #8
 80020b4:	224c      	movs	r2, #76	; 0x4c
 80020b6:	4619      	mov	r1, r3
 80020b8:	f007 fe1e 	bl	8009cf8 <memcpy>
 80020bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80020c0:	2100      	movs	r1, #0
 80020c2:	2078      	movs	r0, #120	; 0x78
 80020c4:	f000 fbc6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80020c8:	4cd9      	ldr	r4, [pc, #868]	; (8002430 <SSD1306_Init+0x3dc>)
 80020ca:	2320      	movs	r3, #32
 80020cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80020ce:	4668      	mov	r0, sp
 80020d0:	f104 0308 	add.w	r3, r4, #8
 80020d4:	224c      	movs	r2, #76	; 0x4c
 80020d6:	4619      	mov	r1, r3
 80020d8:	f007 fe0e 	bl	8009cf8 <memcpy>
 80020dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80020e0:	2100      	movs	r1, #0
 80020e2:	2078      	movs	r0, #120	; 0x78
 80020e4:	f000 fbb6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020e8:	4cd1      	ldr	r4, [pc, #836]	; (8002430 <SSD1306_Init+0x3dc>)
 80020ea:	2310      	movs	r3, #16
 80020ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80020ee:	4668      	mov	r0, sp
 80020f0:	f104 0308 	add.w	r3, r4, #8
 80020f4:	224c      	movs	r2, #76	; 0x4c
 80020f6:	4619      	mov	r1, r3
 80020f8:	f007 fdfe 	bl	8009cf8 <memcpy>
 80020fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 fba6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002108:	4cc9      	ldr	r4, [pc, #804]	; (8002430 <SSD1306_Init+0x3dc>)
 800210a:	23b0      	movs	r3, #176	; 0xb0
 800210c:	9313      	str	r3, [sp, #76]	; 0x4c
 800210e:	4668      	mov	r0, sp
 8002110:	f104 0308 	add.w	r3, r4, #8
 8002114:	224c      	movs	r2, #76	; 0x4c
 8002116:	4619      	mov	r1, r3
 8002118:	f007 fdee 	bl	8009cf8 <memcpy>
 800211c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002120:	2100      	movs	r1, #0
 8002122:	2078      	movs	r0, #120	; 0x78
 8002124:	f000 fb96 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002128:	4cc1      	ldr	r4, [pc, #772]	; (8002430 <SSD1306_Init+0x3dc>)
 800212a:	23c8      	movs	r3, #200	; 0xc8
 800212c:	9313      	str	r3, [sp, #76]	; 0x4c
 800212e:	4668      	mov	r0, sp
 8002130:	f104 0308 	add.w	r3, r4, #8
 8002134:	224c      	movs	r2, #76	; 0x4c
 8002136:	4619      	mov	r1, r3
 8002138:	f007 fdde 	bl	8009cf8 <memcpy>
 800213c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002140:	2100      	movs	r1, #0
 8002142:	2078      	movs	r0, #120	; 0x78
 8002144:	f000 fb86 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002148:	4cb9      	ldr	r4, [pc, #740]	; (8002430 <SSD1306_Init+0x3dc>)
 800214a:	2300      	movs	r3, #0
 800214c:	9313      	str	r3, [sp, #76]	; 0x4c
 800214e:	4668      	mov	r0, sp
 8002150:	f104 0308 	add.w	r3, r4, #8
 8002154:	224c      	movs	r2, #76	; 0x4c
 8002156:	4619      	mov	r1, r3
 8002158:	f007 fdce 	bl	8009cf8 <memcpy>
 800215c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002160:	2100      	movs	r1, #0
 8002162:	2078      	movs	r0, #120	; 0x78
 8002164:	f000 fb76 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002168:	4cb1      	ldr	r4, [pc, #708]	; (8002430 <SSD1306_Init+0x3dc>)
 800216a:	2310      	movs	r3, #16
 800216c:	9313      	str	r3, [sp, #76]	; 0x4c
 800216e:	4668      	mov	r0, sp
 8002170:	f104 0308 	add.w	r3, r4, #8
 8002174:	224c      	movs	r2, #76	; 0x4c
 8002176:	4619      	mov	r1, r3
 8002178:	f007 fdbe 	bl	8009cf8 <memcpy>
 800217c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002180:	2100      	movs	r1, #0
 8002182:	2078      	movs	r0, #120	; 0x78
 8002184:	f000 fb66 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002188:	4ca9      	ldr	r4, [pc, #676]	; (8002430 <SSD1306_Init+0x3dc>)
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	9313      	str	r3, [sp, #76]	; 0x4c
 800218e:	4668      	mov	r0, sp
 8002190:	f104 0308 	add.w	r3, r4, #8
 8002194:	224c      	movs	r2, #76	; 0x4c
 8002196:	4619      	mov	r1, r3
 8002198:	f007 fdae 	bl	8009cf8 <memcpy>
 800219c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80021a0:	2100      	movs	r1, #0
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 fb56 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80021a8:	4ca1      	ldr	r4, [pc, #644]	; (8002430 <SSD1306_Init+0x3dc>)
 80021aa:	2381      	movs	r3, #129	; 0x81
 80021ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80021ae:	4668      	mov	r0, sp
 80021b0:	f104 0308 	add.w	r3, r4, #8
 80021b4:	224c      	movs	r2, #76	; 0x4c
 80021b6:	4619      	mov	r1, r3
 80021b8:	f007 fd9e 	bl	8009cf8 <memcpy>
 80021bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80021c0:	2100      	movs	r1, #0
 80021c2:	2078      	movs	r0, #120	; 0x78
 80021c4:	f000 fb46 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80021c8:	4c99      	ldr	r4, [pc, #612]	; (8002430 <SSD1306_Init+0x3dc>)
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80021ce:	4668      	mov	r0, sp
 80021d0:	f104 0308 	add.w	r3, r4, #8
 80021d4:	224c      	movs	r2, #76	; 0x4c
 80021d6:	4619      	mov	r1, r3
 80021d8:	f007 fd8e 	bl	8009cf8 <memcpy>
 80021dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80021e0:	2100      	movs	r1, #0
 80021e2:	2078      	movs	r0, #120	; 0x78
 80021e4:	f000 fb36 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80021e8:	4c91      	ldr	r4, [pc, #580]	; (8002430 <SSD1306_Init+0x3dc>)
 80021ea:	23a1      	movs	r3, #161	; 0xa1
 80021ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80021ee:	4668      	mov	r0, sp
 80021f0:	f104 0308 	add.w	r3, r4, #8
 80021f4:	224c      	movs	r2, #76	; 0x4c
 80021f6:	4619      	mov	r1, r3
 80021f8:	f007 fd7e 	bl	8009cf8 <memcpy>
 80021fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002200:	2100      	movs	r1, #0
 8002202:	2078      	movs	r0, #120	; 0x78
 8002204:	f000 fb26 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002208:	4c89      	ldr	r4, [pc, #548]	; (8002430 <SSD1306_Init+0x3dc>)
 800220a:	23a6      	movs	r3, #166	; 0xa6
 800220c:	9313      	str	r3, [sp, #76]	; 0x4c
 800220e:	4668      	mov	r0, sp
 8002210:	f104 0308 	add.w	r3, r4, #8
 8002214:	224c      	movs	r2, #76	; 0x4c
 8002216:	4619      	mov	r1, r3
 8002218:	f007 fd6e 	bl	8009cf8 <memcpy>
 800221c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002220:	2100      	movs	r1, #0
 8002222:	2078      	movs	r0, #120	; 0x78
 8002224:	f000 fb16 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002228:	4c81      	ldr	r4, [pc, #516]	; (8002430 <SSD1306_Init+0x3dc>)
 800222a:	23a8      	movs	r3, #168	; 0xa8
 800222c:	9313      	str	r3, [sp, #76]	; 0x4c
 800222e:	4668      	mov	r0, sp
 8002230:	f104 0308 	add.w	r3, r4, #8
 8002234:	224c      	movs	r2, #76	; 0x4c
 8002236:	4619      	mov	r1, r3
 8002238:	f007 fd5e 	bl	8009cf8 <memcpy>
 800223c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002240:	2100      	movs	r1, #0
 8002242:	2078      	movs	r0, #120	; 0x78
 8002244:	f000 fb06 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002248:	4c79      	ldr	r4, [pc, #484]	; (8002430 <SSD1306_Init+0x3dc>)
 800224a:	233f      	movs	r3, #63	; 0x3f
 800224c:	9313      	str	r3, [sp, #76]	; 0x4c
 800224e:	4668      	mov	r0, sp
 8002250:	f104 0308 	add.w	r3, r4, #8
 8002254:	224c      	movs	r2, #76	; 0x4c
 8002256:	4619      	mov	r1, r3
 8002258:	f007 fd4e 	bl	8009cf8 <memcpy>
 800225c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002260:	2100      	movs	r1, #0
 8002262:	2078      	movs	r0, #120	; 0x78
 8002264:	f000 faf6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002268:	4c71      	ldr	r4, [pc, #452]	; (8002430 <SSD1306_Init+0x3dc>)
 800226a:	23a4      	movs	r3, #164	; 0xa4
 800226c:	9313      	str	r3, [sp, #76]	; 0x4c
 800226e:	4668      	mov	r0, sp
 8002270:	f104 0308 	add.w	r3, r4, #8
 8002274:	224c      	movs	r2, #76	; 0x4c
 8002276:	4619      	mov	r1, r3
 8002278:	f007 fd3e 	bl	8009cf8 <memcpy>
 800227c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002280:	2100      	movs	r1, #0
 8002282:	2078      	movs	r0, #120	; 0x78
 8002284:	f000 fae6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002288:	4c69      	ldr	r4, [pc, #420]	; (8002430 <SSD1306_Init+0x3dc>)
 800228a:	23d3      	movs	r3, #211	; 0xd3
 800228c:	9313      	str	r3, [sp, #76]	; 0x4c
 800228e:	4668      	mov	r0, sp
 8002290:	f104 0308 	add.w	r3, r4, #8
 8002294:	224c      	movs	r2, #76	; 0x4c
 8002296:	4619      	mov	r1, r3
 8002298:	f007 fd2e 	bl	8009cf8 <memcpy>
 800229c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80022a0:	2100      	movs	r1, #0
 80022a2:	2078      	movs	r0, #120	; 0x78
 80022a4:	f000 fad6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022a8:	4c61      	ldr	r4, [pc, #388]	; (8002430 <SSD1306_Init+0x3dc>)
 80022aa:	2300      	movs	r3, #0
 80022ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80022ae:	4668      	mov	r0, sp
 80022b0:	f104 0308 	add.w	r3, r4, #8
 80022b4:	224c      	movs	r2, #76	; 0x4c
 80022b6:	4619      	mov	r1, r3
 80022b8:	f007 fd1e 	bl	8009cf8 <memcpy>
 80022bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80022c0:	2100      	movs	r1, #0
 80022c2:	2078      	movs	r0, #120	; 0x78
 80022c4:	f000 fac6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022c8:	4c59      	ldr	r4, [pc, #356]	; (8002430 <SSD1306_Init+0x3dc>)
 80022ca:	23d5      	movs	r3, #213	; 0xd5
 80022cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80022ce:	4668      	mov	r0, sp
 80022d0:	f104 0308 	add.w	r3, r4, #8
 80022d4:	224c      	movs	r2, #76	; 0x4c
 80022d6:	4619      	mov	r1, r3
 80022d8:	f007 fd0e 	bl	8009cf8 <memcpy>
 80022dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80022e0:	2100      	movs	r1, #0
 80022e2:	2078      	movs	r0, #120	; 0x78
 80022e4:	f000 fab6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022e8:	4c51      	ldr	r4, [pc, #324]	; (8002430 <SSD1306_Init+0x3dc>)
 80022ea:	23f0      	movs	r3, #240	; 0xf0
 80022ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80022ee:	4668      	mov	r0, sp
 80022f0:	f104 0308 	add.w	r3, r4, #8
 80022f4:	224c      	movs	r2, #76	; 0x4c
 80022f6:	4619      	mov	r1, r3
 80022f8:	f007 fcfe 	bl	8009cf8 <memcpy>
 80022fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002300:	2100      	movs	r1, #0
 8002302:	2078      	movs	r0, #120	; 0x78
 8002304:	f000 faa6 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002308:	4c49      	ldr	r4, [pc, #292]	; (8002430 <SSD1306_Init+0x3dc>)
 800230a:	23d9      	movs	r3, #217	; 0xd9
 800230c:	9313      	str	r3, [sp, #76]	; 0x4c
 800230e:	4668      	mov	r0, sp
 8002310:	f104 0308 	add.w	r3, r4, #8
 8002314:	224c      	movs	r2, #76	; 0x4c
 8002316:	4619      	mov	r1, r3
 8002318:	f007 fcee 	bl	8009cf8 <memcpy>
 800231c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002320:	2100      	movs	r1, #0
 8002322:	2078      	movs	r0, #120	; 0x78
 8002324:	f000 fa96 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002328:	4c41      	ldr	r4, [pc, #260]	; (8002430 <SSD1306_Init+0x3dc>)
 800232a:	2322      	movs	r3, #34	; 0x22
 800232c:	9313      	str	r3, [sp, #76]	; 0x4c
 800232e:	4668      	mov	r0, sp
 8002330:	f104 0308 	add.w	r3, r4, #8
 8002334:	224c      	movs	r2, #76	; 0x4c
 8002336:	4619      	mov	r1, r3
 8002338:	f007 fcde 	bl	8009cf8 <memcpy>
 800233c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002340:	2100      	movs	r1, #0
 8002342:	2078      	movs	r0, #120	; 0x78
 8002344:	f000 fa86 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002348:	4c39      	ldr	r4, [pc, #228]	; (8002430 <SSD1306_Init+0x3dc>)
 800234a:	23da      	movs	r3, #218	; 0xda
 800234c:	9313      	str	r3, [sp, #76]	; 0x4c
 800234e:	4668      	mov	r0, sp
 8002350:	f104 0308 	add.w	r3, r4, #8
 8002354:	224c      	movs	r2, #76	; 0x4c
 8002356:	4619      	mov	r1, r3
 8002358:	f007 fcce 	bl	8009cf8 <memcpy>
 800235c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002360:	2100      	movs	r1, #0
 8002362:	2078      	movs	r0, #120	; 0x78
 8002364:	f000 fa76 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002368:	4c31      	ldr	r4, [pc, #196]	; (8002430 <SSD1306_Init+0x3dc>)
 800236a:	2312      	movs	r3, #18
 800236c:	9313      	str	r3, [sp, #76]	; 0x4c
 800236e:	4668      	mov	r0, sp
 8002370:	f104 0308 	add.w	r3, r4, #8
 8002374:	224c      	movs	r2, #76	; 0x4c
 8002376:	4619      	mov	r1, r3
 8002378:	f007 fcbe 	bl	8009cf8 <memcpy>
 800237c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002380:	2100      	movs	r1, #0
 8002382:	2078      	movs	r0, #120	; 0x78
 8002384:	f000 fa66 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002388:	4c29      	ldr	r4, [pc, #164]	; (8002430 <SSD1306_Init+0x3dc>)
 800238a:	23db      	movs	r3, #219	; 0xdb
 800238c:	9313      	str	r3, [sp, #76]	; 0x4c
 800238e:	4668      	mov	r0, sp
 8002390:	f104 0308 	add.w	r3, r4, #8
 8002394:	224c      	movs	r2, #76	; 0x4c
 8002396:	4619      	mov	r1, r3
 8002398:	f007 fcae 	bl	8009cf8 <memcpy>
 800239c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80023a0:	2100      	movs	r1, #0
 80023a2:	2078      	movs	r0, #120	; 0x78
 80023a4:	f000 fa56 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80023a8:	4c21      	ldr	r4, [pc, #132]	; (8002430 <SSD1306_Init+0x3dc>)
 80023aa:	2320      	movs	r3, #32
 80023ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80023ae:	4668      	mov	r0, sp
 80023b0:	f104 0308 	add.w	r3, r4, #8
 80023b4:	224c      	movs	r2, #76	; 0x4c
 80023b6:	4619      	mov	r1, r3
 80023b8:	f007 fc9e 	bl	8009cf8 <memcpy>
 80023bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80023c0:	2100      	movs	r1, #0
 80023c2:	2078      	movs	r0, #120	; 0x78
 80023c4:	f000 fa46 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80023c8:	4c19      	ldr	r4, [pc, #100]	; (8002430 <SSD1306_Init+0x3dc>)
 80023ca:	238d      	movs	r3, #141	; 0x8d
 80023cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80023ce:	4668      	mov	r0, sp
 80023d0:	f104 0308 	add.w	r3, r4, #8
 80023d4:	224c      	movs	r2, #76	; 0x4c
 80023d6:	4619      	mov	r1, r3
 80023d8:	f007 fc8e 	bl	8009cf8 <memcpy>
 80023dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80023e0:	2100      	movs	r1, #0
 80023e2:	2078      	movs	r0, #120	; 0x78
 80023e4:	f000 fa36 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80023e8:	4c11      	ldr	r4, [pc, #68]	; (8002430 <SSD1306_Init+0x3dc>)
 80023ea:	2314      	movs	r3, #20
 80023ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80023ee:	4668      	mov	r0, sp
 80023f0:	f104 0308 	add.w	r3, r4, #8
 80023f4:	224c      	movs	r2, #76	; 0x4c
 80023f6:	4619      	mov	r1, r3
 80023f8:	f007 fc7e 	bl	8009cf8 <memcpy>
 80023fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002400:	2100      	movs	r1, #0
 8002402:	2078      	movs	r0, #120	; 0x78
 8002404:	f000 fa26 	bl	8002854 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002408:	4c09      	ldr	r4, [pc, #36]	; (8002430 <SSD1306_Init+0x3dc>)
 800240a:	23af      	movs	r3, #175	; 0xaf
 800240c:	9313      	str	r3, [sp, #76]	; 0x4c
 800240e:	4668      	mov	r0, sp
 8002410:	f104 0308 	add.w	r3, r4, #8
 8002414:	224c      	movs	r2, #76	; 0x4c
 8002416:	4619      	mov	r1, r3
 8002418:	f007 fc6e 	bl	8009cf8 <memcpy>
 800241c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002420:	2100      	movs	r1, #0
 8002422:	2078      	movs	r0, #120	; 0x78
 8002424:	f000 fa16 	bl	8002854 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002428:	4c01      	ldr	r4, [pc, #4]	; (8002430 <SSD1306_Init+0x3dc>)
 800242a:	232e      	movs	r3, #46	; 0x2e
 800242c:	e002      	b.n	8002434 <SSD1306_Init+0x3e0>
 800242e:	bf00      	nop
 8002430:	2000097c 	.word	0x2000097c
 8002434:	9313      	str	r3, [sp, #76]	; 0x4c
 8002436:	4668      	mov	r0, sp
 8002438:	f104 0308 	add.w	r3, r4, #8
 800243c:	224c      	movs	r2, #76	; 0x4c
 800243e:	4619      	mov	r1, r3
 8002440:	f007 fc5a 	bl	8009cf8 <memcpy>
 8002444:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002448:	2100      	movs	r1, #0
 800244a:	2078      	movs	r0, #120	; 0x78
 800244c:	f000 fa02 	bl	8002854 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002450:	2000      	movs	r0, #0
 8002452:	f000 f865 	bl	8002520 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002456:	f000 f813 	bl	8002480 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <SSD1306_Init+0x428>)
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <SSD1306_Init+0x428>)
 8002462:	2200      	movs	r2, #0
 8002464:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <SSD1306_Init+0x428>)
 8002468:	2201      	movs	r2, #1
 800246a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002478:	b004      	add	sp, #16
 800247a:	4770      	bx	lr
 800247c:	20000618 	.word	0x20000618

08002480 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b097      	sub	sp, #92	; 0x5c
 8002484:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002486:	2300      	movs	r3, #0
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	e03d      	b.n	8002508 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	3b50      	subs	r3, #80	; 0x50
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4c21      	ldr	r4, [pc, #132]	; (8002518 <SSD1306_UpdateScreen+0x98>)
 8002494:	9313      	str	r3, [sp, #76]	; 0x4c
 8002496:	4668      	mov	r0, sp
 8002498:	f104 0308 	add.w	r3, r4, #8
 800249c:	224c      	movs	r2, #76	; 0x4c
 800249e:	4619      	mov	r1, r3
 80024a0:	f007 fc2a 	bl	8009cf8 <memcpy>
 80024a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024a8:	2100      	movs	r1, #0
 80024aa:	2078      	movs	r0, #120	; 0x78
 80024ac:	f000 f9d2 	bl	8002854 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80024b0:	4c19      	ldr	r4, [pc, #100]	; (8002518 <SSD1306_UpdateScreen+0x98>)
 80024b2:	2300      	movs	r3, #0
 80024b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80024b6:	4668      	mov	r0, sp
 80024b8:	f104 0308 	add.w	r3, r4, #8
 80024bc:	224c      	movs	r2, #76	; 0x4c
 80024be:	4619      	mov	r1, r3
 80024c0:	f007 fc1a 	bl	8009cf8 <memcpy>
 80024c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024c8:	2100      	movs	r1, #0
 80024ca:	2078      	movs	r0, #120	; 0x78
 80024cc:	f000 f9c2 	bl	8002854 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80024d0:	4c11      	ldr	r4, [pc, #68]	; (8002518 <SSD1306_UpdateScreen+0x98>)
 80024d2:	2310      	movs	r3, #16
 80024d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80024d6:	4668      	mov	r0, sp
 80024d8:	f104 0308 	add.w	r3, r4, #8
 80024dc:	224c      	movs	r2, #76	; 0x4c
 80024de:	4619      	mov	r1, r3
 80024e0:	f007 fc0a 	bl	8009cf8 <memcpy>
 80024e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024e8:	2100      	movs	r1, #0
 80024ea:	2078      	movs	r0, #120	; 0x78
 80024ec:	f000 f9b2 	bl	8002854 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	01db      	lsls	r3, r3, #7
 80024f4:	4a09      	ldr	r2, [pc, #36]	; (800251c <SSD1306_UpdateScreen+0x9c>)
 80024f6:	441a      	add	r2, r3
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	2078      	movs	r0, #120	; 0x78
 80024fe:	f000 f961 	bl	80027c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	3301      	adds	r3, #1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b07      	cmp	r3, #7
 800250c:	d9be      	bls.n	800248c <SSD1306_UpdateScreen+0xc>
	}
}
 800250e:	bf00      	nop
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	2000097c 	.word	0x2000097c
 800251c:	20000218 	.word	0x20000218

08002520 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <SSD1306_Fill+0x14>
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <SSD1306_Fill+0x16>
 8002534:	23ff      	movs	r3, #255	; 0xff
 8002536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253a:	4619      	mov	r1, r3
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <SSD1306_Fill+0x2c>)
 800253e:	f007 fbe9 	bl	8009d14 <memset>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000218 	.word	0x20000218

08002550 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
 800255a:	460b      	mov	r3, r1
 800255c:	80bb      	strh	r3, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	70fb      	strb	r3, [r7, #3]
	if (
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	2b7f      	cmp	r3, #127	; 0x7f
 8002566:	d848      	bhi.n	80025fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002568:	88bb      	ldrh	r3, [r7, #4]
 800256a:	2b3f      	cmp	r3, #63	; 0x3f
 800256c:	d845      	bhi.n	80025fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <SSD1306_DrawPixel+0xb8>)
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11a      	bne.n	80025c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	88bb      	ldrh	r3, [r7, #4]
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	b298      	uxth	r0, r3
 8002592:	4603      	mov	r3, r0
 8002594:	01db      	lsls	r3, r3, #7
 8002596:	4413      	add	r3, r2
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <SSD1306_DrawPixel+0xbc>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	b25a      	sxtb	r2, r3
 800259e:	88bb      	ldrh	r3, [r7, #4]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b259      	sxtb	r1, r3
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	4603      	mov	r3, r0
 80025b4:	01db      	lsls	r3, r3, #7
 80025b6:	4413      	add	r3, r2
 80025b8:	b2c9      	uxtb	r1, r1
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <SSD1306_DrawPixel+0xbc>)
 80025bc:	54d1      	strb	r1, [r2, r3]
 80025be:	e01d      	b.n	80025fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	b298      	uxth	r0, r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	01db      	lsls	r3, r3, #7
 80025cc:	4413      	add	r3, r2
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <SSD1306_DrawPixel+0xbc>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	b25a      	sxtb	r2, r3
 80025d4:	88bb      	ldrh	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4013      	ands	r3, r2
 80025e8:	b259      	sxtb	r1, r3
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	4603      	mov	r3, r0
 80025ee:	01db      	lsls	r3, r3, #7
 80025f0:	4413      	add	r3, r2
 80025f2:	b2c9      	uxtb	r1, r1
 80025f4:	4a05      	ldr	r2, [pc, #20]	; (800260c <SSD1306_DrawPixel+0xbc>)
 80025f6:	54d1      	strb	r1, [r2, r3]
 80025f8:	e000      	b.n	80025fc <SSD1306_DrawPixel+0xac>
		return;
 80025fa:	bf00      	nop
	}
}
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000618 	.word	0x20000618
 800260c:	20000218 	.word	0x20000218

08002610 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	460a      	mov	r2, r1
 800261a:	80fb      	strh	r3, [r7, #6]
 800261c:	4613      	mov	r3, r2
 800261e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002620:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SSD1306_GotoXY+0x28>)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <SSD1306_GotoXY+0x28>)
 8002628:	88bb      	ldrh	r3, [r7, #4]
 800262a:	8053      	strh	r3, [r2, #2]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	20000618 	.word	0x20000618

0800263c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	4613      	mov	r3, r2
 800264a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <SSD1306_Putc+0xfc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	4413      	add	r3, r2
	if (
 8002658:	2b7f      	cmp	r3, #127	; 0x7f
 800265a:	dc07      	bgt.n	800266c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <SSD1306_Putc+0xfc>)
 800265e:	885b      	ldrh	r3, [r3, #2]
 8002660:	461a      	mov	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002668:	2b3f      	cmp	r3, #63	; 0x3f
 800266a:	dd01      	ble.n	8002670 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800266c:	2300      	movs	r3, #0
 800266e:	e05e      	b.n	800272e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e04b      	b.n	800270e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	3b20      	subs	r3, #32
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	7849      	ldrb	r1, [r1, #1]
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4619      	mov	r1, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	440b      	add	r3, r1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e030      	b.n	80026fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <SSD1306_Putc+0xfc>)
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	b298      	uxth	r0, r3
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <SSD1306_Putc+0xfc>)
 80026b8:	885a      	ldrh	r2, [r3, #2]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4413      	add	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	79ba      	ldrb	r2, [r7, #6]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7ff ff43 	bl	8002550 <SSD1306_DrawPixel>
 80026ca:	e014      	b.n	80026f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <SSD1306_Putc+0xfc>)
 80026ce:	881a      	ldrh	r2, [r3, #0]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	b298      	uxth	r0, r3
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <SSD1306_Putc+0xfc>)
 80026da:	885a      	ldrh	r2, [r3, #2]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	b299      	uxth	r1, r3
 80026e4:	79bb      	ldrb	r3, [r7, #6]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf0c      	ite	eq
 80026ea:	2301      	moveq	r3, #1
 80026ec:	2300      	movne	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	f7ff ff2d 	bl	8002550 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	3301      	adds	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4293      	cmp	r3, r2
 8002706:	d3c8      	bcc.n	800269a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	461a      	mov	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4293      	cmp	r3, r2
 8002718:	d3ad      	bcc.n	8002676 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <SSD1306_Putc+0xfc>)
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4413      	add	r3, r2
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <SSD1306_Putc+0xfc>)
 800272a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800272c:	79fb      	ldrb	r3, [r7, #7]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000618 	.word	0x20000618

0800273c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800274a:	e012      	b.n	8002772 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff71 	bl	800263c <SSD1306_Putc>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d002      	beq.n	800276c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	e008      	b.n	800277e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e8      	bne.n	800274c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	781b      	ldrb	r3, [r3, #0]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fec8 	bl	8002520 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002790:	f7ff fe76 	bl	8002480 <SSD1306_UpdateScreen>
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <ssd1306_I2C_Init+0x28>)
 80027a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027a2:	e002      	b.n	80027aa <ssd1306_I2C_Init+0x12>
		p--;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f9      	bne.n	80027a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	0003d090 	.word	0x0003d090

080027c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b0c7      	sub	sp, #284	; 0x11c
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	4604      	mov	r4, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	4639      	mov	r1, r7
 80027d0:	600a      	str	r2, [r1, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	4622      	mov	r2, r4
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	1dbb      	adds	r3, r7, #6
 80027dc:	4602      	mov	r2, r0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	460a      	mov	r2, r1
 80027e4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	1dba      	adds	r2, r7, #6
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027f6:	e010      	b.n	800281a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 80027f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027fc:	463a      	mov	r2, r7
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	441a      	add	r2, r3
 8002802:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002806:	3301      	adds	r3, #1
 8002808:	7811      	ldrb	r1, [r2, #0]
 800280a:	f107 020c 	add.w	r2, r7, #12
 800280e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002810:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002814:	3301      	adds	r3, #1
 8002816:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800281a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800281e:	b29b      	uxth	r3, r3
 8002820:	1d3a      	adds	r2, r7, #4
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8e7      	bhi.n	80027f8 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b299      	uxth	r1, r3
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	f107 020c 	add.w	r2, r7, #12
 800283a:	200a      	movs	r0, #10
 800283c:	9000      	str	r0, [sp, #0]
 800283e:	4804      	ldr	r0, [pc, #16]	; (8002850 <ssd1306_I2C_WriteMulti+0x8c>)
 8002840:	f000 fe6c 	bl	800351c <HAL_I2C_Master_Transmit>
}
 8002844:	bf00      	nop
 8002846:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	2000097c 	.word	0x2000097c

08002854 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8002854:	b082      	sub	sp, #8
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af02      	add	r7, sp, #8
 800285c:	f107 0c18 	add.w	ip, r7, #24
 8002860:	e88c 000c 	stmia.w	ip, {r2, r3}
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	460b      	mov	r3, r1
 800286a:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 800286c:	79bb      	ldrb	r3, [r7, #6]
 800286e:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002870:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002874:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	b299      	uxth	r1, r3
 800287a:	f107 020c 	add.w	r2, r7, #12
 800287e:	230a      	movs	r3, #10
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2302      	movs	r3, #2
 8002884:	f107 0018 	add.w	r0, r7, #24
 8002888:	f000 fe48 	bl	800351c <HAL_I2C_Master_Transmit>
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002896:	b002      	add	sp, #8
 8002898:	4770      	bx	lr
	...

0800289c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_MspInit+0x4c>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <HAL_MspInit+0x4c>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_MspInit+0x4c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_MspInit+0x4c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_MspInit+0x4c>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_MspInit+0x4c>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_I2C_MspInit+0x18c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d12c      	bne.n	8002968 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b57      	ldr	r3, [pc, #348]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292e:	2312      	movs	r3, #18
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800293a:	2304      	movs	r3, #4
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002942:	4619      	mov	r1, r3
 8002944:	484e      	ldr	r0, [pc, #312]	; (8002a80 <HAL_I2C_MspInit+0x194>)
 8002946:	f000 fabd 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002966:	e083      	b.n	8002a70 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_I2C_MspInit+0x198>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12d      	bne.n	80029ce <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800298e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002994:	2312      	movs	r3, #18
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029a0:	2304      	movs	r3, #4
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	4835      	ldr	r0, [pc, #212]	; (8002a80 <HAL_I2C_MspInit+0x194>)
 80029ac:	f000 fa8a 	bl	8002ec4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
}
 80029cc:	e050      	b.n	8002a70 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_I2C_MspInit+0x19c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d14b      	bne.n	8002a70 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6313      	str	r3, [r2, #48]	; 0x30
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6313      	str	r3, [r2, #48]	; 0x30
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a16:	2312      	movs	r3, #18
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a22:	2304      	movs	r3, #4
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4817      	ldr	r0, [pc, #92]	; (8002a8c <HAL_I2C_MspInit+0x1a0>)
 8002a2e:	f000 fa49 	bl	8002ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a44:	2304      	movs	r3, #4
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4810      	ldr	r0, [pc, #64]	; (8002a90 <HAL_I2C_MspInit+0x1a4>)
 8002a50:	f000 fa38 	bl	8002ec4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002a5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_I2C_MspInit+0x190>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
}
 8002a70:	bf00      	nop
 8002a72:	3738      	adds	r7, #56	; 0x38
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40005400 	.word	0x40005400
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40005800 	.word	0x40005800
 8002a88:	40005c00 	.word	0x40005c00
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020000 	.word	0x40020000

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <NMI_Handler+0x4>

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae0:	f000 f89a 	bl	8002c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <OTG_FS_IRQHandler+0x10>)
 8002aee:	f001 ff8e 	bl	8004a0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20001ea4 	.word	0x20001ea4

08002afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <SystemInit+0x20>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <SystemInit+0x20>)
 8002b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b26:	490e      	ldr	r1, [pc, #56]	; (8002b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b2c:	e002      	b.n	8002b34 <LoopCopyDataInit>

08002b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b32:	3304      	adds	r3, #4

08002b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b38:	d3f9      	bcc.n	8002b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b3c:	4c0b      	ldr	r4, [pc, #44]	; (8002b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b40:	e001      	b.n	8002b46 <LoopFillZerobss>

08002b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b44:	3204      	adds	r2, #4

08002b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b48:	d3fb      	bcc.n	8002b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b4a:	f7ff ffd7 	bl	8002afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f007 f8af 	bl	8009cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b52:	f7fe fa25 	bl	8000fa0 <main>
  bx  lr    
 8002b56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b60:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002b64:	0800ace0 	.word	0x0800ace0
  ldr r2, =_sbss
 8002b68:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002b6c:	200022ac 	.word	0x200022ac

08002b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <ADC_IRQHandler>
	...

08002b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <HAL_Init+0x40>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_Init+0x40>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_Init+0x40>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f000 f94f 	bl	8002e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba2:	200f      	movs	r0, #15
 8002ba4:	f000 f808 	bl	8002bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba8:	f7ff fe78 	bl	800289c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x54>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_InitTick+0x58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f967 	bl	8002eaa <HAL_SYSTICK_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00e      	b.n	8002c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d80a      	bhi.n	8002c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf4:	f000 f92f 	bl	8002e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf8:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <HAL_InitTick+0x5c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	20000010 	.word	0x20000010
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x24>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_IncTick+0x24>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	200009d0 	.word	0x200009d0

08002c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_GetTick+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	200009d0 	.word	0x200009d0

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff ffee 	bl	8002c40 <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_Delay+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	bf00      	nop
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000010 	.word	0x20000010

08002ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <__NVIC_EnableIRQ+0x38>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0c:	d301      	bcc.n	8002e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00f      	b.n	8002e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <SysTick_Config+0x40>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1a:	210f      	movs	r1, #15
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e20:	f7ff ff8e 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <SysTick_Config+0x40>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2a:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <SysTick_Config+0x40>)
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff29 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e68:	f7ff ff3e 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	6978      	ldr	r0, [r7, #20]
 8002e74:	f7ff ff8e 	bl	8002d94 <NVIC_EncodePriority>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff5d 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff31 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ffa2 	bl	8002dfc <SysTick_Config>
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e16b      	b.n	80031b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 815a 	bne.w	80031b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d130      	bne.n	8002f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0201 	and.w	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80b4 	beq.w	80031b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a5f      	ldr	r2, [pc, #380]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003066:	4a5b      	ldr	r2, [pc, #364]	; (80031d4 <HAL_GPIO_Init+0x310>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_GPIO_Init+0x314>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <HAL_GPIO_Init+0x226>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a51      	ldr	r2, [pc, #324]	; (80031dc <HAL_GPIO_Init+0x318>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d025      	beq.n	80030e6 <HAL_GPIO_Init+0x222>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <HAL_GPIO_Init+0x31c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x21e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <HAL_GPIO_Init+0x320>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x21a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <HAL_GPIO_Init+0x324>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x216>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_GPIO_Init+0x328>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x32c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_GPIO_Init+0x330>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x20a>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00e      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030ce:	2308      	movs	r3, #8
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x310>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312e:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_GPIO_Init+0x334>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae90 	bls.w	8002ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40013c00 	.word	0x40013c00

080031fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e001      	b.n	800321e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003248:	e003      	b.n	8003252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	619a      	str	r2, [r3, #24]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003270:	887a      	ldrh	r2, [r7, #2]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	041a      	lsls	r2, r3, #16
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43d9      	mvns	r1, r3
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	400b      	ands	r3, r1
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	619a      	str	r2, [r3, #24]
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e12b      	b.n	80034fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fb16 	bl	80028ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f8:	f002 ffdc 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a81      	ldr	r2, [pc, #516]	; (8003508 <HAL_I2C_Init+0x274>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d807      	bhi.n	8003318 <HAL_I2C_Init+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_I2C_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e006      	b.n	8003326 <HAL_I2C_Init+0x92>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7d      	ldr	r2, [pc, #500]	; (8003510 <HAL_I2C_Init+0x27c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e7      	b.n	80034fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_I2C_Init+0x280>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_I2C_Init+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d802      	bhi.n	8003368 <HAL_I2C_Init+0xd4>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	e009      	b.n	800337c <HAL_I2C_Init+0xe8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_I2C_Init+0x284>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	; (8003508 <HAL_I2C_Init+0x274>)
 8003398:	428b      	cmp	r3, r1
 800339a:	d819      	bhi.n	80033d0 <HAL_I2C_Init+0x13c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e59      	subs	r1, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Init+0x138>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e59      	subs	r1, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	e051      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e04f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_I2C_Init+0x168>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Init+0x18e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Init+0x196>
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <HAL_I2C_Init+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e58      	subs	r0, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	440b      	add	r3, r1
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6911      	ldr	r1, [r2, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	000186a0 	.word	0x000186a0
 800350c:	001e847f 	.word	0x001e847f
 8003510:	003d08ff 	.word	0x003d08ff
 8003514:	431bde83 	.word	0x431bde83
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff fb86 	bl	8002c40 <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 80e0 	bne.w	8003704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	4970      	ldr	r1, [pc, #448]	; (8003710 <HAL_I2C_Master_Transmit+0x1f4>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 ff30 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e0d3      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Transmit+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_I2C_Master_Transmit+0x1f8>)
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fcea 	bl	8003fb4 <I2C_MasterRequestWrite>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08d      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003600:	e066      	b.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 ffaa 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	6a39      	ldr	r1, [r7, #32]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 ff9a 	bl	80045e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d107      	bne.n	80036cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d194      	bne.n	8003602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7ff fa85 	bl	8002c40 <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 80d9 	bne.w	80038f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	496d      	ldr	r1, [pc, #436]	; (8003904 <HAL_I2C_Mem_Write+0x1ec>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fe2f 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e0cc      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Write+0x56>
 800376a:	2302      	movs	r3, #2
 800376c:	e0c5      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2221      	movs	r2, #33	; 0x21
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a4d      	ldr	r2, [pc, #308]	; (8003908 <HAL_I2C_Mem_Write+0x1f0>)
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d6:	88f8      	ldrh	r0, [r7, #6]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	8979      	ldrh	r1, [r7, #10]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4603      	mov	r3, r0
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fc66 	bl	80040b8 <I2C_RequestMemoryWrite>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d052      	beq.n	8003898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e081      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 feb0 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2b04      	cmp	r3, #4
 800380c:	d107      	bne.n	800381e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06b      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11b      	bne.n	8003898 <HAL_I2C_Mem_Write+0x180>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d017      	beq.n	8003898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1aa      	bne.n	80037f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fe9c 	bl	80045e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e016      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	00100002 	.word	0x00100002
 8003908:	ffff0000 	.word	0xffff0000

0800390c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	817b      	strh	r3, [r7, #10]
 800391e:	460b      	mov	r3, r1
 8003920:	813b      	strh	r3, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003926:	f7ff f98b 	bl	8002c40 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	f040 8208 	bne.w	8003d4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2319      	movs	r3, #25
 8003940:	2201      	movs	r2, #1
 8003942:	497b      	ldr	r1, [pc, #492]	; (8003b30 <HAL_I2C_Mem_Read+0x224>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fd35 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
 8003952:	e1fb      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_I2C_Mem_Read+0x56>
 800395e:	2302      	movs	r3, #2
 8003960:	e1f4      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d007      	beq.n	8003988 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2222      	movs	r2, #34	; 0x22
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <HAL_I2C_Mem_Read+0x228>)
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ca:	88f8      	ldrh	r0, [r7, #6]
 80039cc:	893a      	ldrh	r2, [r7, #8]
 80039ce:	8979      	ldrh	r1, [r7, #10]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	4603      	mov	r3, r0
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fc02 	bl	80041e4 <I2C_RequestMemoryRead>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1b0      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d113      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	623b      	str	r3, [r7, #32]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e184      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11b      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e164      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d11b      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	e144      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ab0:	e138      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	f200 80f1 	bhi.w	8003c9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d123      	bne.n	8003b0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fdcb 	bl	8004664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e139      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b0a:	e10b      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d14e      	bne.n	8003bb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4906      	ldr	r1, [pc, #24]	; (8003b38 <HAL_I2C_Mem_Read+0x22c>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fc48 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e10e      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
 8003b2e:	bf00      	nop
 8003b30:	00100002 	.word	0x00100002
 8003b34:	ffff0000 	.word	0xffff0000
 8003b38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb0:	e0b8      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4966      	ldr	r1, [pc, #408]	; (8003d54 <HAL_I2C_Mem_Read+0x448>)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fbf9 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0bf      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	2200      	movs	r2, #0
 8003c16:	494f      	ldr	r1, [pc, #316]	; (8003d54 <HAL_I2C_Mem_Read+0x448>)
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fbcb 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e091      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c9c:	e042      	b.n	8003d24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fcde 	bl	8004664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e04c      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d118      	bne.n	8003d24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f47f aec2 	bne.w	8003ab2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	00010004 	.word	0x00010004

08003d58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	460b      	mov	r3, r1
 8003d66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7fe ff6a 	bl	8002c40 <HAL_GetTick>
 8003d6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	f040 8111 	bne.w	8003fa2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	4988      	ldr	r1, [pc, #544]	; (8003fac <HAL_I2C_IsDeviceReady+0x254>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fb12 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	e104      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_I2C_IsDeviceReady+0x50>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0fd      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d007      	beq.n	8003dce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2224      	movs	r2, #36	; 0x24
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a70      	ldr	r2, [pc, #448]	; (8003fb0 <HAL_I2C_IsDeviceReady+0x258>)
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fad0 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e28:	d103      	bne.n	8003e32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0b6      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e36:	897b      	ldrh	r3, [r7, #10]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe fefb 	bl	8002c40 <HAL_GetTick>
 8003e4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e7a:	e025      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e7c:	f7fe fee0 	bl	8002c40 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <HAL_I2C_IsDeviceReady+0x13a>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	22a0      	movs	r2, #160	; 0xa0
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_I2C_IsDeviceReady+0x188>
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_I2C_IsDeviceReady+0x188>
 8003eda:	7dbb      	ldrb	r3, [r7, #22]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0cd      	beq.n	8003e7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d129      	bne.n	8003f4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2319      	movs	r3, #25
 8003f22:	2201      	movs	r2, #1
 8003f24:	4921      	ldr	r1, [pc, #132]	; (8003fac <HAL_I2C_IsDeviceReady+0x254>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fa44 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e036      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e02c      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2319      	movs	r3, #25
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	490f      	ldr	r1, [pc, #60]	; (8003fac <HAL_I2C_IsDeviceReady+0x254>)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fa20 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e012      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	f4ff af32 	bcc.w	8003df2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00100002 	.word	0x00100002
 8003fb0:	ffff0000 	.word	0xffff0000

08003fb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d006      	beq.n	8003fde <I2C_MasterRequestWrite+0x2a>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d003      	beq.n	8003fde <I2C_MasterRequestWrite+0x2a>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e00b      	b.n	8004008 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	2b12      	cmp	r3, #18
 8003ff6:	d107      	bne.n	8004008 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f9cd 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d103      	bne.n	8004038 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e035      	b.n	80040a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004044:	d108      	bne.n	8004058 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e01b      	b.n	8004090 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	11db      	asrs	r3, r3, #7
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f063 030f 	orn	r3, r3, #15
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	490e      	ldr	r1, [pc, #56]	; (80040b0 <I2C_MasterRequestWrite+0xfc>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f9f3 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e010      	b.n	80040a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4907      	ldr	r1, [pc, #28]	; (80040b4 <I2C_MasterRequestWrite+0x100>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f9e3 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	00010008 	.word	0x00010008
 80040b4:	00010002 	.word	0x00010002

080040b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	460b      	mov	r3, r1
 80040cc:	813b      	strh	r3, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f960 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d103      	bne.n	8004112 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e05f      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	492d      	ldr	r1, [pc, #180]	; (80041e0 <I2C_RequestMemoryWrite+0x128>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f998 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e04c      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fa02 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d107      	bne.n	800417a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02b      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e021      	b.n	80041d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b29b      	uxth	r3, r3
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f9dc 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d107      	bne.n	80041c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e005      	b.n	80041d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ca:	893b      	ldrh	r3, [r7, #8]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	00010002 	.word	0x00010002

080041e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	2200      	movs	r2, #0
 8004226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8c2 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004244:	d103      	bne.n	800424e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0aa      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	4952      	ldr	r1, [pc, #328]	; (80043b0 <I2C_RequestMemoryRead+0x1cc>)
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8fa 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e097      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f964 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d107      	bne.n	80042b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e076      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]
 80042ca:	e021      	b.n	8004310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042dc:	6a39      	ldr	r1, [r7, #32]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f93e 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d107      	bne.n	8004302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e050      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004306:	893b      	ldrh	r3, [r7, #8]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	6a39      	ldr	r1, [r7, #32]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f923 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b04      	cmp	r3, #4
 8004326:	d107      	bne.n	8004338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e035      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2200      	movs	r2, #0
 8004354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f82b 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d103      	bne.n	800437c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e013      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	4906      	ldr	r1, [pc, #24]	; (80043b0 <I2C_RequestMemoryRead+0x1cc>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f863 	bl	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010002 	.word	0x00010002

080043b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c4:	e025      	b.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043cc:	d021      	beq.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe fc37 	bl	8002c40 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e023      	b.n	800445a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x84>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	e00c      	b.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf0c      	ite	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	2300      	movne	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	429a      	cmp	r2, r3
 8004456:	d0b6      	beq.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004470:	e051      	b.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	d123      	bne.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800449a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 0204 	orr.w	r2, r3, #4
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e046      	b.n	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d0:	d021      	beq.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe fbb5 	bl	8002c40 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e020      	b.n	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10c      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	43da      	mvns	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e00b      	b.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d18d      	bne.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456c:	e02d      	b.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f8ce 	bl	8004710 <I2C_IsAcknowledgeFailed>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e02d      	b.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004584:	d021      	beq.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe fb5b 	bl	8002c40 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e007      	b.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d1ca      	bne.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ee:	e02d      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f88d 	bl	8004710 <I2C_IsAcknowledgeFailed>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e02d      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004606:	d021      	beq.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fe fb1a 	bl	8002c40 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d1ca      	bne.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004670:	e042      	b.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b10      	cmp	r3, #16
 800467e:	d119      	bne.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0210 	mvn.w	r2, #16
 8004688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e029      	b.n	8004708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fac4 	bl	8002c40 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e007      	b.n	8004708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d1b5      	bne.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d11b      	bne.n	8004760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800476e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004770:	b08f      	sub	sp, #60	; 0x3c
 8004772:	af0a      	add	r7, sp, #40	; 0x28
 8004774:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e10f      	b.n	80049a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f004 ff6e 	bl	800967c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fea1 	bl	8006506 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	687e      	ldr	r6, [r7, #4]
 80047cc:	466d      	mov	r5, sp
 80047ce:	f106 0410 	add.w	r4, r6, #16
 80047d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047de:	e885 0003 	stmia.w	r5, {r0, r1}
 80047e2:	1d33      	adds	r3, r6, #4
 80047e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e6:	6838      	ldr	r0, [r7, #0]
 80047e8:	f001 fd78 	bl	80062dc <USB_CoreInit>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0d0      	b.n	80049a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f001 fe8f 	bl	8006528 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e04a      	b.n	80048a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	333d      	adds	r3, #61	; 0x3d
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	333c      	adds	r3, #60	; 0x3c
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	b298      	uxth	r0, r3
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	3342      	adds	r3, #66	; 0x42
 800484c:	4602      	mov	r2, r0
 800484e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	333f      	adds	r3, #63	; 0x3f
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	3344      	adds	r3, #68	; 0x44
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3348      	adds	r3, #72	; 0x48
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800488c:	7bfa      	ldrb	r2, [r7, #15]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	3350      	adds	r3, #80	; 0x50
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	3301      	adds	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3af      	bcc.n	8004810 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e044      	b.n	8004940 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	3301      	adds	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d3b5      	bcc.n	80048b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	687e      	ldr	r6, [r7, #4]
 8004952:	466d      	mov	r5, sp
 8004954:	f106 0410 	add.w	r4, r6, #16
 8004958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800495a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800495c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800495e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004960:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004964:	e885 0003 	stmia.w	r5, {r0, r1}
 8004968:	1d33      	adds	r3, r6, #4
 800496a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f001 fe27 	bl	80065c0 <USB_DevInit>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e00d      	b.n	80049a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f002 fea3 	bl	80076e4 <USB_DevDisconnect>

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_PCD_Start+0x1c>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e020      	b.n	8004a06 <HAL_PCD_Start+0x5e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d109      	bne.n	80049e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d005      	beq.n	80049e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fd79 	bl	80064e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f002 fe53 	bl	80076a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a0e:	b590      	push	{r4, r7, lr}
 8004a10:	b08d      	sub	sp, #52	; 0x34
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 ff11 	bl	800784c <USB_GetMode>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 839d 	bne.w	800516c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 fe75 	bl	8007726 <USB_ReadInterrupts>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8393 	beq.w	800516a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f002 fe6c 	bl	8007726 <USB_ReadInterrupts>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d107      	bne.n	8004a68 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f002 0202 	and.w	r2, r2, #2
 8004a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f002 fe5a 	bl	8007726 <USB_ReadInterrupts>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d161      	bne.n	8004b40 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0210 	bic.w	r2, r2, #16
 8004a8a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	4613      	mov	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	0c5b      	lsrs	r3, r3, #17
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d124      	bne.n	8004b02 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d035      	beq.n	8004b30 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6a38      	ldr	r0, [r7, #32]
 8004ad8:	f002 fc91 	bl	80073fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ae8:	441a      	add	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004afa:	441a      	add	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	619a      	str	r2, [r3, #24]
 8004b00:	e016      	b.n	8004b30 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	0c5b      	lsrs	r3, r3, #17
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d110      	bne.n	8004b30 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b14:	2208      	movs	r2, #8
 8004b16:	4619      	mov	r1, r3
 8004b18:	6a38      	ldr	r0, [r7, #32]
 8004b1a:	f002 fc70 	bl	80073fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b2a:	441a      	add	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0210 	orr.w	r2, r2, #16
 8004b3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f002 fdee 	bl	8007726 <USB_ReadInterrupts>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b54:	d16e      	bne.n	8004c34 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f002 fdf4 	bl	800774c <USB_ReadDevAllOutEpInterrupt>
 8004b64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b66:	e062      	b.n	8004c2e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d057      	beq.n	8004c22 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f002 fe19 	bl	80077b4 <USB_ReadDevOutEPInterrupt>
 8004b82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fdb0 	bl	8005708 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 feaa 	bl	8005920 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	461a      	mov	r2, r3
 8004be4:	2310      	movs	r3, #16
 8004be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2320      	movs	r3, #32
 8004c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	3301      	adds	r3, #1
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d199      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 fd74 	bl	8007726 <USB_ReadInterrupts>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c48:	f040 80c0 	bne.w	8004dcc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f002 fd95 	bl	8007780 <USB_ReadDevAllInEpInterrupt>
 8004c56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c5c:	e0b2      	b.n	8004dc4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a7 	beq.w	8004db8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 fdbb 	bl	80077f0 <USB_ReadDevInEPInterrupt>
 8004c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d057      	beq.n	8004d36 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69f9      	ldr	r1, [r7, #28]
 8004ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2301      	movs	r3, #1
 8004cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d132      	bne.n	8004d2a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3348      	adds	r3, #72	; 0x48
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	4613      	mov	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4403      	add	r3, r0
 8004ce4:	3344      	adds	r3, #68	; 0x44
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4419      	add	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4403      	add	r3, r0
 8004cf8:	3348      	adds	r3, #72	; 0x48
 8004cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d113      	bne.n	8004d2a <HAL_PCD_IRQHandler+0x31c>
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3350      	adds	r3, #80	; 0x50
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d108      	bne.n	8004d2a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d22:	461a      	mov	r2, r3
 8004d24:	2101      	movs	r1, #1
 8004d26:	f002 fdc3 	bl	80078b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f004 fd24 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2308      	movs	r3, #8
 8004d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	461a      	mov	r2, r3
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	2302      	movs	r3, #2
 8004da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fc1b 	bl	80055ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f af49 	bne.w	8004c5e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f002 fca8 	bl	8007726 <USB_ReadInterrupts>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de0:	d122      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fe26 	bl	8005a5c <HAL_PCDEx_LPM_Callback>
 8004e10:	e002      	b.n	8004e18 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f004 fd2a 	bl	800986c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f002 fc7a 	bl	8007726 <USB_ReadInterrupts>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	d112      	bne.n	8004e64 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f004 fce6 	bl	8009820 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e62:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f002 fc5c 	bl	8007726 <USB_ReadInterrupts>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e78:	f040 80c7 	bne.w	800500a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2110      	movs	r1, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 fcf6 	bl	8006888 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea0:	e056      	b.n	8004f50 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eb4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ed4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ef4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	461a      	mov	r2, r3
 8004f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d3a3      	bcc.n	8004ea2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f86:	f043 030b 	orr.w	r3, r3, #11
 8004f8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f9c:	f043 030b 	orr.w	r3, r3, #11
 8004fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fa2:	e015      	b.n	8004fd0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fb6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004fba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fca:	f043 030b 	orr.w	r3, r3, #11
 8004fce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fe2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f002 fc5b 	bl	80078b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f002 fb89 	bl	8007726 <USB_ReadInterrupts>
 8005014:	4603      	mov	r3, r0
 8005016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501e:	d124      	bne.n	800506a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f002 fc1f 	bl	8007868 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fc87 	bl	8006942 <USB_GetDevSpeed>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	f001 f92c 	bl	800629c <HAL_RCC_GetHCLKFreq>
 8005044:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	4620      	mov	r0, r4
 8005050:	f001 f9a6 	bl	80063a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f004 fbba 	bl	80097ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005068:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f002 fb59 	bl	8007726 <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d10a      	bne.n	8005094 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f004 fb97 	bl	80097b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f002 0208 	and.w	r2, r2, #8
 8005092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f002 fb44 	bl	8007726 <USB_ReadInterrupts>
 800509e:	4603      	mov	r3, r0
 80050a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a8:	d10f      	bne.n	80050ca <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f004 fbf9 	bl	80098ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 fb29 	bl	8007726 <USB_ReadInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050de:	d10f      	bne.n	8005100 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f004 fbcc 	bl	8009888 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80050fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f002 fb0e 	bl	8007726 <USB_ReadInterrupts>
 800510a:	4603      	mov	r3, r0
 800510c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d10a      	bne.n	800512c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f004 fbda 	bl	80098d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800512a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f002 faf8 	bl	8007726 <USB_ReadInterrupts>
 8005136:	4603      	mov	r3, r0
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d115      	bne.n	800516c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f004 fbca 	bl	80098ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	e000      	b.n	800516c <HAL_PCD_IRQHandler+0x75e>
      return;
 800516a:	bf00      	nop
    }
  }
}
 800516c:	3734      	adds	r7, #52	; 0x34
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}

08005172 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_PCD_SetAddress+0x1a>
 8005188:	2302      	movs	r3, #2
 800518a:	e013      	b.n	80051b4 <HAL_PCD_SetAddress+0x42>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f002 fa56 	bl	8007656 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	70fb      	strb	r3, [r7, #3]
 80051ce:	460b      	mov	r3, r1
 80051d0:	803b      	strh	r3, [r7, #0]
 80051d2:	4613      	mov	r3, r2
 80051d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da0f      	bge.n	8005202 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	f003 020f 	and.w	r2, r3, #15
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	3338      	adds	r3, #56	; 0x38
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	3304      	adds	r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	705a      	strb	r2, [r3, #1]
 8005200:	e00f      	b.n	8005222 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	f003 020f 	and.w	r2, r3, #15
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	4413      	add	r3, r2
 8005218:	3304      	adds	r3, #4
 800521a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800522e:	883a      	ldrh	r2, [r7, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	78ba      	ldrb	r2, [r7, #2]
 8005238:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800524c:	78bb      	ldrb	r3, [r7, #2]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d102      	bne.n	8005258 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_PCD_EP_Open+0xaa>
 8005262:	2302      	movs	r3, #2
 8005264:	e00e      	b.n	8005284 <HAL_PCD_EP_Open+0xc8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fb89 	bl	800698c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005282:	7afb      	ldrb	r3, [r7, #11]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800529c:	2b00      	cmp	r3, #0
 800529e:	da0f      	bge.n	80052c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	f003 020f 	and.w	r2, r3, #15
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	3338      	adds	r3, #56	; 0x38
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	3304      	adds	r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	705a      	strb	r2, [r3, #1]
 80052be:	e00f      	b.n	80052e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	3304      	adds	r3, #4
 80052d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_PCD_EP_Close+0x6e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e00e      	b.n	8005318 <HAL_PCD_EP_Close+0x8c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	4618      	mov	r0, r3
 800530a:	f001 fbc7 	bl	8006a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	460b      	mov	r3, r1
 800532e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	b2da      	uxtb	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d102      	bne.n	800537c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800537c:	7afb      	ldrb	r3, [r7, #11]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	f001 fea2 	bl	80070dc <USB_EP0StartXfer>
 8005398:	e008      	b.n	80053ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	f001 fc54 	bl	8006c54 <USB_EPStartXfer>
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	f003 020f 	and.w	r2, r3, #15
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80053d8:	681b      	ldr	r3, [r3, #0]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	460b      	mov	r3, r1
 80053f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f003 020f 	and.w	r2, r3, #15
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	3338      	adds	r3, #56	; 0x38
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2201      	movs	r2, #1
 8005424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005426:	7afb      	ldrb	r3, [r7, #11]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	b2da      	uxtb	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d102      	bne.n	8005440 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	6979      	ldr	r1, [r7, #20]
 8005458:	f001 fe40 	bl	80070dc <USB_EP0StartXfer>
 800545c:	e008      	b.n	8005470 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	f001 fbf2 	bl	8006c54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d901      	bls.n	8005498 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e050      	b.n	800553a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da0f      	bge.n	80054c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	3338      	adds	r3, #56	; 0x38
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	3304      	adds	r3, #4
 80054b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	705a      	strb	r2, [r3, #1]
 80054be:	e00d      	b.n	80054dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	3304      	adds	r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_PCD_EP_SetStall+0x82>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e01e      	b.n	800553a <HAL_PCD_EP_SetStall+0xc0>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	4618      	mov	r0, r3
 800550c:	f001 ffcf 	bl	80074ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	b2d9      	uxtb	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800552a:	461a      	mov	r2, r3
 800552c:	f002 f9c0 	bl	80078b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d901      	bls.n	8005560 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e042      	b.n	80055e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005564:	2b00      	cmp	r3, #0
 8005566:	da0f      	bge.n	8005588 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	3338      	adds	r3, #56	; 0x38
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4413      	add	r3, r2
 800557c:	3304      	adds	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	705a      	strb	r2, [r3, #1]
 8005586:	e00f      	b.n	80055a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 020f 	and.w	r2, r3, #15
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_PCD_EP_ClrStall+0x86>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e00e      	b.n	80055e6 <HAL_PCD_EP_ClrStall+0xa4>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 ffd7 	bl	800758a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08a      	sub	sp, #40	; 0x28
 80055f2:	af02      	add	r7, sp, #8
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	3338      	adds	r3, #56	; 0x38
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	3304      	adds	r3, #4
 8005614:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	429a      	cmp	r2, r3
 8005620:	d901      	bls.n	8005626 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e06c      	b.n	8005700 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	429a      	cmp	r2, r3
 800563a:	d902      	bls.n	8005642 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3303      	adds	r3, #3
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800564a:	e02b      	b.n	80056a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	429a      	cmp	r2, r3
 8005660:	d902      	bls.n	8005668 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3303      	adds	r3, #3
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68d9      	ldr	r1, [r3, #12]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005680:	b2db      	uxtb	r3, r3
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	4603      	mov	r3, r0
 8005686:	6978      	ldr	r0, [r7, #20]
 8005688:	f001 fe7b 	bl	8007382 <USB_WritePacket>

    ep->xfer_buff  += len;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d809      	bhi.n	80056ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d203      	bcs.n	80056ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1be      	bne.n	800564c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d811      	bhi.n	80056fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2201      	movs	r2, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	6939      	ldr	r1, [r7, #16]
 80056f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fa:	4013      	ands	r3, r2
 80056fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	333c      	adds	r3, #60	; 0x3c
 8005720:	3304      	adds	r3, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b01      	cmp	r3, #1
 800573c:	f040 80a0 	bne.w	8005880 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d015      	beq.n	8005776 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a72      	ldr	r2, [pc, #456]	; (8005918 <PCD_EP_OutXfrComplete_int+0x210>)
 800574e:	4293      	cmp	r3, r2
 8005750:	f240 80dd 	bls.w	800590e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80d7 	beq.w	800590e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	461a      	mov	r2, r3
 800576e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005772:	6093      	str	r3, [r2, #8]
 8005774:	e0cb      	b.n	800590e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	2320      	movs	r3, #32
 8005790:	6093      	str	r3, [r2, #8]
 8005792:	e0bc      	b.n	800590e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 80b7 	bne.w	800590e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a5d      	ldr	r2, [pc, #372]	; (8005918 <PCD_EP_OutXfrComplete_int+0x210>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d90f      	bls.n	80057c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	461a      	mov	r2, r3
 80057c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c4:	6093      	str	r3, [r2, #8]
 80057c6:	e0a2      	b.n	800590e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	0159      	lsls	r1, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	440b      	add	r3, r1
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80057ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4403      	add	r3, r0
 80057fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005802:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005816:	6819      	ldr	r1, [r3, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4403      	add	r3, r0
 8005826:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4419      	add	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4403      	add	r3, r0
 800583c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005840:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d114      	bne.n	8005872 <PCD_EP_OutXfrComplete_int+0x16a>
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d108      	bne.n	8005872 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800586a:	461a      	mov	r2, r3
 800586c:	2101      	movs	r1, #1
 800586e:	f002 f81f 	bl	80078b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f003 ff65 	bl	8009748 <HAL_PCD_DataOutStageCallback>
 800587e:	e046      	b.n	800590e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a26      	ldr	r2, [pc, #152]	; (800591c <PCD_EP_OutXfrComplete_int+0x214>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d124      	bne.n	80058d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	e032      	b.n	800590e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	2320      	movs	r3, #32
 80058c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f003 ff3c 	bl	8009748 <HAL_PCD_DataOutStageCallback>
 80058d0:	e01d      	b.n	800590e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d114      	bne.n	8005902 <PCD_EP_OutXfrComplete_int+0x1fa>
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058fa:	461a      	mov	r2, r3
 80058fc:	2100      	movs	r1, #0
 80058fe:	f001 ffd7 	bl	80078b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f003 ff1d 	bl	8009748 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	4f54300a 	.word	0x4f54300a
 800591c:	4f54310a 	.word	0x4f54310a

08005920 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	333c      	adds	r3, #60	; 0x3c
 8005938:	3304      	adds	r3, #4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d90e      	bls.n	8005974 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f003 fed5 	bl	8009724 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d90c      	bls.n	800599c <PCD_EP_OutSetupPacket_int+0x7c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d108      	bne.n	800599c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005994:	461a      	mov	r2, r3
 8005996:	2101      	movs	r1, #1
 8005998:	f001 ff8a 	bl	80078b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	4f54300a 	.word	0x4f54300a

080059ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
 80059b8:	4613      	mov	r3, r2
 80059ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d107      	bne.n	80059da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059ca:	883b      	ldrh	r3, [r7, #0]
 80059cc:	0419      	lsls	r1, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
 80059d8:	e028      	b.n	8005a2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	e00d      	b.n	8005a0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	3340      	adds	r3, #64	; 0x40
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	3301      	adds	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
 8005a0a:	7bfa      	ldrb	r2, [r7, #15]
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d3ec      	bcc.n	80059ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a14:	883b      	ldrh	r3, [r7, #0]
 8005a16:	0418      	lsls	r0, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6819      	ldr	r1, [r3, #0]
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4302      	orrs	r2, r0
 8005a24:	3340      	adds	r3, #64	; 0x40
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	887a      	ldrh	r2, [r7, #2]
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e264      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d075      	beq.n	8005b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a92:	4ba3      	ldr	r3, [pc, #652]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a9e:	4ba0      	ldr	r3, [pc, #640]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d112      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aaa:	4b9d      	ldr	r3, [pc, #628]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab8:	4b99      	ldr	r3, [pc, #612]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05b      	beq.n	8005b7c <HAL_RCC_OscConfig+0x108>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d157      	bne.n	8005b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e23f      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d106      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x74>
 8005ada:	4b91      	ldr	r3, [pc, #580]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a90      	ldr	r2, [pc, #576]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e01d      	b.n	8005b24 <HAL_RCC_OscConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x98>
 8005af2:	4b8b      	ldr	r3, [pc, #556]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a8a      	ldr	r2, [pc, #552]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b88      	ldr	r3, [pc, #544]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a87      	ldr	r2, [pc, #540]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0xb0>
 8005b0c:	4b84      	ldr	r3, [pc, #528]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a83      	ldr	r2, [pc, #524]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b81      	ldr	r3, [pc, #516]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a80      	ldr	r2, [pc, #512]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d013      	beq.n	8005b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd f888 	bl	8002c40 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fd f884 	bl	8002c40 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e204      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b46:	4b76      	ldr	r3, [pc, #472]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0xc0>
 8005b52:	e014      	b.n	8005b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b54:	f7fd f874 	bl	8002c40 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b5c:	f7fd f870 	bl	8002c40 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1f0      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6e:	4b6c      	ldr	r3, [pc, #432]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0xe8>
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d063      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b8a:	4b65      	ldr	r3, [pc, #404]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b96:	4b62      	ldr	r3, [pc, #392]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d11c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ba2:	4b5f      	ldr	r3, [pc, #380]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	4b5c      	ldr	r3, [pc, #368]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x152>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e1c4      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc6:	4b56      	ldr	r3, [pc, #344]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4952      	ldr	r1, [pc, #328]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bda:	e03a      	b.n	8005c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCC_OscConfig+0x2b0>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fd f829 	bl	8002c40 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf2:	f7fd f825 	bl	8002c40 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e1a5      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c04:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4940      	ldr	r1, [pc, #256]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]
 8005c24:	e015      	b.n	8005c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c26:	4b3f      	ldr	r3, [pc, #252]	; (8005d24 <HAL_RCC_OscConfig+0x2b0>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fd f808 	bl	8002c40 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c34:	f7fd f804 	bl	8002c40 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e184      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c46:	4b36      	ldr	r3, [pc, #216]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d030      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c66:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <HAL_RCC_OscConfig+0x2b4>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fc ffe8 	bl	8002c40 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c74:	f7fc ffe4 	bl	8002c40 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e164      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c86:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x200>
 8005c92:	e015      	b.n	8005cc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c94:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCC_OscConfig+0x2b4>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9a:	f7fc ffd1 	bl	8002c40 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca2:	f7fc ffcd 	bl	8002c40 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e14d      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a0 	beq.w	8005e0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd2:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10f      	bne.n	8005cfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a0e      	ldr	r2, [pc, #56]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_RCC_OscConfig+0x2b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d121      	bne.n	8005d4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <HAL_RCC_OscConfig+0x2b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a07      	ldr	r2, [pc, #28]	; (8005d2c <HAL_RCC_OscConfig+0x2b8>)
 8005d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d16:	f7fc ff93 	bl	8002c40 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	e011      	b.n	8005d42 <HAL_RCC_OscConfig+0x2ce>
 8005d1e:	bf00      	nop
 8005d20:	40023800 	.word	0x40023800
 8005d24:	42470000 	.word	0x42470000
 8005d28:	42470e80 	.word	0x42470e80
 8005d2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d30:	f7fc ff86 	bl	8002c40 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e106      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d42:	4b85      	ldr	r3, [pc, #532]	; (8005f58 <HAL_RCC_OscConfig+0x4e4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d106      	bne.n	8005d64 <HAL_RCC_OscConfig+0x2f0>
 8005d56:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	4a80      	ldr	r2, [pc, #512]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	6713      	str	r3, [r2, #112]	; 0x70
 8005d62:	e01c      	b.n	8005d9e <HAL_RCC_OscConfig+0x32a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d10c      	bne.n	8005d86 <HAL_RCC_OscConfig+0x312>
 8005d6c:	4b7b      	ldr	r3, [pc, #492]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a7a      	ldr	r2, [pc, #488]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d72:	f043 0304 	orr.w	r3, r3, #4
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
 8005d78:	4b78      	ldr	r3, [pc, #480]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7c:	4a77      	ldr	r2, [pc, #476]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	6713      	str	r3, [r2, #112]	; 0x70
 8005d84:	e00b      	b.n	8005d9e <HAL_RCC_OscConfig+0x32a>
 8005d86:	4b75      	ldr	r3, [pc, #468]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a74      	ldr	r2, [pc, #464]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
 8005d92:	4b72      	ldr	r3, [pc, #456]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	4a71      	ldr	r2, [pc, #452]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005d98:	f023 0304 	bic.w	r3, r3, #4
 8005d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d015      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da6:	f7fc ff4b 	bl	8002c40 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dae:	f7fc ff47 	bl	8002c40 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e0c5      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc4:	4b65      	ldr	r3, [pc, #404]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ee      	beq.n	8005dae <HAL_RCC_OscConfig+0x33a>
 8005dd0:	e014      	b.n	8005dfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd2:	f7fc ff35 	bl	8002c40 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fc ff31 	bl	8002c40 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e0af      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df0:	4b5a      	ldr	r3, [pc, #360]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1ee      	bne.n	8005dda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d105      	bne.n	8005e0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e02:	4b56      	ldr	r3, [pc, #344]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	4a55      	ldr	r2, [pc, #340]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 809b 	beq.w	8005f4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e18:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d05c      	beq.n	8005ede <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d141      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2c:	4b4c      	ldr	r3, [pc, #304]	; (8005f60 <HAL_RCC_OscConfig+0x4ec>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e32:	f7fc ff05 	bl	8002c40 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3a:	f7fc ff01 	bl	8002c40 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e081      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4c:	4b43      	ldr	r3, [pc, #268]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f0      	bne.n	8005e3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	019b      	lsls	r3, r3, #6
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	3b01      	subs	r3, #1
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	061b      	lsls	r3, r3, #24
 8005e7c:	4937      	ldr	r1, [pc, #220]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e82:	4b37      	ldr	r3, [pc, #220]	; (8005f60 <HAL_RCC_OscConfig+0x4ec>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fc feda 	bl	8002c40 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fc fed6 	bl	8002c40 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e056      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x41c>
 8005eae:	e04e      	b.n	8005f4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <HAL_RCC_OscConfig+0x4ec>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fc fec3 	bl	8002c40 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ebe:	f7fc febf 	bl	8002c40 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e03f      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed0:	4b22      	ldr	r3, [pc, #136]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f0      	bne.n	8005ebe <HAL_RCC_OscConfig+0x44a>
 8005edc:	e037      	b.n	8005f4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e032      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <HAL_RCC_OscConfig+0x4e8>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d028      	beq.n	8005f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d121      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d11a      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d111      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	3b01      	subs	r3, #1
 8005f34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d107      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d001      	beq.n	8005f4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40007000 	.word	0x40007000
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	42470060 	.word	0x42470060

08005f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0cc      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f78:	4b68      	ldr	r3, [pc, #416]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d90c      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b63      	ldr	r3, [pc, #396]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0b8      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d020      	beq.n	8005fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fb8:	4b59      	ldr	r3, [pc, #356]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4a58      	ldr	r2, [pc, #352]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd0:	4b53      	ldr	r3, [pc, #332]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a52      	ldr	r2, [pc, #328]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fdc:	4b50      	ldr	r3, [pc, #320]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	494d      	ldr	r1, [pc, #308]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d044      	beq.n	8006084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	4b47      	ldr	r3, [pc, #284]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d119      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e07f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d003      	beq.n	8006022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800601e:	2b03      	cmp	r3, #3
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e06f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006032:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e067      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 0203 	bic.w	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4934      	ldr	r1, [pc, #208]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006054:	f7fc fdf4 	bl	8002c40 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fc fdf0 	bl	8002c40 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e04f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 020c 	and.w	r2, r3, #12
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	429a      	cmp	r2, r3
 8006082:	d1eb      	bne.n	800605c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d20c      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e032      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4916      	ldr	r1, [pc, #88]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	490e      	ldr	r1, [pc, #56]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ea:	f000 f821 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	490a      	ldr	r1, [pc, #40]	; (8006124 <HAL_RCC_ClockConfig+0x1c0>)
 80060fc:	5ccb      	ldrb	r3, [r1, r3]
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <HAL_RCC_ClockConfig+0x1c4>)
 8006104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_ClockConfig+0x1c8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fc fd54 	bl	8002bb8 <HAL_InitTick>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023c00 	.word	0x40023c00
 8006120:	40023800 	.word	0x40023800
 8006124:	0800acb8 	.word	0x0800acb8
 8006128:	20000008 	.word	0x20000008
 800612c:	2000000c 	.word	0x2000000c

08006130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006130:	b5b0      	push	{r4, r5, r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006136:	2100      	movs	r1, #0
 8006138:	6079      	str	r1, [r7, #4]
 800613a:	2100      	movs	r1, #0
 800613c:	60f9      	str	r1, [r7, #12]
 800613e:	2100      	movs	r1, #0
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006142:	2100      	movs	r1, #0
 8006144:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006146:	4952      	ldr	r1, [pc, #328]	; (8006290 <HAL_RCC_GetSysClockFreq+0x160>)
 8006148:	6889      	ldr	r1, [r1, #8]
 800614a:	f001 010c 	and.w	r1, r1, #12
 800614e:	2908      	cmp	r1, #8
 8006150:	d00d      	beq.n	800616e <HAL_RCC_GetSysClockFreq+0x3e>
 8006152:	2908      	cmp	r1, #8
 8006154:	f200 8094 	bhi.w	8006280 <HAL_RCC_GetSysClockFreq+0x150>
 8006158:	2900      	cmp	r1, #0
 800615a:	d002      	beq.n	8006162 <HAL_RCC_GetSysClockFreq+0x32>
 800615c:	2904      	cmp	r1, #4
 800615e:	d003      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0x38>
 8006160:	e08e      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006162:	4b4c      	ldr	r3, [pc, #304]	; (8006294 <HAL_RCC_GetSysClockFreq+0x164>)
 8006164:	60bb      	str	r3, [r7, #8]
       break;
 8006166:	e08e      	b.n	8006286 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006168:	4b4b      	ldr	r3, [pc, #300]	; (8006298 <HAL_RCC_GetSysClockFreq+0x168>)
 800616a:	60bb      	str	r3, [r7, #8]
      break;
 800616c:	e08b      	b.n	8006286 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800616e:	4948      	ldr	r1, [pc, #288]	; (8006290 <HAL_RCC_GetSysClockFreq+0x160>)
 8006170:	6849      	ldr	r1, [r1, #4]
 8006172:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006176:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006178:	4945      	ldr	r1, [pc, #276]	; (8006290 <HAL_RCC_GetSysClockFreq+0x160>)
 800617a:	6849      	ldr	r1, [r1, #4]
 800617c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006180:	2900      	cmp	r1, #0
 8006182:	d024      	beq.n	80061ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006184:	4942      	ldr	r1, [pc, #264]	; (8006290 <HAL_RCC_GetSysClockFreq+0x160>)
 8006186:	6849      	ldr	r1, [r1, #4]
 8006188:	0989      	lsrs	r1, r1, #6
 800618a:	4608      	mov	r0, r1
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006194:	f04f 0500 	mov.w	r5, #0
 8006198:	ea00 0204 	and.w	r2, r0, r4
 800619c:	ea01 0305 	and.w	r3, r1, r5
 80061a0:	493d      	ldr	r1, [pc, #244]	; (8006298 <HAL_RCC_GetSysClockFreq+0x168>)
 80061a2:	fb01 f003 	mul.w	r0, r1, r3
 80061a6:	2100      	movs	r1, #0
 80061a8:	fb01 f102 	mul.w	r1, r1, r2
 80061ac:	1844      	adds	r4, r0, r1
 80061ae:	493a      	ldr	r1, [pc, #232]	; (8006298 <HAL_RCC_GetSysClockFreq+0x168>)
 80061b0:	fba2 0101 	umull	r0, r1, r2, r1
 80061b4:	1863      	adds	r3, r4, r1
 80061b6:	4619      	mov	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	f7fa fce6 	bl	8000b90 <__aeabi_uldivmod>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4613      	mov	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e04a      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ce:	4b30      	ldr	r3, [pc, #192]	; (8006290 <HAL_RCC_GetSysClockFreq+0x160>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	099b      	lsrs	r3, r3, #6
 80061d4:	461a      	mov	r2, r3
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	ea02 0400 	and.w	r4, r2, r0
 80061e6:	ea03 0501 	and.w	r5, r3, r1
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	014b      	lsls	r3, r1, #5
 80061f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061fc:	0142      	lsls	r2, r0, #5
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	1b00      	subs	r0, r0, r4
 8006204:	eb61 0105 	sbc.w	r1, r1, r5
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	018b      	lsls	r3, r1, #6
 8006212:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006216:	0182      	lsls	r2, r0, #6
 8006218:	1a12      	subs	r2, r2, r0
 800621a:	eb63 0301 	sbc.w	r3, r3, r1
 800621e:	f04f 0000 	mov.w	r0, #0
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	00d9      	lsls	r1, r3, #3
 8006228:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800622c:	00d0      	lsls	r0, r2, #3
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	1912      	adds	r2, r2, r4
 8006234:	eb45 0303 	adc.w	r3, r5, r3
 8006238:	f04f 0000 	mov.w	r0, #0
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	0299      	lsls	r1, r3, #10
 8006242:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006246:	0290      	lsls	r0, r2, #10
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	461a      	mov	r2, r3
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	f7fa fc9a 	bl	8000b90 <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4613      	mov	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <HAL_RCC_GetSysClockFreq+0x160>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	3301      	adds	r3, #1
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	60bb      	str	r3, [r7, #8]
      break;
 800627e:	e002      	b.n	8006286 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <HAL_RCC_GetSysClockFreq+0x164>)
 8006282:	60bb      	str	r3, [r7, #8]
      break;
 8006284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006286:	68bb      	ldr	r3, [r7, #8]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bdb0      	pop	{r4, r5, r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	00f42400 	.word	0x00f42400
 8006298:	017d7840 	.word	0x017d7840

0800629c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062a2:	681b      	ldr	r3, [r3, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20000008 	.word	0x20000008

080062b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062b8:	f7ff fff0 	bl	800629c <HAL_RCC_GetHCLKFreq>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	0a9b      	lsrs	r3, r3, #10
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	4903      	ldr	r1, [pc, #12]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ca:	5ccb      	ldrb	r3, [r1, r3]
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40023800 	.word	0x40023800
 80062d8:	0800acc8 	.word	0x0800acc8

080062dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062dc:	b084      	sub	sp, #16
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	f107 001c 	add.w	r0, r7, #28
 80062ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d122      	bne.n	800633a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800631c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d105      	bne.n	800632e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fb1c 	bl	800796c <USB_CoreReset>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
 8006338:	e01a      	b.n	8006370 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 fb10 	bl	800796c <USB_CoreReset>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
 8006362:	e005      	b.n	8006370 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10b      	bne.n	800638e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f043 0206 	orr.w	r2, r3, #6
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f043 0220 	orr.w	r2, r3, #32
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800639a:	b004      	add	sp, #16
 800639c:	4770      	bx	lr
	...

080063a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d165      	bne.n	8006480 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4a41      	ldr	r2, [pc, #260]	; (80064bc <USB_SetTurnaroundTime+0x11c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d906      	bls.n	80063ca <USB_SetTurnaroundTime+0x2a>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4a40      	ldr	r2, [pc, #256]	; (80064c0 <USB_SetTurnaroundTime+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d202      	bcs.n	80063ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063c4:	230f      	movs	r3, #15
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e062      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4a3c      	ldr	r2, [pc, #240]	; (80064c0 <USB_SetTurnaroundTime+0x120>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d306      	bcc.n	80063e0 <USB_SetTurnaroundTime+0x40>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4a3b      	ldr	r2, [pc, #236]	; (80064c4 <USB_SetTurnaroundTime+0x124>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d202      	bcs.n	80063e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063da:	230e      	movs	r3, #14
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e057      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a38      	ldr	r2, [pc, #224]	; (80064c4 <USB_SetTurnaroundTime+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d306      	bcc.n	80063f6 <USB_SetTurnaroundTime+0x56>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4a37      	ldr	r2, [pc, #220]	; (80064c8 <USB_SetTurnaroundTime+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d202      	bcs.n	80063f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063f0:	230d      	movs	r3, #13
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e04c      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4a33      	ldr	r2, [pc, #204]	; (80064c8 <USB_SetTurnaroundTime+0x128>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d306      	bcc.n	800640c <USB_SetTurnaroundTime+0x6c>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4a32      	ldr	r2, [pc, #200]	; (80064cc <USB_SetTurnaroundTime+0x12c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d802      	bhi.n	800640c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006406:	230c      	movs	r3, #12
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e041      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4a2f      	ldr	r2, [pc, #188]	; (80064cc <USB_SetTurnaroundTime+0x12c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d906      	bls.n	8006422 <USB_SetTurnaroundTime+0x82>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4a2e      	ldr	r2, [pc, #184]	; (80064d0 <USB_SetTurnaroundTime+0x130>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d802      	bhi.n	8006422 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800641c:	230b      	movs	r3, #11
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e036      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <USB_SetTurnaroundTime+0x130>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d906      	bls.n	8006438 <USB_SetTurnaroundTime+0x98>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <USB_SetTurnaroundTime+0x134>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d802      	bhi.n	8006438 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006432:	230a      	movs	r3, #10
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e02b      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <USB_SetTurnaroundTime+0x134>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d906      	bls.n	800644e <USB_SetTurnaroundTime+0xae>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <USB_SetTurnaroundTime+0x138>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d202      	bcs.n	800644e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006448:	2309      	movs	r3, #9
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e020      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <USB_SetTurnaroundTime+0x138>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d306      	bcc.n	8006464 <USB_SetTurnaroundTime+0xc4>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4a20      	ldr	r2, [pc, #128]	; (80064dc <USB_SetTurnaroundTime+0x13c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d802      	bhi.n	8006464 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800645e:	2308      	movs	r3, #8
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e015      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <USB_SetTurnaroundTime+0x13c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d906      	bls.n	800647a <USB_SetTurnaroundTime+0xda>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <USB_SetTurnaroundTime+0x140>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d202      	bcs.n	800647a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006474:	2307      	movs	r3, #7
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e00a      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800647a:	2306      	movs	r3, #6
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e007      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006486:	2309      	movs	r3, #9
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e001      	b.n	8006490 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800648c:	2309      	movs	r3, #9
 800648e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	029b      	lsls	r3, r3, #10
 80064a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	00d8acbf 	.word	0x00d8acbf
 80064c0:	00e4e1c0 	.word	0x00e4e1c0
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	01067380 	.word	0x01067380
 80064cc:	011a499f 	.word	0x011a499f
 80064d0:	01312cff 	.word	0x01312cff
 80064d4:	014ca43f 	.word	0x014ca43f
 80064d8:	016e3600 	.word	0x016e3600
 80064dc:	01a6ab1f 	.word	0x01a6ab1f
 80064e0:	01e84800 	.word	0x01e84800

080064e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f043 0201 	orr.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 0201 	bic.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d115      	bne.n	8006576 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006556:	2001      	movs	r0, #1
 8006558:	f7fc fb7e 	bl	8002c58 <HAL_Delay>
      ms++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 f972 	bl	800784c <USB_GetMode>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d01e      	beq.n	80065ac <USB_SetCurrentMode+0x84>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b31      	cmp	r3, #49	; 0x31
 8006572:	d9f0      	bls.n	8006556 <USB_SetCurrentMode+0x2e>
 8006574:	e01a      	b.n	80065ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d115      	bne.n	80065a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006588:	2001      	movs	r0, #1
 800658a:	f7fc fb65 	bl	8002c58 <HAL_Delay>
      ms++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f959 	bl	800784c <USB_GetMode>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <USB_SetCurrentMode+0x84>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b31      	cmp	r3, #49	; 0x31
 80065a4:	d9f0      	bls.n	8006588 <USB_SetCurrentMode+0x60>
 80065a6:	e001      	b.n	80065ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e005      	b.n	80065b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b32      	cmp	r3, #50	; 0x32
 80065b0:	d101      	bne.n	80065b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c0:	b084      	sub	sp, #16
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e009      	b.n	80065f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3340      	adds	r3, #64	; 0x40
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b0e      	cmp	r3, #14
 80065f8:	d9f2      	bls.n	80065e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d11c      	bne.n	800663a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660e:	f043 0302 	orr.w	r3, r3, #2
 8006612:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
 8006638:	e00b      	b.n	8006652 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	4619      	mov	r1, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	461a      	mov	r2, r3
 800666e:	680b      	ldr	r3, [r1, #0]
 8006670:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b01      	cmp	r3, #1
 8006676:	d10c      	bne.n	8006692 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f945 	bl	8006910 <USB_SetDevSpeed>
 8006686:	e008      	b.n	800669a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006688:	2101      	movs	r1, #1
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f940 	bl	8006910 <USB_SetDevSpeed>
 8006690:	e003      	b.n	800669a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006692:	2103      	movs	r1, #3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f93b 	bl	8006910 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800669a:	2110      	movs	r1, #16
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8f3 	bl	8006888 <USB_FlushTxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f90f 	bl	80068d0 <USB_FlushRxFifo>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	461a      	mov	r2, r3
 80066c4:	2300      	movs	r3, #0
 80066c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	461a      	mov	r2, r3
 80066d0:	2300      	movs	r3, #0
 80066d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	461a      	mov	r2, r3
 80066dc:	2300      	movs	r3, #0
 80066de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	e043      	b.n	800676e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fc:	d118      	bne.n	8006730 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e013      	b.n	8006742 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006726:	461a      	mov	r2, r3
 8006728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e008      	b.n	8006742 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	461a      	mov	r2, r3
 800673e:	2300      	movs	r3, #0
 8006740:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	461a      	mov	r2, r3
 8006750:	2300      	movs	r3, #0
 8006752:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	461a      	mov	r2, r3
 8006762:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006766:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3301      	adds	r3, #1
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d3b7      	bcc.n	80066e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	e043      	b.n	8006804 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800678e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006792:	d118      	bne.n	80067c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e013      	b.n	80067d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067bc:	461a      	mov	r2, r3
 80067be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	e008      	b.n	80067d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	461a      	mov	r2, r3
 80067d4:	2300      	movs	r3, #0
 80067d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	461a      	mov	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	461a      	mov	r2, r3
 80067f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	429a      	cmp	r2, r3
 800680a:	d3b7      	bcc.n	800677c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800682c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f043 0210 	orr.w	r2, r3, #16
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <USB_DevInit+0x2c4>)
 8006846:	4313      	orrs	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800684c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f043 0208 	orr.w	r2, r3, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800686c:	f043 0304 	orr.w	r3, r3, #4
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006880:	b004      	add	sp, #16
 8006882:	4770      	bx	lr
 8006884:	803c3800 	.word	0x803c3800

08006888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	019b      	lsls	r3, r3, #6
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <USB_FlushTxFifo+0x44>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e006      	b.n	80068c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d0f1      	beq.n	80068a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	00030d40 	.word	0x00030d40

080068d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2210      	movs	r2, #16
 80068e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <USB_FlushRxFifo+0x3c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e006      	b.n	8006900 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d0f1      	beq.n	80068e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	00030d40 	.word	0x00030d40

08006910 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006930:	4313      	orrs	r3, r2
 8006932:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0306 	and.w	r3, r3, #6
 800695a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
 8006966:	e00a      	b.n	800697e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d002      	beq.n	8006974 <USB_GetDevSpeed+0x32>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b06      	cmp	r3, #6
 8006972:	d102      	bne.n	800697a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006974:	2302      	movs	r3, #2
 8006976:	75fb      	strb	r3, [r7, #23]
 8006978:	e001      	b.n	800697e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800697a:	230f      	movs	r3, #15
 800697c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006980:	4618      	mov	r0, r3
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d13a      	bne.n	8006a1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	2101      	movs	r1, #1
 80069ba:	fa01 f303 	lsl.w	r3, r1, r3
 80069be:	b29b      	uxth	r3, r3
 80069c0:	68f9      	ldr	r1, [r7, #12]
 80069c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c6:	4313      	orrs	r3, r2
 80069c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d155      	bne.n	8006a8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	059b      	lsls	r3, r3, #22
 8006a02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a04:	4313      	orrs	r3, r2
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e036      	b.n	8006a8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	2101      	movs	r1, #1
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11a      	bne.n	8006a8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a72:	430b      	orrs	r3, r1
 8006a74:	4313      	orrs	r3, r2
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d161      	bne.n	8006b7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ace:	d11f      	bne.n	8006b10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	2101      	movs	r1, #1
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b30:	4013      	ands	r3, r2
 8006b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2101      	movs	r1, #1
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b54:	4013      	ands	r3, r2
 8006b56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	0159      	lsls	r1, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	4619      	mov	r1, r3
 8006b74:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <USB_DeactivateEndpoint+0x1b0>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]
 8006b7a:	e060      	b.n	8006c3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b92:	d11f      	bne.n	8006bd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	2101      	movs	r1, #1
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	43db      	mvns	r3, r3
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	2101      	movs	r1, #1
 8006c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	43db      	mvns	r3, r3
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	0159      	lsls	r1, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	440b      	add	r3, r1
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	4619      	mov	r1, r3
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <USB_DeactivateEndpoint+0x1b4>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	ec337800 	.word	0xec337800
 8006c50:	eff37800 	.word	0xeff37800

08006c54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	f040 815c 	bne.w	8006f2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d132      	bne.n	8006ce4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cdc:	0cdb      	lsrs	r3, r3, #19
 8006cde:	04db      	lsls	r3, r3, #19
 8006ce0:	6113      	str	r3, [r2, #16]
 8006ce2:	e074      	b.n	8006dce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfe:	0cdb      	lsrs	r3, r3, #19
 8006d00:	04db      	lsls	r3, r3, #19
 8006d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	0151      	lsls	r1, r2, #5
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	440a      	add	r2, r1
 8006d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6959      	ldr	r1, [r3, #20]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	440b      	add	r3, r1
 8006d40:	1e59      	subs	r1, r3, #1
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d4c:	4b9d      	ldr	r3, [pc, #628]	; (8006fc4 <USB_EPStartXfer+0x370>)
 8006d4e:	400b      	ands	r3, r1
 8006d50:	69b9      	ldr	r1, [r7, #24]
 8006d52:	0148      	lsls	r0, r1, #5
 8006d54:	69f9      	ldr	r1, [r7, #28]
 8006d56:	4401      	add	r1, r0
 8006d58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d76:	69b9      	ldr	r1, [r7, #24]
 8006d78:	0148      	lsls	r0, r1, #5
 8006d7a:	69f9      	ldr	r1, [r7, #28]
 8006d7c:	4401      	add	r1, r0
 8006d7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d82:	4313      	orrs	r3, r2
 8006d84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	78db      	ldrb	r3, [r3, #3]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d11f      	bne.n	8006dce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006dac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dcc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d14b      	bne.n	8006e6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	461a      	mov	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	78db      	ldrb	r3, [r3, #3]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d128      	bne.n	8006e4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d110      	bne.n	8006e2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	e00f      	b.n	8006e4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e12f      	b.n	80070cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d015      	beq.n	8006ec0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8117 	beq.w	80070cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	2101      	movs	r1, #1
 8006eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb4:	69f9      	ldr	r1, [r7, #28]
 8006eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	634b      	str	r3, [r1, #52]	; 0x34
 8006ebe:	e105      	b.n	80070cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d110      	bne.n	8006ef2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	e00f      	b.n	8006f12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68d9      	ldr	r1, [r3, #12]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	b298      	uxth	r0, r3
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4603      	mov	r3, r0
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fa2b 	bl	8007382 <USB_WritePacket>
 8006f2c:	e0ce      	b.n	80070cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f48:	0cdb      	lsrs	r3, r3, #19
 8006f4a:	04db      	lsls	r3, r3, #19
 8006f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d126      	bne.n	8006fc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f90:	69b9      	ldr	r1, [r7, #24]
 8006f92:	0148      	lsls	r0, r1, #5
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	4401      	add	r1, r0
 8006f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fbe:	6113      	str	r3, [r2, #16]
 8006fc0:	e036      	b.n	8007030 <USB_EPStartXfer+0x3dc>
 8006fc2:	bf00      	nop
 8006fc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	695a      	ldr	r2, [r3, #20]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	1e5a      	subs	r2, r3, #1
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	8afb      	ldrh	r3, [r7, #22]
 8006fee:	04d9      	lsls	r1, r3, #19
 8006ff0:	4b39      	ldr	r3, [pc, #228]	; (80070d8 <USB_EPStartXfer+0x484>)
 8006ff2:	400b      	ands	r3, r1
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	0148      	lsls	r0, r1, #5
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	4401      	add	r1, r0
 8006ffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007000:	4313      	orrs	r3, r2
 8007002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	8af9      	ldrh	r1, [r7, #22]
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007020:	69b9      	ldr	r1, [r7, #24]
 8007022:	0148      	lsls	r0, r1, #5
 8007024:	69f9      	ldr	r1, [r7, #28]
 8007026:	4401      	add	r1, r0
 8007028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800702c:	4313      	orrs	r3, r2
 800702e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10d      	bne.n	8007052 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68d9      	ldr	r1, [r3, #12]
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	460a      	mov	r2, r1
 8007050:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	78db      	ldrb	r3, [r3, #3]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d128      	bne.n	80070ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d110      	bne.n	800708c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007084:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e00f      	b.n	80070ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	1ff80000 	.word	0x1ff80000

080070dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 80cd 	bne.w	8007298 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d132      	bne.n	800716c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007124:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	0cdb      	lsrs	r3, r3, #19
 8007166:	04db      	lsls	r3, r3, #19
 8007168:	6113      	str	r3, [r2, #16]
 800716a:	e04e      	b.n	800720a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007186:	0cdb      	lsrs	r3, r3, #19
 8007188:	04db      	lsls	r3, r3, #19
 800718a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	695a      	ldr	r2, [r3, #20]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d903      	bls.n	80071c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fa:	6939      	ldr	r1, [r7, #16]
 80071fc:	0148      	lsls	r0, r1, #5
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	4401      	add	r1, r0
 8007202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007206:	4313      	orrs	r3, r2
 8007208:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d11e      	bne.n	800724e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	461a      	mov	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e092      	b.n	8007374 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007268:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800726c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d07e      	beq.n	8007374 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	2101      	movs	r1, #1
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007292:	4313      	orrs	r3, r2
 8007294:	634b      	str	r3, [r1, #52]	; 0x34
 8007296:	e06d      	b.n	8007374 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	0cdb      	lsrs	r3, r3, #19
 80072b4:	04db      	lsls	r3, r3, #19
 80072b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800730a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007322:	6939      	ldr	r1, [r7, #16]
 8007324:	0148      	lsls	r0, r1, #5
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	4401      	add	r1, r0
 800732a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800732e:	4313      	orrs	r3, r2
 8007330:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10d      	bne.n	8007354 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68d9      	ldr	r1, [r3, #12]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	460a      	mov	r2, r1
 8007352:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007382:	b480      	push	{r7}
 8007384:	b089      	sub	sp, #36	; 0x24
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	4611      	mov	r1, r2
 800738e:	461a      	mov	r2, r3
 8007390:	460b      	mov	r3, r1
 8007392:	71fb      	strb	r3, [r7, #7]
 8007394:	4613      	mov	r3, r2
 8007396:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d123      	bne.n	80073f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073a8:	88bb      	ldrh	r3, [r7, #4]
 80073aa:	3303      	adds	r3, #3
 80073ac:	089b      	lsrs	r3, r3, #2
 80073ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	e018      	b.n	80073e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	031a      	lsls	r2, r3, #12
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c2:	461a      	mov	r2, r3
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	3301      	adds	r3, #1
 80073ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	3301      	adds	r3, #1
 80073d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	3301      	adds	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3301      	adds	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	3301      	adds	r3, #1
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d3e2      	bcc.n	80073b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3724      	adds	r7, #36	; 0x24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073fe:	b480      	push	{r7}
 8007400:	b08b      	sub	sp, #44	; 0x2c
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	4613      	mov	r3, r2
 800740a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	089b      	lsrs	r3, r3, #2
 8007418:	b29b      	uxth	r3, r3
 800741a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007424:	2300      	movs	r3, #0
 8007426:	623b      	str	r3, [r7, #32]
 8007428:	e014      	b.n	8007454 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	601a      	str	r2, [r3, #0]
    pDest++;
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	3301      	adds	r3, #1
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	3301      	adds	r3, #1
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	3301      	adds	r3, #1
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	3301      	adds	r3, #1
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	3301      	adds	r3, #1
 8007452:	623b      	str	r3, [r7, #32]
 8007454:	6a3a      	ldr	r2, [r7, #32]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d3e6      	bcc.n	800742a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800745c:	8bfb      	ldrh	r3, [r7, #30]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01e      	beq.n	80074a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746c:	461a      	mov	r2, r3
 800746e:	f107 0310 	add.w	r3, r7, #16
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	b2da      	uxtb	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	701a      	strb	r2, [r3, #0]
      i++;
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	3301      	adds	r3, #1
 800748c:	623b      	str	r3, [r7, #32]
      pDest++;
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	3301      	adds	r3, #1
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	3b01      	subs	r3, #1
 8007498:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800749a:	8bfb      	ldrh	r3, [r7, #30]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1ea      	bne.n	8007476 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	372c      	adds	r7, #44	; 0x2c
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d12c      	bne.n	8007524 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	db12      	blt.n	8007502 <USB_EPSetStall+0x54>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00f      	beq.n	8007502 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007500:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e02b      	b.n	800757c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	db12      	blt.n	800755c <USB_EPSetStall+0xae>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	0151      	lsls	r1, r2, #5
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	440a      	add	r2, r1
 8007552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800755a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	440a      	add	r2, r1
 8007572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800757a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d128      	bne.n	80075f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d003      	beq.n	80075d6 <USB_EPClearStall+0x4c>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	78db      	ldrb	r3, [r3, #3]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d138      	bne.n	8007648 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	e027      	b.n	8007648 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	78db      	ldrb	r3, [r3, #3]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d003      	beq.n	8007628 <USB_EPClearStall+0x9e>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	78db      	ldrb	r3, [r3, #3]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d10f      	bne.n	8007648 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007646:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007674:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007678:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007690:	4313      	orrs	r3, r2
 8007692:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d0:	f023 0302 	bic.w	r3, r3, #2
 80076d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007712:	f043 0302 	orr.w	r3, r3, #2
 8007716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4013      	ands	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4013      	ands	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	0c1b      	lsrs	r3, r3, #16
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4013      	ands	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	b29b      	uxth	r3, r3
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4013      	ands	r3, r2
 80077e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077e2:	68bb      	ldr	r3, [r7, #8]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
 8007820:	01db      	lsls	r3, r3, #7
 8007822:	b2db      	uxtb	r3, r3
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4013      	ands	r3, r2
 800783c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800783e:	68bb      	ldr	r3, [r7, #8]
}
 8007840:	4618      	mov	r0, r3
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f003 0301 	and.w	r3, r3, #1
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007882:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800789a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800789e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
	...

080078b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	460b      	mov	r3, r1
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	333c      	adds	r3, #60	; 0x3c
 80078c6:	3304      	adds	r3, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	4a26      	ldr	r2, [pc, #152]	; (8007968 <USB_EP0_OutStart+0xb8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d90a      	bls.n	80078ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e4:	d101      	bne.n	80078ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e037      	b.n	800795a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f0:	461a      	mov	r2, r3
 80078f2:	2300      	movs	r3, #0
 80078f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	f043 0318 	orr.w	r3, r3, #24
 800791c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d10f      	bne.n	8007958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793e:	461a      	mov	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007952:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	4f54300a 	.word	0x4f54300a

0800796c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	4a13      	ldr	r2, [pc, #76]	; (80079cc <USB_CoreReset+0x60>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e01a      	b.n	80079be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	daf3      	bge.n	8007978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f043 0201 	orr.w	r2, r3, #1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <USB_CoreReset+0x60>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d901      	bls.n	80079b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e006      	b.n	80079be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d0f1      	beq.n	80079a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	00030d40 	.word	0x00030d40

080079d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079e0:	f002 f91c 	bl	8009c1c <USBD_static_malloc>
 80079e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d105      	bne.n	80079f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80079f4:	2302      	movs	r3, #2
 80079f6:	e066      	b.n	8007ac6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7c1b      	ldrb	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d119      	bne.n	8007a3c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	2181      	movs	r1, #129	; 0x81
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 ffe0 	bl	80099d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a20:	2202      	movs	r2, #2
 8007a22:	2101      	movs	r1, #1
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 ffd6 	bl	80099d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2210      	movs	r2, #16
 8007a36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a3a:	e016      	b.n	8007a6a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	2202      	movs	r2, #2
 8007a40:	2181      	movs	r1, #129	; 0x81
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 ffc7 	bl	80099d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	2202      	movs	r2, #2
 8007a52:	2101      	movs	r1, #1
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 ffbe 	bl	80099d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2210      	movs	r2, #16
 8007a66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a6a:	2308      	movs	r3, #8
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	2182      	movs	r1, #130	; 0x82
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 ffb0 	bl	80099d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7c1b      	ldrb	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aaa:	2101      	movs	r1, #1
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f002 f881 	bl	8009bb4 <USBD_LL_PrepareReceive>
 8007ab2:	e007      	b.n	8007ac4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aba:	2340      	movs	r3, #64	; 0x40
 8007abc:	2101      	movs	r1, #1
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f002 f878 	bl	8009bb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ada:	2181      	movs	r1, #129	; 0x81
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 ffa0 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 ff99 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007af8:	2182      	movs	r1, #130	; 0x82
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 ff91 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00e      	beq.n	8007b38 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f002 f884 	bl	8009c38 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e0af      	b.n	8007ccc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d03f      	beq.n	8007bf8 <USBD_CDC_Setup+0xb4>
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	f040 809f 	bne.w	8007cbc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d02e      	beq.n	8007be4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da16      	bge.n	8007bbe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007b9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	88d2      	ldrh	r2, [r2, #6]
 8007ba2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	88db      	ldrh	r3, [r3, #6]
 8007ba8:	2b07      	cmp	r3, #7
 8007baa:	bf28      	it	cs
 8007bac:	2307      	movcs	r3, #7
 8007bae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	89fa      	ldrh	r2, [r7, #14]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fae9 	bl	800918e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007bbc:	e085      	b.n	8007cca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785a      	ldrb	r2, [r3, #1]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007bd4:	6939      	ldr	r1, [r7, #16]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	88db      	ldrh	r3, [r3, #6]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 fb02 	bl	80091e6 <USBD_CtlPrepareRx>
      break;
 8007be2:	e072      	b.n	8007cca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	7850      	ldrb	r0, [r2, #1]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4798      	blx	r3
      break;
 8007bf6:	e068      	b.n	8007cca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b0b      	cmp	r3, #11
 8007bfe:	d852      	bhi.n	8007ca6 <USBD_CDC_Setup+0x162>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_CDC_Setup+0xc4>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c39 	.word	0x08007c39
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007ca7 	.word	0x08007ca7
 8007c14:	08007ca7 	.word	0x08007ca7
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007ca7 	.word	0x08007ca7
 8007c20:	08007ca7 	.word	0x08007ca7
 8007c24:	08007ca7 	.word	0x08007ca7
 8007c28:	08007ca7 	.word	0x08007ca7
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007c63 	.word	0x08007c63
 8007c34:	08007c8d 	.word	0x08007c8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d107      	bne.n	8007c54 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c44:	f107 030a 	add.w	r3, r7, #10
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 fa9e 	bl	800918e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c52:	e032      	b.n	8007cba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 fa28 	bl	80090ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c60:	e02b      	b.n	8007cba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d107      	bne.n	8007c7e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c6e:	f107 030d 	add.w	r3, r7, #13
 8007c72:	2201      	movs	r2, #1
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fa89 	bl	800918e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c7c:	e01d      	b.n	8007cba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fa13 	bl	80090ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007c86:	2303      	movs	r3, #3
 8007c88:	75fb      	strb	r3, [r7, #23]
          break;
 8007c8a:	e016      	b.n	8007cba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d00f      	beq.n	8007cb8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fa06 	bl	80090ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ca4:	e008      	b.n	8007cb8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f9ff 	bl	80090ac <USBD_CtlError>
          ret = USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb2:	e002      	b.n	8007cba <USBD_CDC_Setup+0x176>
          break;
 8007cb4:	bf00      	nop
 8007cb6:	e008      	b.n	8007cca <USBD_CDC_Setup+0x186>
          break;
 8007cb8:	bf00      	nop
      }
      break;
 8007cba:	e006      	b.n	8007cca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 f9f4 	bl	80090ac <USBD_CtlError>
      ret = USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e04f      	b.n	8007d96 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d029      	beq.n	8007d68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d14:	78fa      	ldrb	r2, [r7, #3]
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	3318      	adds	r3, #24
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	78f9      	ldrb	r1, [r7, #3]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	1a5b      	subs	r3, r3, r1
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4403      	add	r3, r0
 8007d34:	3344      	adds	r3, #68	; 0x44
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d3c:	fb03 f301 	mul.w	r3, r3, r1
 8007d40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d110      	bne.n	8007d68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	3318      	adds	r3, #24
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d5a:	78f9      	ldrb	r1, [r7, #3]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2200      	movs	r2, #0
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 ff06 	bl	8009b72 <USBD_LL_Transmit>
 8007d66:	e015      	b.n	8007d94 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e015      	b.n	8007dec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 ff16 	bl	8009bf6 <USBD_LL_GetRxDataSize>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007de6:	4611      	mov	r1, r2
 8007de8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e01b      	b.n	8007e46 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d015      	beq.n	8007e44 <USBD_CDC_EP0_RxReady+0x50>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e1e:	2bff      	cmp	r3, #255	; 0xff
 8007e20:	d010      	beq.n	8007e44 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007e30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	22ff      	movs	r2, #255	; 0xff
 8007e40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2243      	movs	r2, #67	; 0x43
 8007e5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	2000009c 	.word	0x2000009c

08007e70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2243      	movs	r2, #67	; 0x43
 8007e7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007e7e:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000058 	.word	0x20000058

08007e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2243      	movs	r2, #67	; 0x43
 8007e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007e9e:	4b03      	ldr	r3, [pc, #12]	; (8007eac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	200000e0 	.word	0x200000e0

08007eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	220a      	movs	r2, #10
 8007ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20000014 	.word	0x20000014

08007ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e004      	b.n	8007eee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b087      	sub	sp, #28
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e008      	b.n	8007f2a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e004      	b.n	8007f5c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e016      	b.n	8007fb4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7c1b      	ldrb	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f98:	2101      	movs	r1, #1
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fe0a 	bl	8009bb4 <USBD_LL_PrepareReceive>
 8007fa0:	e007      	b.n	8007fb2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	2101      	movs	r1, #1
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fe01 	bl	8009bb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e01f      	b.n	8008014 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	79fa      	ldrb	r2, [r7, #7]
 8008006:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f001 fc7d 	bl	8009908 <USBD_LL_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e016      	b.n	8008062 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	f107 020e 	add.w	r2, r7, #14
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
 8008058:	4602      	mov	r2, r0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fc94 	bl	80099a0 <USBD_LL_Start>
 8008078:	4603      	mov	r3, r0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
  }

  return USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 ff90 	bl	8009038 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	2b02      	cmp	r3, #2
 800813a:	d01a      	beq.n	8008172 <USBD_LL_SetupStage+0x72>
 800813c:	2b02      	cmp	r3, #2
 800813e:	d822      	bhi.n	8008186 <USBD_LL_SetupStage+0x86>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <USBD_LL_SetupStage+0x4a>
 8008144:	2b01      	cmp	r3, #1
 8008146:	d00a      	beq.n	800815e <USBD_LL_SetupStage+0x5e>
 8008148:	e01d      	b.n	8008186 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa62 	bl	800861c <USBD_StdDevReq>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
      break;
 800815c:	e020      	b.n	80081a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fac6 	bl	80086f8 <USBD_StdItfReq>
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
      break;
 8008170:	e016      	b.n	80081a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fb05 	bl	800878a <USBD_StdEPReq>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
      break;
 8008184:	e00c      	b.n	80081a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800818c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008190:	b2db      	uxtb	r3, r3
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fc63 	bl	8009a60 <USBD_LL_StallEP>
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
      break;
 800819e:	bf00      	nop
  }

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b086      	sub	sp, #24
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	460b      	mov	r3, r1
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d138      	bne.n	8008230 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80081c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d14a      	bne.n	8008266 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d913      	bls.n	8008204 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	1ad2      	subs	r2, r2, r3
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	4293      	cmp	r3, r2
 80081f4:	bf28      	it	cs
 80081f6:	4613      	movcs	r3, r2
 80081f8:	461a      	mov	r2, r3
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 f80f 	bl	8009220 <USBD_CtlContinueRx>
 8008202:	e030      	b.n	8008266 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b03      	cmp	r3, #3
 800820e:	d10b      	bne.n	8008228 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f001 f80a 	bl	8009242 <USBD_CtlSendStatus>
 800822e:	e01a      	b.n	8008266 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b03      	cmp	r3, #3
 800823a:	d114      	bne.n	8008266 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00e      	beq.n	8008266 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	7afa      	ldrb	r2, [r7, #11]
 8008252:	4611      	mov	r1, r2
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	4798      	blx	r3
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	e000      	b.n	8008268 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	460b      	mov	r3, r1
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d16b      	bne.n	800835c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3314      	adds	r3, #20
 8008288:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008290:	2b02      	cmp	r3, #2
 8008292:	d156      	bne.n	8008342 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	429a      	cmp	r2, r3
 800829e:	d914      	bls.n	80082ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 ff84 	bl	80091c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082bc:	2300      	movs	r3, #0
 80082be:	2200      	movs	r2, #0
 80082c0:	2100      	movs	r1, #0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f001 fc76 	bl	8009bb4 <USBD_LL_PrepareReceive>
 80082c8:	e03b      	b.n	8008342 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d11c      	bne.n	8008310 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082de:	429a      	cmp	r2, r3
 80082e0:	d316      	bcc.n	8008310 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d20f      	bcs.n	8008310 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082f0:	2200      	movs	r2, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 ff65 	bl	80091c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008302:	2300      	movs	r3, #0
 8008304:	2200      	movs	r2, #0
 8008306:	2100      	movs	r1, #0
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f001 fc53 	bl	8009bb4 <USBD_LL_PrepareReceive>
 800830e:	e018      	b.n	8008342 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d10b      	bne.n	8008334 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f001 fb92 	bl	8009a60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 ff93 	bl	8009268 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d122      	bne.n	8008392 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fe98 	bl	8008082 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800835a:	e01a      	b.n	8008392 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d114      	bne.n	8008392 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00e      	beq.n	8008392 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	7afa      	ldrb	r2, [r7, #11]
 800837e:	4611      	mov	r1, r2
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	4798      	blx	r3
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	e000      	b.n	8008394 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e02f      	b.n	8008430 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00f      	beq.n	80083fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6852      	ldr	r2, [r2, #4]
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	4611      	mov	r1, r2
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083fa:	2340      	movs	r3, #64	; 0x40
 80083fc:	2200      	movs	r2, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 fae8 	bl	80099d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2240      	movs	r2, #64	; 0x40
 8008412:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	2200      	movs	r2, #0
 800841a:	2180      	movs	r1, #128	; 0x80
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fada 	bl	80099d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2240      	movs	r2, #64	; 0x40
 800842c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008466:	b2da      	uxtb	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2204      	movs	r2, #4
 8008472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b04      	cmp	r3, #4
 8008496:	d106      	bne.n	80084a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e012      	b.n	80084f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d10b      	bne.n	80084ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800850e:	2303      	movs	r3, #3
 8008510:	e014      	b.n	800853c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d10d      	bne.n	800853a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	4611      	mov	r1, r2
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800855a:	2303      	movs	r3, #3
 800855c:	e014      	b.n	8008588 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b03      	cmp	r3, #3
 8008568:	d10d      	bne.n	8008586 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	4611      	mov	r1, r2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6852      	ldr	r2, [r2, #4]
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	4611      	mov	r1, r2
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
  }

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085de:	b480      	push	{r7}
 80085e0:	b087      	sub	sp, #28
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	3301      	adds	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085fc:	8a3b      	ldrh	r3, [r7, #16]
 80085fe:	021b      	lsls	r3, r3, #8
 8008600:	b21a      	sxth	r2, r3
 8008602:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008606:	4313      	orrs	r3, r2
 8008608:	b21b      	sxth	r3, r3
 800860a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800860c:	89fb      	ldrh	r3, [r7, #14]
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d005      	beq.n	8008642 <USBD_StdDevReq+0x26>
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d853      	bhi.n	80086e2 <USBD_StdDevReq+0xc6>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <USBD_StdDevReq+0x3a>
 800863e:	2b20      	cmp	r3, #32
 8008640:	d14f      	bne.n	80086e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	4798      	blx	r3
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]
      break;
 8008654:	e04a      	b.n	80086ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b09      	cmp	r3, #9
 800865c:	d83b      	bhi.n	80086d6 <USBD_StdDevReq+0xba>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <USBD_StdDevReq+0x48>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	080086b9 	.word	0x080086b9
 8008668:	080086cd 	.word	0x080086cd
 800866c:	080086d7 	.word	0x080086d7
 8008670:	080086c3 	.word	0x080086c3
 8008674:	080086d7 	.word	0x080086d7
 8008678:	08008697 	.word	0x08008697
 800867c:	0800868d 	.word	0x0800868d
 8008680:	080086d7 	.word	0x080086d7
 8008684:	080086af 	.word	0x080086af
 8008688:	080086a1 	.word	0x080086a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f9de 	bl	8008a50 <USBD_GetDescriptor>
          break;
 8008694:	e024      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fb43 	bl	8008d24 <USBD_SetAddress>
          break;
 800869e:	e01f      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fb82 	bl	8008dac <USBD_SetConfig>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
          break;
 80086ac:	e018      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc21 	bl	8008ef8 <USBD_GetConfig>
          break;
 80086b6:	e013      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc52 	bl	8008f64 <USBD_GetStatus>
          break;
 80086c0:	e00e      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fc81 	bl	8008fcc <USBD_SetFeature>
          break;
 80086ca:	e009      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fc90 	bl	8008ff4 <USBD_ClrFeature>
          break;
 80086d4:	e004      	b.n	80086e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fce7 	bl	80090ac <USBD_CtlError>
          break;
 80086de:	bf00      	nop
      }
      break;
 80086e0:	e004      	b.n	80086ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fce1 	bl	80090ac <USBD_CtlError>
      break;
 80086ea:	bf00      	nop
  }

  return ret;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d005      	beq.n	800871e <USBD_StdItfReq+0x26>
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d82f      	bhi.n	8008776 <USBD_StdItfReq+0x7e>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <USBD_StdItfReq+0x26>
 800871a:	2b20      	cmp	r3, #32
 800871c:	d12b      	bne.n	8008776 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	2b02      	cmp	r3, #2
 800872a:	d81d      	bhi.n	8008768 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	889b      	ldrh	r3, [r3, #4]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b01      	cmp	r3, #1
 8008734:	d813      	bhi.n	800875e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	88db      	ldrh	r3, [r3, #6]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d110      	bne.n	8008772 <USBD_StdItfReq+0x7a>
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10d      	bne.n	8008772 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fd73 	bl	8009242 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800875c:	e009      	b.n	8008772 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fca3 	bl	80090ac <USBD_CtlError>
          break;
 8008766:	e004      	b.n	8008772 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fc9e 	bl	80090ac <USBD_CtlError>
          break;
 8008770:	e000      	b.n	8008774 <USBD_StdItfReq+0x7c>
          break;
 8008772:	bf00      	nop
      }
      break;
 8008774:	e004      	b.n	8008780 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc97 	bl	80090ac <USBD_CtlError>
      break;
 800877e:	bf00      	nop
  }

  return ret;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	889b      	ldrh	r3, [r3, #4]
 800879c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d007      	beq.n	80087ba <USBD_StdEPReq+0x30>
 80087aa:	2b40      	cmp	r3, #64	; 0x40
 80087ac:	f200 8145 	bhi.w	8008a3a <USBD_StdEPReq+0x2b0>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00c      	beq.n	80087ce <USBD_StdEPReq+0x44>
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	f040 8140 	bne.w	8008a3a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]
      break;
 80087cc:	e13a      	b.n	8008a44 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d007      	beq.n	80087e6 <USBD_StdEPReq+0x5c>
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	f300 8129 	bgt.w	8008a2e <USBD_StdEPReq+0x2a4>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d07f      	beq.n	80088e0 <USBD_StdEPReq+0x156>
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d03c      	beq.n	800885e <USBD_StdEPReq+0xd4>
 80087e4:	e123      	b.n	8008a2e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d002      	beq.n	80087f8 <USBD_StdEPReq+0x6e>
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d016      	beq.n	8008824 <USBD_StdEPReq+0x9a>
 80087f6:	e02c      	b.n	8008852 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00d      	beq.n	800881a <USBD_StdEPReq+0x90>
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d00a      	beq.n	800881a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f929 	bl	8009a60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800880e:	2180      	movs	r1, #128	; 0x80
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 f925 	bl	8009a60 <USBD_LL_StallEP>
 8008816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008818:	e020      	b.n	800885c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fc45 	bl	80090ac <USBD_CtlError>
              break;
 8008822:	e01b      	b.n	800885c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	885b      	ldrh	r3, [r3, #2]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10e      	bne.n	800884a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <USBD_StdEPReq+0xc0>
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b80      	cmp	r3, #128	; 0x80
 8008836:	d008      	beq.n	800884a <USBD_StdEPReq+0xc0>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	88db      	ldrh	r3, [r3, #6]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 f90b 	bl	8009a60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcf9 	bl	8009242 <USBD_CtlSendStatus>

              break;
 8008850:	e004      	b.n	800885c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fc29 	bl	80090ac <USBD_CtlError>
              break;
 800885a:	bf00      	nop
          }
          break;
 800885c:	e0ec      	b.n	8008a38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d002      	beq.n	8008870 <USBD_StdEPReq+0xe6>
 800886a:	2b03      	cmp	r3, #3
 800886c:	d016      	beq.n	800889c <USBD_StdEPReq+0x112>
 800886e:	e030      	b.n	80088d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00d      	beq.n	8008892 <USBD_StdEPReq+0x108>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d00a      	beq.n	8008892 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f8ed 	bl	8009a60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008886:	2180      	movs	r1, #128	; 0x80
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f8e9 	bl	8009a60 <USBD_LL_StallEP>
 800888e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008890:	e025      	b.n	80088de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fc09 	bl	80090ac <USBD_CtlError>
              break;
 800889a:	e020      	b.n	80088de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	885b      	ldrh	r3, [r3, #2]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d11b      	bne.n	80088dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d004      	beq.n	80088b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 f8f3 	bl	8009a9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fcc2 	bl	8009242 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	4798      	blx	r3
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80088d0:	e004      	b.n	80088dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fbe9 	bl	80090ac <USBD_CtlError>
              break;
 80088da:	e000      	b.n	80088de <USBD_StdEPReq+0x154>
              break;
 80088dc:	bf00      	nop
          }
          break;
 80088de:	e0ab      	b.n	8008a38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d002      	beq.n	80088f2 <USBD_StdEPReq+0x168>
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d032      	beq.n	8008956 <USBD_StdEPReq+0x1cc>
 80088f0:	e097      	b.n	8008a22 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d007      	beq.n	8008908 <USBD_StdEPReq+0x17e>
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	d004      	beq.n	8008908 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fbd3 	bl	80090ac <USBD_CtlError>
                break;
 8008906:	e091      	b.n	8008a2c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800890c:	2b00      	cmp	r3, #0
 800890e:	da0b      	bge.n	8008928 <USBD_StdEPReq+0x19e>
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	3310      	adds	r3, #16
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	e00b      	b.n	8008940 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	3304      	adds	r3, #4
 8008940:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2202      	movs	r2, #2
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fc1d 	bl	800918e <USBD_CtlSendData>
              break;
 8008954:	e06a      	b.n	8008a2c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	da11      	bge.n	8008982 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3324      	adds	r3, #36	; 0x24
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d117      	bne.n	80089a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fb96 	bl	80090ac <USBD_CtlError>
                  break;
 8008980:	e054      	b.n	8008a2c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb83 	bl	80090ac <USBD_CtlError>
                  break;
 80089a6:	e041      	b.n	8008a2c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	da0b      	bge.n	80089c8 <USBD_StdEPReq+0x23e>
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	3310      	adds	r3, #16
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	4413      	add	r3, r2
 80089c4:	3304      	adds	r3, #4
 80089c6:	e00b      	b.n	80089e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	3304      	adds	r3, #4
 80089e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <USBD_StdEPReq+0x264>
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b80      	cmp	r3, #128	; 0x80
 80089ec:	d103      	bne.n	80089f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	e00e      	b.n	8008a14 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 f86e 	bl	8009adc <USBD_LL_IsStallEP>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	e002      	b.n	8008a14 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2202      	movs	r2, #2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fbb7 	bl	800918e <USBD_CtlSendData>
              break;
 8008a20:	e004      	b.n	8008a2c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fb41 	bl	80090ac <USBD_CtlError>
              break;
 8008a2a:	bf00      	nop
          }
          break;
 8008a2c:	e004      	b.n	8008a38 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb3b 	bl	80090ac <USBD_CtlError>
          break;
 8008a36:	bf00      	nop
      }
      break;
 8008a38:	e004      	b.n	8008a44 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fb35 	bl	80090ac <USBD_CtlError>
      break;
 8008a42:	bf00      	nop
  }

  return ret;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	885b      	ldrh	r3, [r3, #2]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	2b06      	cmp	r3, #6
 8008a72:	f200 8128 	bhi.w	8008cc6 <USBD_GetDescriptor+0x276>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USBD_GetDescriptor+0x2c>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008cc7 	.word	0x08008cc7
 8008a8c:	08008cc7 	.word	0x08008cc7
 8008a90:	08008c67 	.word	0x08008c67
 8008a94:	08008c93 	.word	0x08008c93
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	7c12      	ldrb	r2, [r2, #16]
 8008aa4:	f107 0108 	add.w	r1, r7, #8
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4798      	blx	r3
 8008aac:	60f8      	str	r0, [r7, #12]
      break;
 8008aae:	e112      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	7c1b      	ldrb	r3, [r3, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10d      	bne.n	8008ad4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f107 0208 	add.w	r2, r7, #8
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4798      	blx	r3
 8008ac8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	2202      	movs	r2, #2
 8008ad0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ad2:	e100      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f107 0208 	add.w	r2, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	2202      	movs	r2, #2
 8008aec:	701a      	strb	r2, [r3, #0]
      break;
 8008aee:	e0f2      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	885b      	ldrh	r3, [r3, #2]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b05      	cmp	r3, #5
 8008af8:	f200 80ac 	bhi.w	8008c54 <USBD_GetDescriptor+0x204>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <USBD_GetDescriptor+0xb4>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b1d 	.word	0x08008b1d
 8008b08:	08008b51 	.word	0x08008b51
 8008b0c:	08008b85 	.word	0x08008b85
 8008b10:	08008bb9 	.word	0x08008bb9
 8008b14:	08008bed 	.word	0x08008bed
 8008b18:	08008c21 	.word	0x08008c21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3e:	e091      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fab2 	bl	80090ac <USBD_CtlError>
            err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4e:	e089      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b72:	e077      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa98 	bl	80090ac <USBD_CtlError>
            err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
          break;
 8008b82:	e06f      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ba6:	e05d      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa7e 	bl	80090ac <USBD_CtlError>
            err++;
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bb6:	e055      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bda:	e043      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa64 	bl	80090ac <USBD_CtlError>
            err++;
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	3301      	adds	r3, #1
 8008be8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bea:	e03b      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0e:	e029      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa4a 	bl	80090ac <USBD_CtlError>
            err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1e:	e021      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c42:	e00f      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa30 	bl	80090ac <USBD_CtlError>
            err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
          break;
 8008c52:	e007      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa28 	bl	80090ac <USBD_CtlError>
          err++;
 8008c5c:	7afb      	ldrb	r3, [r7, #11]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008c62:	bf00      	nop
      }
      break;
 8008c64:	e037      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7c1b      	ldrb	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d109      	bne.n	8008c82 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	f107 0208 	add.w	r2, r7, #8
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4798      	blx	r3
 8008c7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c80:	e029      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa11 	bl	80090ac <USBD_CtlError>
        err++;
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c90:	e021      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7c1b      	ldrb	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	f107 0208 	add.w	r2, r7, #8
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	4798      	blx	r3
 8008caa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb4:	e00f      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9f7 	bl	80090ac <USBD_CtlError>
        err++;
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc4:	e007      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f9ef 	bl	80090ac <USBD_CtlError>
      err++;
 8008cce:	7afb      	ldrb	r3, [r7, #11]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cd4:	bf00      	nop
  }

  if (err != 0U)
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d11e      	bne.n	8008d1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	88db      	ldrh	r3, [r3, #6]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d016      	beq.n	8008d12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ce4:	893b      	ldrh	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00e      	beq.n	8008d08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88da      	ldrh	r2, [r3, #6]
 8008cee:	893b      	ldrh	r3, [r7, #8]
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	bf28      	it	cs
 8008cf4:	4613      	movcs	r3, r2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cfa:	893b      	ldrh	r3, [r7, #8]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa44 	bl	800918e <USBD_CtlSendData>
 8008d06:	e009      	b.n	8008d1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f9ce 	bl	80090ac <USBD_CtlError>
 8008d10:	e004      	b.n	8008d1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa95 	bl	8009242 <USBD_CtlSendStatus>
 8008d18:	e000      	b.n	8008d1c <USBD_GetDescriptor+0x2cc>
    return;
 8008d1a:	bf00      	nop
  }
}
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop

08008d24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	889b      	ldrh	r3, [r3, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d131      	bne.n	8008d9a <USBD_SetAddress+0x76>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	88db      	ldrh	r3, [r3, #6]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d12d      	bne.n	8008d9a <USBD_SetAddress+0x76>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	885b      	ldrh	r3, [r3, #2]
 8008d42:	2b7f      	cmp	r3, #127	; 0x7f
 8008d44:	d829      	bhi.n	8008d9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	885b      	ldrh	r3, [r3, #2]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d104      	bne.n	8008d68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9a3 	bl	80090ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d66:	e01d      	b.n	8008da4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7bfa      	ldrb	r2, [r7, #15]
 8008d6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fedd 	bl	8009b34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa61 	bl	8009242 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d004      	beq.n	8008d90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	e009      	b.n	8008da4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d98:	e004      	b.n	8008da4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f985 	bl	80090ac <USBD_CtlError>
  }
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	4b4c      	ldr	r3, [pc, #304]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008dc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008dc4:	4b4b      	ldr	r3, [pc, #300]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d905      	bls.n	8008dd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f96c 	bl	80090ac <USBD_CtlError>
    return USBD_FAIL;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e088      	b.n	8008eea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d002      	beq.n	8008dea <USBD_SetConfig+0x3e>
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d025      	beq.n	8008e34 <USBD_SetConfig+0x88>
 8008de8:	e071      	b.n	8008ece <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008dea:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01c      	beq.n	8008e2c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008df2:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dfc:	4b3d      	ldr	r3, [pc, #244]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff f948 	bl	8008098 <USBD_SetClassConfig>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f949 	bl	80090ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e1a:	e065      	b.n	8008ee8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fa10 	bl	8009242 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2203      	movs	r2, #3
 8008e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e2a:	e05d      	b.n	8008ee8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa08 	bl	8009242 <USBD_CtlSendStatus>
      break;
 8008e32:	e059      	b.n	8008ee8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e34:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d112      	bne.n	8008e62 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e44:	4b2b      	ldr	r3, [pc, #172]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e4e:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff f93b 	bl	80080d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9f1 	bl	8009242 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e60:	e042      	b.n	8008ee8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008e62:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d02a      	beq.n	8008ec6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff f929 	bl	80080d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e88:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff f902 	bl	8008098 <USBD_SetClassConfig>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00f      	beq.n	8008ebe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f903 	bl	80090ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff f90e 	bl	80080d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ebc:	e014      	b.n	8008ee8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f9bf 	bl	8009242 <USBD_CtlSendStatus>
      break;
 8008ec4:	e010      	b.n	8008ee8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9bb 	bl	8009242 <USBD_CtlSendStatus>
      break;
 8008ecc:	e00c      	b.n	8008ee8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f8eb 	bl	80090ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ed6:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <USBD_SetConfig+0x148>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff f8f7 	bl	80080d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee6:	bf00      	nop
  }

  return ret;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	2000061e 	.word	0x2000061e

08008ef8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	88db      	ldrh	r3, [r3, #6]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d004      	beq.n	8008f14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f8cd 	bl	80090ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f12:	e023      	b.n	8008f5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	dc02      	bgt.n	8008f26 <USBD_GetConfig+0x2e>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dc03      	bgt.n	8008f2c <USBD_GetConfig+0x34>
 8008f24:	e015      	b.n	8008f52 <USBD_GetConfig+0x5a>
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d00b      	beq.n	8008f42 <USBD_GetConfig+0x4a>
 8008f2a:	e012      	b.n	8008f52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3308      	adds	r3, #8
 8008f36:	2201      	movs	r2, #1
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f927 	bl	800918e <USBD_CtlSendData>
        break;
 8008f40:	e00c      	b.n	8008f5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3304      	adds	r3, #4
 8008f46:	2201      	movs	r2, #1
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f91f 	bl	800918e <USBD_CtlSendData>
        break;
 8008f50:	e004      	b.n	8008f5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f8a9 	bl	80090ac <USBD_CtlError>
        break;
 8008f5a:	bf00      	nop
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d81e      	bhi.n	8008fba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	88db      	ldrh	r3, [r3, #6]
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d004      	beq.n	8008f8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f890 	bl	80090ac <USBD_CtlError>
        break;
 8008f8c:	e01a      	b.n	8008fc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f043 0202 	orr.w	r2, r3, #2
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	330c      	adds	r3, #12
 8008fae:	2202      	movs	r2, #2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8eb 	bl	800918e <USBD_CtlSendData>
      break;
 8008fb8:	e004      	b.n	8008fc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f875 	bl	80090ac <USBD_CtlError>
      break;
 8008fc2:	bf00      	nop
  }
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	885b      	ldrh	r3, [r3, #2]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d106      	bne.n	8008fec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f92b 	bl	8009242 <USBD_CtlSendStatus>
  }
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009004:	b2db      	uxtb	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	2b02      	cmp	r3, #2
 800900a:	d80b      	bhi.n	8009024 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d10c      	bne.n	800902e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f910 	bl	8009242 <USBD_CtlSendStatus>
      }
      break;
 8009022:	e004      	b.n	800902e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f840 	bl	80090ac <USBD_CtlError>
      break;
 800902c:	e000      	b.n	8009030 <USBD_ClrFeature+0x3c>
      break;
 800902e:	bf00      	nop
  }
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	781a      	ldrb	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fabb 	bl	80085de <SWAPBYTE>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff faae 	bl	80085de <SWAPBYTE>
 8009082:	4603      	mov	r3, r0
 8009084:	461a      	mov	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3301      	adds	r3, #1
 8009094:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff faa1 	bl	80085de <SWAPBYTE>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	80da      	strh	r2, [r3, #6]
}
 80090a4:	bf00      	nop
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fcd1 	bl	8009a60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090be:	2100      	movs	r1, #0
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fccd 	bl	8009a60 <USBD_LL_StallEP>
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d036      	beq.n	8009152 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090e8:	6938      	ldr	r0, [r7, #16]
 80090ea:	f000 f836 	bl	800915a <USBD_GetLen>
 80090ee:	4603      	mov	r3, r0
 80090f0:	3301      	adds	r3, #1
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	4413      	add	r3, r2
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	701a      	strb	r2, [r3, #0]
  idx++;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	3301      	adds	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	4413      	add	r3, r2
 8009114:	2203      	movs	r2, #3
 8009116:	701a      	strb	r2, [r3, #0]
  idx++;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	3301      	adds	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800911e:	e013      	b.n	8009148 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	4413      	add	r3, r2
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	7812      	ldrb	r2, [r2, #0]
 800912a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3301      	adds	r3, #1
 8009130:	613b      	str	r3, [r7, #16]
    idx++;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	3301      	adds	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	2200      	movs	r2, #0
 8009140:	701a      	strb	r2, [r3, #0]
    idx++;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	3301      	adds	r3, #1
 8009146:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e7      	bne.n	8009120 <USBD_GetString+0x52>
 8009150:	e000      	b.n	8009154 <USBD_GetString+0x86>
    return;
 8009152:	bf00      	nop
  }
}
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800916a:	e005      	b.n	8009178 <USBD_GetLen+0x1e>
  {
    len++;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	3301      	adds	r3, #1
 8009170:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	3301      	adds	r3, #1
 8009176:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f5      	bne.n	800916c <USBD_GetLen+0x12>
  }

  return len;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2202      	movs	r2, #2
 800919e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	2100      	movs	r1, #0
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fcdc 	bl	8009b72 <USBD_LL_Transmit>

  return USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 fccb 	bl	8009b72 <USBD_LL_Transmit>

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2203      	movs	r2, #3
 80091f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	2100      	movs	r1, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fccf 	bl	8009bb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	2100      	movs	r1, #0
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fcbe 	bl	8009bb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2204      	movs	r2, #4
 800924e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009252:	2300      	movs	r3, #0
 8009254:	2200      	movs	r2, #0
 8009256:	2100      	movs	r1, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fc8a 	bl	8009b72 <USBD_LL_Transmit>

  return USBD_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2205      	movs	r2, #5
 8009274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009278:	2300      	movs	r3, #0
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc98 	bl	8009bb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009294:	2200      	movs	r2, #0
 8009296:	4912      	ldr	r1, [pc, #72]	; (80092e0 <MX_USB_DEVICE_Init+0x50>)
 8009298:	4812      	ldr	r0, [pc, #72]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 800929a:	f7fe fe8f 	bl	8007fbc <USBD_Init>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80092a4:	f7f8 f93e 	bl	8001524 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092a8:	490f      	ldr	r1, [pc, #60]	; (80092e8 <MX_USB_DEVICE_Init+0x58>)
 80092aa:	480e      	ldr	r0, [pc, #56]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 80092ac:	f7fe feb6 	bl	800801c <USBD_RegisterClass>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092b6:	f7f8 f935 	bl	8001524 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092ba:	490c      	ldr	r1, [pc, #48]	; (80092ec <MX_USB_DEVICE_Init+0x5c>)
 80092bc:	4809      	ldr	r0, [pc, #36]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 80092be:	f7fe fe07 	bl	8007ed0 <USBD_CDC_RegisterInterface>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092c8:	f7f8 f92c 	bl	8001524 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092cc:	4805      	ldr	r0, [pc, #20]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 80092ce:	f7fe fecc 	bl	800806a <USBD_Start>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092d8:	f7f8 f924 	bl	8001524 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092dc:	bf00      	nop
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000138 	.word	0x20000138
 80092e4:	200009d4 	.word	0x200009d4
 80092e8:	20000020 	.word	0x20000020
 80092ec:	20000124 	.word	0x20000124

080092f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092f4:	2200      	movs	r2, #0
 80092f6:	4905      	ldr	r1, [pc, #20]	; (800930c <CDC_Init_FS+0x1c>)
 80092f8:	4805      	ldr	r0, [pc, #20]	; (8009310 <CDC_Init_FS+0x20>)
 80092fa:	f7fe fdfe 	bl	8007efa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092fe:	4905      	ldr	r1, [pc, #20]	; (8009314 <CDC_Init_FS+0x24>)
 8009300:	4803      	ldr	r0, [pc, #12]	; (8009310 <CDC_Init_FS+0x20>)
 8009302:	f7fe fe18 	bl	8007f36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009306:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009308:	4618      	mov	r0, r3
 800930a:	bd80      	pop	{r7, pc}
 800930c:	200014a4 	.word	0x200014a4
 8009310:	200009d4 	.word	0x200009d4
 8009314:	20000ca4 	.word	0x20000ca4

08009318 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800931c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800931e:	4618      	mov	r0, r3
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
 8009334:	4613      	mov	r3, r2
 8009336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009338:	79fb      	ldrb	r3, [r7, #7]
 800933a:	2b23      	cmp	r3, #35	; 0x23
 800933c:	d84a      	bhi.n	80093d4 <CDC_Control_FS+0xac>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <CDC_Control_FS+0x1c>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093d5 	.word	0x080093d5
 8009348:	080093d5 	.word	0x080093d5
 800934c:	080093d5 	.word	0x080093d5
 8009350:	080093d5 	.word	0x080093d5
 8009354:	080093d5 	.word	0x080093d5
 8009358:	080093d5 	.word	0x080093d5
 800935c:	080093d5 	.word	0x080093d5
 8009360:	080093d5 	.word	0x080093d5
 8009364:	080093d5 	.word	0x080093d5
 8009368:	080093d5 	.word	0x080093d5
 800936c:	080093d5 	.word	0x080093d5
 8009370:	080093d5 	.word	0x080093d5
 8009374:	080093d5 	.word	0x080093d5
 8009378:	080093d5 	.word	0x080093d5
 800937c:	080093d5 	.word	0x080093d5
 8009380:	080093d5 	.word	0x080093d5
 8009384:	080093d5 	.word	0x080093d5
 8009388:	080093d5 	.word	0x080093d5
 800938c:	080093d5 	.word	0x080093d5
 8009390:	080093d5 	.word	0x080093d5
 8009394:	080093d5 	.word	0x080093d5
 8009398:	080093d5 	.word	0x080093d5
 800939c:	080093d5 	.word	0x080093d5
 80093a0:	080093d5 	.word	0x080093d5
 80093a4:	080093d5 	.word	0x080093d5
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	080093d5 	.word	0x080093d5
 80093b0:	080093d5 	.word	0x080093d5
 80093b4:	080093d5 	.word	0x080093d5
 80093b8:	080093d5 	.word	0x080093d5
 80093bc:	080093d5 	.word	0x080093d5
 80093c0:	080093d5 	.word	0x080093d5
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093d5 	.word	0x080093d5
 80093cc:	080093d5 	.word	0x080093d5
 80093d0:	080093d5 	.word	0x080093d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093d4:	bf00      	nop
  }

  return (USBD_OK);
 80093d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	480f      	ldr	r0, [pc, #60]	; (8009430 <CDC_Receive_FS+0x4c>)
 80093f2:	f7fe fda0 	bl	8007f36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093f6:	480e      	ldr	r0, [pc, #56]	; (8009430 <CDC_Receive_FS+0x4c>)
 80093f8:	f7fe fdb6 	bl	8007f68 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 80093fc:	2240      	movs	r2, #64	; 0x40
 80093fe:	2100      	movs	r1, #0
 8009400:	480c      	ldr	r0, [pc, #48]	; (8009434 <CDC_Receive_FS+0x50>)
 8009402:	f000 fc87 	bl	8009d14 <memset>
  uint8_t len = (uint8_t)*Len;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	461a      	mov	r2, r3
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4808      	ldr	r0, [pc, #32]	; (8009434 <CDC_Receive_FS+0x50>)
 8009414:	f000 fc70 	bl	8009cf8 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	461a      	mov	r2, r3
 800941c:	2100      	movs	r1, #0
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc78 	bl	8009d14 <memset>

  return (USBD_OK);
 8009424:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200009d4 	.word	0x200009d4
 8009434:	2000093c 	.word	0x2000093c

08009438 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800944a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800944e:	4618      	mov	r0, r3
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
	...

0800945c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2212      	movs	r2, #18
 800946c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800946e:	4b03      	ldr	r3, [pc, #12]	; (800947c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20000154 	.word	0x20000154

08009480 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2204      	movs	r2, #4
 8009490:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009492:	4b03      	ldr	r3, [pc, #12]	; (80094a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20000168 	.word	0x20000168

080094a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4907      	ldr	r1, [pc, #28]	; (80094d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094ba:	4808      	ldr	r0, [pc, #32]	; (80094dc <USBD_FS_ProductStrDescriptor+0x38>)
 80094bc:	f7ff fe07 	bl	80090ce <USBD_GetString>
 80094c0:	e004      	b.n	80094cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	4904      	ldr	r1, [pc, #16]	; (80094d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094c6:	4805      	ldr	r0, [pc, #20]	; (80094dc <USBD_FS_ProductStrDescriptor+0x38>)
 80094c8:	f7ff fe01 	bl	80090ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20001ca4 	.word	0x20001ca4
 80094dc:	08009f18 	.word	0x08009f18

080094e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	4904      	ldr	r1, [pc, #16]	; (8009500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094f0:	4804      	ldr	r0, [pc, #16]	; (8009504 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094f2:	f7ff fdec 	bl	80090ce <USBD_GetString>
  return USBD_StrDesc;
 80094f6:	4b02      	ldr	r3, [pc, #8]	; (8009500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20001ca4 	.word	0x20001ca4
 8009504:	08009f2c 	.word	0x08009f2c

08009508 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	221a      	movs	r2, #26
 8009518:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800951a:	f000 f843 	bl	80095a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800951e:	4b02      	ldr	r3, [pc, #8]	; (8009528 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	2000016c 	.word	0x2000016c

0800952c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4907      	ldr	r1, [pc, #28]	; (8009560 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009542:	4808      	ldr	r0, [pc, #32]	; (8009564 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009544:	f7ff fdc3 	bl	80090ce <USBD_GetString>
 8009548:	e004      	b.n	8009554 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800954e:	4805      	ldr	r0, [pc, #20]	; (8009564 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009550:	f7ff fdbd 	bl	80090ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001ca4 	.word	0x20001ca4
 8009564:	08009f40 	.word	0x08009f40

08009568 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4907      	ldr	r1, [pc, #28]	; (800959c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800957e:	4808      	ldr	r0, [pc, #32]	; (80095a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009580:	f7ff fda5 	bl	80090ce <USBD_GetString>
 8009584:	e004      	b.n	8009590 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4904      	ldr	r1, [pc, #16]	; (800959c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800958a:	4805      	ldr	r0, [pc, #20]	; (80095a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800958c:	f7ff fd9f 	bl	80090ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20001ca4 	.word	0x20001ca4
 80095a0:	08009f4c 	.word	0x08009f4c

080095a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095aa:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <Get_SerialNum+0x44>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095b0:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <Get_SerialNum+0x48>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095b6:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <Get_SerialNum+0x4c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4413      	add	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ca:	2208      	movs	r2, #8
 80095cc:	4909      	ldr	r1, [pc, #36]	; (80095f4 <Get_SerialNum+0x50>)
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 f814 	bl	80095fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095d4:	2204      	movs	r2, #4
 80095d6:	4908      	ldr	r1, [pc, #32]	; (80095f8 <Get_SerialNum+0x54>)
 80095d8:	68b8      	ldr	r0, [r7, #8]
 80095da:	f000 f80f 	bl	80095fc <IntToUnicode>
  }
}
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	1fff7a10 	.word	0x1fff7a10
 80095ec:	1fff7a14 	.word	0x1fff7a14
 80095f0:	1fff7a18 	.word	0x1fff7a18
 80095f4:	2000016e 	.word	0x2000016e
 80095f8:	2000017e 	.word	0x2000017e

080095fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	4613      	mov	r3, r2
 8009608:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
 8009612:	e027      	b.n	8009664 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	0f1b      	lsrs	r3, r3, #28
 8009618:	2b09      	cmp	r3, #9
 800961a:	d80b      	bhi.n	8009634 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	0f1b      	lsrs	r3, r3, #28
 8009620:	b2da      	uxtb	r2, r3
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	4619      	mov	r1, r3
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	440b      	add	r3, r1
 800962c:	3230      	adds	r2, #48	; 0x30
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e00a      	b.n	800964a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	0f1b      	lsrs	r3, r3, #28
 8009638:	b2da      	uxtb	r2, r3
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	005b      	lsls	r3, r3, #1
 800963e:	4619      	mov	r1, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	440b      	add	r3, r1
 8009644:	3237      	adds	r2, #55	; 0x37
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	3301      	adds	r3, #1
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4413      	add	r3, r2
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	3301      	adds	r3, #1
 8009662:	75fb      	strb	r3, [r7, #23]
 8009664:	7dfa      	ldrb	r2, [r7, #23]
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	429a      	cmp	r2, r3
 800966a:	d3d3      	bcc.n	8009614 <IntToUnicode+0x18>
  }
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
	...

0800967c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009684:	f107 0314 	add.w	r3, r7, #20
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	605a      	str	r2, [r3, #4]
 800968e:	609a      	str	r2, [r3, #8]
 8009690:	60da      	str	r2, [r3, #12]
 8009692:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800969c:	d13a      	bne.n	8009714 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	4b1e      	ldr	r3, [pc, #120]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	4a1d      	ldr	r2, [pc, #116]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096a8:	f043 0301 	orr.w	r3, r3, #1
 80096ac:	6313      	str	r3, [r2, #48]	; 0x30
 80096ae:	4b1b      	ldr	r3, [pc, #108]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096c0:	2302      	movs	r3, #2
 80096c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096c8:	2303      	movs	r3, #3
 80096ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096cc:	230a      	movs	r3, #10
 80096ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096d0:	f107 0314 	add.w	r3, r7, #20
 80096d4:	4619      	mov	r1, r3
 80096d6:	4812      	ldr	r0, [pc, #72]	; (8009720 <HAL_PCD_MspInit+0xa4>)
 80096d8:	f7f9 fbf4 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	4a0e      	ldr	r2, [pc, #56]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e6:	6353      	str	r3, [r2, #52]	; 0x34
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f0:	4a0a      	ldr	r2, [pc, #40]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096f6:	6453      	str	r3, [r2, #68]	; 0x44
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <HAL_PCD_MspInit+0xa0>)
 80096fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009704:	2200      	movs	r2, #0
 8009706:	2100      	movs	r1, #0
 8009708:	2043      	movs	r0, #67	; 0x43
 800970a:	f7f9 fba4 	bl	8002e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800970e:	2043      	movs	r0, #67	; 0x43
 8009710:	f7f9 fbbd 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009714:	bf00      	nop
 8009716:	3728      	adds	r7, #40	; 0x28
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	40023800 	.word	0x40023800
 8009720:	40020000 	.word	0x40020000

08009724 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fce0 	bl	8008100 <USBD_LL_SetupStage>
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4613      	mov	r3, r2
 8009760:	00db      	lsls	r3, r3, #3
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	4619      	mov	r1, r3
 8009772:	f7fe fd1a 	bl	80081aa <USBD_LL_DataOutStage>
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	3348      	adds	r3, #72	; 0x48
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f7fe fd63 	bl	8008270 <USBD_LL_DataInStage>
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fe77 	bl	80084b4 <USBD_LL_SOF>
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097d6:	2301      	movs	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	e008      	b.n	80097fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d102      	bne.n	80097f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
 80097f4:	e001      	b.n	80097fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80097f6:	f7f7 fe95 	bl	8001524 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009800:	7bfa      	ldrb	r2, [r7, #15]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fe17 	bl	8008438 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fdc3 	bl	800839c <USBD_LL_Reset>
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fe12 	bl	8008458 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6812      	ldr	r2, [r2, #0]
 8009842:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009846:	f043 0301 	orr.w	r3, r3, #1
 800984a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009854:	4b04      	ldr	r3, [pc, #16]	; (8009868 <HAL_PCD_SuspendCallback+0x48>)
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	4a03      	ldr	r2, [pc, #12]	; (8009868 <HAL_PCD_SuspendCallback+0x48>)
 800985a:	f043 0306 	orr.w	r3, r3, #6
 800985e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	e000ed00 	.word	0xe000ed00

0800986c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fe02 	bl	8008484 <USBD_LL_Resume>
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fe50 	bl	8008544 <USBD_LL_IsoOUTIncomplete>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098be:	78fa      	ldrb	r2, [r7, #3]
 80098c0:	4611      	mov	r1, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fe18 	bl	80084f8 <USBD_LL_IsoINIncomplete>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fe56 	bl	8008590 <USBD_LL_DevConnected>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fe53 	bl	80085a6 <USBD_LL_DevDisconnected>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d13c      	bne.n	8009992 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009918:	4a20      	ldr	r2, [pc, #128]	; (800999c <USBD_LL_Init+0x94>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a1e      	ldr	r2, [pc, #120]	; (800999c <USBD_LL_Init+0x94>)
 8009924:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009928:	4b1c      	ldr	r3, [pc, #112]	; (800999c <USBD_LL_Init+0x94>)
 800992a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800992e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009930:	4b1a      	ldr	r3, [pc, #104]	; (800999c <USBD_LL_Init+0x94>)
 8009932:	2204      	movs	r2, #4
 8009934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009936:	4b19      	ldr	r3, [pc, #100]	; (800999c <USBD_LL_Init+0x94>)
 8009938:	2202      	movs	r2, #2
 800993a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800993c:	4b17      	ldr	r3, [pc, #92]	; (800999c <USBD_LL_Init+0x94>)
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009942:	4b16      	ldr	r3, [pc, #88]	; (800999c <USBD_LL_Init+0x94>)
 8009944:	2202      	movs	r2, #2
 8009946:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009948:	4b14      	ldr	r3, [pc, #80]	; (800999c <USBD_LL_Init+0x94>)
 800994a:	2200      	movs	r2, #0
 800994c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800994e:	4b13      	ldr	r3, [pc, #76]	; (800999c <USBD_LL_Init+0x94>)
 8009950:	2200      	movs	r2, #0
 8009952:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <USBD_LL_Init+0x94>)
 8009956:	2200      	movs	r2, #0
 8009958:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800995a:	4b10      	ldr	r3, [pc, #64]	; (800999c <USBD_LL_Init+0x94>)
 800995c:	2200      	movs	r2, #0
 800995e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009960:	4b0e      	ldr	r3, [pc, #56]	; (800999c <USBD_LL_Init+0x94>)
 8009962:	2200      	movs	r2, #0
 8009964:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009966:	480d      	ldr	r0, [pc, #52]	; (800999c <USBD_LL_Init+0x94>)
 8009968:	f7fa ff01 	bl	800476e <HAL_PCD_Init>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009972:	f7f7 fdd7 	bl	8001524 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009976:	2180      	movs	r1, #128	; 0x80
 8009978:	4808      	ldr	r0, [pc, #32]	; (800999c <USBD_LL_Init+0x94>)
 800997a:	f7fc f85e 	bl	8005a3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800997e:	2240      	movs	r2, #64	; 0x40
 8009980:	2100      	movs	r1, #0
 8009982:	4806      	ldr	r0, [pc, #24]	; (800999c <USBD_LL_Init+0x94>)
 8009984:	f7fc f812 	bl	80059ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009988:	2280      	movs	r2, #128	; 0x80
 800998a:	2101      	movs	r1, #1
 800998c:	4803      	ldr	r0, [pc, #12]	; (800999c <USBD_LL_Init+0x94>)
 800998e:	f7fc f80d 	bl	80059ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20001ea4 	.word	0x20001ea4

080099a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fa fff6 	bl	80049a8 <HAL_PCD_Start>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f942 	bl	8009c4c <USBD_Get_USB_Status>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	4608      	mov	r0, r1
 80099e0:	4611      	mov	r1, r2
 80099e2:	461a      	mov	r2, r3
 80099e4:	4603      	mov	r3, r0
 80099e6:	70fb      	strb	r3, [r7, #3]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70bb      	strb	r3, [r7, #2]
 80099ec:	4613      	mov	r3, r2
 80099ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099fe:	78bb      	ldrb	r3, [r7, #2]
 8009a00:	883a      	ldrh	r2, [r7, #0]
 8009a02:	78f9      	ldrb	r1, [r7, #3]
 8009a04:	f7fb fbda 	bl	80051bc <HAL_PCD_EP_Open>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 f91c 	bl	8009c4c <USBD_Get_USB_Status>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fb fc23 	bl	800528c <HAL_PCD_EP_Close>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 f8fd 	bl	8009c4c <USBD_Get_USB_Status>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a7a:	78fa      	ldrb	r2, [r7, #3]
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fb fcfb 	bl	800547a <HAL_PCD_EP_SetStall>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 f8de 	bl	8009c4c <USBD_Get_USB_Status>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fb fd40 	bl	8005542 <HAL_PCD_EP_ClrStall>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f8bf 	bl	8009c4c <USBD_Get_USB_Status>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	da0b      	bge.n	8009b10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	4613      	mov	r3, r2
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	1a9b      	subs	r3, r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	440b      	add	r3, r1
 8009b0a:	333e      	adds	r3, #62	; 0x3e
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	e00b      	b.n	8009b28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b16:	68f9      	ldr	r1, [r7, #12]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b4e:	78fa      	ldrb	r2, [r7, #3]
 8009b50:	4611      	mov	r1, r2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fb fb0d 	bl	8005172 <HAL_PCD_SetAddress>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f874 	bl	8009c4c <USBD_Get_USB_Status>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b90:	7af9      	ldrb	r1, [r7, #11]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	f7fb fc26 	bl	80053e6 <HAL_PCD_EP_Transmit>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 f853 	bl	8009c4c <USBD_Get_USB_Status>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009baa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bd2:	7af9      	ldrb	r1, [r7, #11]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	f7fb fba2 	bl	8005320 <HAL_PCD_EP_Receive>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 f832 	bl	8009c4c <USBD_Get_USB_Status>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bec:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fb fbd2 	bl	80053b6 <HAL_PCD_EP_GetRxCount>
 8009c12:	4603      	mov	r3, r0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <USBD_static_malloc+0x18>)
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	20000620 	.word	0x20000620

08009c38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]

}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d817      	bhi.n	8009c90 <USBD_Get_USB_Status+0x44>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <USBD_Get_USB_Status+0x1c>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c79 	.word	0x08009c79
 8009c6c:	08009c7f 	.word	0x08009c7f
 8009c70:	08009c85 	.word	0x08009c85
 8009c74:	08009c8b 	.word	0x08009c8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7c:	e00b      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	73fb      	strb	r3, [r7, #15]
    break;
 8009c82:	e008      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c84:	2301      	movs	r3, #1
 8009c86:	73fb      	strb	r3, [r7, #15]
    break;
 8009c88:	e005      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8e:	e002      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c90:	2303      	movs	r3, #3
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	bf00      	nop
  }
  return usb_status;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <__errno>:
 8009ca4:	4b01      	ldr	r3, [pc, #4]	; (8009cac <__errno+0x8>)
 8009ca6:	6818      	ldr	r0, [r3, #0]
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000188 	.word	0x20000188

08009cb0 <__libc_init_array>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	4d0d      	ldr	r5, [pc, #52]	; (8009ce8 <__libc_init_array+0x38>)
 8009cb4:	4c0d      	ldr	r4, [pc, #52]	; (8009cec <__libc_init_array+0x3c>)
 8009cb6:	1b64      	subs	r4, r4, r5
 8009cb8:	10a4      	asrs	r4, r4, #2
 8009cba:	2600      	movs	r6, #0
 8009cbc:	42a6      	cmp	r6, r4
 8009cbe:	d109      	bne.n	8009cd4 <__libc_init_array+0x24>
 8009cc0:	4d0b      	ldr	r5, [pc, #44]	; (8009cf0 <__libc_init_array+0x40>)
 8009cc2:	4c0c      	ldr	r4, [pc, #48]	; (8009cf4 <__libc_init_array+0x44>)
 8009cc4:	f000 f916 	bl	8009ef4 <_init>
 8009cc8:	1b64      	subs	r4, r4, r5
 8009cca:	10a4      	asrs	r4, r4, #2
 8009ccc:	2600      	movs	r6, #0
 8009cce:	42a6      	cmp	r6, r4
 8009cd0:	d105      	bne.n	8009cde <__libc_init_array+0x2e>
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd8:	4798      	blx	r3
 8009cda:	3601      	adds	r6, #1
 8009cdc:	e7ee      	b.n	8009cbc <__libc_init_array+0xc>
 8009cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce2:	4798      	blx	r3
 8009ce4:	3601      	adds	r6, #1
 8009ce6:	e7f2      	b.n	8009cce <__libc_init_array+0x1e>
 8009ce8:	0800acd8 	.word	0x0800acd8
 8009cec:	0800acd8 	.word	0x0800acd8
 8009cf0:	0800acd8 	.word	0x0800acd8
 8009cf4:	0800acdc 	.word	0x0800acdc

08009cf8 <memcpy>:
 8009cf8:	440a      	add	r2, r1
 8009cfa:	4291      	cmp	r1, r2
 8009cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d00:	d100      	bne.n	8009d04 <memcpy+0xc>
 8009d02:	4770      	bx	lr
 8009d04:	b510      	push	{r4, lr}
 8009d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d0e:	4291      	cmp	r1, r2
 8009d10:	d1f9      	bne.n	8009d06 <memcpy+0xe>
 8009d12:	bd10      	pop	{r4, pc}

08009d14 <memset>:
 8009d14:	4402      	add	r2, r0
 8009d16:	4603      	mov	r3, r0
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d100      	bne.n	8009d1e <memset+0xa>
 8009d1c:	4770      	bx	lr
 8009d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d22:	e7f9      	b.n	8009d18 <memset+0x4>

08009d24 <sqrt>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	ed2d 8b02 	vpush	{d8}
 8009d2a:	ec55 4b10 	vmov	r4, r5, d0
 8009d2e:	f000 f82d 	bl	8009d8c <__ieee754_sqrt>
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <sqrt+0x64>)
 8009d34:	eeb0 8a40 	vmov.f32	s16, s0
 8009d38:	eef0 8a60 	vmov.f32	s17, s1
 8009d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8009d40:	3301      	adds	r3, #1
 8009d42:	d019      	beq.n	8009d78 <sqrt+0x54>
 8009d44:	4622      	mov	r2, r4
 8009d46:	462b      	mov	r3, r5
 8009d48:	4620      	mov	r0, r4
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	f7f6 fe92 	bl	8000a74 <__aeabi_dcmpun>
 8009d50:	b990      	cbnz	r0, 8009d78 <sqrt+0x54>
 8009d52:	2200      	movs	r2, #0
 8009d54:	2300      	movs	r3, #0
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fe63 	bl	8000a24 <__aeabi_dcmplt>
 8009d5e:	b158      	cbz	r0, 8009d78 <sqrt+0x54>
 8009d60:	f7ff ffa0 	bl	8009ca4 <__errno>
 8009d64:	2321      	movs	r3, #33	; 0x21
 8009d66:	6003      	str	r3, [r0, #0]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	4619      	mov	r1, r3
 8009d70:	f7f6 fd10 	bl	8000794 <__aeabi_ddiv>
 8009d74:	ec41 0b18 	vmov	d8, r0, r1
 8009d78:	eeb0 0a48 	vmov.f32	s0, s16
 8009d7c:	eef0 0a68 	vmov.f32	s1, s17
 8009d80:	ecbd 8b02 	vpop	{d8}
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	200001ec 	.word	0x200001ec

08009d8c <__ieee754_sqrt>:
 8009d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d90:	ec55 4b10 	vmov	r4, r5, d0
 8009d94:	4e56      	ldr	r6, [pc, #344]	; (8009ef0 <__ieee754_sqrt+0x164>)
 8009d96:	43ae      	bics	r6, r5
 8009d98:	ee10 0a10 	vmov	r0, s0
 8009d9c:	ee10 3a10 	vmov	r3, s0
 8009da0:	4629      	mov	r1, r5
 8009da2:	462a      	mov	r2, r5
 8009da4:	d110      	bne.n	8009dc8 <__ieee754_sqrt+0x3c>
 8009da6:	ee10 2a10 	vmov	r2, s0
 8009daa:	462b      	mov	r3, r5
 8009dac:	f7f6 fbc8 	bl	8000540 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fa0c 	bl	80001d4 <__adddf3>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	ec45 4b10 	vmov	d0, r4, r5
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	dc10      	bgt.n	8009dee <__ieee754_sqrt+0x62>
 8009dcc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009dd0:	4330      	orrs	r0, r6
 8009dd2:	d0f5      	beq.n	8009dc0 <__ieee754_sqrt+0x34>
 8009dd4:	b15d      	cbz	r5, 8009dee <__ieee754_sqrt+0x62>
 8009dd6:	ee10 2a10 	vmov	r2, s0
 8009dda:	462b      	mov	r3, r5
 8009ddc:	ee10 0a10 	vmov	r0, s0
 8009de0:	f7f6 f9f6 	bl	80001d0 <__aeabi_dsub>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	f7f6 fcd4 	bl	8000794 <__aeabi_ddiv>
 8009dec:	e7e6      	b.n	8009dbc <__ieee754_sqrt+0x30>
 8009dee:	1509      	asrs	r1, r1, #20
 8009df0:	d076      	beq.n	8009ee0 <__ieee754_sqrt+0x154>
 8009df2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009df6:	07ce      	lsls	r6, r1, #31
 8009df8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009dfc:	bf5e      	ittt	pl
 8009dfe:	0fda      	lsrpl	r2, r3, #31
 8009e00:	005b      	lslpl	r3, r3, #1
 8009e02:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009e06:	0fda      	lsrs	r2, r3, #31
 8009e08:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009e0c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009e10:	2000      	movs	r0, #0
 8009e12:	106d      	asrs	r5, r5, #1
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	f04f 0e16 	mov.w	lr, #22
 8009e1a:	4684      	mov	ip, r0
 8009e1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e20:	eb0c 0401 	add.w	r4, ip, r1
 8009e24:	4294      	cmp	r4, r2
 8009e26:	bfde      	ittt	le
 8009e28:	1b12      	suble	r2, r2, r4
 8009e2a:	eb04 0c01 	addle.w	ip, r4, r1
 8009e2e:	1840      	addle	r0, r0, r1
 8009e30:	0052      	lsls	r2, r2, #1
 8009e32:	f1be 0e01 	subs.w	lr, lr, #1
 8009e36:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e42:	d1ed      	bne.n	8009e20 <__ieee754_sqrt+0x94>
 8009e44:	4671      	mov	r1, lr
 8009e46:	2720      	movs	r7, #32
 8009e48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e4c:	4562      	cmp	r2, ip
 8009e4e:	eb04 060e 	add.w	r6, r4, lr
 8009e52:	dc02      	bgt.n	8009e5a <__ieee754_sqrt+0xce>
 8009e54:	d113      	bne.n	8009e7e <__ieee754_sqrt+0xf2>
 8009e56:	429e      	cmp	r6, r3
 8009e58:	d811      	bhi.n	8009e7e <__ieee754_sqrt+0xf2>
 8009e5a:	2e00      	cmp	r6, #0
 8009e5c:	eb06 0e04 	add.w	lr, r6, r4
 8009e60:	da43      	bge.n	8009eea <__ieee754_sqrt+0x15e>
 8009e62:	f1be 0f00 	cmp.w	lr, #0
 8009e66:	db40      	blt.n	8009eea <__ieee754_sqrt+0x15e>
 8009e68:	f10c 0801 	add.w	r8, ip, #1
 8009e6c:	eba2 020c 	sub.w	r2, r2, ip
 8009e70:	429e      	cmp	r6, r3
 8009e72:	bf88      	it	hi
 8009e74:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009e78:	1b9b      	subs	r3, r3, r6
 8009e7a:	4421      	add	r1, r4
 8009e7c:	46c4      	mov	ip, r8
 8009e7e:	0052      	lsls	r2, r2, #1
 8009e80:	3f01      	subs	r7, #1
 8009e82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009e8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e8e:	d1dd      	bne.n	8009e4c <__ieee754_sqrt+0xc0>
 8009e90:	4313      	orrs	r3, r2
 8009e92:	d006      	beq.n	8009ea2 <__ieee754_sqrt+0x116>
 8009e94:	1c4c      	adds	r4, r1, #1
 8009e96:	bf13      	iteet	ne
 8009e98:	3101      	addne	r1, #1
 8009e9a:	3001      	addeq	r0, #1
 8009e9c:	4639      	moveq	r1, r7
 8009e9e:	f021 0101 	bicne.w	r1, r1, #1
 8009ea2:	1043      	asrs	r3, r0, #1
 8009ea4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ea8:	0849      	lsrs	r1, r1, #1
 8009eaa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009eae:	07c2      	lsls	r2, r0, #31
 8009eb0:	bf48      	it	mi
 8009eb2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009eb6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009eba:	460c      	mov	r4, r1
 8009ebc:	463d      	mov	r5, r7
 8009ebe:	e77f      	b.n	8009dc0 <__ieee754_sqrt+0x34>
 8009ec0:	0ada      	lsrs	r2, r3, #11
 8009ec2:	3815      	subs	r0, #21
 8009ec4:	055b      	lsls	r3, r3, #21
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d0fa      	beq.n	8009ec0 <__ieee754_sqrt+0x134>
 8009eca:	02d7      	lsls	r7, r2, #11
 8009ecc:	d50a      	bpl.n	8009ee4 <__ieee754_sqrt+0x158>
 8009ece:	f1c1 0420 	rsb	r4, r1, #32
 8009ed2:	fa23 f404 	lsr.w	r4, r3, r4
 8009ed6:	1e4d      	subs	r5, r1, #1
 8009ed8:	408b      	lsls	r3, r1
 8009eda:	4322      	orrs	r2, r4
 8009edc:	1b41      	subs	r1, r0, r5
 8009ede:	e788      	b.n	8009df2 <__ieee754_sqrt+0x66>
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	e7f0      	b.n	8009ec6 <__ieee754_sqrt+0x13a>
 8009ee4:	0052      	lsls	r2, r2, #1
 8009ee6:	3101      	adds	r1, #1
 8009ee8:	e7ef      	b.n	8009eca <__ieee754_sqrt+0x13e>
 8009eea:	46e0      	mov	r8, ip
 8009eec:	e7be      	b.n	8009e6c <__ieee754_sqrt+0xe0>
 8009eee:	bf00      	nop
 8009ef0:	7ff00000 	.word	0x7ff00000

08009ef4 <_init>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	bf00      	nop
 8009ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efa:	bc08      	pop	{r3}
 8009efc:	469e      	mov	lr, r3
 8009efe:	4770      	bx	lr

08009f00 <_fini>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	bf00      	nop
 8009f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f06:	bc08      	pop	{r3}
 8009f08:	469e      	mov	lr, r3
 8009f0a:	4770      	bx	lr
