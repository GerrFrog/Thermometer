
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b36c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001654  0800b4f8  0800b4f8  0001b4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb4c  0800cb4c  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb54  0800cb54  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb54  0800cb54  0001cb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb58  0800cb58  0001cb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800cb5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          0000213c  20000228  20000228  00020228  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002364  20002364  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002828b  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ab8  00000000  00000000  000484df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0004cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b8  00000000  00000000  0004e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c6b  00000000  00000000  0004fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8ce  00000000  00000000  00076723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a83  00000000  00000000  00093ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00165a74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006288  00000000  00000000  00165ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000228 	.word	0x20000228
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b4dc 	.word	0x0800b4dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000022c 	.word	0x2000022c
 80001c4:	0800b4dc 	.word	0x0800b4dc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <CRC8_Calc>:
 *      Author: falls
 */
#include <common.h>

uint8_t CRC8_Calc (uint8_t *p, uint8_t len)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint16_t crc = 0x0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	81fb      	strh	r3, [r7, #14]

	while (len--)
 8000e98:	e015      	b.n	8000ec6 <CRC8_Calc+0x3e>
	{
			i = (crc ^ *p++) & 0xFF;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	4053      	eors	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	81bb      	strh	r3, [r7, #12]
			crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <CRC8_Calc+0x58>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4053      	eors	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	81fb      	strh	r3, [r7, #14]
	while (len--)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	70fa      	strb	r2, [r7, #3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e4      	bne.n	8000e9a <CRC8_Calc+0x12>
	}

	return crc & 0xFF;
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	b2db      	uxtb	r3, r3
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	0800b56c 	.word	0x0800b56c

08000ee4 <device_scanner>:
 *
 * @param hi2c Handler of I2C
 * @return int Device address
 */
uint16_t device_scanner(I2C_HandleTypeDef hi2c)
{
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	f107 0c10 	add.w	ip, r7, #16
 8000ef0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;

	for (uint16_t i = 0; i<256; i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	e028      	b.n	8000f4c <device_scanner+0x68>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	b299      	uxth	r1, r3
 8000f00:	2302      	movs	r3, #2
 8000f02:	2202      	movs	r2, #2
 8000f04:	f107 0010 	add.w	r0, r7, #16
 8000f08:	f003 fd98 	bl	8004a3c <HAL_I2C_IsDeviceReady>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	717b      	strb	r3, [r7, #5]

		if (result != HAL_OK)
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <device_scanner+0x3c>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <device_scanner+0x80>)
 8000f1c:	f003 f811 	bl	8003f42 <HAL_GPIO_TogglePin>

		if (result == HAL_OK)
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <device_scanner+0x62>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <device_scanner+0x80>)
 8000f2c:	f003 f809 	bl	8003f42 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f002 fd02 	bl	800393c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <device_scanner+0x80>)
 8000f3e:	f003 f800 	bl	8003f42 <HAL_GPIO_TogglePin>
		  return i;
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	e006      	b.n	8000f54 <device_scanner+0x70>
	for (uint16_t i = 0; i<256; i++)
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d9d3      	bls.n	8000efa <device_scanner+0x16>
		}
	}

	return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f5e:	b004      	add	sp, #16
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40020c00 	.word	0x40020c00

08000f68 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
#if defined(MLX90614) || defined(MLX90632)
int8_t mlx90614_mode = 0;
int8_t tim_wait_segment = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a3a      	ldr	r2, [pc, #232]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d16e      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0xf0>
	{
		// Check all time if button is pressed
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4839      	ldr	r0, [pc, #228]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f7e:	f002 ffaf 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d032      	beq.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			// Wait untill time ends
			if (tim_wait_segment == 100)
 8000f88:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d10f      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			{
				// crutch
				if (mlx90614_mode)
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f94:	f993 3000 	ldrsb.w	r3, [r3]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x3c>
					mlx90614_mode = 0;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e002      	b.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x42>
				else
					mlx90614_mode = 1;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]

				tim_wait_segment = 0;
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e04f      	b.n	8001052 <HAL_TIM_PeriodElapsedCallback+0xea>
			}
			else
			{
				if (tim_wait_segment > 100)
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	dd0e      	ble.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x72>
					{
						while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000fbc:	e002      	b.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x5c>
							HAL_Delay(100);
 8000fbe:	2064      	movs	r0, #100	; 0x64
 8000fc0:	f002 fcbc 	bl	800393c <HAL_Delay>
						while (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4827      	ldr	r0, [pc, #156]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000fc8:	f002 ff8a 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f5      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x56>
						tim_wait_segment = 0;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e03b      	b.n	8001052 <HAL_TIM_PeriodElapsedCallback+0xea>
					}
				else
				tim_wait_segment++;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e031      	b.n	8001052 <HAL_TIM_PeriodElapsedCallback+0xea>
			}
		}
		else
		{
			if (tim_wait_segment > 4)
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	dd29      	ble.n	800104c <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
#				ifdef SSD1306_DISPLAY
				float_temp_to_char_temp(float_temp_1, char_temp_1);
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa47 	bl	8000490 <__aeabi_f2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	481b      	ldr	r0, [pc, #108]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001008:	ec43 2b10 	vmov	d0, r2, r3
 800100c:	f000 f83c 	bl	8001088 <float_temp_to_char_temp>
				float_temp_to_char_temp(float_temp_2, char_temp_2);
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa3b 	bl	8000490 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001020:	ec43 2b10 	vmov	d0, r2, r3
 8001024:	f000 f830 	bl	8001088 <float_temp_to_char_temp>

				SSD1306_GotoXY(0, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f002 f930 	bl	8003290 <SSD1306_GotoXY>
				SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	4913      	ldr	r1, [pc, #76]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001036:	f002 f9c1 	bl	80033bc <SSD1306_Puts>

				SSD1306_GotoXY(70, 0);
 800103a:	2100      	movs	r1, #0
 800103c:	2046      	movs	r0, #70	; 0x46
 800103e:	f002 f927 	bl	8003290 <SSD1306_GotoXY>
				SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	490e      	ldr	r1, [pc, #56]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001048:	f002 f9b8 	bl	80033bc <SSD1306_Puts>
				CDC_Transmit_FS((uint8_t*)char_temp_2, strlen((uint8_t*)char_temp_2));
				CDC_Transmit_FS(end, strlen(end));
#  		   		endif
			}

			tim_wait_segment = 0;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_IRQHandler(&htim1);
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001054:	f006 f874 	bl	8007140 <HAL_TIM_IRQHandler>
	}
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010000 	.word	0x40010000
 8001064:	40020000 	.word	0x40020000
 8001068:	2000024f 	.word	0x2000024f
 800106c:	2000024e 	.word	0x2000024e
 8001070:	20000244 	.word	0x20000244
 8001074:	200009d0 	.word	0x200009d0
 8001078:	20000248 	.word	0x20000248
 800107c:	20000a80 	.word	0x20000a80
 8001080:	20000034 	.word	0x20000034
 8001084:	200009d8 	.word	0x200009d8

08001088 <float_temp_to_char_temp>:

void float_temp_to_char_temp(double digit, char* arr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001092:	6078      	str	r0, [r7, #4]
    int l_digit = digit * 100.0;
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <float_temp_to_char_temp+0x110>)
 800109a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800109e:	f7ff fa4f 	bl	8000540 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fcf9 	bl	8000aa0 <__aeabi_d2iz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	617b      	str	r3, [r7, #20]
    arr[7] = '\0';
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3307      	adds	r3, #7
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    arr[6] = '\0';
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3306      	adds	r3, #6
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
    arr[5] = '\0';
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3305      	adds	r3, #5
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    arr[4] = l_digit % 10 + '0';
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4b33      	ldr	r3, [pc, #204]	; (800119c <float_temp_to_char_temp+0x114>)
 80010ce:	fb83 1302 	smull	r1, r3, r3, r2
 80010d2:	1099      	asrs	r1, r3, #2
 80010d4:	17d3      	asrs	r3, r2, #31
 80010d6:	1ac9      	subs	r1, r1, r3
 80010d8:	460b      	mov	r3, r1
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	1ad1      	subs	r1, r2, r3
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3304      	adds	r3, #4
 80010e8:	3230      	adds	r2, #48	; 0x30
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4a2a      	ldr	r2, [pc, #168]	; (800119c <float_temp_to_char_temp+0x114>)
 80010f2:	fb82 1203 	smull	r1, r2, r2, r3
 80010f6:	1092      	asrs	r2, r2, #2
 80010f8:	17db      	asrs	r3, r3, #31
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
    arr[3] = l_digit % 10 + '0';
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <float_temp_to_char_temp+0x114>)
 8001102:	fb83 1302 	smull	r1, r3, r3, r2
 8001106:	1099      	asrs	r1, r3, #2
 8001108:	17d3      	asrs	r3, r2, #31
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	1ad1      	subs	r1, r2, r3
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3303      	adds	r3, #3
 800111c:	3230      	adds	r2, #48	; 0x30
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <float_temp_to_char_temp+0x114>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1092      	asrs	r2, r2, #2
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    arr[2] = ',';
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3302      	adds	r3, #2
 8001136:	222c      	movs	r2, #44	; 0x2c
 8001138:	701a      	strb	r2, [r3, #0]
    arr[1] = l_digit % 10 + '0';
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <float_temp_to_char_temp+0x114>)
 800113e:	fb83 1302 	smull	r1, r3, r3, r2
 8001142:	1099      	asrs	r1, r3, #2
 8001144:	17d3      	asrs	r3, r2, #31
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	1ad1      	subs	r1, r2, r3
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3301      	adds	r3, #1
 8001158:	3230      	adds	r2, #48	; 0x30
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <float_temp_to_char_temp+0x114>)
 8001162:	fb82 1203 	smull	r1, r2, r2, r3
 8001166:	1092      	asrs	r2, r2, #2
 8001168:	17db      	asrs	r3, r3, #31
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
    arr[0] = l_digit % 10 + '0';
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <float_temp_to_char_temp+0x114>)
 8001172:	fb83 1302 	smull	r1, r3, r3, r2
 8001176:	1099      	asrs	r1, r3, #2
 8001178:	17d3      	asrs	r3, r2, #31
 800117a:	1ac9      	subs	r1, r1, r3
 800117c:	460b      	mov	r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	1ad1      	subs	r1, r2, r3
 8001186:	b2cb      	uxtb	r3, r1
 8001188:	3330      	adds	r3, #48	; 0x30
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	701a      	strb	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40590000 	.word	0x40590000
 800119c:	66666667 	.word	0x66666667

080011a0 <mlx90632_read_eeprom>:
#endif

//#if defined(MLX90632)
static int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka, I2C_HandleTypeDef hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	; 0x68
 80011a4:	af14      	add	r7, sp, #80	; 0x50
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR, hi2c);
 80011ae:	4668      	mov	r0, sp
 80011b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b4:	224c      	movs	r2, #76	; 0x4c
 80011b6:	4619      	mov	r1, r3
 80011b8:	f00a f892 	bl	800b2e0 <memcpy>
 80011bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011c0:	cb0c      	ldmia	r3, {r2, r3}
 80011c2:	68f9      	ldr	r1, [r7, #12]
 80011c4:	f242 400c 	movw	r0, #9228	; 0x240c
 80011c8:	f000 ffb5 	bl	8002136 <mlx90632_i2c_read32>
 80011cc:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da01      	bge.n	80011d8 <mlx90632_read_eeprom+0x38>
        return ret;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	e0fc      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG, hi2c);
 80011d8:	4668      	mov	r0, sp
 80011da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011de:	224c      	movs	r2, #76	; 0x4c
 80011e0:	4619      	mov	r1, r3
 80011e2:	f00a f87d 	bl	800b2e0 <memcpy>
 80011e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011ea:	cb0c      	ldmia	r3, {r2, r3}
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	f242 400e 	movw	r0, #9230	; 0x240e
 80011f2:	f000 ffa0 	bl	8002136 <mlx90632_i2c_read32>
 80011f6:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da01      	bge.n	8001202 <mlx90632_read_eeprom+0x62>
        return ret;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	e0e7      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO, hi2c);
 8001202:	4668      	mov	r0, sp
 8001204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001208:	224c      	movs	r2, #76	; 0x4c
 800120a:	4619      	mov	r1, r3
 800120c:	f00a f868 	bl	800b2e0 <memcpy>
 8001210:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001214:	cb0c      	ldmia	r3, {r2, r3}
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f242 4012 	movw	r0, #9234	; 0x2412
 800121c:	f000 ff8b 	bl	8002136 <mlx90632_i2c_read32>
 8001220:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da01      	bge.n	800122c <mlx90632_read_eeprom+0x8c>
        return ret;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	e0d2      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT, hi2c);
 800122c:	4668      	mov	r0, sp
 800122e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001232:	224c      	movs	r2, #76	; 0x4c
 8001234:	4619      	mov	r1, r3
 8001236:	f00a f853 	bl	800b2e0 <memcpy>
 800123a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800123e:	cb0c      	ldmia	r3, {r2, r3}
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	f242 4010 	movw	r0, #9232	; 0x2410
 8001246:	f000 ff76 	bl	8002136 <mlx90632_i2c_read32>
 800124a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	da01      	bge.n	8001256 <mlx90632_read_eeprom+0xb6>
        return ret;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	e0bd      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea, hi2c);
 8001256:	4668      	mov	r0, sp
 8001258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800125c:	224c      	movs	r2, #76	; 0x4c
 800125e:	4619      	mov	r1, r3
 8001260:	f00a f83e 	bl	800b2e0 <memcpy>
 8001264:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001268:	cb0c      	ldmia	r3, {r2, r3}
 800126a:	6a39      	ldr	r1, [r7, #32]
 800126c:	f242 4024 	movw	r0, #9252	; 0x2424
 8001270:	f000 ff61 	bl	8002136 <mlx90632_i2c_read32>
 8001274:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da01      	bge.n	8001280 <mlx90632_read_eeprom+0xe0>
        return ret;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	e0a8      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb, hi2c);
 8001280:	4668      	mov	r0, sp
 8001282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001286:	224c      	movs	r2, #76	; 0x4c
 8001288:	4619      	mov	r1, r3
 800128a:	f00a f829 	bl	800b2e0 <memcpy>
 800128e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001292:	cb0c      	ldmia	r3, {r2, r3}
 8001294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001296:	f242 4026 	movw	r0, #9254	; 0x2426
 800129a:	f000 ff4c 	bl	8002136 <mlx90632_i2c_read32>
 800129e:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da01      	bge.n	80012aa <mlx90632_read_eeprom+0x10a>
        return ret;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	e093      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa, hi2c);
 80012aa:	4668      	mov	r0, sp
 80012ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012b0:	224c      	movs	r2, #76	; 0x4c
 80012b2:	4619      	mov	r1, r3
 80012b4:	f00a f814 	bl	800b2e0 <memcpy>
 80012b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012bc:	cb0c      	ldmia	r3, {r2, r3}
 80012be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012c0:	f242 4028 	movw	r0, #9256	; 0x2428
 80012c4:	f000 ff37 	bl	8002136 <mlx90632_i2c_read32>
 80012c8:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da01      	bge.n	80012d4 <mlx90632_read_eeprom+0x134>
        return ret;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	e07e      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb, hi2c);
 80012d4:	4668      	mov	r0, sp
 80012d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012da:	224c      	movs	r2, #76	; 0x4c
 80012dc:	4619      	mov	r1, r3
 80012de:	f009 ffff 	bl	800b2e0 <memcpy>
 80012e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012e6:	cb0c      	ldmia	r3, {r2, r3}
 80012e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ea:	f242 402a 	movw	r0, #9258	; 0x242a
 80012ee:	f000 ff22 	bl	8002136 <mlx90632_i2c_read32>
 80012f2:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da01      	bge.n	80012fe <mlx90632_read_eeprom+0x15e>
        return ret;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	e069      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga, hi2c);
 80012fe:	4668      	mov	r0, sp
 8001300:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001304:	224c      	movs	r2, #76	; 0x4c
 8001306:	4619      	mov	r1, r3
 8001308:	f009 ffea 	bl	800b2e0 <memcpy>
 800130c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001310:	cb0c      	ldmia	r3, {r2, r3}
 8001312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001314:	f242 402c 	movw	r0, #9260	; 0x242c
 8001318:	f000 ff0d 	bl	8002136 <mlx90632_i2c_read32>
 800131c:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	da01      	bge.n	8001328 <mlx90632_read_eeprom+0x188>
        return ret;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	e054      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb, hi2c);
 8001328:	4668      	mov	r0, sp
 800132a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800132e:	224c      	movs	r2, #76	; 0x4c
 8001330:	4619      	mov	r1, r3
 8001332:	f009 ffd5 	bl	800b2e0 <memcpy>
 8001336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800133a:	cb0c      	ldmia	r3, {r2, r3}
 800133c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800133e:	f242 402e 	movw	r0, #9262	; 0x242e
 8001342:	f000 fecb 	bl	80020dc <mlx90632_i2c_read>
 8001346:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <mlx90632_read_eeprom+0x1b2>
        return ret;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	e03f      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha, hi2c);
 8001352:	4668      	mov	r0, sp
 8001354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001358:	224c      	movs	r2, #76	; 0x4c
 800135a:	4619      	mov	r1, r3
 800135c:	f009 ffc0 	bl	800b2e0 <memcpy>
 8001360:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001364:	cb0c      	ldmia	r3, {r2, r3}
 8001366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001368:	f242 4081 	movw	r0, #9345	; 0x2481
 800136c:	f000 feb6 	bl	80020dc <mlx90632_i2c_read>
 8001370:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b00      	cmp	r3, #0
 8001376:	da01      	bge.n	800137c <mlx90632_read_eeprom+0x1dc>
        return ret;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	e02a      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb, hi2c);
 800137c:	4668      	mov	r0, sp
 800137e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001382:	224c      	movs	r2, #76	; 0x4c
 8001384:	4619      	mov	r1, r3
 8001386:	f009 ffab 	bl	800b2e0 <memcpy>
 800138a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800138e:	cb0c      	ldmia	r3, {r2, r3}
 8001390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001392:	f242 4082 	movw	r0, #9346	; 0x2482
 8001396:	f000 fea1 	bl	80020dc <mlx90632_i2c_read>
 800139a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da01      	bge.n	80013a6 <mlx90632_read_eeprom+0x206>
        return ret;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	e015      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka, hi2c);
 80013a6:	4668      	mov	r0, sp
 80013a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ac:	224c      	movs	r2, #76	; 0x4c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f009 ff96 	bl	800b2e0 <memcpy>
 80013b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b8:	cb0c      	ldmia	r3, {r2, r3}
 80013ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013bc:	f242 402f 	movw	r0, #9263	; 0x242f
 80013c0:	f000 fe8c 	bl	80020dc <mlx90632_i2c_read>
 80013c4:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da01      	bge.n	80013d0 <mlx90632_read_eeprom+0x230>
        return ret;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	e000      	b.n	80013d2 <mlx90632_read_eeprom+0x232>
    return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	0000      	movs	r0, r0
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <mlx90632_start_extended_mode>:
#	    endif
    }
}

void mlx90632_start_extended_mode()
{
 80013e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013e4:	ed2d 8b02 	vpush	{d8}
 80013e8:	b0a1      	sub	sp, #132	; 0x84
 80013ea:	af1e      	add	r7, sp, #120	; 0x78
#   ifdef SSD1306_DISPLAY
    SSD1306_Clear();
 80013ec:	f002 f80b 	bl	8003406 <SSD1306_Clear>
#   endif

	HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c2, 0x3a << 1, 1, 100);
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	2201      	movs	r2, #1
 80013f4:	2174      	movs	r1, #116	; 0x74
 80013f6:	48a6      	ldr	r0, [pc, #664]	; (8001690 <mlx90632_start_extended_mode+0x2b0>)
 80013f8:	f003 fb20 	bl	8004a3c <HAL_I2C_IsDeviceReady>
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]

	if (result == HAL_OK) {
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d120      	bne.n	8001448 <mlx90632_start_extended_mode+0x68>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140a:	48a2      	ldr	r0, [pc, #648]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 800140c:	f002 fd99 	bl	8003f42 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001410:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001414:	f002 fa92 	bl	800393c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141c:	489d      	ldr	r0, [pc, #628]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 800141e:	f002 fd90 	bl	8003f42 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001426:	f002 fa89 	bl	800393c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	4899      	ldr	r0, [pc, #612]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 8001430:	f002 fd87 	bl	8003f42 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001438:	f002 fa80 	bl	800393c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800143c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001440:	4894      	ldr	r0, [pc, #592]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 8001442:	f002 fd7e 	bl	8003f42 <HAL_GPIO_TogglePin>
 8001446:	e01f      	b.n	8001488 <mlx90632_start_extended_mode+0xa8>
	} else {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144c:	4891      	ldr	r0, [pc, #580]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 800144e:	f002 fd78 	bl	8003f42 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001456:	f002 fa71 	bl	800393c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800145a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145e:	488d      	ldr	r0, [pc, #564]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 8001460:	f002 fd6f 	bl	8003f42 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001468:	f002 fa68 	bl	800393c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800146c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001470:	4888      	ldr	r0, [pc, #544]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 8001472:	f002 fd66 	bl	8003f42 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f002 fa5f 	bl	800393c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	4884      	ldr	r0, [pc, #528]	; (8001694 <mlx90632_start_extended_mode+0x2b4>)
 8001484:	f002 fd5d 	bl	8003f42 <HAL_GPIO_TogglePin>
	}

    mlx90632_set_meas_type(MLX90632_MTYP_EXTENDED, hi2c2);
 8001488:	4c81      	ldr	r4, [pc, #516]	; (8001690 <mlx90632_start_extended_mode+0x2b0>)
 800148a:	4668      	mov	r0, sp
 800148c:	f104 030c 	add.w	r3, r4, #12
 8001490:	2248      	movs	r2, #72	; 0x48
 8001492:	4619      	mov	r1, r3
 8001494:	f009 ff24 	bl	800b2e0 <memcpy>
 8001498:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800149c:	2011      	movs	r0, #17
 800149e:	f001 fb5d 	bl	8002b5c <mlx90632_set_meas_type>

    mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka, hi2c2);
 80014a2:	4a7b      	ldr	r2, [pc, #492]	; (8001690 <mlx90632_start_extended_mode+0x2b0>)
 80014a4:	ab09      	add	r3, sp, #36	; 0x24
 80014a6:	4611      	mov	r1, r2
 80014a8:	2254      	movs	r2, #84	; 0x54
 80014aa:	4618      	mov	r0, r3
 80014ac:	f009 ff18 	bl	800b2e0 <memcpy>
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <mlx90632_start_extended_mode+0x2b8>)
 80014b2:	9308      	str	r3, [sp, #32]
 80014b4:	4b79      	ldr	r3, [pc, #484]	; (800169c <mlx90632_start_extended_mode+0x2bc>)
 80014b6:	9307      	str	r3, [sp, #28]
 80014b8:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <mlx90632_start_extended_mode+0x2c0>)
 80014ba:	9306      	str	r3, [sp, #24]
 80014bc:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <mlx90632_start_extended_mode+0x2c4>)
 80014be:	9305      	str	r3, [sp, #20]
 80014c0:	4b79      	ldr	r3, [pc, #484]	; (80016a8 <mlx90632_start_extended_mode+0x2c8>)
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	4b79      	ldr	r3, [pc, #484]	; (80016ac <mlx90632_start_extended_mode+0x2cc>)
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <mlx90632_start_extended_mode+0x2d0>)
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <mlx90632_start_extended_mode+0x2d4>)
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <mlx90632_start_extended_mode+0x2d8>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4b79      	ldr	r3, [pc, #484]	; (80016bc <mlx90632_start_extended_mode+0x2dc>)
 80014d6:	4a7a      	ldr	r2, [pc, #488]	; (80016c0 <mlx90632_start_extended_mode+0x2e0>)
 80014d8:	497a      	ldr	r1, [pc, #488]	; (80016c4 <mlx90632_start_extended_mode+0x2e4>)
 80014da:	487b      	ldr	r0, [pc, #492]	; (80016c8 <mlx90632_start_extended_mode+0x2e8>)
 80014dc:	f7ff fe60 	bl	80011a0 <mlx90632_read_eeprom>

    while(!mlx90614_mode)
 80014e0:	e0c4      	b.n	800166c <mlx90632_start_extended_mode+0x28c>
    {

    	mlx90632_set_emissivity(0.85);
 80014e2:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8001688 <mlx90632_start_extended_mode+0x2a8>
 80014e6:	f000 fd65 	bl	8001fb4 <mlx90632_set_emissivity>

    	mlx90632_read_temp_raw_extended(&ambient_new_raw, &ambient_old_raw, &object_new_raw, hi2c2);
 80014ea:	4c69      	ldr	r4, [pc, #420]	; (8001690 <mlx90632_start_extended_mode+0x2b0>)
 80014ec:	4668      	mov	r0, sp
 80014ee:	1d23      	adds	r3, r4, #4
 80014f0:	2250      	movs	r2, #80	; 0x50
 80014f2:	4619      	mov	r1, r3
 80014f4:	f009 fef4 	bl	800b2e0 <memcpy>
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	4a74      	ldr	r2, [pc, #464]	; (80016cc <mlx90632_start_extended_mode+0x2ec>)
 80014fc:	4974      	ldr	r1, [pc, #464]	; (80016d0 <mlx90632_start_extended_mode+0x2f0>)
 80014fe:	4875      	ldr	r0, [pc, #468]	; (80016d4 <mlx90632_start_extended_mode+0x2f4>)
 8001500:	f000 ff9b 	bl	800243a <mlx90632_read_temp_raw_extended>

        ambient = mlx90632_calc_temp_ambient_extended(ambient_new_raw, ambient_old_raw,
 8001504:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <mlx90632_start_extended_mode+0x2f4>)
 8001506:	f9b3 0000 	ldrsh.w	r0, [r3]
 800150a:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <mlx90632_start_extended_mode+0x2f0>)
 800150c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <mlx90632_start_extended_mode+0x2dc>)
 8001512:	681d      	ldr	r5, [r3, #0]
 8001514:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <mlx90632_start_extended_mode+0x2e8>)
 8001516:	681e      	ldr	r6, [r3, #0]
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <mlx90632_start_extended_mode+0x2e4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a68      	ldr	r2, [pc, #416]	; (80016c0 <mlx90632_start_extended_mode+0x2e0>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	4960      	ldr	r1, [pc, #384]	; (80016a4 <mlx90632_start_extended_mode+0x2c4>)
 8001522:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001526:	9102      	str	r1, [sp, #8]
 8001528:	9201      	str	r2, [sp, #4]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4633      	mov	r3, r6
 800152e:	462a      	mov	r2, r5
 8001530:	4621      	mov	r1, r4
 8001532:	f001 f8a5 	bl	8002680 <mlx90632_calc_temp_ambient_extended>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fad7 	bl	8000af0 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4a64      	ldr	r2, [pc, #400]	; (80016d8 <mlx90632_start_extended_mode+0x2f8>)
 8001546:	6013      	str	r3, [r2, #0]
                                                      PT, PR, PG, PO, Gb);

        pre_ambient = mlx90632_preprocess_temp_ambient_extended(ambient_new_raw,
 8001548:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <mlx90632_start_extended_mode+0x2f4>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <mlx90632_start_extended_mode+0x2f0>)
 8001550:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001554:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <mlx90632_start_extended_mode+0x2c4>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ffbe 	bl	80024dc <mlx90632_preprocess_temp_ambient_extended>
 8001560:	ec53 2b10 	vmov	r2, r3, d0
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fac2 	bl	8000af0 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	4a5b      	ldr	r2, [pc, #364]	; (80016dc <mlx90632_start_extended_mode+0x2fc>)
 8001570:	6013      	str	r3, [r2, #0]
                                                                       ambient_old_raw, Gb);
        pre_object = mlx90632_preprocess_temp_object_extended(object_new_raw, ambient_new_raw,
 8001572:	4b56      	ldr	r3, [pc, #344]	; (80016cc <mlx90632_start_extended_mode+0x2ec>)
 8001574:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <mlx90632_start_extended_mode+0x2f4>)
 800157a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <mlx90632_start_extended_mode+0x2f0>)
 8001580:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <mlx90632_start_extended_mode+0x2b8>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	f001 f80d 	bl	80025a8 <mlx90632_preprocess_temp_object_extended>
 800158e:	ec53 2b10 	vmov	r2, r3, d0
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff faab 	bl	8000af0 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <mlx90632_start_extended_mode+0x300>)
 800159e:	6013      	str	r3, [r2, #0]
                                                                     ambient_old_raw, Ka);

        object = mlx90632_calc_temp_object_extended(pre_object, pre_ambient, ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 80015a0:	4b4f      	ldr	r3, [pc, #316]	; (80016e0 <mlx90632_start_extended_mode+0x300>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <mlx90632_start_extended_mode+0x2fc>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 80015b4:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <mlx90632_start_extended_mode+0x2f8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff69 	bl	8000490 <__aeabi_f2d>
 80015be:	4680      	mov	r8, r0
 80015c0:	4689      	mov	r9, r1
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <mlx90632_start_extended_mode+0x2d8>)
 80015c4:	681d      	ldr	r5, [r3, #0]
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <mlx90632_start_extended_mode+0x2d4>)
 80015c8:	681e      	ldr	r6, [r3, #0]
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <mlx90632_start_extended_mode+0x2c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <mlx90632_start_extended_mode+0x2d0>)
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	4936      	ldr	r1, [pc, #216]	; (80016ac <mlx90632_start_extended_mode+0x2cc>)
 80015d4:	6809      	ldr	r1, [r1, #0]
 80015d6:	4832      	ldr	r0, [pc, #200]	; (80016a0 <mlx90632_start_extended_mode+0x2c0>)
 80015d8:	f9b0 0000 	ldrsh.w	r0, [r0]
 80015dc:	4c2f      	ldr	r4, [pc, #188]	; (800169c <mlx90632_start_extended_mode+0x2bc>)
 80015de:	f9b4 4000 	ldrsh.w	r4, [r4]
 80015e2:	9404      	str	r4, [sp, #16]
 80015e4:	9003      	str	r0, [sp, #12]
 80015e6:	9102      	str	r1, [sp, #8]
 80015e8:	9201      	str	r2, [sp, #4]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4633      	mov	r3, r6
 80015ee:	462a      	mov	r2, r5
 80015f0:	ec49 8b10 	vmov	d0, r8, r9
 80015f4:	ee18 1a90 	vmov	r1, s17
 80015f8:	ee18 0a10 	vmov	r0, s16
 80015fc:	f001 f9d4 	bl	80029a8 <mlx90632_calc_temp_object_extended>
 8001600:	ec53 2b10 	vmov	r2, r3, d0
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa72 	bl	8000af0 <__aeabi_d2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4a35      	ldr	r2, [pc, #212]	; (80016e4 <mlx90632_start_extended_mode+0x304>)
 8001610:	6013      	str	r3, [r2, #0]

        float_temp_1 = object;
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <mlx90632_start_extended_mode+0x304>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a34      	ldr	r2, [pc, #208]	; (80016e8 <mlx90632_start_extended_mode+0x308>)
 8001618:	6013      	str	r3, [r2, #0]

		float_temp_to_char_temp(float_temp_1, char_temp_1);
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <mlx90632_start_extended_mode+0x308>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff36 	bl	8000490 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4830      	ldr	r0, [pc, #192]	; (80016ec <mlx90632_start_extended_mode+0x30c>)
 800162a:	ec43 2b10 	vmov	d0, r2, r3
 800162e:	f7ff fd2b 	bl	8001088 <float_temp_to_char_temp>
//		float_temp_to_char_temp(float_temp_2, char_temp_2);

#       ifdef SSD1306_DISPLAY
        SSD1306_GotoXY(0, 29);
 8001632:	211d      	movs	r1, #29
 8001634:	2000      	movs	r0, #0
 8001636:	f001 fe2b 	bl	8003290 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	492c      	ldr	r1, [pc, #176]	; (80016f0 <mlx90632_start_extended_mode+0x310>)
 800163e:	482b      	ldr	r0, [pc, #172]	; (80016ec <mlx90632_start_extended_mode+0x30c>)
 8001640:	f001 febc 	bl	80033bc <SSD1306_Puts>

        SSD1306_GotoXY(57, 29);
 8001644:	211d      	movs	r1, #29
 8001646:	2039      	movs	r0, #57	; 0x39
 8001648:	f001 fe22 	bl	8003290 <SSD1306_GotoXY>
        SSD1306_Puts("A", &Font_7x10, 1);
 800164c:	2201      	movs	r2, #1
 800164e:	4929      	ldr	r1, [pc, #164]	; (80016f4 <mlx90632_start_extended_mode+0x314>)
 8001650:	4829      	ldr	r0, [pc, #164]	; (80016f8 <mlx90632_start_extended_mode+0x318>)
 8001652:	f001 feb3 	bl	80033bc <SSD1306_Puts>

        SSD1306_GotoXY(70, 29);
 8001656:	211d      	movs	r1, #29
 8001658:	2046      	movs	r0, #70	; 0x46
 800165a:	f001 fe19 	bl	8003290 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	4923      	ldr	r1, [pc, #140]	; (80016f0 <mlx90632_start_extended_mode+0x310>)
 8001662:	4826      	ldr	r0, [pc, #152]	; (80016fc <mlx90632_start_extended_mode+0x31c>)
 8001664:	f001 feaa 	bl	80033bc <SSD1306_Puts>

        SSD1306_UpdateScreen();
 8001668:	f001 fd4a 	bl	8003100 <SSD1306_UpdateScreen>
    while(!mlx90614_mode)
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <mlx90632_start_extended_mode+0x320>)
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f43f af35 	beq.w	80014e2 <mlx90632_start_extended_mode+0x102>
#       endif
    }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	ecbd 8b02 	vpop	{d8}
 8001684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001688:	33333333 	.word	0x33333333
 800168c:	3feb3333 	.word	0x3feb3333
 8001690:	20000930 	.word	0x20000930
 8001694:	40020c00 	.word	0x40020c00
 8001698:	20000028 	.word	0x20000028
 800169c:	2000024c 	.word	0x2000024c
 80016a0:	20000026 	.word	0x20000026
 80016a4:	20000024 	.word	0x20000024
 80016a8:	20000020 	.word	0x20000020
 80016ac:	2000001c 	.word	0x2000001c
 80016b0:	20000018 	.word	0x20000018
 80016b4:	20000014 	.word	0x20000014
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000008 	.word	0x20000008
 80016c0:	2000000c 	.word	0x2000000c
 80016c4:	20000004 	.word	0x20000004
 80016c8:	20000000 	.word	0x20000000
 80016cc:	2000092c 	.word	0x2000092c
 80016d0:	20000988 	.word	0x20000988
 80016d4:	200009cc 	.word	0x200009cc
 80016d8:	20000a24 	.word	0x20000a24
 80016dc:	20000a7c 	.word	0x20000a7c
 80016e0:	20000984 	.word	0x20000984
 80016e4:	20000a20 	.word	0x20000a20
 80016e8:	20000244 	.word	0x20000244
 80016ec:	200009d0 	.word	0x200009d0
 80016f0:	20000034 	.word	0x20000034
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	0800b4f8 	.word	0x0800b4f8
 80016fc:	20000a80 	.word	0x20000a80
 8001700:	2000024e 	.word	0x2000024e

08001704 <mlx90614_start_standard_mode>:
#       endif
    }
}
//#elif defined(MLX90614)
void mlx90614_start_standard_mode()
{
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af14      	add	r7, sp, #80	; 0x50
    uint16_t mlx_addr_1 = device_scanner(hi2c1);
 800170a:	4c4e      	ldr	r4, [pc, #312]	; (8001844 <mlx90614_start_standard_mode+0x140>)
 800170c:	4668      	mov	r0, sp
 800170e:	f104 0310 	add.w	r3, r4, #16
 8001712:	2244      	movs	r2, #68	; 0x44
 8001714:	4619      	mov	r1, r3
 8001716:	f009 fde3 	bl	800b2e0 <memcpy>
 800171a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171e:	f7ff fbe1 	bl	8000ee4 <device_scanner>
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
    uint16_t mlx_addr_2 = device_scanner(hi2c2);
 8001726:	4c48      	ldr	r4, [pc, #288]	; (8001848 <mlx90614_start_standard_mode+0x144>)
 8001728:	4668      	mov	r0, sp
 800172a:	f104 0310 	add.w	r3, r4, #16
 800172e:	2244      	movs	r2, #68	; 0x44
 8001730:	4619      	mov	r1, r3
 8001732:	f009 fdd5 	bl	800b2e0 <memcpy>
 8001736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800173a:	f7ff fbd3 	bl	8000ee4 <device_scanner>
 800173e:	4603      	mov	r3, r0
 8001740:	80bb      	strh	r3, [r7, #4]
//
//    char char_temp_1[8];
//    char char_temp_2[8];

#   ifdef SSD1306_DISPLAY
    SSD1306_Clear();
 8001742:	f001 fe60 	bl	8003406 <SSD1306_Clear>
#   endif

    while(mlx90614_mode)
 8001746:	e072      	b.n	800182e <mlx90614_start_standard_mode+0x12a>
    {
        float_temp_1 = MLX90614_ReadTemp(mlx_addr_1, MLX90614_TOBJ1, hi2c1);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	b2dd      	uxtb	r5, r3
 800174c:	4c3d      	ldr	r4, [pc, #244]	; (8001844 <mlx90614_start_standard_mode+0x140>)
 800174e:	4668      	mov	r0, sp
 8001750:	f104 0308 	add.w	r3, r4, #8
 8001754:	224c      	movs	r2, #76	; 0x4c
 8001756:	4619      	mov	r1, r3
 8001758:	f009 fdc2 	bl	800b2e0 <memcpy>
 800175c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001760:	2107      	movs	r1, #7
 8001762:	4628      	mov	r0, r5
 8001764:	f000 fb00 	bl	8001d68 <MLX90614_ReadTemp>
 8001768:	eef0 7a40 	vmov.f32	s15, s0
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <mlx90614_start_standard_mode+0x148>)
 800176e:	edc3 7a00 	vstr	s15, [r3]
        float_temp_1 = MLX90614_temp_compensation(float_temp_1);
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <mlx90614_start_standard_mode+0x148>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe8a 	bl	8000490 <__aeabi_f2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b10 	vmov	d0, r2, r3
 8001784:	f000 fb50 	bl	8001e28 <MLX90614_temp_compensation>
 8001788:	ec53 2b10 	vmov	r2, r3, d0
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f9ae 	bl	8000af0 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <mlx90614_start_standard_mode+0x148>)
 8001798:	6013      	str	r3, [r2, #0]
        float_temp_2 = MLX90614_ReadTemp(mlx_addr_2, MLX90614_TOBJ1, hi2c2);
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	b2dd      	uxtb	r5, r3
 800179e:	4c2a      	ldr	r4, [pc, #168]	; (8001848 <mlx90614_start_standard_mode+0x144>)
 80017a0:	4668      	mov	r0, sp
 80017a2:	f104 0308 	add.w	r3, r4, #8
 80017a6:	224c      	movs	r2, #76	; 0x4c
 80017a8:	4619      	mov	r1, r3
 80017aa:	f009 fd99 	bl	800b2e0 <memcpy>
 80017ae:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017b2:	2107      	movs	r1, #7
 80017b4:	4628      	mov	r0, r5
 80017b6:	f000 fad7 	bl	8001d68 <MLX90614_ReadTemp>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <mlx90614_start_standard_mode+0x14c>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]

		float_temp_to_char_temp(float_temp_1, char_temp_1);
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <mlx90614_start_standard_mode+0x148>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe61 	bl	8000490 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4820      	ldr	r0, [pc, #128]	; (8001854 <mlx90614_start_standard_mode+0x150>)
 80017d4:	ec43 2b10 	vmov	d0, r2, r3
 80017d8:	f7ff fc56 	bl	8001088 <float_temp_to_char_temp>
		float_temp_to_char_temp(float_temp_2, char_temp_2);
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <mlx90614_start_standard_mode+0x14c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe55 	bl	8000490 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	481b      	ldr	r0, [pc, #108]	; (8001858 <mlx90614_start_standard_mode+0x154>)
 80017ec:	ec43 2b10 	vmov	d0, r2, r3
 80017f0:	f7ff fc4a 	bl	8001088 <float_temp_to_char_temp>

#       ifdef SSD1306_DISPLAY
        SSD1306_GotoXY(0, 29);
 80017f4:	211d      	movs	r1, #29
 80017f6:	2000      	movs	r0, #0
 80017f8:	f001 fd4a 	bl	8003290 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	4917      	ldr	r1, [pc, #92]	; (800185c <mlx90614_start_standard_mode+0x158>)
 8001800:	4814      	ldr	r0, [pc, #80]	; (8001854 <mlx90614_start_standard_mode+0x150>)
 8001802:	f001 fddb 	bl	80033bc <SSD1306_Puts>

        SSD1306_GotoXY(57, 29);
 8001806:	211d      	movs	r1, #29
 8001808:	2039      	movs	r0, #57	; 0x39
 800180a:	f001 fd41 	bl	8003290 <SSD1306_GotoXY>
        SSD1306_Puts("B", &Font_7x10, 1);
 800180e:	2201      	movs	r2, #1
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <mlx90614_start_standard_mode+0x15c>)
 8001812:	4814      	ldr	r0, [pc, #80]	; (8001864 <mlx90614_start_standard_mode+0x160>)
 8001814:	f001 fdd2 	bl	80033bc <SSD1306_Puts>

        SSD1306_GotoXY(70, 29);
 8001818:	211d      	movs	r1, #29
 800181a:	2046      	movs	r0, #70	; 0x46
 800181c:	f001 fd38 	bl	8003290 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001820:	2201      	movs	r2, #1
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <mlx90614_start_standard_mode+0x158>)
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <mlx90614_start_standard_mode+0x154>)
 8001826:	f001 fdc9 	bl	80033bc <SSD1306_Puts>

        SSD1306_UpdateScreen();
 800182a:	f001 fc69 	bl	8003100 <SSD1306_UpdateScreen>
    while(mlx90614_mode)
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <mlx90614_start_standard_mode+0x164>)
 8001830:	f993 3000 	ldrsb.w	r3, [r3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d187      	bne.n	8001748 <mlx90614_start_standard_mode+0x44>
        CDC_Transmit_FS(end, strlen(end));
#	    endif

	// HAL_Delay(10);
    }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	200008d8 	.word	0x200008d8
 8001848:	20000930 	.word	0x20000930
 800184c:	20000244 	.word	0x20000244
 8001850:	20000248 	.word	0x20000248
 8001854:	200009d0 	.word	0x200009d0
 8001858:	20000a80 	.word	0x20000a80
 800185c:	20000034 	.word	0x20000034
 8001860:	2000002c 	.word	0x2000002c
 8001864:	0800b4fc 	.word	0x0800b4fc
 8001868:	2000024e 	.word	0x2000024e

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b093      	sub	sp, #76	; 0x4c
 8001870:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f001 fff1 	bl	8003858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f84f 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 f995 	bl	8001ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800187e:	f000 f8b7 	bl	80019f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001882:	f000 f8e3 	bl	8001a4c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001886:	f008 fff7 	bl	800a878 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 800188a:	f000 f90d 	bl	8001aa8 <MX_I2C3_Init>
  MX_TIM1_Init();
 800188e:	f000 f939 	bl	8001b04 <MX_TIM1_Init>
     * Temp sensor 1 - I2C1, temp sensor 2 - I2C2, Display - I2C3
     */

  // Initialize Display
#ifdef SSD1306_DISPLAY
    if (SSD1306_Init(hi2c3) != 1)
 8001892:	4c1b      	ldr	r4, [pc, #108]	; (8001900 <main+0x94>)
 8001894:	4668      	mov	r0, sp
 8001896:	f104 0310 	add.w	r3, r4, #16
 800189a:	2244      	movs	r2, #68	; 0x44
 800189c:	4619      	mov	r1, r3
 800189e:	f009 fd1f 	bl	800b2e0 <memcpy>
 80018a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018a6:	f001 fa15 	bl	8002cd4 <SSD1306_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d00d      	beq.n	80018cc <main+0x60>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80018b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <main+0x98>)
 80018b6:	f002 fb44 	bl	8003f42 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 80018ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018be:	f002 f83d 	bl	800393c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80018c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c6:	480f      	ldr	r0, [pc, #60]	; (8001904 <main+0x98>)
 80018c8:	f002 fb3b 	bl	8003f42 <HAL_GPIO_TogglePin>
    }

    SSD1306_GotoXY (0,0);
 80018cc:	2100      	movs	r1, #0
 80018ce:	2000      	movs	r0, #0
 80018d0:	f001 fcde 	bl	8003290 <SSD1306_GotoXY>
    SSD1306_Puts ("initialize", &Font_11x18, 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	490c      	ldr	r1, [pc, #48]	; (8001908 <main+0x9c>)
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <main+0xa0>)
 80018da:	f001 fd6f 	bl	80033bc <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80018de:	f001 fc0f 	bl	8003100 <SSD1306_UpdateScreen>
#elif defined(MLX90632_DEBUG_MODE)
    mlx90632_start_debugging(mlx_addr_1, hi2c1);
#endif


    HAL_TIM_Base_Start_IT(&htim1);
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <main+0xa4>)
 80018e4:	f005 fbbc 	bl	8007060 <HAL_TIM_Base_Start_IT>
    // main cycle
    while(1)
    {
		if (mlx90614_mode)
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <main+0xa8>)
 80018ea:	f993 3000 	ldrsb.w	r3, [r3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <main+0x8c>
			mlx90614_start_standard_mode();
 80018f2:	f7ff ff07 	bl	8001704 <mlx90614_start_standard_mode>
 80018f6:	e7f7      	b.n	80018e8 <main+0x7c>
		else
			mlx90632_start_extended_mode();
 80018f8:	f7ff fd72 	bl	80013e0 <mlx90632_start_extended_mode>
		if (mlx90614_mode)
 80018fc:	e7f4      	b.n	80018e8 <main+0x7c>
 80018fe:	bf00      	nop
 8001900:	20000880 	.word	0x20000880
 8001904:	40020c00 	.word	0x40020c00
 8001908:	20000034 	.word	0x20000034
 800190c:	0800b500 	.word	0x0800b500
 8001910:	200009d8 	.word	0x200009d8
 8001914:	2000024e 	.word	0x2000024e

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	; 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	2230      	movs	r2, #48	; 0x30
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f009 fce8 	bl	800b2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <SystemClock_Config+0xd0>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <SystemClock_Config+0xd0>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <SystemClock_Config+0xd0>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <SystemClock_Config+0xd4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <SystemClock_Config+0xd4>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <SystemClock_Config+0xd4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197e:	2301      	movs	r3, #1
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001982:	2310      	movs	r3, #16
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001986:	2302      	movs	r3, #2
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001990:	230f      	movs	r3, #15
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001994:	2390      	movs	r3, #144	; 0x90
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001998:	2302      	movs	r3, #2
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800199c:	2305      	movs	r3, #5
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 fed7 	bl	8006758 <HAL_RCC_OscConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019b0:	f000 f976 	bl	8001ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	230f      	movs	r3, #15
 80019b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 f93a 	bl	8006c48 <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019da:	f000 f961 	bl	8001ca0 <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	; 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_I2C1_Init+0x50>)
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <MX_I2C1_Init+0x54>)
 80019f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_I2C1_Init+0x50>)
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x58>)
 80019fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_I2C1_Init+0x50>)
 8001a2e:	f002 faa3 	bl	8003f78 <HAL_I2C_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a38:	f000 f932 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200008d8 	.word	0x200008d8
 8001a44:	40005400 	.word	0x40005400
 8001a48:	000186a0 	.word	0x000186a0

08001a4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <MX_I2C2_Init+0x54>)
 8001a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <MX_I2C2_Init+0x58>)
 8001a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_I2C2_Init+0x50>)
 8001a8a:	f002 fa75 	bl	8003f78 <HAL_I2C_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a94:	f000 f904 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000930 	.word	0x20000930
 8001aa0:	40005800 	.word	0x40005800
 8001aa4:	000186a0 	.word	0x000186a0

08001aa8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <MX_I2C3_Init+0x54>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ab4:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_I2C3_Init+0x58>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_I2C3_Init+0x50>)
 8001ae6:	f002 fa47 	bl	8003f78 <HAL_I2C_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001af0:	f000 f8d6 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000880 	.word	0x20000880
 8001afc:	40005c00 	.word	0x40005c00
 8001b00:	00061a80 	.word	0x00061a80

08001b04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <MX_TIM1_Init+0xa0>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b28:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b36:	2227      	movs	r2, #39	; 0x27
 8001b38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b4e:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b50:	f005 fa36 	bl	8006fc0 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b5a:	f000 f8a1 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b6c:	f005 fbf0 	bl	8007350 <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b76:	f000 f893 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_TIM1_Init+0x9c>)
 8001b88:	f005 fe0c 	bl	80077a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001b92:	f000 f885 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200009d8 	.word	0x200009d8
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a2c      	ldr	r2, [pc, #176]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_GPIO_Init+0xf0>)
 8001c52:	f002 f95d 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c56:	2301      	movs	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001c6a:	f001 ff9d 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xf0>)
 8001c88:	f001 ff8e 	bl	8003ba8 <HAL_GPIO_Init>

}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>

08001caa <MLX90614_ReadReg>:
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}

uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c)
{
 8001caa:	b082      	sub	sp, #8
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	71bb      	strb	r3, [r7, #6]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	b299      	uxth	r1, r3
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001cd0:	2364      	movs	r3, #100	; 0x64
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f002 fc86 	bl	80045f0 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8001cfc:	7c3b      	ldrb	r3, [r7, #16]
 8001cfe:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8001d00:	7c7b      	ldrb	r3, [r7, #17]
 8001d02:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	2105      	movs	r1, #5
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f8bc 	bl	8000e88 <CRC8_Calc>
 8001d10:	4603      	mov	r3, r0
 8001d12:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 8001d14:	7c7b      	ldrb	r3, [r7, #17]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	7c3b      	ldrb	r3, [r7, #16]
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 8001d24:	7cbb      	ldrb	r3, [r7, #18]
 8001d26:	7d7a      	ldrb	r2, [r7, #21]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <MLX90614_ReadReg+0x86>
		data = 0x0000;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10b      	bne.n	8001d4e <MLX90614_ReadReg+0xa4>
 8001d36:	7cbb      	ldrb	r3, [r7, #18]
 8001d38:	8afc      	ldrh	r4, [r7, #22]
 8001d3a:	79b8      	ldrb	r0, [r7, #6]
 8001d3c:	79f9      	ldrb	r1, [r7, #7]
 8001d3e:	7d7a      	ldrb	r2, [r7, #21]
 8001d40:	9201      	str	r2, [sp, #4]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4623      	mov	r3, r4
 8001d46:	4602      	mov	r2, r0
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f000 f859 	bl	8001e00 <MLX90614_SendDebugMsg>

	HAL_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f001 fdf4 	bl	800393c <HAL_Delay>
	return data;
 8001d54:	8afb      	ldrh	r3, [r7, #22]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d60:	b002      	add	sp, #8
 8001d62:	4770      	bx	lr
 8001d64:	0000      	movs	r0, r0
	...

08001d68 <MLX90614_ReadTemp>:

float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr, I2C_HandleTypeDef hi2c)
{
 8001d68:	b082      	sub	sp, #8
 8001d6a:	b5b0      	push	{r4, r5, r7, lr}
 8001d6c:	b098      	sub	sp, #96	; 0x60
 8001d6e:	af14      	add	r7, sp, #80	; 0x50
 8001d70:	f107 0420 	add.w	r4, r7, #32
 8001d74:	e884 000c 	stmia.w	r4, {r2, r3}
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF, hi2c);
 8001d80:	79bd      	ldrb	r5, [r7, #6]
 8001d82:	79fc      	ldrb	r4, [r7, #7]
 8001d84:	4668      	mov	r0, sp
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	2250      	movs	r2, #80	; 0x50
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f009 faa7 	bl	800b2e0 <memcpy>
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2200      	movs	r2, #0
 8001d96:	4629      	mov	r1, r5
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff ff86 	bl	8001caa <MLX90614_ReadReg>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	81fb      	strh	r3, [r7, #14]

	temp = data*0.02 - 273.15; // from datasheet
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb61 	bl	800046c <__aeabi_i2d>
 8001daa:	a311      	add	r3, pc, #68	; (adr r3, 8001df0 <MLX90614_ReadTemp+0x88>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fbc6 	bl	8000540 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	a30e      	add	r3, pc, #56	; (adr r3, 8001df8 <MLX90614_ReadTemp+0x90>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fa05 	bl	80001d0 <__aeabi_dsub>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe8f 	bl	8000af0 <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60bb      	str	r3, [r7, #8]

	return temp;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	ee07 3a90 	vmov	s15, r3
}
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001de8:	b002      	add	sp, #8
 8001dea:	4770      	bx	lr
 8001dec:	f3af 8000 	nop.w
 8001df0:	47ae147b 	.word	0x47ae147b
 8001df4:	3f947ae1 	.word	0x3f947ae1
 8001df8:	66666666 	.word	0x66666666
 8001dfc:	40711266 	.word	0x40711266

08001e00 <MLX90614_SendDebugMsg>:

void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc)
{
 8001e00:	b490      	push	{r4, r7}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4604      	mov	r4, r0
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	4603      	mov	r3, r0
 8001e14:	71bb      	strb	r3, [r7, #6]
 8001e16:	460b      	mov	r3, r1
 8001e18:	717b      	strb	r3, [r7, #5]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	807b      	strh	r3, [r7, #2]
		// TODO: Do something if error
	}
	else if (op_type == MLX90614_DBG_MSG_R) {
		// TODO: Do something if error
	}
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc90      	pop	{r4, r7}
 8001e26:	4770      	bx	lr

08001e28 <MLX90614_temp_compensation>:

double MLX90614_temp_compensation(double x)
{
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	ed87 0b00 	vstr	d0, [r7]
	double terms[] = {
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <MLX90614_temp_compensation+0xa4>)
 8001e34:	f107 0408 	add.w	r4, r7, #8
 8001e38:	461d      	mov	r5, r3
 8001e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e42:	e884 0003 	stmia.w	r4, {r0, r1}
		4.5285558056644653e+001,
		-7.7381865153331808e-001,
		1.4986086918853544e-002
	};

	size_t csz = sizeof terms / sizeof *terms;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]

	double t = 1;
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <MLX90614_temp_compensation+0xa8>)
 8001e50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double r = 0;
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (int i = 0; i < csz;i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
 8001e64:	e022      	b.n	8001eac <MLX90614_temp_compensation+0x84>
	{
		r += terms[i] * t;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b30      	subs	r3, #48	; 0x30
 8001e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e7a:	f7fe fb61 	bl	8000540 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e86:	f7fe f9a5 	bl	80001d4 <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		t *= x;
 8001e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e9a:	f7fe fb51 	bl	8000540 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for (int i = 0; i < csz;i++)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8d8      	bhi.n	8001e66 <MLX90614_temp_compensation+0x3e>
	}
	return r;
 8001eb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001eb8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec0:	eef0 0a67 	vmov.f32	s1, s15
 8001ec4:	3738      	adds	r7, #56	; 0x38
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	0800b510 	.word	0x0800b510
 8001ed0:	3ff00000 	.word	0x3ff00000

08001ed4 <mlx90632_start_measurement>:
#ifndef STATIC
#define STATIC static
#endif

int mlx90632_start_measurement(I2C_HandleTypeDef hi2c)
{
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	b590      	push	{r4, r7, lr}
 8001ed8:	b099      	sub	sp, #100	; 0x64
 8001eda:	af14      	add	r7, sp, #80	; 0x50
 8001edc:	f107 0420 	add.w	r4, r7, #32
 8001ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 8001ee4:	2364      	movs	r3, #100	; 0x64
 8001ee6:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 8001ee8:	1dbc      	adds	r4, r7, #6
 8001eea:	4668      	mov	r0, sp
 8001eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef0:	224c      	movs	r2, #76	; 0x4c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f009 f9f4 	bl	800b2e0 <memcpy>
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	cb0c      	ldmia	r3, {r2, r3}
 8001efe:	4621      	mov	r1, r4
 8001f00:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001f04:	f000 f8ea 	bl	80020dc <mlx90632_i2c_read>
 8001f08:	60b8      	str	r0, [r7, #8]
    if (ret < 0) {
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da01      	bge.n	8001f14 <mlx90632_start_measurement+0x40>
    	  return ret;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	e047      	b.n	8001fa4 <mlx90632_start_measurement+0xd0>
    }


    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY), hi2c);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	b29c      	uxth	r4, r3
 8001f1c:	4668      	mov	r0, sp
 8001f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f22:	224c      	movs	r2, #76	; 0x4c
 8001f24:	4619      	mov	r1, r3
 8001f26:	f009 f9db 	bl	800b2e0 <memcpy>
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	cb0c      	ldmia	r3, {r2, r3}
 8001f30:	4621      	mov	r1, r4
 8001f32:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001f36:	f000 f92e 	bl	8002196 <mlx90632_i2c_write>
 8001f3a:	60b8      	str	r0, [r7, #8]
    if (ret < 0){
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da22      	bge.n	8001f88 <mlx90632_start_measurement+0xb4>
  	  return ret;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	e02e      	b.n	8001fa4 <mlx90632_start_measurement+0xd0>
  }

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 8001f46:	1dbc      	adds	r4, r7, #6
 8001f48:	4668      	mov	r0, sp
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	224c      	movs	r2, #76	; 0x4c
 8001f50:	4619      	mov	r1, r3
 8001f52:	f009 f9c5 	bl	800b2e0 <memcpy>
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	cb0c      	ldmia	r3, {r2, r3}
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001f62:	f000 f8bb 	bl	80020dc <mlx90632_i2c_read>
 8001f66:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da01      	bge.n	8001f72 <mlx90632_start_measurement+0x9e>
            return ret;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	e018      	b.n	8001fa4 <mlx90632_start_measurement+0xd0>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <mlx90632_start_measurement+0xc0>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 8001f7c:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8001f80:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f84:	f000 f931 	bl	80021ea <usleep>
    while (tries-- > 0)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	60fa      	str	r2, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	dcd9      	bgt.n	8001f46 <mlx90632_start_measurement+0x72>
 8001f92:	e000      	b.n	8001f96 <mlx90632_start_measurement+0xc2>
            break;
 8001f94:	bf00      	nop
    }

    if (tries < 0)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da02      	bge.n	8001fa2 <mlx90632_start_measurement+0xce>
    {
        // data not ready
        return -ETIMEDOUT;
 8001f9c:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001fa0:	e000      	b.n	8001fa4 <mlx90632_start_measurement+0xd0>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001fae:	b004      	add	sp, #16
 8001fb0:	4770      	bx	lr
	...

08001fb4 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 8001fbe:	4905      	ldr	r1, [pc, #20]	; (8001fd4 <mlx90632_set_emissivity+0x20>)
 8001fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	20000250 	.word	0x20000250

08001fd8 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <mlx90632_get_emissivity+0x38>)
 8001fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f7fe fd11 	bl	8000a10 <__aeabi_dcmpeq>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <mlx90632_get_emissivity+0x3c>)
 8001ffa:	e002      	b.n	8002002 <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <mlx90632_get_emissivity+0x38>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 8002006:	eeb0 0a47 	vmov.f32	s0, s14
 800200a:	eef0 0a67 	vmov.f32	s1, s15
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000250 	.word	0x20000250
 8002014:	3ff00000 	.word	0x3ff00000

08002018 <mlx90632_addressed_reset>:

    return 0;
}

int32_t mlx90632_addressed_reset(I2C_HandleTypeDef hi2c)
{
 8002018:	b084      	sub	sp, #16
 800201a:	b590      	push	{r4, r7, lr}
 800201c:	b097      	sub	sp, #92	; 0x5c
 800201e:	af14      	add	r7, sp, #80	; 0x50
 8002020:	f107 0418 	add.w	r4, r7, #24
 8002024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_value;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value, hi2c);
 8002028:	463c      	mov	r4, r7
 800202a:	4668      	mov	r0, sp
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	224c      	movs	r2, #76	; 0x4c
 8002032:	4619      	mov	r1, r3
 8002034:	f009 f954 	bl	800b2e0 <memcpy>
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	cb0c      	ldmia	r3, {r2, r3}
 800203e:	4621      	mov	r1, r4
 8002040:	f243 0001 	movw	r0, #12289	; 0x3001
 8002044:	f000 f84a 	bl	80020dc <mlx90632_i2c_read>
 8002048:	6078      	str	r0, [r7, #4]
//    if (ret < 0)
//        return ret;

    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
 800204a:	883b      	ldrh	r3, [r7, #0]
 800204c:	807b      	strh	r3, [r7, #2]
    reg_ctrl |= MLX90632_PWR_STATUS_STEP;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	807b      	strh	r3, [r7, #2]
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8002056:	887c      	ldrh	r4, [r7, #2]
 8002058:	4668      	mov	r0, sp
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	224c      	movs	r2, #76	; 0x4c
 8002060:	4619      	mov	r1, r3
 8002062:	f009 f93d 	bl	800b2e0 <memcpy>
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	cb0c      	ldmia	r3, {r2, r3}
 800206c:	4621      	mov	r1, r4
 800206e:	f243 0001 	movw	r0, #12289	; 0x3001
 8002072:	f000 f890 	bl	8002196 <mlx90632_i2c_write>
 8002076:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	da01      	bge.n	8002082 <mlx90632_addressed_reset+0x6a>
        return ret;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	e025      	b.n	80020ce <mlx90632_addressed_reset+0xb6>

    ret = mlx90632_i2c_write(0x3005, MLX90632_RESET_CMD, hi2c);
 8002082:	4668      	mov	r0, sp
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	224c      	movs	r2, #76	; 0x4c
 800208a:	4619      	mov	r1, r3
 800208c:	f009 f928 	bl	800b2e0 <memcpy>
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	cb0c      	ldmia	r3, {r2, r3}
 8002096:	2106      	movs	r1, #6
 8002098:	f243 0005 	movw	r0, #12293	; 0x3005
 800209c:	f000 f87b 	bl	8002196 <mlx90632_i2c_write>
 80020a0:	6078      	str	r0, [r7, #4]
//    if (ret < 0)
//        return ret;

    usleep(150, 200);
 80020a2:	21c8      	movs	r1, #200	; 0xc8
 80020a4:	2096      	movs	r0, #150	; 0x96
 80020a6:	f000 f8a0 	bl	80021ea <usleep>

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value, hi2c);
 80020aa:	883c      	ldrh	r4, [r7, #0]
 80020ac:	4668      	mov	r0, sp
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	224c      	movs	r2, #76	; 0x4c
 80020b4:	4619      	mov	r1, r3
 80020b6:	f009 f913 	bl	800b2e0 <memcpy>
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	cb0c      	ldmia	r3, {r2, r3}
 80020c0:	4621      	mov	r1, r4
 80020c2:	f243 0001 	movw	r0, #12289	; 0x3001
 80020c6:	f000 f866 	bl	8002196 <mlx90632_i2c_write>
 80020ca:	6078      	str	r0, [r7, #4]

    return ret;
 80020cc:	687b      	ldr	r3, [r7, #4]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020d8:	b004      	add	sp, #16
 80020da:	4770      	bx	lr

080020dc <mlx90632_i2c_read>:
#define CHIP_ADDRESS 0x3a << 1

/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value, I2C_HandleTypeDef hi2c)
{
 80020dc:	b082      	sub	sp, #8
 80020de:	b580      	push	{r7, lr}
 80020e0:	b088      	sub	sp, #32
 80020e2:	af04      	add	r7, sp, #16
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	f107 0118 	add.w	r1, r7, #24
 80020ea:	e881 000c 	stmia.w	r1, {r2, r3}
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	2364      	movs	r3, #100	; 0x64
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2302      	movs	r3, #2
 8002104:	2174      	movs	r1, #116	; 0x74
 8002106:	f107 0018 	add.w	r0, r7, #24
 800210a:	f002 fa71 	bl	80045f0 <HAL_I2C_Mem_Read>
 800210e:	4603      	mov	r3, r0
 8002110:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 8002112:	7a7b      	ldrb	r3, [r7, #9]
 8002114:	b21a      	sxth	r2, r3
 8002116:	7a3b      	ldrb	r3, [r7, #8]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21b      	sxth	r3, r3
 8002120:	b29a      	uxth	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	801a      	strh	r2, [r3, #0]
	return ret;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002132:	b002      	add	sp, #8
 8002134:	4770      	bx	lr

08002136 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address, uint32_t *value, I2C_HandleTypeDef hi2c)
{
 8002136:	b082      	sub	sp, #8
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af04      	add	r7, sp, #16
 800213e:	6039      	str	r1, [r7, #0]
 8002140:	f107 0118 	add.w	r1, r7, #24
 8002144:	e881 000c 	stmia.w	r1, {r2, r3}
 8002148:	4603      	mov	r3, r0
 800214a:	80fb      	strh	r3, [r7, #6]
	uint8_t data[4];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	2364      	movs	r3, #100	; 0x64
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2304      	movs	r3, #4
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2302      	movs	r3, #2
 800215e:	2174      	movs	r1, #116	; 0x74
 8002160:	f107 0018 	add.w	r0, r7, #24
 8002164:	f002 fa44 	bl	80045f0 <HAL_I2C_Mem_Read>
 8002168:	4603      	mov	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 800216c:	7abb      	ldrb	r3, [r7, #10]
 800216e:	061a      	lsls	r2, r3, #24
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	431a      	orrs	r2, r3
 8002176:	7a3b      	ldrb	r3, [r7, #8]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	4313      	orrs	r3, r2
 800217c:	7a7a      	ldrb	r2, [r7, #9]
 800217e:	4313      	orrs	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	601a      	str	r2, [r3, #0]
	return ret;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002192:	b002      	add	sp, #8
 8002194:	4770      	bx	lr

08002196 <mlx90632_i2c_write>:

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value, I2C_HandleTypeDef hi2c) {
 8002196:	b082      	sub	sp, #8
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af04      	add	r7, sp, #16
 800219e:	f107 0c18 	add.w	ip, r7, #24
 80021a2:	e88c 000c 	stmia.w	ip, {r2, r3}
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
 80021aa:	460b      	mov	r3, r1
 80021ac:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80021b8:	88bb      	ldrh	r3, [r7, #4]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 80021be:	88fa      	ldrh	r2, [r7, #6]
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2302      	movs	r3, #2
 80021d0:	2174      	movs	r1, #116	; 0x74
 80021d2:	f107 0018 	add.w	r0, r7, #24
 80021d6:	f002 f911 	bl	80043fc <HAL_I2C_Mem_Write>
 80021da:	4603      	mov	r3, r0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021e6:	b002      	add	sp, #8
 80021e8:	4770      	bx	lr

080021ea <usleep>:

void usleep(int min_range, int max_range) {
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
	while(--min_range);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <usleep+0xa>
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <mlx90632_read_temp_ambient_raw_extended>:
#ifndef STATIC
#define STATIC static
#endif

STATIC int32_t mlx90632_read_temp_ambient_raw_extended(int16_t *ambient_new_raw, int16_t *ambient_old_raw, I2C_HandleTypeDef hi2c)
{
 800220e:	b082      	sub	sp, #8
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b099      	sub	sp, #100	; 0x64
 8002214:	af14      	add	r7, sp, #80	; 0x50
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	f107 0120 	add.w	r1, r7, #32
 800221e:	e881 000c 	stmia.w	r1, {r2, r3}
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(17), &read_tmp, hi2c);
 8002222:	f107 040a 	add.w	r4, r7, #10
 8002226:	4668      	mov	r0, sp
 8002228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222c:	224c      	movs	r2, #76	; 0x4c
 800222e:	4619      	mov	r1, r3
 8002230:	f009 f856 	bl	800b2e0 <memcpy>
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	cb0c      	ldmia	r3, {r2, r3}
 800223a:	4621      	mov	r1, r4
 800223c:	f244 0035 	movw	r0, #16437	; 0x4035
 8002240:	f7ff ff4c 	bl	80020dc <mlx90632_i2c_read>
 8002244:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	da01      	bge.n	8002250 <mlx90632_read_temp_ambient_raw_extended+0x42>
        return ret;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	e01f      	b.n	8002290 <mlx90632_read_temp_ambient_raw_extended+0x82>
    *ambient_new_raw = (int16_t)read_tmp;
 8002250:	897b      	ldrh	r3, [r7, #10]
 8002252:	b21a      	sxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(18), &read_tmp, hi2c);
 8002258:	f107 040a 	add.w	r4, r7, #10
 800225c:	4668      	mov	r0, sp
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	224c      	movs	r2, #76	; 0x4c
 8002264:	4619      	mov	r1, r3
 8002266:	f009 f83b 	bl	800b2e0 <memcpy>
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	cb0c      	ldmia	r3, {r2, r3}
 8002270:	4621      	mov	r1, r4
 8002272:	f244 0038 	movw	r0, #16440	; 0x4038
 8002276:	f7ff ff31 	bl	80020dc <mlx90632_i2c_read>
 800227a:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	da01      	bge.n	8002286 <mlx90632_read_temp_ambient_raw_extended+0x78>
        return ret;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	e004      	b.n	8002290 <mlx90632_read_temp_ambient_raw_extended+0x82>
    *ambient_old_raw = (int16_t)read_tmp;
 8002286:	897b      	ldrh	r3, [r7, #10]
 8002288:	b21a      	sxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	801a      	strh	r2, [r3, #0]

    return ret;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800229a:	b002      	add	sp, #8
 800229c:	4770      	bx	lr

0800229e <mlx90632_read_temp_object_raw_extended>:

STATIC int32_t mlx90632_read_temp_object_raw_extended(int16_t *object_new_raw, I2C_HandleTypeDef hi2c)
{
 800229e:	b084      	sub	sp, #16
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b09b      	sub	sp, #108	; 0x6c
 80022a4:	af14      	add	r7, sp, #80	; 0x50
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80022ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret;
    uint16_t read_tmp;
    int32_t read;

    ret = mlx90632_i2c_read(MLX90632_RAM_1(17), &read_tmp, hi2c);
 80022b0:	f107 040e 	add.w	r4, r7, #14
 80022b4:	4668      	mov	r0, sp
 80022b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ba:	224c      	movs	r2, #76	; 0x4c
 80022bc:	4619      	mov	r1, r3
 80022be:	f009 f80f 	bl	800b2e0 <memcpy>
 80022c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c6:	cb0c      	ldmia	r3, {r2, r3}
 80022c8:	4621      	mov	r1, r4
 80022ca:	f244 0033 	movw	r0, #16435	; 0x4033
 80022ce:	f7ff ff05 	bl	80020dc <mlx90632_i2c_read>
 80022d2:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da01      	bge.n	80022de <mlx90632_read_temp_object_raw_extended+0x40>
        return ret;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	e0a6      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    read = (int16_t)read_tmp;
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(17), &read_tmp, hi2c);
 80022e4:	f107 040e 	add.w	r4, r7, #14
 80022e8:	4668      	mov	r0, sp
 80022ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ee:	224c      	movs	r2, #76	; 0x4c
 80022f0:	4619      	mov	r1, r3
 80022f2:	f008 fff5 	bl	800b2e0 <memcpy>
 80022f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fa:	cb0c      	ldmia	r3, {r2, r3}
 80022fc:	4621      	mov	r1, r4
 80022fe:	f244 0034 	movw	r0, #16436	; 0x4034
 8002302:	f7ff feeb 	bl	80020dc <mlx90632_i2c_read>
 8002306:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da01      	bge.n	8002312 <mlx90632_read_temp_object_raw_extended+0x74>
        return ret;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	e08c      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read - (int16_t)read_tmp;
 8002312:	89fb      	ldrh	r3, [r7, #14]
 8002314:	b21b      	sxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(18), &read_tmp, hi2c);
 800231e:	f107 040e 	add.w	r4, r7, #14
 8002322:	4668      	mov	r0, sp
 8002324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002328:	224c      	movs	r2, #76	; 0x4c
 800232a:	4619      	mov	r1, r3
 800232c:	f008 ffd8 	bl	800b2e0 <memcpy>
 8002330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002334:	cb0c      	ldmia	r3, {r2, r3}
 8002336:	4621      	mov	r1, r4
 8002338:	f244 0036 	movw	r0, #16438	; 0x4036
 800233c:	f7ff fece 	bl	80020dc <mlx90632_i2c_read>
 8002340:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	da01      	bge.n	800234c <mlx90632_read_temp_object_raw_extended+0xae>
        return ret;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	e06f      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read - (int16_t)read_tmp;
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	b21b      	sxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(18), &read_tmp, hi2c);
 8002358:	f107 040e 	add.w	r4, r7, #14
 800235c:	4668      	mov	r0, sp
 800235e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002362:	224c      	movs	r2, #76	; 0x4c
 8002364:	4619      	mov	r1, r3
 8002366:	f008 ffbb 	bl	800b2e0 <memcpy>
 800236a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236e:	cb0c      	ldmia	r3, {r2, r3}
 8002370:	4621      	mov	r1, r4
 8002372:	f244 0037 	movw	r0, #16439	; 0x4037
 8002376:	f7ff feb1 	bl	80020dc <mlx90632_i2c_read>
 800237a:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	da01      	bge.n	8002386 <mlx90632_read_temp_object_raw_extended+0xe8>
        return ret;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	e052      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    read = (read + (int16_t)read_tmp) / 2;
 8002386:	89fb      	ldrh	r3, [r7, #14]
 8002388:	b21b      	sxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	0fda      	lsrs	r2, r3, #31
 8002392:	4413      	add	r3, r2
 8002394:	105b      	asrs	r3, r3, #1
 8002396:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(19), &read_tmp, hi2c);
 8002398:	f107 040e 	add.w	r4, r7, #14
 800239c:	4668      	mov	r0, sp
 800239e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023a2:	224c      	movs	r2, #76	; 0x4c
 80023a4:	4619      	mov	r1, r3
 80023a6:	f008 ff9b 	bl	800b2e0 <memcpy>
 80023aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ae:	cb0c      	ldmia	r3, {r2, r3}
 80023b0:	4621      	mov	r1, r4
 80023b2:	f244 0039 	movw	r0, #16441	; 0x4039
 80023b6:	f7ff fe91 	bl	80020dc <mlx90632_i2c_read>
 80023ba:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da01      	bge.n	80023c6 <mlx90632_read_temp_object_raw_extended+0x128>
        return ret;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	e032      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read + (int16_t)read_tmp;
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(19), &read_tmp, hi2c);
 80023d2:	f107 040e 	add.w	r4, r7, #14
 80023d6:	4668      	mov	r0, sp
 80023d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023dc:	224c      	movs	r2, #76	; 0x4c
 80023de:	4619      	mov	r1, r3
 80023e0:	f008 ff7e 	bl	800b2e0 <memcpy>
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	cb0c      	ldmia	r3, {r2, r3}
 80023ea:	4621      	mov	r1, r4
 80023ec:	f244 003a 	movw	r0, #16442	; 0x403a
 80023f0:	f7ff fe74 	bl	80020dc <mlx90632_i2c_read>
 80023f4:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da01      	bge.n	8002400 <mlx90632_read_temp_object_raw_extended+0x162>
        return ret;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	e015      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read + (int16_t)read_tmp;
 8002400:	89fb      	ldrh	r3, [r7, #14]
 8002402:	b21b      	sxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

    if (read > 32767 || read < -32768)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002412:	da03      	bge.n	800241c <mlx90632_read_temp_object_raw_extended+0x17e>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800241a:	da02      	bge.n	8002422 <mlx90632_read_temp_object_raw_extended+0x184>
        return -EINVAL;
 800241c:	f06f 0315 	mvn.w	r3, #21
 8002420:	e004      	b.n	800242c <mlx90632_read_temp_object_raw_extended+0x18e>

    *object_new_raw = (int16_t)read;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	b21a      	sxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	801a      	strh	r2, [r3, #0]

    return ret;
 800242a:	697b      	ldr	r3, [r7, #20]
}
 800242c:	4618      	mov	r0, r3
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002436:	b004      	add	sp, #16
 8002438:	4770      	bx	lr

0800243a <mlx90632_read_temp_raw_extended>:

int32_t mlx90632_read_temp_raw_extended(int16_t *ambient_new_raw, int16_t *ambient_old_raw, int16_t *object_new_raw, I2C_HandleTypeDef hi2c)
{
 800243a:	b082      	sub	sp, #8
 800243c:	b580      	push	{r7, lr}
 800243e:	b09c      	sub	sp, #112	; 0x70
 8002440:	af14      	add	r7, sp, #80	; 0x50
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t ret, start_measurement_ret;
    int tries = 3;
 800244a:	2303      	movs	r3, #3
 800244c:	61fb      	str	r3, [r7, #28]

    // trigger and wait for measurement to complete
    while (tries-- > 0)
 800244e:	e014      	b.n	800247a <mlx90632_read_temp_raw_extended+0x40>
    {
        start_measurement_ret = mlx90632_start_measurement(hi2c);
 8002450:	4668      	mov	r0, sp
 8002452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002456:	2244      	movs	r2, #68	; 0x44
 8002458:	4619      	mov	r1, r3
 800245a:	f008 ff41 	bl	800b2e0 <memcpy>
 800245e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002464:	f7ff fd36 	bl	8001ed4 <mlx90632_start_measurement>
 8002468:	61b8      	str	r0, [r7, #24]
        if (start_measurement_ret < 0)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	da01      	bge.n	8002474 <mlx90632_read_temp_raw_extended+0x3a>
            return start_measurement_ret;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	e02c      	b.n	80024ce <mlx90632_read_temp_raw_extended+0x94>

        if (start_measurement_ret == 19)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b13      	cmp	r3, #19
 8002478:	d005      	beq.n	8002486 <mlx90632_read_temp_raw_extended+0x4c>
    while (tries-- > 0)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	61fa      	str	r2, [r7, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	dce5      	bgt.n	8002450 <mlx90632_read_temp_raw_extended+0x16>
 8002484:	e000      	b.n	8002488 <mlx90632_read_temp_raw_extended+0x4e>
            break;
 8002486:	bf00      	nop
//        // data not ready
//        return -ETIMEDOUT;
//    }

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw_extended(ambient_new_raw, ambient_old_raw, hi2c);
 8002488:	4668      	mov	r0, sp
 800248a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800248e:	224c      	movs	r2, #76	; 0x4c
 8002490:	4619      	mov	r1, r3
 8002492:	f008 ff25 	bl	800b2e0 <memcpy>
 8002496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249a:	cb0c      	ldmia	r3, {r2, r3}
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff feb5 	bl	800220e <mlx90632_read_temp_ambient_raw_extended>
 80024a4:	6178      	str	r0, [r7, #20]
    if (ret < 0) {
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da01      	bge.n	80024b0 <mlx90632_read_temp_raw_extended+0x76>
  	  return ret;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	e00e      	b.n	80024ce <mlx90632_read_temp_raw_extended+0x94>
    }

    /** Read new **object** value from sensor */
    ret = mlx90632_read_temp_object_raw_extended(object_new_raw, hi2c);
 80024b0:	4668      	mov	r0, sp
 80024b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024b6:	2248      	movs	r2, #72	; 0x48
 80024b8:	4619      	mov	r1, r3
 80024ba:	f008 ff11 	bl	800b2e0 <memcpy>
 80024be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff feea 	bl	800229e <mlx90632_read_temp_object_raw_extended>
 80024ca:	6178      	str	r0, [r7, #20]

    return ret;
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024d8:	b002      	add	sp, #8
 80024da:	4770      	bx	lr

080024dc <mlx90632_preprocess_temp_ambient_extended>:

    return ret;
}

double mlx90632_preprocess_temp_ambient_extended(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
 80024e6:	460b      	mov	r3, r1
 80024e8:	80bb      	strh	r3, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 80024ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd ffba 	bl	800046c <__aeabi_i2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <mlx90632_preprocess_temp_ambient_extended+0xc0>)
 80024fe:	f7fe f949 	bl	8000794 <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 800250a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd ffac 	bl	800046c <__aeabi_i2d>
 8002514:	4604      	mov	r4, r0
 8002516:	460d      	mov	r5, r1
 8002518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ffa5 	bl	800046c <__aeabi_i2d>
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <mlx90632_preprocess_temp_ambient_extended+0xc4>)
 8002528:	f7fe f934 	bl	8000794 <__aeabi_ddiv>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002538:	f7fe f802 	bl	8000540 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4620      	mov	r0, r4
 8002542:	4629      	mov	r1, r5
 8002544:	f7fd fe46 	bl	80001d4 <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8002550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ff89 	bl	800046c <__aeabi_i2d>
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <mlx90632_preprocess_temp_ambient_extended+0xc4>)
 8002560:	f7fe f918 	bl	8000794 <__aeabi_ddiv>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002570:	f7fe f910 	bl	8000794 <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <mlx90632_preprocess_temp_ambient_extended+0xc8>)
 8002582:	f7fd ffdd 	bl	8000540 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	ec43 2b17 	vmov	d7, r2, r3
}
 800258e:	eeb0 0a47 	vmov.f32	s0, s14
 8002592:	eef0 0a67 	vmov.f32	s1, s15
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	40900000 	.word	0x40900000
 80025a0:	40280000 	.word	0x40280000
 80025a4:	41200000 	.word	0x41200000

080025a8 <mlx90632_preprocess_temp_object_extended>:

double mlx90632_preprocess_temp_object_extended(int16_t object_new_raw, int16_t ambient_new_raw,
                                                int16_t ambient_old_raw, int16_t Ka)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4604      	mov	r4, r0
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	80fb      	strh	r3, [r7, #6]
 80025ba:	4603      	mov	r3, r0
 80025bc:	80bb      	strh	r3, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
 80025c2:	4613      	mov	r3, r2
 80025c4:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 80025c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff4e 	bl	800046c <__aeabi_i2d>
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <mlx90632_preprocess_temp_object_extended+0xcc>)
 80025d6:	f7fe f8dd 	bl	8000794 <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 80025e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff40 	bl	800046c <__aeabi_i2d>
 80025ec:	4604      	mov	r4, r0
 80025ee:	460d      	mov	r5, r1
 80025f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff39 	bl	800046c <__aeabi_i2d>
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <mlx90632_preprocess_temp_object_extended+0xd0>)
 8002600:	f7fe f8c8 	bl	8000794 <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002610:	f7fd ff96 	bl	8000540 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4620      	mov	r0, r4
 800261a:	4629      	mov	r1, r5
 800261c:	f7fd fdda 	bl	80001d4 <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((object_new_raw / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 8002628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff1d 	bl	800046c <__aeabi_i2d>
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <mlx90632_preprocess_temp_object_extended+0xd0>)
 8002638:	f7fe f8ac 	bl	8000794 <__aeabi_ddiv>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002648:	f7fe f8a4 	bl	8000794 <__aeabi_ddiv>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <mlx90632_preprocess_temp_object_extended+0xd4>)
 800265a:	f7fd ff71 	bl	8000540 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b17 	vmov	d7, r2, r3
}
 8002666:	eeb0 0a47 	vmov.f32	s0, s14
 800266a:	eef0 0a67 	vmov.f32	s1, s15
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bdb0      	pop	{r4, r5, r7, pc}
 8002674:	40900000 	.word	0x40900000
 8002678:	40280000 	.word	0x40280000
 800267c:	41200000 	.word	0x41200000

08002680 <mlx90632_calc_temp_ambient_extended>:

double mlx90632_calc_temp_ambient_extended(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                           int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b090      	sub	sp, #64	; 0x40
 8002684:	af00      	add	r7, sp, #0
 8002686:	60ba      	str	r2, [r7, #8]
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4603      	mov	r3, r0
 800268c:	81fb      	strh	r3, [r7, #14]
 800268e:	460b      	mov	r3, r1
 8002690:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient_extended(ambient_new_raw, ambient_old_raw, Gb);
 8002692:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8002696:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800269a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff1c 	bl	80024dc <mlx90632_preprocess_temp_ambient_extended>
 80026a4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f7fd fedf 	bl	800046c <__aeabi_i2d>
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <mlx90632_calc_temp_ambient_extended+0xfc>)
 80026b4:	f7fe f86e 	bl	8000794 <__aeabi_ddiv>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = AMB - ((double)P_R / (double)256.0);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fd fed3 	bl	800046c <__aeabi_i2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <mlx90632_calc_temp_ambient_extended+0x100>)
 80026cc:	f7fe f862 	bl	8000794 <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026d8:	f7fd fd7a 	bl	80001d0 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 80026e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026ec:	f7fd ff28 	bl	8000540 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80026f8:	f7fd ff22 	bl	8000540 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 8002704:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002706:	f7fd feb1 	bl	800046c <__aeabi_i2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002712:	f7fe f83f 	bl	8000794 <__aeabi_ddiv>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <mlx90632_calc_temp_ambient_extended+0x104>)
 8002724:	f7fd ff0c 	bl	8000540 <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 8002730:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002732:	f7fd fe9b 	bl	800046c <__aeabi_i2d>
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <mlx90632_calc_temp_ambient_extended+0x100>)
 800273c:	f7fe f82a 	bl	8000794 <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 8002748:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800274c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002750:	f7fd fd40 	bl	80001d4 <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002760:	f7fd fd38 	bl	80001d4 <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	ec43 2b17 	vmov	d7, r2, r3
}
 800276c:	eeb0 0a47 	vmov.f32	s0, s14
 8002770:	eef0 0a67 	vmov.f32	s1, s15
 8002774:	3740      	adds	r7, #64	; 0x40
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	42b00000 	.word	0x42b00000
 8002780:	40700000 	.word	0x40700000
 8002784:	41300000 	.word	0x41300000

08002788 <mlx90632_calc_temp_object_iteration_extended>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
static double mlx90632_calc_temp_object_iteration_extended(double prev_object_temp, int32_t object, double TAdut, double TaTr4,
                                                           int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                           double emissivity)
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b09c      	sub	sp, #112	; 0x70
 800278c:	af00      	add	r7, sp, #0
 800278e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002792:	6278      	str	r0, [r7, #36]	; 0x24
 8002794:	ed87 1b06 	vstr	d1, [r7, #24]
 8002798:	ed87 2b04 	vstr	d2, [r7, #16]
 800279c:	6239      	str	r1, [r7, #32]
 800279e:	60fa      	str	r2, [r7, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	ed87 3b00 	vstr	d3, [r7]
    double calcedGa, calcedGb, calcedFa, first_sqrt;
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;

    Ha_customer = Ha / ((double)16384.0);
 80027a6:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fe5e 	bl	800046c <__aeabi_i2d>
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	4b74      	ldr	r3, [pc, #464]	; (8002988 <mlx90632_calc_temp_object_iteration_extended+0x200>)
 80027b6:	f7fd ffed 	bl	8000794 <__aeabi_ddiv>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 80027c2:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe50 	bl	800046c <__aeabi_i2d>
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	4b6e      	ldr	r3, [pc, #440]	; (800298c <mlx90632_calc_temp_object_iteration_extended+0x204>)
 80027d2:	f7fd ffdf 	bl	8000794 <__aeabi_ddiv>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 80027de:	6a38      	ldr	r0, [r7, #32]
 80027e0:	f7fd fe44 	bl	800046c <__aeabi_i2d>
 80027e4:	4604      	mov	r4, r0
 80027e6:	460d      	mov	r5, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <mlx90632_calc_temp_object_iteration_extended+0x208>)
 80027ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027f2:	f7fd fced 	bl	80001d0 <__aeabi_dsub>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4620      	mov	r0, r4
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7fd fe9f 	bl	8000540 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b61      	ldr	r3, [pc, #388]	; (8002994 <mlx90632_calc_temp_object_iteration_extended+0x20c>)
 8002810:	f7fd ffc0 	bl	8000794 <__aeabi_ddiv>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 800281c:	68b8      	ldr	r0, [r7, #8]
 800281e:	f7fd fe25 	bl	800046c <__aeabi_i2d>
 8002822:	4604      	mov	r4, r0
 8002824:	460d      	mov	r5, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	4b59      	ldr	r3, [pc, #356]	; (8002990 <mlx90632_calc_temp_object_iteration_extended+0x208>)
 800282c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002830:	f7fd fcce 	bl	80001d0 <__aeabi_dsub>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4620      	mov	r0, r4
 800283a:	4629      	mov	r1, r5
 800283c:	f7fd fe80 	bl	8000540 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	4b51      	ldr	r3, [pc, #324]	; (8002994 <mlx90632_calc_temp_object_iteration_extended+0x20c>)
 800284e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002852:	f7fd ff9f 	bl	8000794 <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1.0 + calcedGa + calcedGb)) /
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	461a      	mov	r2, r3
 8002862:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002866:	494c      	ldr	r1, [pc, #304]	; (8002998 <mlx90632_calc_temp_object_iteration_extended+0x210>)
 8002868:	fb01 f003 	mul.w	r0, r1, r3
 800286c:	2102      	movs	r1, #2
 800286e:	fb01 f102 	mul.w	r1, r1, r2
 8002872:	4401      	add	r1, r0
 8002874:	4848      	ldr	r0, [pc, #288]	; (8002998 <mlx90632_calc_temp_object_iteration_extended+0x210>)
 8002876:	fba2 2300 	umull	r2, r3, r2, r0
 800287a:	4419      	add	r1, r3
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fd fe2f 	bl	80004e4 <__aeabi_l2d>
 8002886:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800288a:	f7fd fe59 	bl	8000540 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4614      	mov	r4, r2
 8002894:	461d      	mov	r5, r3
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <mlx90632_calc_temp_object_iteration_extended+0x214>)
 800289c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028a0:	f7fd fc98 	bl	80001d4 <__adddf3>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028b0:	f7fd fc90 	bl	80001d4 <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd fe40 	bl	8000540 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <mlx90632_calc_temp_object_iteration_extended+0x218>)
 80028ce:	f7fd ff61 	bl	8000794 <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 80028da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028dc:	f7fd fdc6 	bl	800046c <__aeabi_i2d>
 80028e0:	4604      	mov	r4, r0
 80028e2:	460d      	mov	r5, r1
 80028e4:	a324      	add	r3, pc, #144	; (adr r3, 8002978 <mlx90632_calc_temp_object_iteration_extended+0x1f0>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028ee:	f7fd ff51 	bl	8000794 <__aeabi_ddiv>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028fe:	f7fd fe1f 	bl	8000540 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4620      	mov	r0, r4
 8002908:	4629      	mov	r1, r5
 800290a:	f7fd ff43 	bl	8000794 <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    first_sqrt = sqrt(calcedFa + TaTr4);
 8002916:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800291a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800291e:	f7fd fc59 	bl	80001d4 <__adddf3>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	ec43 2b17 	vmov	d7, r2, r3
 800292a:	eeb0 0a47 	vmov.f32	s0, s14
 800292e:	eef0 0a67 	vmov.f32	s1, s15
 8002932:	f008 fceb 	bl	800b30c <sqrt>
 8002936:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 800293a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800293e:	f008 fce5 	bl	800b30c <sqrt>
 8002942:	ec51 0b10 	vmov	r0, r1, d0
 8002946:	a30e      	add	r3, pc, #56	; (adr r3, 8002980 <mlx90632_calc_temp_object_iteration_extended+0x1f8>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fc40 	bl	80001d0 <__aeabi_dsub>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800295c:	f7fd fc38 	bl	80001d0 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	ec43 2b17 	vmov	d7, r2, r3
}
 8002968:	eeb0 0a47 	vmov.f32	s0, s14
 800296c:	eef0 0a67 	vmov.f32	s1, s15
 8002970:	3770      	adds	r7, #112	; 0x70
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000
 800297c:	4202a05f 	.word	0x4202a05f
 8002980:	66666666 	.word	0x66666666
 8002984:	40711266 	.word	0x40711266
 8002988:	40d00000 	.word	0x40d00000
 800298c:	40900000 	.word	0x40900000
 8002990:	40390000 	.word	0x40390000
 8002994:	42300000 	.word	0x42300000
 8002998:	540be400 	.word	0x540be400
 800299c:	3ff00000 	.word	0x3ff00000
 80029a0:	42d00000 	.word	0x42d00000
 80029a4:	00000000 	.word	0x00000000

080029a8 <mlx90632_calc_temp_object_extended>:

double mlx90632_calc_temp_object_extended(int32_t object, int32_t ambient, double reflected,
                                          int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                          int16_t Ha, int16_t Hb)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b098      	sub	sp, #96	; 0x60
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	6178      	str	r0, [r7, #20]
 80029b0:	6139      	str	r1, [r7, #16]
 80029b2:	ed87 0b02 	vstr	d0, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <mlx90632_calc_temp_object_extended+0x1a8>)
 80029c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    double tmp_emi = mlx90632_get_emissivity();
 80029c4:	f7ff fb08 	bl	8001fd8 <mlx90632_get_emissivity>
 80029c8:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double TaTr4;
    double ta4;
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fd fd4d 	bl	800046c <__aeabi_i2d>
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <mlx90632_calc_temp_object_extended+0x1ac>)
 80029d8:	f7fd fedc 	bl	8000794 <__aeabi_ddiv>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    kEb = ((double)Eb) / ((double)256.0);
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	f7fd fd41 	bl	800046c <__aeabi_i2d>
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <mlx90632_calc_temp_object_extended+0x1b0>)
 80029f0:	f7fd fed0 	bl	8000794 <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f7fd fd35 	bl	800046c <__aeabi_i2d>
 8002a02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a06:	f7fd fbe3 	bl	80001d0 <__aeabi_dsub>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a16:	f7fd febd 	bl	8000794 <__aeabi_ddiv>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <mlx90632_calc_temp_object_extended+0x1a8>)
 8002a28:	f7fd fbd4 	bl	80001d4 <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    TaTr4 = reflected + 273.15;
 8002a34:	a344      	add	r3, pc, #272	; (adr r3, 8002b48 <mlx90632_calc_temp_object_extended+0x1a0>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3e:	f7fd fbc9 	bl	80001d4 <__adddf3>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TaTr4 = TaTr4 * TaTr4;
 8002a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a52:	f7fd fd75 	bl	8000540 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TaTr4 = TaTr4 * TaTr4;
 8002a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a66:	f7fd fd6b 	bl	8000540 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ta4 = TAdut + 273.15;
 8002a72:	a335      	add	r3, pc, #212	; (adr r3, 8002b48 <mlx90632_calc_temp_object_extended+0x1a0>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a7c:	f7fd fbaa 	bl	80001d4 <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ta4 = ta4 * ta4;
 8002a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a90:	f7fd fd56 	bl	8000540 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ta4 = ta4 * ta4;
 8002a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002aa4:	f7fd fd4c 	bl	8000540 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TaTr4 = TaTr4 - (TaTr4 - ta4) / tmp_emi;
 8002ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ab8:	f7fd fb8a 	bl	80001d0 <__aeabi_dsub>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ac8:	f7fd fe64 	bl	8000794 <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ad4:	f7fd fb7c 	bl	80001d0 <__aeabi_dsub>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002ae6:	e01f      	b.n	8002b28 <mlx90632_calc_temp_object_extended+0x180>
    {
        temp = mlx90632_calc_temp_object_iteration_extended(temp, object, TAdut, TaTr4, Ga, Fa / 2, Fb, Ha, Hb, tmp_emi);
 8002ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aea:	0fda      	lsrs	r2, r3, #31
 8002aec:	4413      	add	r3, r2
 8002aee:	105b      	asrs	r3, r3, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 8002b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b06:	ed97 2b08 	vldr	d2, [r7, #32]
 8002b0a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8002b14:	f7ff fe38 	bl	8002788 <mlx90632_calc_temp_object_iteration_extended>
 8002b18:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    for (i = 0; i < 5; ++i)
 8002b1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b20:	3301      	adds	r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002b28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	dddb      	ble.n	8002ae8 <mlx90632_calc_temp_object_extended+0x140>
    }

    return temp;
 8002b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b34:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b38:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3c:	eef0 0a67 	vmov.f32	s1, s15
 8002b40:	3758      	adds	r7, #88	; 0x58
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	66666666 	.word	0x66666666
 8002b4c:	40711266 	.word	0x40711266
 8002b50:	40390000 	.word	0x40390000
 8002b54:	40f00000 	.word	0x40f00000
 8002b58:	40700000 	.word	0x40700000

08002b5c <mlx90632_set_meas_type>:

int32_t mlx90632_set_meas_type(uint8_t type, I2C_HandleTypeDef hi2c)
{
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	b590      	push	{r4, r7, lr}
 8002b60:	b099      	sub	sp, #100	; 0x64
 8002b62:	af14      	add	r7, sp, #80	; 0x50
 8002b64:	4604      	mov	r4, r0
 8002b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002b6e:	4623      	mov	r3, r4
 8002b70:	71fb      	strb	r3, [r7, #7]
    int32_t ret;
    uint16_t reg_ctrl;

    if ((type != MLX90632_MTYP_MEDICAL) & (type != MLX90632_MTYP_EXTENDED) & (type != MLX90632_MTYP_MEDICAL_BURST) & (type != MLX90632_MTYP_EXTENDED_BURST))
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	79fa      	ldrb	r2, [r7, #7]
 8002ba0:	2a91      	cmp	r2, #145	; 0x91
 8002ba2:	bf14      	ite	ne
 8002ba4:	2201      	movne	r2, #1
 8002ba6:	2200      	moveq	r2, #0
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <mlx90632_set_meas_type+0x5a>
        return -EINVAL;
 8002bb0:	f06f 0315 	mvn.w	r3, #21
 8002bb4:	e086      	b.n	8002cc4 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_addressed_reset(hi2c);
 8002bb6:	4668      	mov	r0, sp
 8002bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bbc:	2244      	movs	r2, #68	; 0x44
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f008 fb8e 	bl	800b2e0 <memcpy>
 8002bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bca:	f7ff fa25 	bl	8002018 <mlx90632_addressed_reset>
 8002bce:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da01      	bge.n	8002bda <mlx90632_set_meas_type+0x7e>
        return ret;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	e074      	b.n	8002cc4 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 8002bda:	f107 040a 	add.w	r4, r7, #10
 8002bde:	4668      	mov	r0, sp
 8002be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be4:	224c      	movs	r2, #76	; 0x4c
 8002be6:	4619      	mov	r1, r3
 8002be8:	f008 fb7a 	bl	800b2e0 <memcpy>
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	cb0c      	ldmia	r3, {r2, r3}
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	f243 0001 	movw	r0, #12289	; 0x3001
 8002bf8:	f7ff fa70 	bl	80020dc <mlx90632_i2c_read>
 8002bfc:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da01      	bge.n	8002c08 <mlx90632_set_meas_type+0xac>
        return ret;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	e05d      	b.n	8002cc4 <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & (~MLX90632_CFG_MTYP_MASK & ~MLX90632_CFG_PWR_MASK);
 8002c08:	897b      	ldrh	r3, [r7, #10]
 8002c0a:	817b      	strh	r3, [r7, #10]
    reg_ctrl |= (MLX90632_MTYP_STATUS(MLX90632_MEASUREMENT_TYPE_STATUS(type)) | MLX90632_PWR_STATUS_HALT);
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002c16:	b21a      	sxth	r2, r3
 8002c18:	897b      	ldrh	r3, [r7, #10]
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	817b      	strh	r3, [r7, #10]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8002c24:	897c      	ldrh	r4, [r7, #10]
 8002c26:	4668      	mov	r0, sp
 8002c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2c:	224c      	movs	r2, #76	; 0x4c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f008 fb56 	bl	800b2e0 <memcpy>
 8002c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c38:	cb0c      	ldmia	r3, {r2, r3}
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	f243 0001 	movw	r0, #12289	; 0x3001
 8002c40:	f7ff faa9 	bl	8002196 <mlx90632_i2c_write>
 8002c44:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da01      	bge.n	8002c50 <mlx90632_set_meas_type+0xf4>
        return ret;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	e039      	b.n	8002cc4 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 8002c50:	f107 040a 	add.w	r4, r7, #10
 8002c54:	4668      	mov	r0, sp
 8002c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c5a:	224c      	movs	r2, #76	; 0x4c
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f008 fb3f 	bl	800b2e0 <memcpy>
 8002c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c66:	cb0c      	ldmia	r3, {r2, r3}
 8002c68:	4621      	mov	r1, r4
 8002c6a:	f243 0001 	movw	r0, #12289	; 0x3001
 8002c6e:	f7ff fa35 	bl	80020dc <mlx90632_i2c_read>
 8002c72:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da01      	bge.n	8002c7e <mlx90632_set_meas_type+0x122>
        return ret;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	e022      	b.n	8002cc4 <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & ~MLX90632_CFG_PWR_MASK;
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	817b      	strh	r3, [r7, #10]
    if (MLX90632_MEASUREMENT_BURST_STATUS(type))
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da05      	bge.n	8002c96 <mlx90632_set_meas_type+0x13a>
    {
        reg_ctrl |= MLX90632_PWR_STATUS_SLEEP_STEP;
 8002c8a:	897b      	ldrh	r3, [r7, #10]
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	817b      	strh	r3, [r7, #10]
 8002c94:	e004      	b.n	8002ca0 <mlx90632_set_meas_type+0x144>
    }
    else
    {
        reg_ctrl |= MLX90632_PWR_STATUS_CONTINUOUS;
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	f043 0306 	orr.w	r3, r3, #6
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	817b      	strh	r3, [r7, #10]
    }

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8002ca0:	897c      	ldrh	r4, [r7, #10]
 8002ca2:	4668      	mov	r0, sp
 8002ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca8:	224c      	movs	r2, #76	; 0x4c
 8002caa:	4619      	mov	r1, r3
 8002cac:	f008 fb18 	bl	800b2e0 <memcpy>
 8002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb4:	cb0c      	ldmia	r3, {r2, r3}
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	f243 0001 	movw	r0, #12289	; 0x3001
 8002cbc:	f7ff fa6b 	bl	8002196 <mlx90632_i2c_write>
 8002cc0:	60f8      	str	r0, [r7, #12]

    return ret;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002cce:	b004      	add	sp, #16
 8002cd0:	4770      	bx	lr
	...

08002cd4 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	b590      	push	{r4, r7, lr}
 8002cd8:	b097      	sub	sp, #92	; 0x5c
 8002cda:	af14      	add	r7, sp, #80	; 0x50
 8002cdc:	f107 0418 	add.w	r4, r7, #24
 8002ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8002ce4:	f000 fb98 	bl	8003418 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <SSD1306_Init+0x44>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	2254      	movs	r2, #84	; 0x54
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f008 faf4 	bl	800b2e0 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002cf8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2178      	movs	r1, #120	; 0x78
 8002d00:	4805      	ldr	r0, [pc, #20]	; (8002d18 <SSD1306_Init+0x44>)
 8002d02:	f001 fe9b 	bl	8004a3c <HAL_I2C_IsDeviceReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e1ee      	b.n	80030ee <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002d10:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002d14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d16:	e004      	b.n	8002d22 <SSD1306_Init+0x4e>
 8002d18:	20000a28 	.word	0x20000a28
		p--;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002d28:	4ce1      	ldr	r4, [pc, #900]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002d2a:	23ae      	movs	r3, #174	; 0xae
 8002d2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d2e:	4668      	mov	r0, sp
 8002d30:	f104 0308 	add.w	r3, r4, #8
 8002d34:	224c      	movs	r2, #76	; 0x4c
 8002d36:	4619      	mov	r1, r3
 8002d38:	f008 fad2 	bl	800b2e0 <memcpy>
 8002d3c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002d40:	2100      	movs	r1, #0
 8002d42:	2078      	movs	r0, #120	; 0x78
 8002d44:	f000 fbc6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002d48:	4cd9      	ldr	r4, [pc, #868]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d4e:	4668      	mov	r0, sp
 8002d50:	f104 0308 	add.w	r3, r4, #8
 8002d54:	224c      	movs	r2, #76	; 0x4c
 8002d56:	4619      	mov	r1, r3
 8002d58:	f008 fac2 	bl	800b2e0 <memcpy>
 8002d5c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002d60:	2100      	movs	r1, #0
 8002d62:	2078      	movs	r0, #120	; 0x78
 8002d64:	f000 fbb6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002d68:	4cd1      	ldr	r4, [pc, #836]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d6e:	4668      	mov	r0, sp
 8002d70:	f104 0308 	add.w	r3, r4, #8
 8002d74:	224c      	movs	r2, #76	; 0x4c
 8002d76:	4619      	mov	r1, r3
 8002d78:	f008 fab2 	bl	800b2e0 <memcpy>
 8002d7c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002d80:	2100      	movs	r1, #0
 8002d82:	2078      	movs	r0, #120	; 0x78
 8002d84:	f000 fba6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d88:	4cc9      	ldr	r4, [pc, #804]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002d8a:	23b0      	movs	r3, #176	; 0xb0
 8002d8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d8e:	4668      	mov	r0, sp
 8002d90:	f104 0308 	add.w	r3, r4, #8
 8002d94:	224c      	movs	r2, #76	; 0x4c
 8002d96:	4619      	mov	r1, r3
 8002d98:	f008 faa2 	bl	800b2e0 <memcpy>
 8002d9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002da0:	2100      	movs	r1, #0
 8002da2:	2078      	movs	r0, #120	; 0x78
 8002da4:	f000 fb96 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002da8:	4cc1      	ldr	r4, [pc, #772]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002daa:	23c8      	movs	r3, #200	; 0xc8
 8002dac:	9313      	str	r3, [sp, #76]	; 0x4c
 8002dae:	4668      	mov	r0, sp
 8002db0:	f104 0308 	add.w	r3, r4, #8
 8002db4:	224c      	movs	r2, #76	; 0x4c
 8002db6:	4619      	mov	r1, r3
 8002db8:	f008 fa92 	bl	800b2e0 <memcpy>
 8002dbc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2078      	movs	r0, #120	; 0x78
 8002dc4:	f000 fb86 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002dc8:	4cb9      	ldr	r4, [pc, #740]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8002dce:	4668      	mov	r0, sp
 8002dd0:	f104 0308 	add.w	r3, r4, #8
 8002dd4:	224c      	movs	r2, #76	; 0x4c
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f008 fa82 	bl	800b2e0 <memcpy>
 8002ddc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002de0:	2100      	movs	r1, #0
 8002de2:	2078      	movs	r0, #120	; 0x78
 8002de4:	f000 fb76 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002de8:	4cb1      	ldr	r4, [pc, #708]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002dea:	2310      	movs	r3, #16
 8002dec:	9313      	str	r3, [sp, #76]	; 0x4c
 8002dee:	4668      	mov	r0, sp
 8002df0:	f104 0308 	add.w	r3, r4, #8
 8002df4:	224c      	movs	r2, #76	; 0x4c
 8002df6:	4619      	mov	r1, r3
 8002df8:	f008 fa72 	bl	800b2e0 <memcpy>
 8002dfc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002e00:	2100      	movs	r1, #0
 8002e02:	2078      	movs	r0, #120	; 0x78
 8002e04:	f000 fb66 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002e08:	4ca9      	ldr	r4, [pc, #676]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002e0a:	2340      	movs	r3, #64	; 0x40
 8002e0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e0e:	4668      	mov	r0, sp
 8002e10:	f104 0308 	add.w	r3, r4, #8
 8002e14:	224c      	movs	r2, #76	; 0x4c
 8002e16:	4619      	mov	r1, r3
 8002e18:	f008 fa62 	bl	800b2e0 <memcpy>
 8002e1c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002e20:	2100      	movs	r1, #0
 8002e22:	2078      	movs	r0, #120	; 0x78
 8002e24:	f000 fb56 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002e28:	4ca1      	ldr	r4, [pc, #644]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002e2a:	2381      	movs	r3, #129	; 0x81
 8002e2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e2e:	4668      	mov	r0, sp
 8002e30:	f104 0308 	add.w	r3, r4, #8
 8002e34:	224c      	movs	r2, #76	; 0x4c
 8002e36:	4619      	mov	r1, r3
 8002e38:	f008 fa52 	bl	800b2e0 <memcpy>
 8002e3c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002e40:	2100      	movs	r1, #0
 8002e42:	2078      	movs	r0, #120	; 0x78
 8002e44:	f000 fb46 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002e48:	4c99      	ldr	r4, [pc, #612]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002e4a:	23ff      	movs	r3, #255	; 0xff
 8002e4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e4e:	4668      	mov	r0, sp
 8002e50:	f104 0308 	add.w	r3, r4, #8
 8002e54:	224c      	movs	r2, #76	; 0x4c
 8002e56:	4619      	mov	r1, r3
 8002e58:	f008 fa42 	bl	800b2e0 <memcpy>
 8002e5c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002e60:	2100      	movs	r1, #0
 8002e62:	2078      	movs	r0, #120	; 0x78
 8002e64:	f000 fb36 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002e68:	4c91      	ldr	r4, [pc, #580]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002e6a:	23a1      	movs	r3, #161	; 0xa1
 8002e6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e6e:	4668      	mov	r0, sp
 8002e70:	f104 0308 	add.w	r3, r4, #8
 8002e74:	224c      	movs	r2, #76	; 0x4c
 8002e76:	4619      	mov	r1, r3
 8002e78:	f008 fa32 	bl	800b2e0 <memcpy>
 8002e7c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002e80:	2100      	movs	r1, #0
 8002e82:	2078      	movs	r0, #120	; 0x78
 8002e84:	f000 fb26 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002e88:	4c89      	ldr	r4, [pc, #548]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002e8a:	23a6      	movs	r3, #166	; 0xa6
 8002e8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e8e:	4668      	mov	r0, sp
 8002e90:	f104 0308 	add.w	r3, r4, #8
 8002e94:	224c      	movs	r2, #76	; 0x4c
 8002e96:	4619      	mov	r1, r3
 8002e98:	f008 fa22 	bl	800b2e0 <memcpy>
 8002e9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2078      	movs	r0, #120	; 0x78
 8002ea4:	f000 fb16 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002ea8:	4c81      	ldr	r4, [pc, #516]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002eaa:	23a8      	movs	r3, #168	; 0xa8
 8002eac:	9313      	str	r3, [sp, #76]	; 0x4c
 8002eae:	4668      	mov	r0, sp
 8002eb0:	f104 0308 	add.w	r3, r4, #8
 8002eb4:	224c      	movs	r2, #76	; 0x4c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f008 fa12 	bl	800b2e0 <memcpy>
 8002ebc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2078      	movs	r0, #120	; 0x78
 8002ec4:	f000 fb06 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002ec8:	4c79      	ldr	r4, [pc, #484]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002eca:	233f      	movs	r3, #63	; 0x3f
 8002ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ece:	4668      	mov	r0, sp
 8002ed0:	f104 0308 	add.w	r3, r4, #8
 8002ed4:	224c      	movs	r2, #76	; 0x4c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f008 fa02 	bl	800b2e0 <memcpy>
 8002edc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2078      	movs	r0, #120	; 0x78
 8002ee4:	f000 faf6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ee8:	4c71      	ldr	r4, [pc, #452]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002eea:	23a4      	movs	r3, #164	; 0xa4
 8002eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8002eee:	4668      	mov	r0, sp
 8002ef0:	f104 0308 	add.w	r3, r4, #8
 8002ef4:	224c      	movs	r2, #76	; 0x4c
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f008 f9f2 	bl	800b2e0 <memcpy>
 8002efc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f00:	2100      	movs	r1, #0
 8002f02:	2078      	movs	r0, #120	; 0x78
 8002f04:	f000 fae6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002f08:	4c69      	ldr	r4, [pc, #420]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002f0a:	23d3      	movs	r3, #211	; 0xd3
 8002f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f0e:	4668      	mov	r0, sp
 8002f10:	f104 0308 	add.w	r3, r4, #8
 8002f14:	224c      	movs	r2, #76	; 0x4c
 8002f16:	4619      	mov	r1, r3
 8002f18:	f008 f9e2 	bl	800b2e0 <memcpy>
 8002f1c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f20:	2100      	movs	r1, #0
 8002f22:	2078      	movs	r0, #120	; 0x78
 8002f24:	f000 fad6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002f28:	4c61      	ldr	r4, [pc, #388]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f2e:	4668      	mov	r0, sp
 8002f30:	f104 0308 	add.w	r3, r4, #8
 8002f34:	224c      	movs	r2, #76	; 0x4c
 8002f36:	4619      	mov	r1, r3
 8002f38:	f008 f9d2 	bl	800b2e0 <memcpy>
 8002f3c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f40:	2100      	movs	r1, #0
 8002f42:	2078      	movs	r0, #120	; 0x78
 8002f44:	f000 fac6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f48:	4c59      	ldr	r4, [pc, #356]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002f4a:	23d5      	movs	r3, #213	; 0xd5
 8002f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f4e:	4668      	mov	r0, sp
 8002f50:	f104 0308 	add.w	r3, r4, #8
 8002f54:	224c      	movs	r2, #76	; 0x4c
 8002f56:	4619      	mov	r1, r3
 8002f58:	f008 f9c2 	bl	800b2e0 <memcpy>
 8002f5c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f60:	2100      	movs	r1, #0
 8002f62:	2078      	movs	r0, #120	; 0x78
 8002f64:	f000 fab6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002f68:	4c51      	ldr	r4, [pc, #324]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002f6a:	23f0      	movs	r3, #240	; 0xf0
 8002f6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f6e:	4668      	mov	r0, sp
 8002f70:	f104 0308 	add.w	r3, r4, #8
 8002f74:	224c      	movs	r2, #76	; 0x4c
 8002f76:	4619      	mov	r1, r3
 8002f78:	f008 f9b2 	bl	800b2e0 <memcpy>
 8002f7c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f80:	2100      	movs	r1, #0
 8002f82:	2078      	movs	r0, #120	; 0x78
 8002f84:	f000 faa6 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f88:	4c49      	ldr	r4, [pc, #292]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002f8a:	23d9      	movs	r3, #217	; 0xd9
 8002f8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f8e:	4668      	mov	r0, sp
 8002f90:	f104 0308 	add.w	r3, r4, #8
 8002f94:	224c      	movs	r2, #76	; 0x4c
 8002f96:	4619      	mov	r1, r3
 8002f98:	f008 f9a2 	bl	800b2e0 <memcpy>
 8002f9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2078      	movs	r0, #120	; 0x78
 8002fa4:	f000 fa96 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002fa8:	4c41      	ldr	r4, [pc, #260]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002faa:	2322      	movs	r3, #34	; 0x22
 8002fac:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fae:	4668      	mov	r0, sp
 8002fb0:	f104 0308 	add.w	r3, r4, #8
 8002fb4:	224c      	movs	r2, #76	; 0x4c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f008 f992 	bl	800b2e0 <memcpy>
 8002fbc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2078      	movs	r0, #120	; 0x78
 8002fc4:	f000 fa86 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002fc8:	4c39      	ldr	r4, [pc, #228]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002fca:	23da      	movs	r3, #218	; 0xda
 8002fcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fce:	4668      	mov	r0, sp
 8002fd0:	f104 0308 	add.w	r3, r4, #8
 8002fd4:	224c      	movs	r2, #76	; 0x4c
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f008 f982 	bl	800b2e0 <memcpy>
 8002fdc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2078      	movs	r0, #120	; 0x78
 8002fe4:	f000 fa76 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002fe8:	4c31      	ldr	r4, [pc, #196]	; (80030b0 <SSD1306_Init+0x3dc>)
 8002fea:	2312      	movs	r3, #18
 8002fec:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fee:	4668      	mov	r0, sp
 8002ff0:	f104 0308 	add.w	r3, r4, #8
 8002ff4:	224c      	movs	r2, #76	; 0x4c
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f008 f972 	bl	800b2e0 <memcpy>
 8002ffc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003000:	2100      	movs	r1, #0
 8003002:	2078      	movs	r0, #120	; 0x78
 8003004:	f000 fa66 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003008:	4c29      	ldr	r4, [pc, #164]	; (80030b0 <SSD1306_Init+0x3dc>)
 800300a:	23db      	movs	r3, #219	; 0xdb
 800300c:	9313      	str	r3, [sp, #76]	; 0x4c
 800300e:	4668      	mov	r0, sp
 8003010:	f104 0308 	add.w	r3, r4, #8
 8003014:	224c      	movs	r2, #76	; 0x4c
 8003016:	4619      	mov	r1, r3
 8003018:	f008 f962 	bl	800b2e0 <memcpy>
 800301c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003020:	2100      	movs	r1, #0
 8003022:	2078      	movs	r0, #120	; 0x78
 8003024:	f000 fa56 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003028:	4c21      	ldr	r4, [pc, #132]	; (80030b0 <SSD1306_Init+0x3dc>)
 800302a:	2320      	movs	r3, #32
 800302c:	9313      	str	r3, [sp, #76]	; 0x4c
 800302e:	4668      	mov	r0, sp
 8003030:	f104 0308 	add.w	r3, r4, #8
 8003034:	224c      	movs	r2, #76	; 0x4c
 8003036:	4619      	mov	r1, r3
 8003038:	f008 f952 	bl	800b2e0 <memcpy>
 800303c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003040:	2100      	movs	r1, #0
 8003042:	2078      	movs	r0, #120	; 0x78
 8003044:	f000 fa46 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003048:	4c19      	ldr	r4, [pc, #100]	; (80030b0 <SSD1306_Init+0x3dc>)
 800304a:	238d      	movs	r3, #141	; 0x8d
 800304c:	9313      	str	r3, [sp, #76]	; 0x4c
 800304e:	4668      	mov	r0, sp
 8003050:	f104 0308 	add.w	r3, r4, #8
 8003054:	224c      	movs	r2, #76	; 0x4c
 8003056:	4619      	mov	r1, r3
 8003058:	f008 f942 	bl	800b2e0 <memcpy>
 800305c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003060:	2100      	movs	r1, #0
 8003062:	2078      	movs	r0, #120	; 0x78
 8003064:	f000 fa36 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003068:	4c11      	ldr	r4, [pc, #68]	; (80030b0 <SSD1306_Init+0x3dc>)
 800306a:	2314      	movs	r3, #20
 800306c:	9313      	str	r3, [sp, #76]	; 0x4c
 800306e:	4668      	mov	r0, sp
 8003070:	f104 0308 	add.w	r3, r4, #8
 8003074:	224c      	movs	r2, #76	; 0x4c
 8003076:	4619      	mov	r1, r3
 8003078:	f008 f932 	bl	800b2e0 <memcpy>
 800307c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003080:	2100      	movs	r1, #0
 8003082:	2078      	movs	r0, #120	; 0x78
 8003084:	f000 fa26 	bl	80034d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003088:	4c09      	ldr	r4, [pc, #36]	; (80030b0 <SSD1306_Init+0x3dc>)
 800308a:	23af      	movs	r3, #175	; 0xaf
 800308c:	9313      	str	r3, [sp, #76]	; 0x4c
 800308e:	4668      	mov	r0, sp
 8003090:	f104 0308 	add.w	r3, r4, #8
 8003094:	224c      	movs	r2, #76	; 0x4c
 8003096:	4619      	mov	r1, r3
 8003098:	f008 f922 	bl	800b2e0 <memcpy>
 800309c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80030a0:	2100      	movs	r1, #0
 80030a2:	2078      	movs	r0, #120	; 0x78
 80030a4:	f000 fa16 	bl	80034d4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80030a8:	4c01      	ldr	r4, [pc, #4]	; (80030b0 <SSD1306_Init+0x3dc>)
 80030aa:	232e      	movs	r3, #46	; 0x2e
 80030ac:	e002      	b.n	80030b4 <SSD1306_Init+0x3e0>
 80030ae:	bf00      	nop
 80030b0:	20000a28 	.word	0x20000a28
 80030b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80030b6:	4668      	mov	r0, sp
 80030b8:	f104 0308 	add.w	r3, r4, #8
 80030bc:	224c      	movs	r2, #76	; 0x4c
 80030be:	4619      	mov	r1, r3
 80030c0:	f008 f90e 	bl	800b2e0 <memcpy>
 80030c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80030c8:	2100      	movs	r1, #0
 80030ca:	2078      	movs	r0, #120	; 0x78
 80030cc:	f000 fa02 	bl	80034d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f000 f865 	bl	80031a0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80030d6:	f000 f813 	bl	8003100 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <SSD1306_Init+0x428>)
 80030dc:	2200      	movs	r2, #0
 80030de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <SSD1306_Init+0x428>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <SSD1306_Init+0x428>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80030ec:	2301      	movs	r3, #1
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80030f8:	b004      	add	sp, #16
 80030fa:	4770      	bx	lr
 80030fc:	20000658 	.word	0x20000658

08003100 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b097      	sub	sp, #92	; 0x5c
 8003104:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003106:	2300      	movs	r3, #0
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	e03d      	b.n	8003188 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	3b50      	subs	r3, #80	; 0x50
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4c21      	ldr	r4, [pc, #132]	; (8003198 <SSD1306_UpdateScreen+0x98>)
 8003114:	9313      	str	r3, [sp, #76]	; 0x4c
 8003116:	4668      	mov	r0, sp
 8003118:	f104 0308 	add.w	r3, r4, #8
 800311c:	224c      	movs	r2, #76	; 0x4c
 800311e:	4619      	mov	r1, r3
 8003120:	f008 f8de 	bl	800b2e0 <memcpy>
 8003124:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003128:	2100      	movs	r1, #0
 800312a:	2078      	movs	r0, #120	; 0x78
 800312c:	f000 f9d2 	bl	80034d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003130:	4c19      	ldr	r4, [pc, #100]	; (8003198 <SSD1306_UpdateScreen+0x98>)
 8003132:	2300      	movs	r3, #0
 8003134:	9313      	str	r3, [sp, #76]	; 0x4c
 8003136:	4668      	mov	r0, sp
 8003138:	f104 0308 	add.w	r3, r4, #8
 800313c:	224c      	movs	r2, #76	; 0x4c
 800313e:	4619      	mov	r1, r3
 8003140:	f008 f8ce 	bl	800b2e0 <memcpy>
 8003144:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003148:	2100      	movs	r1, #0
 800314a:	2078      	movs	r0, #120	; 0x78
 800314c:	f000 f9c2 	bl	80034d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003150:	4c11      	ldr	r4, [pc, #68]	; (8003198 <SSD1306_UpdateScreen+0x98>)
 8003152:	2310      	movs	r3, #16
 8003154:	9313      	str	r3, [sp, #76]	; 0x4c
 8003156:	4668      	mov	r0, sp
 8003158:	f104 0308 	add.w	r3, r4, #8
 800315c:	224c      	movs	r2, #76	; 0x4c
 800315e:	4619      	mov	r1, r3
 8003160:	f008 f8be 	bl	800b2e0 <memcpy>
 8003164:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003168:	2100      	movs	r1, #0
 800316a:	2078      	movs	r0, #120	; 0x78
 800316c:	f000 f9b2 	bl	80034d4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	01db      	lsls	r3, r3, #7
 8003174:	4a09      	ldr	r2, [pc, #36]	; (800319c <SSD1306_UpdateScreen+0x9c>)
 8003176:	441a      	add	r2, r3
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	2140      	movs	r1, #64	; 0x40
 800317c:	2078      	movs	r0, #120	; 0x78
 800317e:	f000 f961 	bl	8003444 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	3301      	adds	r3, #1
 8003186:	71fb      	strb	r3, [r7, #7]
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2b07      	cmp	r3, #7
 800318c:	d9be      	bls.n	800310c <SSD1306_UpdateScreen+0xc>
	}
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	20000a28 	.word	0x20000a28
 800319c:	20000258 	.word	0x20000258

080031a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <SSD1306_Fill+0x14>
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <SSD1306_Fill+0x16>
 80031b4:	23ff      	movs	r3, #255	; 0xff
 80031b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ba:	4619      	mov	r1, r3
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <SSD1306_Fill+0x2c>)
 80031be:	f008 f89d 	bl	800b2fc <memset>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000258 	.word	0x20000258

080031d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
 80031da:	460b      	mov	r3, r1
 80031dc:	80bb      	strh	r3, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	70fb      	strb	r3, [r7, #3]
	if (
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b7f      	cmp	r3, #127	; 0x7f
 80031e6:	d848      	bhi.n	800327a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80031e8:	88bb      	ldrh	r3, [r7, #4]
 80031ea:	2b3f      	cmp	r3, #63	; 0x3f
 80031ec:	d845      	bhi.n	800327a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <SSD1306_DrawPixel+0xb8>)
 80031f0:	791b      	ldrb	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d11a      	bne.n	8003240 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	88bb      	ldrh	r3, [r7, #4]
 800320e:	08db      	lsrs	r3, r3, #3
 8003210:	b298      	uxth	r0, r3
 8003212:	4603      	mov	r3, r0
 8003214:	01db      	lsls	r3, r3, #7
 8003216:	4413      	add	r3, r2
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <SSD1306_DrawPixel+0xbc>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	b25a      	sxtb	r2, r3
 800321e:	88bb      	ldrh	r3, [r7, #4]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	b25b      	sxtb	r3, r3
 800322c:	4313      	orrs	r3, r2
 800322e:	b259      	sxtb	r1, r3
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	4603      	mov	r3, r0
 8003234:	01db      	lsls	r3, r3, #7
 8003236:	4413      	add	r3, r2
 8003238:	b2c9      	uxtb	r1, r1
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <SSD1306_DrawPixel+0xbc>)
 800323c:	54d1      	strb	r1, [r2, r3]
 800323e:	e01d      	b.n	800327c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	88bb      	ldrh	r3, [r7, #4]
 8003244:	08db      	lsrs	r3, r3, #3
 8003246:	b298      	uxth	r0, r3
 8003248:	4603      	mov	r3, r0
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	4413      	add	r3, r2
 800324e:	4a0f      	ldr	r2, [pc, #60]	; (800328c <SSD1306_DrawPixel+0xbc>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	b25a      	sxtb	r2, r3
 8003254:	88bb      	ldrh	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	2101      	movs	r1, #1
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	b25b      	sxtb	r3, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	b25b      	sxtb	r3, r3
 8003266:	4013      	ands	r3, r2
 8003268:	b259      	sxtb	r1, r3
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	4603      	mov	r3, r0
 800326e:	01db      	lsls	r3, r3, #7
 8003270:	4413      	add	r3, r2
 8003272:	b2c9      	uxtb	r1, r1
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <SSD1306_DrawPixel+0xbc>)
 8003276:	54d1      	strb	r1, [r2, r3]
 8003278:	e000      	b.n	800327c <SSD1306_DrawPixel+0xac>
		return;
 800327a:	bf00      	nop
	}
}
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000658 	.word	0x20000658
 800328c:	20000258 	.word	0x20000258

08003290 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	460a      	mov	r2, r1
 800329a:	80fb      	strh	r3, [r7, #6]
 800329c:	4613      	mov	r3, r2
 800329e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80032a0:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <SSD1306_GotoXY+0x28>)
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <SSD1306_GotoXY+0x28>)
 80032a8:	88bb      	ldrh	r3, [r7, #4]
 80032aa:	8053      	strh	r3, [r2, #2]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	20000658 	.word	0x20000658

080032bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <SSD1306_Putc+0xfc>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	4413      	add	r3, r2
	if (
 80032d8:	2b7f      	cmp	r3, #127	; 0x7f
 80032da:	dc07      	bgt.n	80032ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <SSD1306_Putc+0xfc>)
 80032de:	885b      	ldrh	r3, [r3, #2]
 80032e0:	461a      	mov	r2, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80032e8:	2b3f      	cmp	r3, #63	; 0x3f
 80032ea:	dd01      	ble.n	80032f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e05e      	b.n	80033ae <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e04b      	b.n	800338e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	3b20      	subs	r3, #32
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	7849      	ldrb	r1, [r1, #1]
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4619      	mov	r1, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	440b      	add	r3, r1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	e030      	b.n	800337c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <SSD1306_Putc+0xfc>)
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	b29b      	uxth	r3, r3
 8003332:	4413      	add	r3, r2
 8003334:	b298      	uxth	r0, r3
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <SSD1306_Putc+0xfc>)
 8003338:	885a      	ldrh	r2, [r3, #2]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	b29b      	uxth	r3, r3
 800333e:	4413      	add	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	79ba      	ldrb	r2, [r7, #6]
 8003344:	4619      	mov	r1, r3
 8003346:	f7ff ff43 	bl	80031d0 <SSD1306_DrawPixel>
 800334a:	e014      	b.n	8003376 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <SSD1306_Putc+0xfc>)
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29b      	uxth	r3, r3
 8003354:	4413      	add	r3, r2
 8003356:	b298      	uxth	r0, r3
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <SSD1306_Putc+0xfc>)
 800335a:	885a      	ldrh	r2, [r3, #2]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4413      	add	r3, r2
 8003362:	b299      	uxth	r1, r3
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	f7ff ff2d 	bl	80031d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	3301      	adds	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4293      	cmp	r3, r2
 8003386:	d3c8      	bcc.n	800331a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3301      	adds	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	461a      	mov	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4293      	cmp	r3, r2
 8003398:	d3ad      	bcc.n	80032f6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <SSD1306_Putc+0xfc>)
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <SSD1306_Putc+0xfc>)
 80033aa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80033ac:	79fb      	ldrb	r3, [r7, #7]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000658 	.word	0x20000658

080033bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80033ca:	e012      	b.n	80033f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	79fa      	ldrb	r2, [r7, #7]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff71 	bl	80032bc <SSD1306_Putc>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d002      	beq.n	80033ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	e008      	b.n	80033fe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e8      	bne.n	80033cc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	781b      	ldrb	r3, [r3, #0]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800340a:	2000      	movs	r0, #0
 800340c:	f7ff fec8 	bl	80031a0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003410:	f7ff fe76 	bl	8003100 <SSD1306_UpdateScreen>
}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}

08003418 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <ssd1306_I2C_Init+0x28>)
 8003420:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003422:	e002      	b.n	800342a <ssd1306_I2C_Init+0x12>
		p--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
	while(p>0)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f9      	bne.n	8003424 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	0003d090 	.word	0x0003d090

08003444 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b0c7      	sub	sp, #284	; 0x11c
 8003448:	af02      	add	r7, sp, #8
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4639      	mov	r1, r7
 8003450:	600a      	str	r2, [r1, #0]
 8003452:	4619      	mov	r1, r3
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	4622      	mov	r2, r4
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	4602      	mov	r2, r0
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	460a      	mov	r2, r1
 8003464:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	1dba      	adds	r2, r7, #6
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8003470:	2300      	movs	r3, #0
 8003472:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003476:	e010      	b.n	800349a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8003478:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800347c:	463a      	mov	r2, r7
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	441a      	add	r2, r3
 8003482:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003486:	3301      	adds	r3, #1
 8003488:	7811      	ldrb	r1, [r2, #0]
 800348a:	f107 020c 	add.w	r2, r7, #12
 800348e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8003490:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003494:	3301      	adds	r3, #1
 8003496:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800349a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800349e:	b29b      	uxth	r3, r3
 80034a0:	1d3a      	adds	r2, r7, #4
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d8e7      	bhi.n	8003478 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b299      	uxth	r1, r3
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f107 020c 	add.w	r2, r7, #12
 80034ba:	200a      	movs	r0, #10
 80034bc:	9000      	str	r0, [sp, #0]
 80034be:	4804      	ldr	r0, [pc, #16]	; (80034d0 <ssd1306_I2C_WriteMulti+0x8c>)
 80034c0:	f000 fe9e 	bl	8004200 <HAL_I2C_Master_Transmit>
}
 80034c4:	bf00      	nop
 80034c6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000a28 	.word	0x20000a28

080034d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 80034d4:	b082      	sub	sp, #8
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af02      	add	r7, sp, #8
 80034dc:	f107 0c18 	add.w	ip, r7, #24
 80034e0:	e88c 000c 	stmia.w	ip, {r2, r3}
 80034e4:	4603      	mov	r3, r0
 80034e6:	71fb      	strb	r3, [r7, #7]
 80034e8:	460b      	mov	r3, r1
 80034ea:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80034f0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80034f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	b299      	uxth	r1, r3
 80034fa:	f107 020c 	add.w	r2, r7, #12
 80034fe:	230a      	movs	r3, #10
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	2302      	movs	r3, #2
 8003504:	f107 0018 	add.w	r0, r7, #24
 8003508:	f000 fe7a 	bl	8004200 <HAL_I2C_Master_Transmit>
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003516:	b002      	add	sp, #8
 8003518:	4770      	bx	lr
	...

0800351c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_MspInit+0x4c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_MspInit+0x4c>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_MspInit+0x4c>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_MspInit+0x4c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_MspInit+0x4c>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_MspInit+0x4c>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_I2C_MspInit+0x18c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d12c      	bne.n	80035e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a59      	ldr	r2, [pc, #356]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b57      	ldr	r3, [pc, #348]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035aa:	23c0      	movs	r3, #192	; 0xc0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ae:	2312      	movs	r3, #18
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ba:	2304      	movs	r3, #4
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c2:	4619      	mov	r1, r3
 80035c4:	484e      	ldr	r0, [pc, #312]	; (8003700 <HAL_I2C_MspInit+0x194>)
 80035c6:	f000 faef 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80035d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b48      	ldr	r3, [pc, #288]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80035e6:	e083      	b.n	80036f0 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a45      	ldr	r2, [pc, #276]	; (8003704 <HAL_I2C_MspInit+0x198>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d12d      	bne.n	800364e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800360e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003614:	2312      	movs	r3, #18
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361c:	2303      	movs	r3, #3
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003620:	2304      	movs	r3, #4
 8003622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	4619      	mov	r1, r3
 800362a:	4835      	ldr	r0, [pc, #212]	; (8003700 <HAL_I2C_MspInit+0x194>)
 800362c:	f000 fabc 	bl	8003ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	4b31      	ldr	r3, [pc, #196]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4a30      	ldr	r2, [pc, #192]	; (80036fc <HAL_I2C_MspInit+0x190>)
 800363a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800363e:	6413      	str	r3, [r2, #64]	; 0x40
 8003640:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]
}
 800364c:	e050      	b.n	80036f0 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <HAL_I2C_MspInit+0x19c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d14b      	bne.n	80036f0 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <HAL_I2C_MspInit+0x190>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a26      	ldr	r2, [pc, #152]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_I2C_MspInit+0x190>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	4b20      	ldr	r3, [pc, #128]	; (80036fc <HAL_I2C_MspInit+0x190>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_I2C_MspInit+0x190>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6313      	str	r3, [r2, #48]	; 0x30
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_I2C_MspInit+0x190>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003696:	2312      	movs	r3, #18
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369e:	2303      	movs	r3, #3
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036a2:	2304      	movs	r3, #4
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036aa:	4619      	mov	r1, r3
 80036ac:	4817      	ldr	r0, [pc, #92]	; (800370c <HAL_I2C_MspInit+0x1a0>)
 80036ae:	f000 fa7b 	bl	8003ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b8:	2312      	movs	r3, #18
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c0:	2303      	movs	r3, #3
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036c4:	2304      	movs	r3, #4
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036cc:	4619      	mov	r1, r3
 80036ce:	4810      	ldr	r0, [pc, #64]	; (8003710 <HAL_I2C_MspInit+0x1a4>)
 80036d0:	f000 fa6a 	bl	8003ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80036de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_I2C_MspInit+0x190>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
}
 80036f0:	bf00      	nop
 80036f2:	3738      	adds	r7, #56	; 0x38
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40005400 	.word	0x40005400
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020400 	.word	0x40020400
 8003704:	40005800 	.word	0x40005800
 8003708:	40005c00 	.word	0x40005c00
 800370c:	40020800 	.word	0x40020800
 8003710:	40020000 	.word	0x40020000

08003714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_TIM_Base_MspInit+0x48>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d115      	bne.n	8003752 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <HAL_TIM_Base_MspInit+0x4c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <HAL_TIM_Base_MspInit+0x4c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_TIM_Base_MspInit+0x4c>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	2019      	movs	r0, #25
 8003748:	f000 f9f7 	bl	8003b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800374c:	2019      	movs	r0, #25
 800374e:	f000 fa10 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40023800 	.word	0x40023800

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <NMI_Handler+0x4>

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b0:	f000 f8a4 	bl	80038fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037be:	f003 fcbf 	bl	8007140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200009d8 	.word	0x200009d8

080037cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <OTG_FS_IRQHandler+0x10>)
 80037d2:	f001 ff8e 	bl	80056f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20001f5c 	.word	0x20001f5c

080037e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <SystemInit+0x20>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	4a05      	ldr	r2, [pc, #20]	; (8003800 <SystemInit+0x20>)
 80037ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800383c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003808:	480d      	ldr	r0, [pc, #52]	; (8003840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800380a:	490e      	ldr	r1, [pc, #56]	; (8003844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800380e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003810:	e002      	b.n	8003818 <LoopCopyDataInit>

08003812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003816:	3304      	adds	r3, #4

08003818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800381a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800381c:	d3f9      	bcc.n	8003812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800381e:	4a0b      	ldr	r2, [pc, #44]	; (800384c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003820:	4c0b      	ldr	r4, [pc, #44]	; (8003850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003824:	e001      	b.n	800382a <LoopFillZerobss>

08003826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003828:	3204      	adds	r2, #4

0800382a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800382a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800382c:	d3fb      	bcc.n	8003826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800382e:	f7ff ffd7 	bl	80037e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003832:	f007 fd31 	bl	800b298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003836:	f7fe f819 	bl	800186c <main>
  bx  lr    
 800383a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800383c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003844:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003848:	0800cb5c 	.word	0x0800cb5c
  ldr r2, =_sbss
 800384c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003850:	20002364 	.word	0x20002364

08003854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003854:	e7fe      	b.n	8003854 <ADC_IRQHandler>
	...

08003858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_Init+0x40>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <HAL_Init+0x40>)
 8003862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_Init+0x40>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_Init+0x40>)
 800386e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_Init+0x40>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_Init+0x40>)
 800387a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003880:	2003      	movs	r0, #3
 8003882:	f000 f94f 	bl	8003b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003886:	200f      	movs	r0, #15
 8003888:	f000 f808 	bl	800389c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800388c:	f7ff fe46 	bl	800351c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00

0800389c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_InitTick+0x54>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_InitTick+0x58>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f967 	bl	8003b8e <HAL_SYSTICK_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00e      	b.n	80038e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d80a      	bhi.n	80038e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d0:	2200      	movs	r2, #0
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d8:	f000 f92f 	bl	8003b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038dc:	4a06      	ldr	r2, [pc, #24]	; (80038f8 <HAL_InitTick+0x5c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000003c 	.word	0x2000003c
 80038f4:	20000044 	.word	0x20000044
 80038f8:	20000040 	.word	0x20000040

080038fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_IncTick+0x20>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x24>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4413      	add	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_IncTick+0x24>)
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000044 	.word	0x20000044
 8003920:	20000a88 	.word	0x20000a88

08003924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return uwTick;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_GetTick+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000a88 	.word	0x20000a88

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff ffee 	bl	8003924 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffde 	bl	8003924 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000044 	.word	0x20000044

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4907      	ldr	r1, [pc, #28]	; (8003a20 <__NVIC_EnableIRQ+0x38>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0a      	blt.n	8003a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	490c      	ldr	r1, [pc, #48]	; (8003a70 <__NVIC_SetPriority+0x4c>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a4c:	e00a      	b.n	8003a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4908      	ldr	r1, [pc, #32]	; (8003a74 <__NVIC_SetPriority+0x50>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	761a      	strb	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000e100 	.word	0xe000e100
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0307 	rsb	r3, r3, #7
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf28      	it	cs
 8003a96:	2304      	movcs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d902      	bls.n	8003aa8 <NVIC_EncodePriority+0x30>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3b03      	subs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <NVIC_EncodePriority+0x32>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43d9      	mvns	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	4313      	orrs	r3, r2
         );
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	; 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af0:	d301      	bcc.n	8003af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af2:	2301      	movs	r3, #1
 8003af4:	e00f      	b.n	8003b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <SysTick_Config+0x40>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afe:	210f      	movs	r1, #15
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b04:	f7ff ff8e 	bl	8003a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <SysTick_Config+0x40>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <SysTick_Config+0x40>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	e000e010 	.word	0xe000e010

08003b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff29 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b4c:	f7ff ff3e 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff8e 	bl	8003a78 <NVIC_EncodePriority>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff5d 	bl	8003a24 <__NVIC_SetPriority>
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff31 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffa2 	bl	8003ae0 <SysTick_Config>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	; 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e16b      	b.n	8003e9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f040 815a 	bne.w	8003e96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d005      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d130      	bne.n	8003c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c30:	2201      	movs	r2, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 0201 	and.w	r2, r3, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d017      	beq.n	8003c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d123      	bne.n	8003cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	69b9      	ldr	r1, [r7, #24]
 8003ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80b4 	beq.w	8003e96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	4b60      	ldr	r3, [pc, #384]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a5f      	ldr	r2, [pc, #380]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d4a:	4a5b      	ldr	r2, [pc, #364]	; (8003eb8 <HAL_GPIO_Init+0x310>)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a52      	ldr	r2, [pc, #328]	; (8003ebc <HAL_GPIO_Init+0x314>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02b      	beq.n	8003dce <HAL_GPIO_Init+0x226>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a51      	ldr	r2, [pc, #324]	; (8003ec0 <HAL_GPIO_Init+0x318>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d025      	beq.n	8003dca <HAL_GPIO_Init+0x222>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a50      	ldr	r2, [pc, #320]	; (8003ec4 <HAL_GPIO_Init+0x31c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <HAL_GPIO_Init+0x21e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4f      	ldr	r2, [pc, #316]	; (8003ec8 <HAL_GPIO_Init+0x320>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d019      	beq.n	8003dc2 <HAL_GPIO_Init+0x21a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4e      	ldr	r2, [pc, #312]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_GPIO_Init+0x216>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4d      	ldr	r2, [pc, #308]	; (8003ed0 <HAL_GPIO_Init+0x328>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00d      	beq.n	8003dba <HAL_GPIO_Init+0x212>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4c      	ldr	r2, [pc, #304]	; (8003ed4 <HAL_GPIO_Init+0x32c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <HAL_GPIO_Init+0x20e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4b      	ldr	r2, [pc, #300]	; (8003ed8 <HAL_GPIO_Init+0x330>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_GPIO_Init+0x20a>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e00e      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003db2:	2308      	movs	r3, #8
 8003db4:	e00c      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003db6:	2306      	movs	r3, #6
 8003db8:	e00a      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003dba:	2305      	movs	r3, #5
 8003dbc:	e008      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	e006      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e004      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e002      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_GPIO_Init+0x228>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f002 0203 	and.w	r2, r2, #3
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	4093      	lsls	r3, r2
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de0:	4935      	ldr	r1, [pc, #212]	; (8003eb8 <HAL_GPIO_Init+0x310>)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dee:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e12:	4a32      	ldr	r2, [pc, #200]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e3c:	4a27      	ldr	r2, [pc, #156]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e66:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	f67f ae90 	bls.w	8003bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40021400 	.word	0x40021400
 8003ed4:	40021800 	.word	0x40021800
 8003ed8:	40021c00 	.word	0x40021c00
 8003edc:	40013c00 	.word	0x40013c00

08003ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e001      	b.n	8003f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f2c:	e003      	b.n	8003f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f54:	887a      	ldrh	r2, [r7, #2]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	041a      	lsls	r2, r3, #16
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	400b      	ands	r3, r1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	619a      	str	r2, [r3, #24]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e12b      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fae4 	bl	800356c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f002 ffdc 	bl	8006f98 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a81      	ldr	r2, [pc, #516]	; (80041ec <HAL_I2C_Init+0x274>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d807      	bhi.n	8003ffc <HAL_I2C_Init+0x84>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_I2C_Init+0x278>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf94      	ite	ls
 8003ff4:	2301      	movls	r3, #1
 8003ff6:	2300      	movhi	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e006      	b.n	800400a <HAL_I2C_Init+0x92>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <HAL_I2C_Init+0x27c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	bf94      	ite	ls
 8004004:	2301      	movls	r3, #1
 8004006:	2300      	movhi	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0e7      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a78      	ldr	r2, [pc, #480]	; (80041f8 <HAL_I2C_Init+0x280>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0c9b      	lsrs	r3, r3, #18
 800401c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a6a      	ldr	r2, [pc, #424]	; (80041ec <HAL_I2C_Init+0x274>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d802      	bhi.n	800404c <HAL_I2C_Init+0xd4>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3301      	adds	r3, #1
 800404a:	e009      	b.n	8004060 <HAL_I2C_Init+0xe8>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_I2C_Init+0x284>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	3301      	adds	r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	495c      	ldr	r1, [pc, #368]	; (80041ec <HAL_I2C_Init+0x274>)
 800407c:	428b      	cmp	r3, r1
 800407e:	d819      	bhi.n	80040b4 <HAL_I2C_Init+0x13c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e59      	subs	r1, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fbb1 f3f3 	udiv	r3, r1, r3
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004094:	400b      	ands	r3, r1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_I2C_Init+0x138>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e59      	subs	r1, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ae:	e051      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e04f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <HAL_I2C_Init+0x168>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e012      	b.n	8004106 <HAL_I2C_Init+0x18e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1e58      	subs	r0, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	0099      	lsls	r1, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Init+0x196>
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10e      	bne.n	8004134 <HAL_I2C_Init+0x1bc>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e58      	subs	r0, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	440b      	add	r3, r1
 8004124:	fbb0 f3f3 	udiv	r3, r0, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	0099      	lsls	r1, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	6809      	ldr	r1, [r1, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6911      	ldr	r1, [r2, #16]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	430b      	orrs	r3, r1
 8004196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	000186a0 	.word	0x000186a0
 80041f0:	001e847f 	.word	0x001e847f
 80041f4:	003d08ff 	.word	0x003d08ff
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004214:	f7ff fb86 	bl	8003924 <HAL_GetTick>
 8004218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 80e0 	bne.w	80043e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2319      	movs	r3, #25
 800422e:	2201      	movs	r2, #1
 8004230:	4970      	ldr	r1, [pc, #448]	; (80043f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 ff30 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	e0d3      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2C_Master_Transmit+0x50>
 800424c:	2302      	movs	r3, #2
 800424e:	e0cc      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d007      	beq.n	8004276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2221      	movs	r2, #33	; 0x21
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2210      	movs	r2, #16
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	893a      	ldrh	r2, [r7, #8]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a50      	ldr	r2, [pc, #320]	; (80043f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042b8:	8979      	ldrh	r1, [r7, #10]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fcea 	bl	8004c98 <I2C_MasterRequestWrite>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e08d      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042e4:	e066      	b.n	80043b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 ffaa 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d107      	bne.n	800430e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e06b      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11b      	bne.n	8004388 <HAL_I2C_Master_Transmit+0x188>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d017      	beq.n	8004388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	6a39      	ldr	r1, [r7, #32]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 ff9a 	bl	80052c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	2b04      	cmp	r3, #4
 800439e:	d107      	bne.n	80043b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e01a      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d194      	bne.n	80042e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	00100002 	.word	0x00100002
 80043f8:	ffff0000 	.word	0xffff0000

080043fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4603      	mov	r3, r0
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	460b      	mov	r3, r1
 8004410:	813b      	strh	r3, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004416:	f7ff fa85 	bl	8003924 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	f040 80d9 	bne.w	80045dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2319      	movs	r3, #25
 8004430:	2201      	movs	r2, #1
 8004432:	496d      	ldr	r1, [pc, #436]	; (80045e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fe2f 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
 8004442:	e0cc      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Mem_Write+0x56>
 800444e:	2302      	movs	r3, #2
 8004450:	e0c5      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d007      	beq.n	8004478 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	; 0x21
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a4d      	ldr	r2, [pc, #308]	; (80045ec <HAL_I2C_Mem_Write+0x1f0>)
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ba:	88f8      	ldrh	r0, [r7, #6]
 80044bc:	893a      	ldrh	r2, [r7, #8]
 80044be:	8979      	ldrh	r1, [r7, #10]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4603      	mov	r3, r0
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fc66 	bl	8004d9c <I2C_RequestMemoryWrite>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d052      	beq.n	800457c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e081      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 feb0 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d107      	bne.n	8004502 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06b      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d11b      	bne.n	800457c <HAL_I2C_Mem_Write+0x180>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d017      	beq.n	800457c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1aa      	bne.n	80044da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fe9c 	bl	80052c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2b04      	cmp	r3, #4
 800459a:	d107      	bne.n	80045ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e016      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	00100002 	.word	0x00100002
 80045ec:	ffff0000 	.word	0xffff0000

080045f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	; 0x30
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800460a:	f7ff f98b 	bl	8003924 <HAL_GetTick>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	f040 8208 	bne.w	8004a2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	2319      	movs	r3, #25
 8004624:	2201      	movs	r2, #1
 8004626:	497b      	ldr	r1, [pc, #492]	; (8004814 <HAL_I2C_Mem_Read+0x224>)
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fd35 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	e1fb      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_I2C_Mem_Read+0x56>
 8004642:	2302      	movs	r3, #2
 8004644:	e1f4      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2222      	movs	r2, #34	; 0x22
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004696:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_I2C_Mem_Read+0x228>)
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ae:	88f8      	ldrh	r0, [r7, #6]
 80046b0:	893a      	ldrh	r2, [r7, #8]
 80046b2:	8979      	ldrh	r1, [r7, #10]
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	4603      	mov	r3, r0
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fc02 	bl	8004ec8 <I2C_RequestMemoryRead>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1b0      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e184      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b01      	cmp	r3, #1
 8004704:	d11b      	bne.n	800473e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e164      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	2b02      	cmp	r3, #2
 8004744:	d11b      	bne.n	800477e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	e144      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004794:	e138      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	2b03      	cmp	r3, #3
 800479c:	f200 80f1 	bhi.w	8004982 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d123      	bne.n	80047f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fdcb 	bl	8005348 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e139      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ee:	e10b      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d14e      	bne.n	8004896 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2200      	movs	r2, #0
 8004800:	4906      	ldr	r1, [pc, #24]	; (800481c <HAL_I2C_Mem_Read+0x22c>)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fc48 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e10e      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
 8004812:	bf00      	nop
 8004814:	00100002 	.word	0x00100002
 8004818:	ffff0000 	.word	0xffff0000
 800481c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004894:	e0b8      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	2200      	movs	r2, #0
 800489e:	4966      	ldr	r1, [pc, #408]	; (8004a38 <HAL_I2C_Mem_Read+0x448>)
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fbf9 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0bf      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2200      	movs	r2, #0
 80048fa:	494f      	ldr	r1, [pc, #316]	; (8004a38 <HAL_I2C_Mem_Read+0x448>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fbcb 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e091      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004980:	e042      	b.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fcde 	bl	8005348 <I2C_WaitOnRXNEFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e04c      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d118      	bne.n	8004a08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f aec2 	bne.w	8004796 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e000      	b.n	8004a30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a2e:	2302      	movs	r3, #2
  }
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3728      	adds	r7, #40	; 0x28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	00010004 	.word	0x00010004

08004a3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a4c:	f7fe ff6a 	bl	8003924 <HAL_GetTick>
 8004a50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	f040 8111 	bne.w	8004c86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2319      	movs	r3, #25
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4988      	ldr	r1, [pc, #544]	; (8004c90 <HAL_I2C_IsDeviceReady+0x254>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fb12 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e104      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2C_IsDeviceReady+0x50>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0fd      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d007      	beq.n	8004ab2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2224      	movs	r2, #36	; 0x24
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a70      	ldr	r2, [pc, #448]	; (8004c94 <HAL_I2C_IsDeviceReady+0x258>)
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fad0 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0c:	d103      	bne.n	8004b16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0b6      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe fefb 	bl	8003924 <HAL_GetTick>
 8004b2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	bf0c      	ite	eq
 8004b3e:	2301      	moveq	r3, #1
 8004b40:	2300      	movne	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b5e:	e025      	b.n	8004bac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b60:	f7fe fee0 	bl	8003924 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <HAL_I2C_IsDeviceReady+0x13a>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	22a0      	movs	r2, #160	; 0xa0
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2ba0      	cmp	r3, #160	; 0xa0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_I2C_IsDeviceReady+0x188>
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_I2C_IsDeviceReady+0x188>
 8004bbe:	7dbb      	ldrb	r3, [r7, #22]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0cd      	beq.n	8004b60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d129      	bne.n	8004c2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2319      	movs	r3, #25
 8004c06:	2201      	movs	r2, #1
 8004c08:	4921      	ldr	r1, [pc, #132]	; (8004c90 <HAL_I2C_IsDeviceReady+0x254>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fa44 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e036      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e02c      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2319      	movs	r3, #25
 8004c4e:	2201      	movs	r2, #1
 8004c50:	490f      	ldr	r1, [pc, #60]	; (8004c90 <HAL_I2C_IsDeviceReady+0x254>)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fa20 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e012      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	f4ff af32 	bcc.w	8004ad6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	00100002 	.word	0x00100002
 8004c94:	ffff0000 	.word	0xffff0000

08004c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d006      	beq.n	8004cc2 <I2C_MasterRequestWrite+0x2a>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d003      	beq.n	8004cc2 <I2C_MasterRequestWrite+0x2a>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cc0:	d108      	bne.n	8004cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e00b      	b.n	8004cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	2b12      	cmp	r3, #18
 8004cda:	d107      	bne.n	8004cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f9cd 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d103      	bne.n	8004d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e035      	b.n	8004d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d28:	d108      	bne.n	8004d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d2a:	897b      	ldrh	r3, [r7, #10]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d38:	611a      	str	r2, [r3, #16]
 8004d3a:	e01b      	b.n	8004d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	11db      	asrs	r3, r3, #7
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f063 030f 	orn	r3, r3, #15
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	490e      	ldr	r1, [pc, #56]	; (8004d94 <I2C_MasterRequestWrite+0xfc>)
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f9f3 	bl	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e010      	b.n	8004d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d6a:	897b      	ldrh	r3, [r7, #10]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4907      	ldr	r1, [pc, #28]	; (8004d98 <I2C_MasterRequestWrite+0x100>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f9e3 	bl	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	00010008 	.word	0x00010008
 8004d98:	00010002 	.word	0x00010002

08004d9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	817b      	strh	r3, [r7, #10]
 8004dae:	460b      	mov	r3, r1
 8004db0:	813b      	strh	r3, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f960 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dec:	d103      	bne.n	8004df6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e05f      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dfa:	897b      	ldrh	r3, [r7, #10]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	492d      	ldr	r1, [pc, #180]	; (8004ec4 <I2C_RequestMemoryWrite+0x128>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f998 	bl	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04c      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e38:	6a39      	ldr	r1, [r7, #32]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa02 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d107      	bne.n	8004e5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e02b      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e68:	893b      	ldrh	r3, [r7, #8]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	611a      	str	r2, [r3, #16]
 8004e72:	e021      	b.n	8004eb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	6a39      	ldr	r1, [r7, #32]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f9dc 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d107      	bne.n	8004eaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e005      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	00010002 	.word	0x00010002

08004ec8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	817b      	strh	r3, [r7, #10]
 8004eda:	460b      	mov	r3, r1
 8004edc:	813b      	strh	r3, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f8c2 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f28:	d103      	bne.n	8004f32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0aa      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f36:	897b      	ldrh	r3, [r7, #10]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	4952      	ldr	r1, [pc, #328]	; (8005094 <I2C_RequestMemoryRead+0x1cc>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f8fa 	bl	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e097      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6a39      	ldr	r1, [r7, #32]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f964 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d107      	bne.n	8004f9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e076      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa4:	893b      	ldrh	r3, [r7, #8]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	611a      	str	r2, [r3, #16]
 8004fae:	e021      	b.n	8004ff4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	6a39      	ldr	r1, [r7, #32]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f93e 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d107      	bne.n	8004fe6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e050      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fea:	893b      	ldrh	r3, [r7, #8]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	6a39      	ldr	r1, [r7, #32]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f923 	bl	8005244 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2b04      	cmp	r3, #4
 800500a:	d107      	bne.n	800501c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e035      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800502e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	2200      	movs	r2, #0
 8005038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f82b 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d103      	bne.n	8005060 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e013      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005064:	897b      	ldrh	r3, [r7, #10]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	4906      	ldr	r1, [pc, #24]	; (8005094 <I2C_RequestMemoryRead+0x1cc>)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f863 	bl	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00010002 	.word	0x00010002

08005098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a8:	e025      	b.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d021      	beq.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fe fc37 	bl	8003924 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d116      	bne.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e023      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10d      	bne.n	800511c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	43da      	mvns	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	e00c      	b.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	43da      	mvns	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	429a      	cmp	r2, r3
 800513a:	d0b6      	beq.n	80050aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005154:	e051      	b.n	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d123      	bne.n	80051ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800517e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e046      	b.n	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b4:	d021      	beq.n	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7fe fbb5 	bl	8003924 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d116      	bne.n	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e020      	b.n	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10c      	bne.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	43da      	mvns	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e00b      	b.n	8005236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	43da      	mvns	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d18d      	bne.n	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005250:	e02d      	b.n	80052ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f8ce 	bl	80053f4 <I2C_IsAcknowledgeFailed>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e02d      	b.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005268:	d021      	beq.n	80052ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526a:	f7fe fb5b 	bl	8003924 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d116      	bne.n	80052ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e007      	b.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d1ca      	bne.n	8005252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052d2:	e02d      	b.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f88d 	bl	80053f4 <I2C_IsAcknowledgeFailed>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e02d      	b.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ea:	d021      	beq.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ec:	f7fe fb1a 	bl	8003924 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d116      	bne.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e007      	b.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b04      	cmp	r3, #4
 800533c:	d1ca      	bne.n	80052d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005354:	e042      	b.n	80053dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b10      	cmp	r3, #16
 8005362:	d119      	bne.n	8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0210 	mvn.w	r2, #16
 800536c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e029      	b.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005398:	f7fe fac4 	bl	8003924 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d116      	bne.n	80053dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e007      	b.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d1b5      	bne.n	8005356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d11b      	bne.n	8005444 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005414:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f043 0204 	orr.w	r2, r3, #4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005454:	b08f      	sub	sp, #60	; 0x3c
 8005456:	af0a      	add	r7, sp, #40	; 0x28
 8005458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e10f      	b.n	8005684 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f005 fbf0 	bl	800ac64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2203      	movs	r2, #3
 8005488:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f002 fb23 	bl	8007aee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	687e      	ldr	r6, [r7, #4]
 80054b0:	466d      	mov	r5, sp
 80054b2:	f106 0410 	add.w	r4, r6, #16
 80054b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80054c6:	1d33      	adds	r3, r6, #4
 80054c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	f002 f9fa 	bl	80078c4 <USB_CoreInit>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e0d0      	b.n	8005684 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 fb11 	bl	8007b10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
 80054f2:	e04a      	b.n	800558a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054f4:	7bfa      	ldrb	r2, [r7, #15]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	333d      	adds	r3, #61	; 0x3d
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005508:	7bfa      	ldrb	r2, [r7, #15]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	333c      	adds	r3, #60	; 0x3c
 8005518:	7bfa      	ldrb	r2, [r7, #15]
 800551a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800551c:	7bfa      	ldrb	r2, [r7, #15]
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	b298      	uxth	r0, r3
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	3342      	adds	r3, #66	; 0x42
 8005530:	4602      	mov	r2, r0
 8005532:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	333f      	adds	r3, #63	; 0x3f
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005548:	7bfa      	ldrb	r2, [r7, #15]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3344      	adds	r3, #68	; 0x44
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800555c:	7bfa      	ldrb	r2, [r7, #15]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	3348      	adds	r3, #72	; 0x48
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3350      	adds	r3, #80	; 0x50
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	3301      	adds	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d3af      	bcc.n	80054f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	e044      	b.n	8005624 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800559a:	7bfa      	ldrb	r2, [r7, #15]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055b0:	7bfa      	ldrb	r2, [r7, #15]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80055c2:	7bfa      	ldrb	r2, [r7, #15]
 80055c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	3301      	adds	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	7bfa      	ldrb	r2, [r7, #15]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3b5      	bcc.n	800559a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	687e      	ldr	r6, [r7, #4]
 8005636:	466d      	mov	r5, sp
 8005638:	f106 0410 	add.w	r4, r6, #16
 800563c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005648:	e885 0003 	stmia.w	r5, {r0, r1}
 800564c:	1d33      	adds	r3, r6, #4
 800564e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005650:	6838      	ldr	r0, [r7, #0]
 8005652:	f002 faa9 	bl	8007ba8 <USB_DevInit>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e00d      	b.n	8005684 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f003 fb25 	bl	8008ccc <USB_DevDisconnect>

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800568c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_PCD_Start+0x1c>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e020      	b.n	80056ea <HAL_PCD_Start+0x5e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d109      	bne.n	80056cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d005      	beq.n	80056cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f002 f9fb 	bl	8007acc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f003 fad5 	bl	8008c8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056f2:	b590      	push	{r4, r7, lr}
 80056f4:	b08d      	sub	sp, #52	; 0x34
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f003 fb93 	bl	8008e34 <USB_GetMode>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 839d 	bne.w	8005e50 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f003 faf7 	bl	8008d0e <USB_ReadInterrupts>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8393 	beq.w	8005e4e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f003 faee 	bl	8008d0e <USB_ReadInterrupts>
 8005732:	4603      	mov	r3, r0
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d107      	bne.n	800574c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f002 0202 	and.w	r2, r2, #2
 800574a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f003 fadc 	bl	8008d0e <USB_ReadInterrupts>
 8005756:	4603      	mov	r3, r0
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d161      	bne.n	8005824 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0210 	bic.w	r2, r2, #16
 800576e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f003 020f 	and.w	r2, r3, #15
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	3304      	adds	r3, #4
 800578e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	0c5b      	lsrs	r3, r3, #17
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	2b02      	cmp	r3, #2
 800579a:	d124      	bne.n	80057e6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d035      	beq.n	8005814 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	6a38      	ldr	r0, [r7, #32]
 80057bc:	f003 f913 	bl	80089e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057cc:	441a      	add	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057de:	441a      	add	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	619a      	str	r2, [r3, #24]
 80057e4:	e016      	b.n	8005814 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	0c5b      	lsrs	r3, r3, #17
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d110      	bne.n	8005814 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057f8:	2208      	movs	r2, #8
 80057fa:	4619      	mov	r1, r3
 80057fc:	6a38      	ldr	r0, [r7, #32]
 80057fe:	f003 f8f2 	bl	80089e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800580e:	441a      	add	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0210 	orr.w	r2, r2, #16
 8005822:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f003 fa70 	bl	8008d0e <USB_ReadInterrupts>
 800582e:	4603      	mov	r3, r0
 8005830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005834:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005838:	d16e      	bne.n	8005918 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f003 fa76 	bl	8008d34 <USB_ReadDevAllOutEpInterrupt>
 8005848:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800584a:	e062      	b.n	8005912 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d057      	beq.n	8005906 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f003 fa9b 	bl	8008d9c <USB_ReadDevOutEPInterrupt>
 8005866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	461a      	mov	r2, r3
 8005880:	2301      	movs	r3, #1
 8005882:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fdb0 	bl	80063ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	2308      	movs	r3, #8
 80058a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 feaa 	bl	8006604 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	461a      	mov	r2, r3
 80058c8:	2310      	movs	r3, #16
 80058ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	2320      	movs	r3, #32
 80058e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	461a      	mov	r2, r3
 8005900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005904:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	3301      	adds	r3, #1
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d199      	bne.n	800584c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f003 f9f6 	bl	8008d0e <USB_ReadInterrupts>
 8005922:	4603      	mov	r3, r0
 8005924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800592c:	f040 80c0 	bne.w	8005ab0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f003 fa17 	bl	8008d68 <USB_ReadDevAllInEpInterrupt>
 800593a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005940:	e0b2      	b.n	8005aa8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80a7 	beq.w	8005a9c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f003 fa3d 	bl	8008dd8 <USB_ReadDevInEPInterrupt>
 800595e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d057      	beq.n	8005a1a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	2201      	movs	r2, #1
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	43db      	mvns	r3, r3
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598a:	4013      	ands	r3, r2
 800598c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	461a      	mov	r2, r3
 800599c:	2301      	movs	r3, #1
 800599e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d132      	bne.n	8005a0e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3348      	adds	r3, #72	; 0x48
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4403      	add	r3, r0
 80059c8:	3344      	adds	r3, #68	; 0x44
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4419      	add	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d2:	4613      	mov	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4403      	add	r3, r0
 80059dc:	3348      	adds	r3, #72	; 0x48
 80059de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d113      	bne.n	8005a0e <HAL_PCD_IRQHandler+0x31c>
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3350      	adds	r3, #80	; 0x50
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a06:	461a      	mov	r2, r3
 8005a08:	2101      	movs	r1, #1
 8005a0a:	f003 fa45 	bl	8008e98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f005 f9a6 	bl	800ad66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	461a      	mov	r2, r3
 8005a32:	2308      	movs	r3, #8
 8005a34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2310      	movs	r3, #16
 8005a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	461a      	mov	r2, r3
 8005a6a:	2340      	movs	r3, #64	; 0x40
 8005a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	461a      	mov	r2, r3
 8005a86:	2302      	movs	r3, #2
 8005a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fc1b 	bl	80062d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f47f af49 	bne.w	8005942 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f003 f92a 	bl	8008d0e <USB_ReadInterrupts>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac4:	d122      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d108      	bne.n	8005af6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005aec:	2100      	movs	r1, #0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fe26 	bl	8006740 <HAL_PCDEx_LPM_Callback>
 8005af4:	e002      	b.n	8005afc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f005 f9ac 	bl	800ae54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f003 f8fc 	bl	8008d0e <USB_ReadInterrupts>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b20:	d112      	bne.n	8005b48 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d102      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f005 f968 	bl	800ae08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695a      	ldr	r2, [r3, #20]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f003 f8de 	bl	8008d0e <USB_ReadInterrupts>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5c:	f040 80c7 	bne.w	8005cee <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2110      	movs	r1, #16
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 f978 	bl	8007e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b84:	e056      	b.n	8005c34 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	461a      	mov	r2, r3
 8005b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bb8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	461a      	mov	r2, r3
 8005be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	3301      	adds	r3, #1
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d3a3      	bcc.n	8005b86 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f043 030b 	orr.w	r3, r3, #11
 8005c6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c80:	f043 030b 	orr.w	r3, r3, #11
 8005c84:	6453      	str	r3, [r2, #68]	; 0x44
 8005c86:	e015      	b.n	8005cb4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005c9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cae:	f043 030b 	orr.w	r3, r3, #11
 8005cb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f003 f8dd 	bl	8008e98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f003 f80b 	bl	8008d0e <USB_ReadInterrupts>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	d124      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f003 f8a1 	bl	8008e50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 f909 	bl	8007f2a <USB_GetDevSpeed>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681c      	ldr	r4, [r3, #0]
 8005d24:	f001 f92c 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8005d28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	4620      	mov	r0, r4
 8005d34:	f001 fe28 	bl	8007988 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f005 f83c 	bl	800adb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 ffdb 	bl	8008d0e <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d10a      	bne.n	8005d78 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f005 f819 	bl	800ad9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f002 0208 	and.w	r2, r2, #8
 8005d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f002 ffc6 	bl	8008d0e <USB_ReadInterrupts>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8c:	d10f      	bne.n	8005dae <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f005 f87b 	bl	800ae94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f002 ffab 	bl	8008d0e <USB_ReadInterrupts>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dc2:	d10f      	bne.n	8005de4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f005 f84e 	bl	800ae70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f002 ff90 	bl	8008d0e <USB_ReadInterrupts>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df8:	d10a      	bne.n	8005e10 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f005 f85c 	bl	800aeb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f002 ff7a 	bl	8008d0e <USB_ReadInterrupts>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d115      	bne.n	8005e50 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f005 f84c 	bl	800aed4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	e000      	b.n	8005e50 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005e4e:	bf00      	nop
    }
  }
}
 8005e50:	3734      	adds	r7, #52	; 0x34
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}

08005e56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_PCD_SetAddress+0x1a>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e013      	b.n	8005e98 <HAL_PCD_SetAddress+0x42>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f002 fed8 	bl	8008c3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	70fb      	strb	r3, [r7, #3]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	803b      	strh	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da0f      	bge.n	8005ee6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	f003 020f 	and.w	r2, r3, #15
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	3338      	adds	r3, #56	; 0x38
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	3304      	adds	r3, #4
 8005edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	705a      	strb	r2, [r3, #1]
 8005ee4:	e00f      	b.n	8005f06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4413      	add	r3, r2
 8005efc:	3304      	adds	r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f12:	883a      	ldrh	r2, [r7, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	78ba      	ldrb	r2, [r7, #2]
 8005f1c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f30:	78bb      	ldrb	r3, [r7, #2]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d102      	bne.n	8005f3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_PCD_EP_Open+0xaa>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e00e      	b.n	8005f68 <HAL_PCD_EP_Open+0xc8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f002 f80b 	bl	8007f74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005f66:	7afb      	ldrb	r3, [r7, #11]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da0f      	bge.n	8005fa4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 020f 	and.w	r2, r3, #15
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	3338      	adds	r3, #56	; 0x38
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4413      	add	r3, r2
 8005f98:	3304      	adds	r3, #4
 8005f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	705a      	strb	r2, [r3, #1]
 8005fa2:	e00f      	b.n	8005fc4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	f003 020f 	and.w	r2, r3, #15
 8005faa:	4613      	mov	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3304      	adds	r3, #4
 8005fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_PCD_EP_Close+0x6e>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e00e      	b.n	8005ffc <HAL_PCD_EP_Close+0x8c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f002 f849 	bl	8008084 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	460b      	mov	r3, r1
 8006012:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	f003 020f 	and.w	r2, r3, #15
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	3304      	adds	r3, #4
 800602c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	b2da      	uxtb	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d102      	bne.n	8006060 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	6979      	ldr	r1, [r7, #20]
 8006078:	f002 fb24 	bl	80086c4 <USB_EP0StartXfer>
 800607c:	e008      	b.n	8006090 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	6979      	ldr	r1, [r7, #20]
 800608c:	f002 f8d6 	bl	800823c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80060bc:	681b      	ldr	r3, [r3, #0]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	460b      	mov	r3, r1
 80060d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	4613      	mov	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	3338      	adds	r3, #56	; 0x38
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	3304      	adds	r3, #4
 80060f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2201      	movs	r2, #1
 8006108:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	b2da      	uxtb	r2, r3
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d102      	bne.n	8006124 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	f002 fac2 	bl	80086c4 <USB_EP0StartXfer>
 8006140:	e008      	b.n	8006154 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	f002 f874 	bl	800823c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d901      	bls.n	800617c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e050      	b.n	800621e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800617c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006180:	2b00      	cmp	r3, #0
 8006182:	da0f      	bge.n	80061a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	3338      	adds	r3, #56	; 0x38
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4413      	add	r3, r2
 8006198:	3304      	adds	r3, #4
 800619a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	705a      	strb	r2, [r3, #1]
 80061a2:	e00d      	b.n	80061c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_PCD_EP_SetStall+0x82>
 80061dc:	2302      	movs	r3, #2
 80061de:	e01e      	b.n	800621e <HAL_PCD_EP_SetStall+0xc0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fc51 	bl	8008a96 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	b2d9      	uxtb	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800620e:	461a      	mov	r2, r3
 8006210:	f002 fe42 	bl	8008e98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	f003 020f 	and.w	r2, r3, #15
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d901      	bls.n	8006244 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e042      	b.n	80062ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da0f      	bge.n	800626c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	3338      	adds	r3, #56	; 0x38
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	4413      	add	r3, r2
 8006260:	3304      	adds	r3, #4
 8006262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	705a      	strb	r2, [r3, #1]
 800626a:	e00f      	b.n	800628c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	4613      	mov	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	3304      	adds	r3, #4
 8006284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	b2da      	uxtb	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_PCD_EP_ClrStall+0x86>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e00e      	b.n	80062ca <HAL_PCD_EP_ClrStall+0xa4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f002 fc59 	bl	8008b72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af02      	add	r7, sp, #8
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	3338      	adds	r3, #56	; 0x38
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	3304      	adds	r3, #4
 80062f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	429a      	cmp	r2, r3
 8006304:	d901      	bls.n	800630a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e06c      	b.n	80063e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	429a      	cmp	r2, r3
 800631e:	d902      	bls.n	8006326 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3303      	adds	r3, #3
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800632e:	e02b      	b.n	8006388 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	429a      	cmp	r2, r3
 8006344:	d902      	bls.n	800634c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3303      	adds	r3, #3
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68d9      	ldr	r1, [r3, #12]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006364:	b2db      	uxtb	r3, r3
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f002 fafd 	bl	800896a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	441a      	add	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	b29b      	uxth	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	429a      	cmp	r2, r3
 800639c:	d809      	bhi.n	80063b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d203      	bcs.n	80063b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1be      	bne.n	8006330 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d811      	bhi.n	80063e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	2201      	movs	r2, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	43db      	mvns	r3, r3
 80063d8:	6939      	ldr	r1, [r7, #16]
 80063da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063de:	4013      	ands	r3, r2
 80063e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	333c      	adds	r3, #60	; 0x3c
 8006404:	3304      	adds	r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b01      	cmp	r3, #1
 8006420:	f040 80a0 	bne.w	8006564 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d015      	beq.n	800645a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a72      	ldr	r2, [pc, #456]	; (80065fc <PCD_EP_OutXfrComplete_int+0x210>)
 8006432:	4293      	cmp	r3, r2
 8006434:	f240 80dd 	bls.w	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80d7 	beq.w	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	461a      	mov	r2, r3
 8006452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006456:	6093      	str	r3, [r2, #8]
 8006458:	e0cb      	b.n	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	2320      	movs	r3, #32
 8006474:	6093      	str	r3, [r2, #8]
 8006476:	e0bc      	b.n	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 80b7 	bne.w	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4a5d      	ldr	r2, [pc, #372]	; (80065fc <PCD_EP_OutXfrComplete_int+0x210>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d90f      	bls.n	80064ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	461a      	mov	r2, r3
 80064a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a8:	6093      	str	r3, [r2, #8]
 80064aa:	e0a2      	b.n	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	0159      	lsls	r1, r3, #5
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	440b      	add	r3, r1
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80064d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4403      	add	r3, r0
 80064e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80064e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064fa:	6819      	ldr	r1, [r3, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4403      	add	r3, r0
 800650a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4419      	add	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	4613      	mov	r3, r2
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4403      	add	r3, r0
 8006520:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006524:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d114      	bne.n	8006556 <PCD_EP_OutXfrComplete_int+0x16a>
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800654e:	461a      	mov	r2, r3
 8006550:	2101      	movs	r1, #1
 8006552:	f002 fca1 	bl	8008e98 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f004 fbe7 	bl	800ad30 <HAL_PCD_DataOutStageCallback>
 8006562:	e046      	b.n	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a26      	ldr	r2, [pc, #152]	; (8006600 <PCD_EP_OutXfrComplete_int+0x214>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d124      	bne.n	80065b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	461a      	mov	r2, r3
 8006584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006588:	6093      	str	r3, [r2, #8]
 800658a:	e032      	b.n	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	461a      	mov	r2, r3
 80065a4:	2320      	movs	r3, #32
 80065a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f004 fbbe 	bl	800ad30 <HAL_PCD_DataOutStageCallback>
 80065b4:	e01d      	b.n	80065f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d114      	bne.n	80065e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065de:	461a      	mov	r2, r3
 80065e0:	2100      	movs	r1, #0
 80065e2:	f002 fc59 	bl	8008e98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f004 fb9f 	bl	800ad30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	4f54300a 	.word	0x4f54300a
 8006600:	4f54310a 	.word	0x4f54310a

08006604 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	333c      	adds	r3, #60	; 0x3c
 800661c:	3304      	adds	r3, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <PCD_EP_OutSetupPacket_int+0x88>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d90e      	bls.n	8006658 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	461a      	mov	r2, r3
 8006652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006656:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f004 fb57 	bl	800ad0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <PCD_EP_OutSetupPacket_int+0x88>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d90c      	bls.n	8006680 <PCD_EP_OutSetupPacket_int+0x7c>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d108      	bne.n	8006680 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006678:	461a      	mov	r2, r3
 800667a:	2101      	movs	r1, #1
 800667c:	f002 fc0c 	bl	8008e98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	4f54300a 	.word	0x4f54300a

08006690 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
 800669c:	4613      	mov	r3, r2
 800669e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d107      	bne.n	80066be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066ae:	883b      	ldrh	r3, [r7, #0]
 80066b0:	0419      	lsls	r1, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
 80066bc:	e028      	b.n	8006710 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4413      	add	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
 80066d0:	e00d      	b.n	80066ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	3340      	adds	r3, #64	; 0x40
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	3301      	adds	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3ec      	bcc.n	80066d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066f8:	883b      	ldrh	r3, [r7, #0]
 80066fa:	0418      	lsls	r0, r3, #16
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	3b01      	subs	r3, #1
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4302      	orrs	r2, r0
 8006708:	3340      	adds	r3, #64	; 0x40
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	887a      	ldrh	r2, [r7, #2]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e264      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d075      	beq.n	8006862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006776:	4ba3      	ldr	r3, [pc, #652]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b04      	cmp	r3, #4
 8006780:	d00c      	beq.n	800679c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006782:	4ba0      	ldr	r3, [pc, #640]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800678a:	2b08      	cmp	r3, #8
 800678c:	d112      	bne.n	80067b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800678e:	4b9d      	ldr	r3, [pc, #628]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800679a:	d10b      	bne.n	80067b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800679c:	4b99      	ldr	r3, [pc, #612]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d05b      	beq.n	8006860 <HAL_RCC_OscConfig+0x108>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d157      	bne.n	8006860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e23f      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d106      	bne.n	80067cc <HAL_RCC_OscConfig+0x74>
 80067be:	4b91      	ldr	r3, [pc, #580]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a90      	ldr	r2, [pc, #576]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e01d      	b.n	8006808 <HAL_RCC_OscConfig+0xb0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCC_OscConfig+0x98>
 80067d6:	4b8b      	ldr	r3, [pc, #556]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a8a      	ldr	r2, [pc, #552]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b88      	ldr	r3, [pc, #544]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a87      	ldr	r2, [pc, #540]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e00b      	b.n	8006808 <HAL_RCC_OscConfig+0xb0>
 80067f0:	4b84      	ldr	r3, [pc, #528]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a83      	ldr	r2, [pc, #524]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	4b81      	ldr	r3, [pc, #516]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a80      	ldr	r2, [pc, #512]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d013      	beq.n	8006838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006810:	f7fd f888 	bl	8003924 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006818:	f7fd f884 	bl	8003924 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b64      	cmp	r3, #100	; 0x64
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e204      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682a:	4b76      	ldr	r3, [pc, #472]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0f0      	beq.n	8006818 <HAL_RCC_OscConfig+0xc0>
 8006836:	e014      	b.n	8006862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fd f874 	bl	8003924 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006840:	f7fd f870 	bl	8003924 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b64      	cmp	r3, #100	; 0x64
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e1f0      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006852:	4b6c      	ldr	r3, [pc, #432]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0xe8>
 800685e:	e000      	b.n	8006862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d063      	beq.n	8006936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800686e:	4b65      	ldr	r3, [pc, #404]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800687a:	4b62      	ldr	r3, [pc, #392]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006882:	2b08      	cmp	r3, #8
 8006884:	d11c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006886:	4b5f      	ldr	r3, [pc, #380]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d116      	bne.n	80068c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006892:	4b5c      	ldr	r3, [pc, #368]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_RCC_OscConfig+0x152>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e1c4      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068aa:	4b56      	ldr	r3, [pc, #344]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4952      	ldr	r1, [pc, #328]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068be:	e03a      	b.n	8006936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c8:	4b4f      	ldr	r3, [pc, #316]	; (8006a08 <HAL_RCC_OscConfig+0x2b0>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ce:	f7fd f829 	bl	8003924 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068d6:	f7fd f825 	bl	8003924 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e1a5      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e8:	4b46      	ldr	r3, [pc, #280]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f0      	beq.n	80068d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f4:	4b43      	ldr	r3, [pc, #268]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4940      	ldr	r1, [pc, #256]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
 8006908:	e015      	b.n	8006936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800690a:	4b3f      	ldr	r3, [pc, #252]	; (8006a08 <HAL_RCC_OscConfig+0x2b0>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fd f808 	bl	8003924 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006918:	f7fd f804 	bl	8003924 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e184      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692a:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d030      	beq.n	80069a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800694a:	4b30      	ldr	r3, [pc, #192]	; (8006a0c <HAL_RCC_OscConfig+0x2b4>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fc ffe8 	bl	8003924 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006958:	f7fc ffe4 	bl	8003924 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e164      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696a:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0x200>
 8006976:	e015      	b.n	80069a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006978:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <HAL_RCC_OscConfig+0x2b4>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697e:	f7fc ffd1 	bl	8003924 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006986:	f7fc ffcd 	bl	8003924 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e14d      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006998:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 800699a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f0      	bne.n	8006986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80a0 	beq.w	8006af2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6413      	str	r3, [r2, #64]	; 0x40
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <HAL_RCC_OscConfig+0x2b8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d121      	bne.n	8006a32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <HAL_RCC_OscConfig+0x2b8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <HAL_RCC_OscConfig+0x2b8>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fa:	f7fc ff93 	bl	8003924 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a00:	e011      	b.n	8006a26 <HAL_RCC_OscConfig+0x2ce>
 8006a02:	bf00      	nop
 8006a04:	40023800 	.word	0x40023800
 8006a08:	42470000 	.word	0x42470000
 8006a0c:	42470e80 	.word	0x42470e80
 8006a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a14:	f7fc ff86 	bl	8003924 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e106      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a26:	4b85      	ldr	r3, [pc, #532]	; (8006c3c <HAL_RCC_OscConfig+0x4e4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d106      	bne.n	8006a48 <HAL_RCC_OscConfig+0x2f0>
 8006a3a:	4b81      	ldr	r3, [pc, #516]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	4a80      	ldr	r2, [pc, #512]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6713      	str	r3, [r2, #112]	; 0x70
 8006a46:	e01c      	b.n	8006a82 <HAL_RCC_OscConfig+0x32a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b05      	cmp	r3, #5
 8006a4e:	d10c      	bne.n	8006a6a <HAL_RCC_OscConfig+0x312>
 8006a50:	4b7b      	ldr	r3, [pc, #492]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a54:	4a7a      	ldr	r2, [pc, #488]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a56:	f043 0304 	orr.w	r3, r3, #4
 8006a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a5c:	4b78      	ldr	r3, [pc, #480]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a60:	4a77      	ldr	r2, [pc, #476]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	6713      	str	r3, [r2, #112]	; 0x70
 8006a68:	e00b      	b.n	8006a82 <HAL_RCC_OscConfig+0x32a>
 8006a6a:	4b75      	ldr	r3, [pc, #468]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	4a74      	ldr	r2, [pc, #464]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	6713      	str	r3, [r2, #112]	; 0x70
 8006a76:	4b72      	ldr	r3, [pc, #456]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d015      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8a:	f7fc ff4b 	bl	8003924 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a90:	e00a      	b.n	8006aa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a92:	f7fc ff47 	bl	8003924 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e0c5      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa8:	4b65      	ldr	r3, [pc, #404]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ee      	beq.n	8006a92 <HAL_RCC_OscConfig+0x33a>
 8006ab4:	e014      	b.n	8006ae0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab6:	f7fc ff35 	bl	8003924 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006abe:	f7fc ff31 	bl	8003924 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e0af      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ad4:	4b5a      	ldr	r3, [pc, #360]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1ee      	bne.n	8006abe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d105      	bne.n	8006af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae6:	4b56      	ldr	r3, [pc, #344]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	4a55      	ldr	r2, [pc, #340]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 809b 	beq.w	8006c32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006afc:	4b50      	ldr	r3, [pc, #320]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 030c 	and.w	r3, r3, #12
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d05c      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d141      	bne.n	8006b94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b10:	4b4c      	ldr	r3, [pc, #304]	; (8006c44 <HAL_RCC_OscConfig+0x4ec>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b16:	f7fc ff05 	bl	8003924 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1e:	f7fc ff01 	bl	8003924 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e081      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b30:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f0      	bne.n	8006b1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69da      	ldr	r2, [r3, #28]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	019b      	lsls	r3, r3, #6
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	3b01      	subs	r3, #1
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	061b      	lsls	r3, r3, #24
 8006b60:	4937      	ldr	r1, [pc, #220]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b66:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <HAL_RCC_OscConfig+0x4ec>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6c:	f7fc feda 	bl	8003924 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b74:	f7fc fed6 	bl	8003924 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e056      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b86:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0x41c>
 8006b92:	e04e      	b.n	8006c32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b94:	4b2b      	ldr	r3, [pc, #172]	; (8006c44 <HAL_RCC_OscConfig+0x4ec>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9a:	f7fc fec3 	bl	8003924 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba2:	f7fc febf 	bl	8003924 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e03f      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb4:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f0      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x44a>
 8006bc0:	e037      	b.n	8006c32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e032      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bce:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <HAL_RCC_OscConfig+0x4e8>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d028      	beq.n	8006c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d121      	bne.n	8006c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d11a      	bne.n	8006c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bfe:	4013      	ands	r3, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d111      	bne.n	8006c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	3b01      	subs	r3, #1
 8006c18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d001      	beq.n	8006c32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40007000 	.word	0x40007000
 8006c40:	40023800 	.word	0x40023800
 8006c44:	42470060 	.word	0x42470060

08006c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0cc      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b68      	ldr	r3, [pc, #416]	; (8006e00 <HAL_RCC_ClockConfig+0x1b8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d90c      	bls.n	8006c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b65      	ldr	r3, [pc, #404]	; (8006e00 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c72:	4b63      	ldr	r3, [pc, #396]	; (8006e00 <HAL_RCC_ClockConfig+0x1b8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d001      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0b8      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d020      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c9c:	4b59      	ldr	r3, [pc, #356]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	4a58      	ldr	r2, [pc, #352]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cb4:	4b53      	ldr	r3, [pc, #332]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4a52      	ldr	r2, [pc, #328]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc0:	4b50      	ldr	r3, [pc, #320]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	494d      	ldr	r1, [pc, #308]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d044      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce6:	4b47      	ldr	r3, [pc, #284]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d119      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e07f      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d003      	beq.n	8006d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d107      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d06:	4b3f      	ldr	r3, [pc, #252]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e06f      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d16:	4b3b      	ldr	r3, [pc, #236]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e067      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d26:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 0203 	bic.w	r2, r3, #3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4934      	ldr	r1, [pc, #208]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d38:	f7fc fdf4 	bl	8003924 <HAL_GetTick>
 8006d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3e:	e00a      	b.n	8006d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d40:	f7fc fdf0 	bl	8003924 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e04f      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d56:	4b2b      	ldr	r3, [pc, #172]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 020c 	and.w	r2, r3, #12
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d1eb      	bne.n	8006d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d68:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <HAL_RCC_ClockConfig+0x1b8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d20c      	bcs.n	8006d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d76:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <HAL_RCC_ClockConfig+0x1b8>)
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b20      	ldr	r3, [pc, #128]	; (8006e00 <HAL_RCC_ClockConfig+0x1b8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e032      	b.n	8006df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d008      	beq.n	8006dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4916      	ldr	r1, [pc, #88]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dba:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	490e      	ldr	r1, [pc, #56]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dce:	f000 f821 	bl	8006e14 <HAL_RCC_GetSysClockFreq>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	091b      	lsrs	r3, r3, #4
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	490a      	ldr	r1, [pc, #40]	; (8006e08 <HAL_RCC_ClockConfig+0x1c0>)
 8006de0:	5ccb      	ldrb	r3, [r1, r3]
 8006de2:	fa22 f303 	lsr.w	r3, r2, r3
 8006de6:	4a09      	ldr	r2, [pc, #36]	; (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fc fd54 	bl	800389c <HAL_InitTick>

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023c00 	.word	0x40023c00
 8006e04:	40023800 	.word	0x40023800
 8006e08:	0800cb34 	.word	0x0800cb34
 8006e0c:	2000003c 	.word	0x2000003c
 8006e10:	20000040 	.word	0x20000040

08006e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e14:	b5b0      	push	{r4, r5, r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	6079      	str	r1, [r7, #4]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	60f9      	str	r1, [r7, #12]
 8006e22:	2100      	movs	r1, #0
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e26:	2100      	movs	r1, #0
 8006e28:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e2a:	4952      	ldr	r1, [pc, #328]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e2c:	6889      	ldr	r1, [r1, #8]
 8006e2e:	f001 010c 	and.w	r1, r1, #12
 8006e32:	2908      	cmp	r1, #8
 8006e34:	d00d      	beq.n	8006e52 <HAL_RCC_GetSysClockFreq+0x3e>
 8006e36:	2908      	cmp	r1, #8
 8006e38:	f200 8094 	bhi.w	8006f64 <HAL_RCC_GetSysClockFreq+0x150>
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_RCC_GetSysClockFreq+0x32>
 8006e40:	2904      	cmp	r1, #4
 8006e42:	d003      	beq.n	8006e4c <HAL_RCC_GetSysClockFreq+0x38>
 8006e44:	e08e      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e46:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x164>)
 8006e48:	60bb      	str	r3, [r7, #8]
       break;
 8006e4a:	e08e      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e4c:	4b4b      	ldr	r3, [pc, #300]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8006e4e:	60bb      	str	r3, [r7, #8]
      break;
 8006e50:	e08b      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e52:	4948      	ldr	r1, [pc, #288]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e54:	6849      	ldr	r1, [r1, #4]
 8006e56:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006e5a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e5c:	4945      	ldr	r1, [pc, #276]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e5e:	6849      	ldr	r1, [r1, #4]
 8006e60:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d024      	beq.n	8006eb2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e68:	4942      	ldr	r1, [pc, #264]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e6a:	6849      	ldr	r1, [r1, #4]
 8006e6c:	0989      	lsrs	r1, r1, #6
 8006e6e:	4608      	mov	r0, r1
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006e78:	f04f 0500 	mov.w	r5, #0
 8006e7c:	ea00 0204 	and.w	r2, r0, r4
 8006e80:	ea01 0305 	and.w	r3, r1, r5
 8006e84:	493d      	ldr	r1, [pc, #244]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8006e86:	fb01 f003 	mul.w	r0, r1, r3
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	fb01 f102 	mul.w	r1, r1, r2
 8006e90:	1844      	adds	r4, r0, r1
 8006e92:	493a      	ldr	r1, [pc, #232]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x168>)
 8006e94:	fba2 0101 	umull	r0, r1, r2, r1
 8006e98:	1863      	adds	r3, r4, r1
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	f7f9 fe74 	bl	8000b90 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4613      	mov	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e04a      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb2:	4b30      	ldr	r3, [pc, #192]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ec2:	f04f 0100 	mov.w	r1, #0
 8006ec6:	ea02 0400 	and.w	r4, r2, r0
 8006eca:	ea03 0501 	and.w	r5, r3, r1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	014b      	lsls	r3, r1, #5
 8006edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ee0:	0142      	lsls	r2, r0, #5
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	1b00      	subs	r0, r0, r4
 8006ee8:	eb61 0105 	sbc.w	r1, r1, r5
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	018b      	lsls	r3, r1, #6
 8006ef6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006efa:	0182      	lsls	r2, r0, #6
 8006efc:	1a12      	subs	r2, r2, r0
 8006efe:	eb63 0301 	sbc.w	r3, r3, r1
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f04f 0100 	mov.w	r1, #0
 8006f0a:	00d9      	lsls	r1, r3, #3
 8006f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f10:	00d0      	lsls	r0, r2, #3
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	1912      	adds	r2, r2, r4
 8006f18:	eb45 0303 	adc.w	r3, r5, r3
 8006f1c:	f04f 0000 	mov.w	r0, #0
 8006f20:	f04f 0100 	mov.w	r1, #0
 8006f24:	0299      	lsls	r1, r3, #10
 8006f26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f2a:	0290      	lsls	r0, r2, #10
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4610      	mov	r0, r2
 8006f32:	4619      	mov	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	f7f9 fe28 	bl	8000b90 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4613      	mov	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	3301      	adds	r3, #1
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	60bb      	str	r3, [r7, #8]
      break;
 8006f62:	e002      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x164>)
 8006f66:	60bb      	str	r3, [r7, #8]
      break;
 8006f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bdb0      	pop	{r4, r5, r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	00f42400 	.word	0x00f42400
 8006f7c:	017d7840 	.word	0x017d7840

08006f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f84:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f86:	681b      	ldr	r3, [r3, #0]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000003c 	.word	0x2000003c

08006f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f9c:	f7ff fff0 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	0a9b      	lsrs	r3, r3, #10
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	4903      	ldr	r1, [pc, #12]	; (8006fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	0800cb44 	.word	0x0800cb44

08006fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e041      	b.n	8007056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fc fb94 	bl	8003714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f000 fa96 	bl	8007530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d001      	beq.n	8007078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e04e      	b.n	8007116 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a23      	ldr	r2, [pc, #140]	; (8007124 <HAL_TIM_Base_Start_IT+0xc4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a2:	d01d      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <HAL_TIM_Base_Start_IT+0xc8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d018      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1e      	ldr	r2, [pc, #120]	; (800712c <HAL_TIM_Base_Start_IT+0xcc>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_TIM_Base_Start_IT+0xd0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1b      	ldr	r2, [pc, #108]	; (8007134 <HAL_TIM_Base_Start_IT+0xd4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a19      	ldr	r2, [pc, #100]	; (8007138 <HAL_TIM_Base_Start_IT+0xd8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a18      	ldr	r2, [pc, #96]	; (800713c <HAL_TIM_Base_Start_IT+0xdc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d111      	bne.n	8007104 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d010      	beq.n	8007114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	e007      	b.n	8007114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010400 	.word	0x40010400
 8007138:	40014000 	.word	0x40014000
 800713c:	40001800 	.word	0x40001800

08007140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b02      	cmp	r3, #2
 8007154:	d122      	bne.n	800719c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b02      	cmp	r3, #2
 8007162:	d11b      	bne.n	800719c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f06f 0202 	mvn.w	r2, #2
 800716c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f9b5 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 8007188:	e005      	b.n	8007196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f9a7 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f9b8 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d122      	bne.n	80071f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d11b      	bne.n	80071f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0204 	mvn.w	r2, #4
 80071c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2202      	movs	r2, #2
 80071c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f98b 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 80071dc:	e005      	b.n	80071ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f97d 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f98e 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d122      	bne.n	8007244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b08      	cmp	r3, #8
 800720a:	d11b      	bne.n	8007244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0208 	mvn.w	r2, #8
 8007214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2204      	movs	r2, #4
 800721a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f961 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 8007230:	e005      	b.n	800723e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f953 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f964 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b10      	cmp	r3, #16
 8007250:	d122      	bne.n	8007298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b10      	cmp	r3, #16
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0210 	mvn.w	r2, #16
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2208      	movs	r2, #8
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f937 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f929 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f93a 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d10e      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d107      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0201 	mvn.w	r2, #1
 80072bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7f9 fe52 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d10e      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d107      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fae0 	bl	80078b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d10e      	bne.n	800731c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d107      	bne.n	800731c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8ff 	bl	800751a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b20      	cmp	r3, #32
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b20      	cmp	r3, #32
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0220 	mvn.w	r2, #32
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 faaa 	bl	800789c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_TIM_ConfigClockSource+0x1c>
 8007368:	2302      	movs	r3, #2
 800736a:	e0b4      	b.n	80074d6 <HAL_TIM_ConfigClockSource+0x186>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800738a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a4:	d03e      	beq.n	8007424 <HAL_TIM_ConfigClockSource+0xd4>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	f200 8087 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b2:	f000 8086 	beq.w	80074c2 <HAL_TIM_ConfigClockSource+0x172>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	d87f      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073bc:	2b70      	cmp	r3, #112	; 0x70
 80073be:	d01a      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0xa6>
 80073c0:	2b70      	cmp	r3, #112	; 0x70
 80073c2:	d87b      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073c4:	2b60      	cmp	r3, #96	; 0x60
 80073c6:	d050      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x11a>
 80073c8:	2b60      	cmp	r3, #96	; 0x60
 80073ca:	d877      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073cc:	2b50      	cmp	r3, #80	; 0x50
 80073ce:	d03c      	beq.n	800744a <HAL_TIM_ConfigClockSource+0xfa>
 80073d0:	2b50      	cmp	r3, #80	; 0x50
 80073d2:	d873      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d058      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x13a>
 80073d8:	2b40      	cmp	r3, #64	; 0x40
 80073da:	d86f      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b30      	cmp	r3, #48	; 0x30
 80073de:	d064      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073e0:	2b30      	cmp	r3, #48	; 0x30
 80073e2:	d86b      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d060      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d867      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05c      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d05a      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	e062      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6899      	ldr	r1, [r3, #8]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f000 f9ad 	bl	8007764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	609a      	str	r2, [r3, #8]
      break;
 8007422:	e04f      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	6899      	ldr	r1, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f000 f996 	bl	8007764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007446:	609a      	str	r2, [r3, #8]
      break;
 8007448:	e03c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6859      	ldr	r1, [r3, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	461a      	mov	r2, r3
 8007458:	f000 f90a 	bl	8007670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2150      	movs	r1, #80	; 0x50
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f963 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007468:	e02c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6859      	ldr	r1, [r3, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	461a      	mov	r2, r3
 8007478:	f000 f929 	bl	80076ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2160      	movs	r1, #96	; 0x60
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f953 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007488:	e01c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	461a      	mov	r2, r3
 8007498:	f000 f8ea 	bl	8007670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2140      	movs	r1, #64	; 0x40
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f943 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 80074a8:	e00c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f000 f93a 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 80074ba:	e003      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e000      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a40      	ldr	r2, [pc, #256]	; (8007644 <TIM_Base_SetConfig+0x114>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d013      	beq.n	8007570 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d00f      	beq.n	8007570 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a3d      	ldr	r2, [pc, #244]	; (8007648 <TIM_Base_SetConfig+0x118>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00b      	beq.n	8007570 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a3c      	ldr	r2, [pc, #240]	; (800764c <TIM_Base_SetConfig+0x11c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d007      	beq.n	8007570 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a3b      	ldr	r2, [pc, #236]	; (8007650 <TIM_Base_SetConfig+0x120>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3a      	ldr	r2, [pc, #232]	; (8007654 <TIM_Base_SetConfig+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d108      	bne.n	8007582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <TIM_Base_SetConfig+0x114>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d02b      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007590:	d027      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2c      	ldr	r2, [pc, #176]	; (8007648 <TIM_Base_SetConfig+0x118>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d023      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2b      	ldr	r2, [pc, #172]	; (800764c <TIM_Base_SetConfig+0x11c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01f      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2a      	ldr	r2, [pc, #168]	; (8007650 <TIM_Base_SetConfig+0x120>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01b      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a29      	ldr	r2, [pc, #164]	; (8007654 <TIM_Base_SetConfig+0x124>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d017      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a28      	ldr	r2, [pc, #160]	; (8007658 <TIM_Base_SetConfig+0x128>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a27      	ldr	r2, [pc, #156]	; (800765c <TIM_Base_SetConfig+0x12c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a26      	ldr	r2, [pc, #152]	; (8007660 <TIM_Base_SetConfig+0x130>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a25      	ldr	r2, [pc, #148]	; (8007664 <TIM_Base_SetConfig+0x134>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a24      	ldr	r2, [pc, #144]	; (8007668 <TIM_Base_SetConfig+0x138>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a23      	ldr	r2, [pc, #140]	; (800766c <TIM_Base_SetConfig+0x13c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d108      	bne.n	80075f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <TIM_Base_SetConfig+0x114>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_Base_SetConfig+0xf8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a0c      	ldr	r2, [pc, #48]	; (8007654 <TIM_Base_SetConfig+0x124>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d103      	bne.n	8007630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	615a      	str	r2, [r3, #20]
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40010400 	.word	0x40010400
 8007658:	40014000 	.word	0x40014000
 800765c:	40014400 	.word	0x40014400
 8007660:	40014800 	.word	0x40014800
 8007664:	40001800 	.word	0x40001800
 8007668:	40001c00 	.word	0x40001c00
 800766c:	40002000 	.word	0x40002000

08007670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f023 030a 	bic.w	r3, r3, #10
 80076ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0210 	bic.w	r2, r3, #16
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	f043 0307 	orr.w	r3, r3, #7
 8007750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	431a      	orrs	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e05a      	b.n	8007872 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a21      	ldr	r2, [pc, #132]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d022      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007808:	d01d      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d018      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1b      	ldr	r2, [pc, #108]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1a      	ldr	r2, [pc, #104]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00e      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a18      	ldr	r2, [pc, #96]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d009      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a17      	ldr	r2, [pc, #92]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a15      	ldr	r2, [pc, #84]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10c      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800784c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	4313      	orrs	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40010000 	.word	0x40010000
 8007884:	40000400 	.word	0x40000400
 8007888:	40000800 	.word	0x40000800
 800788c:	40000c00 	.word	0x40000c00
 8007890:	40010400 	.word	0x40010400
 8007894:	40014000 	.word	0x40014000
 8007898:	40001800 	.word	0x40001800

0800789c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c4:	b084      	sub	sp, #16
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	f107 001c 	add.w	r0, r7, #28
 80078d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d122      	bne.n	8007922 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 fb1c 	bl	8008f54 <USB_CoreReset>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
 8007920:	e01a      	b.n	8007958 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fb10 	bl	8008f54 <USB_CoreReset>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	639a      	str	r2, [r3, #56]	; 0x38
 800794a:	e005      	b.n	8007958 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10b      	bne.n	8007976 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f043 0206 	orr.w	r2, r3, #6
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f043 0220 	orr.w	r2, r3, #32
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007982:	b004      	add	sp, #16
 8007984:	4770      	bx	lr
	...

08007988 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d165      	bne.n	8007a68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4a41      	ldr	r2, [pc, #260]	; (8007aa4 <USB_SetTurnaroundTime+0x11c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d906      	bls.n	80079b2 <USB_SetTurnaroundTime+0x2a>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a40      	ldr	r2, [pc, #256]	; (8007aa8 <USB_SetTurnaroundTime+0x120>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d202      	bcs.n	80079b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079ac:	230f      	movs	r3, #15
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	e062      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4a3c      	ldr	r2, [pc, #240]	; (8007aa8 <USB_SetTurnaroundTime+0x120>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d306      	bcc.n	80079c8 <USB_SetTurnaroundTime+0x40>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4a3b      	ldr	r2, [pc, #236]	; (8007aac <USB_SetTurnaroundTime+0x124>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d202      	bcs.n	80079c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079c2:	230e      	movs	r3, #14
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e057      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4a38      	ldr	r2, [pc, #224]	; (8007aac <USB_SetTurnaroundTime+0x124>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d306      	bcc.n	80079de <USB_SetTurnaroundTime+0x56>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4a37      	ldr	r2, [pc, #220]	; (8007ab0 <USB_SetTurnaroundTime+0x128>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d202      	bcs.n	80079de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079d8:	230d      	movs	r3, #13
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e04c      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4a33      	ldr	r2, [pc, #204]	; (8007ab0 <USB_SetTurnaroundTime+0x128>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d306      	bcc.n	80079f4 <USB_SetTurnaroundTime+0x6c>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4a32      	ldr	r2, [pc, #200]	; (8007ab4 <USB_SetTurnaroundTime+0x12c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d802      	bhi.n	80079f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079ee:	230c      	movs	r3, #12
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e041      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4a2f      	ldr	r2, [pc, #188]	; (8007ab4 <USB_SetTurnaroundTime+0x12c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d906      	bls.n	8007a0a <USB_SetTurnaroundTime+0x82>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4a2e      	ldr	r2, [pc, #184]	; (8007ab8 <USB_SetTurnaroundTime+0x130>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d802      	bhi.n	8007a0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a04:	230b      	movs	r3, #11
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e036      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4a2a      	ldr	r2, [pc, #168]	; (8007ab8 <USB_SetTurnaroundTime+0x130>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d906      	bls.n	8007a20 <USB_SetTurnaroundTime+0x98>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4a29      	ldr	r2, [pc, #164]	; (8007abc <USB_SetTurnaroundTime+0x134>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d802      	bhi.n	8007a20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e02b      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4a26      	ldr	r2, [pc, #152]	; (8007abc <USB_SetTurnaroundTime+0x134>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d906      	bls.n	8007a36 <USB_SetTurnaroundTime+0xae>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4a25      	ldr	r2, [pc, #148]	; (8007ac0 <USB_SetTurnaroundTime+0x138>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d202      	bcs.n	8007a36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a30:	2309      	movs	r3, #9
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e020      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4a21      	ldr	r2, [pc, #132]	; (8007ac0 <USB_SetTurnaroundTime+0x138>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d306      	bcc.n	8007a4c <USB_SetTurnaroundTime+0xc4>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4a20      	ldr	r2, [pc, #128]	; (8007ac4 <USB_SetTurnaroundTime+0x13c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d802      	bhi.n	8007a4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a46:	2308      	movs	r3, #8
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	e015      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <USB_SetTurnaroundTime+0x13c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d906      	bls.n	8007a62 <USB_SetTurnaroundTime+0xda>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <USB_SetTurnaroundTime+0x140>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d202      	bcs.n	8007a62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a5c:	2307      	movs	r3, #7
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	e00a      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a62:	2306      	movs	r3, #6
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	e007      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a6e:	2309      	movs	r3, #9
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e001      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a74:	2309      	movs	r3, #9
 8007a76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	029b      	lsls	r3, r3, #10
 8007a8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007a90:	431a      	orrs	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	00d8acbf 	.word	0x00d8acbf
 8007aa8:	00e4e1c0 	.word	0x00e4e1c0
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	01067380 	.word	0x01067380
 8007ab4:	011a499f 	.word	0x011a499f
 8007ab8:	01312cff 	.word	0x01312cff
 8007abc:	014ca43f 	.word	0x014ca43f
 8007ac0:	016e3600 	.word	0x016e3600
 8007ac4:	01a6ab1f 	.word	0x01a6ab1f
 8007ac8:	01e84800 	.word	0x01e84800

08007acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f043 0201 	orr.w	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d115      	bne.n	8007b5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b3e:	2001      	movs	r0, #1
 8007b40:	f7fb fefc 	bl	800393c <HAL_Delay>
      ms++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f972 	bl	8008e34 <USB_GetMode>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d01e      	beq.n	8007b94 <USB_SetCurrentMode+0x84>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b31      	cmp	r3, #49	; 0x31
 8007b5a:	d9f0      	bls.n	8007b3e <USB_SetCurrentMode+0x2e>
 8007b5c:	e01a      	b.n	8007b94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d115      	bne.n	8007b90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b70:	2001      	movs	r0, #1
 8007b72:	f7fb fee3 	bl	800393c <HAL_Delay>
      ms++;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 f959 	bl	8008e34 <USB_GetMode>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <USB_SetCurrentMode+0x84>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b31      	cmp	r3, #49	; 0x31
 8007b8c:	d9f0      	bls.n	8007b70 <USB_SetCurrentMode+0x60>
 8007b8e:	e001      	b.n	8007b94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e005      	b.n	8007ba0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b32      	cmp	r3, #50	; 0x32
 8007b98:	d101      	bne.n	8007b9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ba8:	b084      	sub	sp, #16
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	e009      	b.n	8007bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3340      	adds	r3, #64	; 0x40
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b0e      	cmp	r3, #14
 8007be0:	d9f2      	bls.n	8007bc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11c      	bne.n	8007c22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf6:	f043 0302 	orr.w	r3, r3, #2
 8007bfa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38
 8007c20:	e00b      	b.n	8007c3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c40:	461a      	mov	r2, r3
 8007c42:	2300      	movs	r3, #0
 8007c44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	461a      	mov	r2, r3
 8007c56:	680b      	ldr	r3, [r1, #0]
 8007c58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d10c      	bne.n	8007c7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c66:	2100      	movs	r1, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f945 	bl	8007ef8 <USB_SetDevSpeed>
 8007c6e:	e008      	b.n	8007c82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c70:	2101      	movs	r1, #1
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f940 	bl	8007ef8 <USB_SetDevSpeed>
 8007c78:	e003      	b.n	8007c82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c7a:	2103      	movs	r1, #3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f93b 	bl	8007ef8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c82:	2110      	movs	r1, #16
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f8f3 	bl	8007e70 <USB_FlushTxFifo>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f90f 	bl	8007eb8 <USB_FlushRxFifo>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	461a      	mov	r2, r3
 8007cac:	2300      	movs	r3, #0
 8007cae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	e043      	b.n	8007d56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ce4:	d118      	bne.n	8007d18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	e013      	b.n	8007d2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	e008      	b.n	8007d2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	461a      	mov	r2, r3
 8007d26:	2300      	movs	r3, #0
 8007d28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d36:	461a      	mov	r2, r3
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	3301      	adds	r3, #1
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d3b7      	bcc.n	8007cce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d5e:	2300      	movs	r3, #0
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	e043      	b.n	8007dec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d7a:	d118      	bne.n	8007dae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e013      	b.n	8007dc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da4:	461a      	mov	r2, r3
 8007da6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	e008      	b.n	8007dc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dde:	461a      	mov	r2, r3
 8007de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007de4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	3301      	adds	r3, #1
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d3b7      	bcc.n	8007d64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d105      	bne.n	8007e28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f043 0210 	orr.w	r2, r3, #16
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <USB_DevInit+0x2c4>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f043 0208 	orr.w	r2, r3, #8
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d107      	bne.n	8007e5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e54:	f043 0304 	orr.w	r3, r3, #4
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e68:	b004      	add	sp, #16
 8007e6a:	4770      	bx	lr
 8007e6c:	803c3800 	.word	0x803c3800

08007e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	019b      	lsls	r3, r3, #6
 8007e82:	f043 0220 	orr.w	r2, r3, #32
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <USB_FlushTxFifo+0x44>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d901      	bls.n	8007e9a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e006      	b.n	8007ea8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d0f1      	beq.n	8007e8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	00030d40 	.word	0x00030d40

08007eb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <USB_FlushRxFifo+0x3c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d901      	bls.n	8007eda <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e006      	b.n	8007ee8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d0f1      	beq.n	8007eca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	00030d40 	.word	0x00030d40

08007ef8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0306 	and.w	r3, r3, #6
 8007f42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
 8007f4e:	e00a      	b.n	8007f66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d002      	beq.n	8007f5c <USB_GetDevSpeed+0x32>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b06      	cmp	r3, #6
 8007f5a:	d102      	bne.n	8007f62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	75fb      	strb	r3, [r7, #23]
 8007f60:	e001      	b.n	8007f66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f62:	230f      	movs	r3, #15
 8007f64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d13a      	bne.n	8008006 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	68f9      	ldr	r1, [r7, #12]
 8007faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d155      	bne.n	8008074 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fe4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	059b      	lsls	r3, r3, #22
 8007fea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fec:	4313      	orrs	r3, r2
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e036      	b.n	8008074 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800c:	69da      	ldr	r2, [r3, #28]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	2101      	movs	r1, #1
 8008018:	fa01 f303 	lsl.w	r3, r1, r3
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008024:	4313      	orrs	r3, r2
 8008026:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d11a      	bne.n	8008074 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	78db      	ldrb	r3, [r3, #3]
 8008058:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800805a:	430b      	orrs	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800806a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008072:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d161      	bne.n	8008164 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080b6:	d11f      	bne.n	80080f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	2101      	movs	r1, #1
 800810a:	fa01 f303 	lsl.w	r3, r1, r3
 800810e:	b29b      	uxth	r3, r3
 8008110:	43db      	mvns	r3, r3
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008118:	4013      	ands	r3, r2
 800811a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	69da      	ldr	r2, [r3, #28]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 030f 	and.w	r3, r3, #15
 800812c:	2101      	movs	r1, #1
 800812e:	fa01 f303 	lsl.w	r3, r1, r3
 8008132:	b29b      	uxth	r3, r3
 8008134:	43db      	mvns	r3, r3
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800813c:	4013      	ands	r3, r2
 800813e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	0159      	lsls	r1, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	440b      	add	r3, r1
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	4619      	mov	r1, r3
 800815c:	4b35      	ldr	r3, [pc, #212]	; (8008234 <USB_DeactivateEndpoint+0x1b0>)
 800815e:	4013      	ands	r3, r2
 8008160:	600b      	str	r3, [r1, #0]
 8008162:	e060      	b.n	8008226 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800817a:	d11f      	bne.n	80081bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	440a      	add	r2, r1
 8008192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800819a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	0151      	lsls	r1, r2, #5
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	440a      	add	r2, r1
 80081b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	2101      	movs	r1, #1
 80081ce:	fa01 f303 	lsl.w	r3, r1, r3
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	43db      	mvns	r3, r3
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081dc:	4013      	ands	r3, r2
 80081de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f303 	lsl.w	r3, r1, r3
 80081f6:	041b      	lsls	r3, r3, #16
 80081f8:	43db      	mvns	r3, r3
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008200:	4013      	ands	r3, r2
 8008202:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	0159      	lsls	r1, r3, #5
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	440b      	add	r3, r1
 800821a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821e:	4619      	mov	r1, r3
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <USB_DeactivateEndpoint+0x1b4>)
 8008222:	4013      	ands	r3, r2
 8008224:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	ec337800 	.word	0xec337800
 8008238:	eff37800 	.word	0xeff37800

0800823c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	2b01      	cmp	r3, #1
 800825a:	f040 815c 	bne.w	8008516 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d132      	bne.n	80082cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c4:	0cdb      	lsrs	r3, r3, #19
 80082c6:	04db      	lsls	r3, r3, #19
 80082c8:	6113      	str	r3, [r2, #16]
 80082ca:	e074      	b.n	80083b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e6:	0cdb      	lsrs	r3, r3, #19
 80082e8:	04db      	lsls	r3, r3, #19
 80082ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	440a      	add	r2, r1
 8008302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008306:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800830a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800830e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6959      	ldr	r1, [r3, #20]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	440b      	add	r3, r1
 8008328:	1e59      	subs	r1, r3, #1
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008332:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008334:	4b9d      	ldr	r3, [pc, #628]	; (80085ac <USB_EPStartXfer+0x370>)
 8008336:	400b      	ands	r3, r1
 8008338:	69b9      	ldr	r1, [r7, #24]
 800833a:	0148      	lsls	r0, r1, #5
 800833c:	69f9      	ldr	r1, [r7, #28]
 800833e:	4401      	add	r1, r0
 8008340:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008344:	4313      	orrs	r3, r2
 8008346:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	691a      	ldr	r2, [r3, #16]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800835e:	69b9      	ldr	r1, [r7, #24]
 8008360:	0148      	lsls	r0, r1, #5
 8008362:	69f9      	ldr	r1, [r7, #28]
 8008364:	4401      	add	r1, r0
 8008366:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800836a:	4313      	orrs	r3, r2
 800836c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	78db      	ldrb	r3, [r3, #3]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d11f      	bne.n	80083b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008390:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008394:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d14b      	bne.n	8008454 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	461a      	mov	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	78db      	ldrb	r3, [r3, #3]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d128      	bne.n	8008432 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d110      	bne.n	8008412 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	440a      	add	r2, r1
 8008406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	e00f      	b.n	8008432 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	0151      	lsls	r1, r2, #5
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	440a      	add	r2, r1
 8008428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008430:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e12f      	b.n	80086b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008472:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	78db      	ldrb	r3, [r3, #3]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d015      	beq.n	80084a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8117 	beq.w	80086b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	2101      	movs	r1, #1
 8008498:	fa01 f303 	lsl.w	r3, r1, r3
 800849c:	69f9      	ldr	r1, [r7, #28]
 800849e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a2:	4313      	orrs	r3, r2
 80084a4:	634b      	str	r3, [r1, #52]	; 0x34
 80084a6:	e105      	b.n	80086b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d110      	bne.n	80084da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	e00f      	b.n	80084fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	68d9      	ldr	r1, [r3, #12]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	781a      	ldrb	r2, [r3, #0]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	b298      	uxth	r0, r3
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4603      	mov	r3, r0
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fa2b 	bl	800896a <USB_WritePacket>
 8008514:	e0ce      	b.n	80086b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008530:	0cdb      	lsrs	r3, r3, #19
 8008532:	04db      	lsls	r3, r3, #19
 8008534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008550:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008554:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008558:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d126      	bne.n	80085b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008578:	69b9      	ldr	r1, [r7, #24]
 800857a:	0148      	lsls	r0, r1, #5
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	4401      	add	r1, r0
 8008580:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008584:	4313      	orrs	r3, r2
 8008586:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085a6:	6113      	str	r3, [r2, #16]
 80085a8:	e036      	b.n	8008618 <USB_EPStartXfer+0x3dc>
 80085aa:	bf00      	nop
 80085ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	695a      	ldr	r2, [r3, #20]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	4413      	add	r3, r2
 80085ba:	1e5a      	subs	r2, r3, #1
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	8afb      	ldrh	r3, [r7, #22]
 80085d6:	04d9      	lsls	r1, r3, #19
 80085d8:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <USB_EPStartXfer+0x484>)
 80085da:	400b      	ands	r3, r1
 80085dc:	69b9      	ldr	r1, [r7, #24]
 80085de:	0148      	lsls	r0, r1, #5
 80085e0:	69f9      	ldr	r1, [r7, #28]
 80085e2:	4401      	add	r1, r0
 80085e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085e8:	4313      	orrs	r3, r2
 80085ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	8af9      	ldrh	r1, [r7, #22]
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008608:	69b9      	ldr	r1, [r7, #24]
 800860a:	0148      	lsls	r0, r1, #5
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	4401      	add	r1, r0
 8008610:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008614:	4313      	orrs	r3, r2
 8008616:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d10d      	bne.n	800863a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	68d9      	ldr	r1, [r3, #12]
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	460a      	mov	r2, r1
 8008638:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	78db      	ldrb	r3, [r3, #3]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d128      	bne.n	8008694 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d110      	bne.n	8008674 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	e00f      	b.n	8008694 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008692:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	1ff80000 	.word	0x1ff80000

080086c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	f040 80cd 	bne.w	8008880 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d132      	bne.n	8008754 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	440a      	add	r2, r1
 8008704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800870c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	0151      	lsls	r1, r2, #5
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	440a      	add	r2, r1
 8008748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874c:	0cdb      	lsrs	r3, r3, #19
 800874e:	04db      	lsls	r3, r3, #19
 8008750:	6113      	str	r3, [r2, #16]
 8008752:	e04e      	b.n	80087f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	440a      	add	r2, r1
 800876a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876e:	0cdb      	lsrs	r3, r3, #19
 8008770:	04db      	lsls	r3, r3, #19
 8008772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	0151      	lsls	r1, r2, #5
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	440a      	add	r2, r1
 800878a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008792:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008796:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	695a      	ldr	r2, [r3, #20]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	0151      	lsls	r1, r2, #5
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	440a      	add	r2, r1
 80087c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e2:	6939      	ldr	r1, [r7, #16]
 80087e4:	0148      	lsls	r0, r1, #5
 80087e6:	6979      	ldr	r1, [r7, #20]
 80087e8:	4401      	add	r1, r0
 80087ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087ee:	4313      	orrs	r3, r2
 80087f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d11e      	bne.n	8008836 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	461a      	mov	r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	e092      	b.n	800895c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008850:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008854:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d07e      	beq.n	800895c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	2101      	movs	r1, #1
 8008870:	fa01 f303 	lsl.w	r3, r1, r3
 8008874:	6979      	ldr	r1, [r7, #20]
 8008876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800887a:	4313      	orrs	r3, r2
 800887c:	634b      	str	r3, [r1, #52]	; 0x34
 800887e:	e06d      	b.n	800895c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889a:	0cdb      	lsrs	r3, r3, #19
 800889c:	04db      	lsls	r3, r3, #19
 800889e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	0151      	lsls	r1, r2, #5
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	440a      	add	r2, r1
 80088b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088c2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800890a:	6939      	ldr	r1, [r7, #16]
 800890c:	0148      	lsls	r0, r1, #5
 800890e:	6979      	ldr	r1, [r7, #20]
 8008910:	4401      	add	r1, r0
 8008912:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008916:	4313      	orrs	r3, r2
 8008918:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d10d      	bne.n	800893c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	68d9      	ldr	r1, [r3, #12]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	460a      	mov	r2, r1
 800893a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800895a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800896a:	b480      	push	{r7}
 800896c:	b089      	sub	sp, #36	; 0x24
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	4611      	mov	r1, r2
 8008976:	461a      	mov	r2, r3
 8008978:	460b      	mov	r3, r1
 800897a:	71fb      	strb	r3, [r7, #7]
 800897c:	4613      	mov	r3, r2
 800897e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008988:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800898c:	2b00      	cmp	r3, #0
 800898e:	d123      	bne.n	80089d8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008990:	88bb      	ldrh	r3, [r7, #4]
 8008992:	3303      	adds	r3, #3
 8008994:	089b      	lsrs	r3, r3, #2
 8008996:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	e018      	b.n	80089d0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	031a      	lsls	r2, r3, #12
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089aa:	461a      	mov	r2, r3
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	3301      	adds	r3, #1
 80089b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	3301      	adds	r3, #1
 80089bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	3301      	adds	r3, #1
 80089c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	3301      	adds	r3, #1
 80089ce:	61bb      	str	r3, [r7, #24]
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3e2      	bcc.n	800899e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3724      	adds	r7, #36	; 0x24
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b08b      	sub	sp, #44	; 0x2c
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	4613      	mov	r3, r2
 80089f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	089b      	lsrs	r3, r3, #2
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	623b      	str	r3, [r7, #32]
 8008a10:	e014      	b.n	8008a3c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	3301      	adds	r3, #1
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	3301      	adds	r3, #1
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	3301      	adds	r3, #1
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	623b      	str	r3, [r7, #32]
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d3e6      	bcc.n	8008a12 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a44:	8bfb      	ldrh	r3, [r7, #30]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01e      	beq.n	8008a88 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a54:	461a      	mov	r2, r3
 8008a56:	f107 0310 	add.w	r3, r7, #16
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	701a      	strb	r2, [r3, #0]
      i++;
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	3301      	adds	r3, #1
 8008a74:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	3301      	adds	r3, #1
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a7c:	8bfb      	ldrh	r3, [r7, #30]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a82:	8bfb      	ldrh	r3, [r7, #30]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1ea      	bne.n	8008a5e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	372c      	adds	r7, #44	; 0x2c
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d12c      	bne.n	8008b0c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	db12      	blt.n	8008aea <USB_EPSetStall+0x54>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00f      	beq.n	8008aea <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ae8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	e02b      	b.n	8008b64 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	db12      	blt.n	8008b44 <USB_EPSetStall+0xae>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00f      	beq.n	8008b44 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b42:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d128      	bne.n	8008be0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	0151      	lsls	r1, r2, #5
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	440a      	add	r2, r1
 8008ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	78db      	ldrb	r3, [r3, #3]
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d003      	beq.n	8008bbe <USB_EPClearStall+0x4c>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	78db      	ldrb	r3, [r3, #3]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d138      	bne.n	8008c30 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e027      	b.n	8008c30 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bfe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	78db      	ldrb	r3, [r3, #3]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d003      	beq.n	8008c10 <USB_EPClearStall+0x9e>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d10f      	bne.n	8008c30 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c60:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb8:	f023 0302 	bic.w	r3, r3, #2
 8008cbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfa:	f043 0302 	orr.w	r3, r3, #2
 8008cfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4013      	ands	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d26:	68fb      	ldr	r3, [r7, #12]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	4013      	ands	r3, r2
 8008d56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	0c1b      	lsrs	r3, r3, #16
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	b29b      	uxth	r3, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dca:	68bb      	ldr	r3, [r7, #8]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	fa22 f303 	lsr.w	r3, r2, r3
 8008e08:	01db      	lsls	r3, r3, #7
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4013      	ands	r3, r2
 8008e24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e26:	68bb      	ldr	r3, [r7, #8]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f003 0301 	and.w	r3, r3, #1
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e6e:	f023 0307 	bic.w	r3, r3, #7
 8008e72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	333c      	adds	r3, #60	; 0x3c
 8008eae:	3304      	adds	r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4a26      	ldr	r2, [pc, #152]	; (8008f50 <USB_EP0_OutStart+0xb8>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d90a      	bls.n	8008ed2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ecc:	d101      	bne.n	8008ed2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e037      	b.n	8008f42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	461a      	mov	r2, r3
 8008eda:	2300      	movs	r3, #0
 8008edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f00:	f043 0318 	orr.w	r3, r3, #24
 8008f04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d10f      	bne.n	8008f40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	4f54300a 	.word	0x4f54300a

08008f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3301      	adds	r3, #1
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	4a13      	ldr	r2, [pc, #76]	; (8008fb4 <USB_CoreReset+0x60>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d901      	bls.n	8008f70 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e01a      	b.n	8008fa6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	daf3      	bge.n	8008f60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f043 0201 	orr.w	r2, r3, #1
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <USB_CoreReset+0x60>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e006      	b.n	8008fa6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d0f1      	beq.n	8008f88 <USB_CoreReset+0x34>

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	00030d40 	.word	0x00030d40

08008fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fc8:	f002 f91c 	bl	800b204 <USBD_static_malloc>
 8008fcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e066      	b.n	80090ae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7c1b      	ldrb	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d119      	bne.n	8009024 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	2181      	movs	r1, #129	; 0x81
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 ffe0 	bl	800afbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009008:	2202      	movs	r2, #2
 800900a:	2101      	movs	r1, #1
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 ffd6 	bl	800afbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2210      	movs	r2, #16
 800901e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009022:	e016      	b.n	8009052 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	2202      	movs	r2, #2
 8009028:	2181      	movs	r1, #129	; 0x81
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 ffc7 	bl	800afbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009036:	2340      	movs	r3, #64	; 0x40
 8009038:	2202      	movs	r2, #2
 800903a:	2101      	movs	r1, #1
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 ffbe 	bl	800afbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2210      	movs	r2, #16
 800904e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009052:	2308      	movs	r3, #8
 8009054:	2203      	movs	r2, #3
 8009056:	2182      	movs	r1, #130	; 0x82
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 ffb0 	bl	800afbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7c1b      	ldrb	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800908e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009092:	2101      	movs	r1, #1
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f002 f881 	bl	800b19c <USBD_LL_PrepareReceive>
 800909a:	e007      	b.n	80090ac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	2101      	movs	r1, #1
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f002 f878 	bl	800b19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090c2:	2181      	movs	r1, #129	; 0x81
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 ffa0 	bl	800b00a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090d0:	2101      	movs	r1, #1
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 ff99 	bl	800b00a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090e0:	2182      	movs	r1, #130	; 0x82
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 ff91 	bl	800b00a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009112:	4618      	mov	r0, r3
 8009114:	f002 f884 	bl	800b220 <USBD_static_free>
    pdev->pClassData = NULL;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
	...

0800912c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800913c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009150:	2303      	movs	r3, #3
 8009152:	e0af      	b.n	80092b4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800915c:	2b00      	cmp	r3, #0
 800915e:	d03f      	beq.n	80091e0 <USBD_CDC_Setup+0xb4>
 8009160:	2b20      	cmp	r3, #32
 8009162:	f040 809f 	bne.w	80092a4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	88db      	ldrh	r3, [r3, #6]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d02e      	beq.n	80091cc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	b25b      	sxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	da16      	bge.n	80091a6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009184:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	88d2      	ldrh	r2, [r2, #6]
 800918a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	2b07      	cmp	r3, #7
 8009192:	bf28      	it	cs
 8009194:	2307      	movcs	r3, #7
 8009196:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	89fa      	ldrh	r2, [r7, #14]
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 fae9 	bl	800a776 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80091a4:	e085      	b.n	80092b2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	785a      	ldrb	r2, [r3, #1]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	88db      	ldrh	r3, [r3, #6]
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80091bc:	6939      	ldr	r1, [r7, #16]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	88db      	ldrh	r3, [r3, #6]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fb02 	bl	800a7ce <USBD_CtlPrepareRx>
      break;
 80091ca:	e072      	b.n	80092b2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	7850      	ldrb	r0, [r2, #1]
 80091d8:	2200      	movs	r2, #0
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	4798      	blx	r3
      break;
 80091de:	e068      	b.n	80092b2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	2b0b      	cmp	r3, #11
 80091e6:	d852      	bhi.n	800928e <USBD_CDC_Setup+0x162>
 80091e8:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <USBD_CDC_Setup+0xc4>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	08009221 	.word	0x08009221
 80091f4:	0800929d 	.word	0x0800929d
 80091f8:	0800928f 	.word	0x0800928f
 80091fc:	0800928f 	.word	0x0800928f
 8009200:	0800928f 	.word	0x0800928f
 8009204:	0800928f 	.word	0x0800928f
 8009208:	0800928f 	.word	0x0800928f
 800920c:	0800928f 	.word	0x0800928f
 8009210:	0800928f 	.word	0x0800928f
 8009214:	0800928f 	.word	0x0800928f
 8009218:	0800924b 	.word	0x0800924b
 800921c:	08009275 	.word	0x08009275
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b03      	cmp	r3, #3
 800922a:	d107      	bne.n	800923c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800922c:	f107 030a 	add.w	r3, r7, #10
 8009230:	2202      	movs	r2, #2
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fa9e 	bl	800a776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800923a:	e032      	b.n	80092a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fa28 	bl	800a694 <USBD_CtlError>
            ret = USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	75fb      	strb	r3, [r7, #23]
          break;
 8009248:	e02b      	b.n	80092a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d107      	bne.n	8009266 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009256:	f107 030d 	add.w	r3, r7, #13
 800925a:	2201      	movs	r2, #1
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 fa89 	bl	800a776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009264:	e01d      	b.n	80092a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 fa13 	bl	800a694 <USBD_CtlError>
            ret = USBD_FAIL;
 800926e:	2303      	movs	r3, #3
 8009270:	75fb      	strb	r3, [r7, #23]
          break;
 8009272:	e016      	b.n	80092a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b03      	cmp	r3, #3
 800927e:	d00f      	beq.n	80092a0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 fa06 	bl	800a694 <USBD_CtlError>
            ret = USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800928c:	e008      	b.n	80092a0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f9ff 	bl	800a694 <USBD_CtlError>
          ret = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	75fb      	strb	r3, [r7, #23]
          break;
 800929a:	e002      	b.n	80092a2 <USBD_CDC_Setup+0x176>
          break;
 800929c:	bf00      	nop
 800929e:	e008      	b.n	80092b2 <USBD_CDC_Setup+0x186>
          break;
 80092a0:	bf00      	nop
      }
      break;
 80092a2:	e006      	b.n	80092b2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f9f4 	bl	800a694 <USBD_CtlError>
      ret = USBD_FAIL;
 80092ac:	2303      	movs	r3, #3
 80092ae:	75fb      	strb	r3, [r7, #23]
      break;
 80092b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	e04f      	b.n	800937e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	3318      	adds	r3, #24
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d029      	beq.n	8009350 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	3318      	adds	r3, #24
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	78f9      	ldrb	r1, [r7, #3]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	460b      	mov	r3, r1
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	1a5b      	subs	r3, r3, r1
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4403      	add	r3, r0
 800931c:	3344      	adds	r3, #68	; 0x44
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	fbb2 f1f3 	udiv	r1, r2, r3
 8009324:	fb03 f301 	mul.w	r3, r3, r1
 8009328:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800932a:	2b00      	cmp	r3, #0
 800932c:	d110      	bne.n	8009350 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	440b      	add	r3, r1
 800933c:	3318      	adds	r3, #24
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009342:	78f9      	ldrb	r1, [r7, #3]
 8009344:	2300      	movs	r3, #0
 8009346:	2200      	movs	r2, #0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 ff06 	bl	800b15a <USBD_LL_Transmit>
 800934e:	e015      	b.n	800937c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2200      	movs	r2, #0
 8009354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e015      	b.n	80093d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 ff16 	bl	800b1de <USBD_LL_GetRxDataSize>
 80093b2:	4602      	mov	r2, r0
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093ce:	4611      	mov	r1, r2
 80093d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e01b      	b.n	800942e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d015      	beq.n	800942c <USBD_CDC_EP0_RxReady+0x50>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009406:	2bff      	cmp	r3, #255	; 0xff
 8009408:	d010      	beq.n	800942c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009418:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009420:	b292      	uxth	r2, r2
 8009422:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	22ff      	movs	r2, #255	; 0xff
 8009428:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2243      	movs	r2, #67	; 0x43
 8009444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009446:	4b03      	ldr	r3, [pc, #12]	; (8009454 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	200000d0 	.word	0x200000d0

08009458 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2243      	movs	r2, #67	; 0x43
 8009464:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009466:	4b03      	ldr	r3, [pc, #12]	; (8009474 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	2000008c 	.word	0x2000008c

08009478 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2243      	movs	r2, #67	; 0x43
 8009484:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009486:	4b03      	ldr	r3, [pc, #12]	; (8009494 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20000114 	.word	0x20000114

08009498 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	220a      	movs	r2, #10
 80094a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094a6:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	20000048 	.word	0x20000048

080094b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e004      	b.n	80094d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b087      	sub	sp, #28
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e008      	b.n	8009512 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800952e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009536:	2303      	movs	r3, #3
 8009538:	e004      	b.n	8009544 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800955e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800956a:	2303      	movs	r3, #3
 800956c:	e016      	b.n	800959c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	7c1b      	ldrb	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d109      	bne.n	800958a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800957c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009580:	2101      	movs	r1, #1
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 fe0a 	bl	800b19c <USBD_LL_PrepareReceive>
 8009588:	e007      	b.n	800959a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009590:	2340      	movs	r3, #64	; 0x40
 8009592:	2101      	movs	r1, #1
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fe01 	bl	800b19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e01f      	b.n	80095fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	79fa      	ldrb	r2, [r7, #7]
 80095ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f001 fc7d 	bl	800aef0 <USBD_LL_Init>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e016      	b.n	800964a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	f107 020e 	add.w	r2, r7, #14
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	4602      	mov	r2, r0
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fc94 	bl	800af88 <USBD_LL_Start>
 8009660:	4603      	mov	r3, r0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009696:	2b00      	cmp	r3, #0
 8009698:	d009      	beq.n	80096ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	4611      	mov	r1, r2
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	4798      	blx	r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	78fa      	ldrb	r2, [r7, #3]
 80096d8:	4611      	mov	r1, r2
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
  }

  return USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 ff90 	bl	800a620 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	2b02      	cmp	r3, #2
 8009722:	d01a      	beq.n	800975a <USBD_LL_SetupStage+0x72>
 8009724:	2b02      	cmp	r3, #2
 8009726:	d822      	bhi.n	800976e <USBD_LL_SetupStage+0x86>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <USBD_LL_SetupStage+0x4a>
 800972c:	2b01      	cmp	r3, #1
 800972e:	d00a      	beq.n	8009746 <USBD_LL_SetupStage+0x5e>
 8009730:	e01d      	b.n	800976e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa62 	bl	8009c04 <USBD_StdDevReq>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]
      break;
 8009744:	e020      	b.n	8009788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fac6 	bl	8009ce0 <USBD_StdItfReq>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
      break;
 8009758:	e016      	b.n	8009788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fb05 	bl	8009d72 <USBD_StdEPReq>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
      break;
 800976c:	e00c      	b.n	8009788 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009774:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009778:	b2db      	uxtb	r3, r3
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fc63 	bl	800b048 <USBD_LL_StallEP>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
      break;
 8009786:	bf00      	nop
  }

  return ret;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	460b      	mov	r3, r1
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d138      	bne.n	8009818 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80097ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d14a      	bne.n	800984e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d913      	bls.n	80097ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	1ad2      	subs	r2, r2, r3
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	4293      	cmp	r3, r2
 80097dc:	bf28      	it	cs
 80097de:	4613      	movcs	r3, r2
 80097e0:	461a      	mov	r2, r3
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f001 f80f 	bl	800a808 <USBD_CtlContinueRx>
 80097ea:	e030      	b.n	800984e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d10b      	bne.n	8009810 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f001 f80a 	bl	800a82a <USBD_CtlSendStatus>
 8009816:	e01a      	b.n	800984e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b03      	cmp	r3, #3
 8009822:	d114      	bne.n	800984e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	7afa      	ldrb	r2, [r7, #11]
 800983a:	4611      	mov	r1, r2
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	4798      	blx	r3
 8009840:	4603      	mov	r3, r0
 8009842:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	e000      	b.n	8009850 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	460b      	mov	r3, r1
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d16b      	bne.n	8009944 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3314      	adds	r3, #20
 8009870:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009878:	2b02      	cmp	r3, #2
 800987a:	d156      	bne.n	800992a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	429a      	cmp	r2, r3
 8009886:	d914      	bls.n	80098b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	689a      	ldr	r2, [r3, #8]
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	1ad2      	subs	r2, r2, r3
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	461a      	mov	r2, r3
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 ff84 	bl	800a7ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098a4:	2300      	movs	r3, #0
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f001 fc76 	bl	800b19c <USBD_LL_PrepareReceive>
 80098b0:	e03b      	b.n	800992a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d11c      	bne.n	80098f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d316      	bcc.n	80098f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d20f      	bcs.n	80098f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098d8:	2200      	movs	r2, #0
 80098da:	2100      	movs	r1, #0
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 ff65 	bl	800a7ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ea:	2300      	movs	r3, #0
 80098ec:	2200      	movs	r2, #0
 80098ee:	2100      	movs	r1, #0
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f001 fc53 	bl	800b19c <USBD_LL_PrepareReceive>
 80098f6:	e018      	b.n	800992a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b03      	cmp	r3, #3
 8009902:	d10b      	bne.n	800991c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800991c:	2180      	movs	r1, #128	; 0x80
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f001 fb92 	bl	800b048 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 ff93 	bl	800a850 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009930:	2b01      	cmp	r3, #1
 8009932:	d122      	bne.n	800997a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f7ff fe98 	bl	800966a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009942:	e01a      	b.n	800997a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b03      	cmp	r3, #3
 800994e:	d114      	bne.n	800997a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00e      	beq.n	800997a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	7afa      	ldrb	r2, [r7, #11]
 8009966:	4611      	mov	r1, r2
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	4798      	blx	r3
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	e000      	b.n	800997c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e02f      	b.n	8009a18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6852      	ldr	r2, [r2, #4]
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	4611      	mov	r1, r2
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099e2:	2340      	movs	r3, #64	; 0x40
 80099e4:	2200      	movs	r2, #0
 80099e6:	2100      	movs	r1, #0
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 fae8 	bl	800afbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2240      	movs	r2, #64	; 0x40
 80099fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	2200      	movs	r2, #0
 8009a02:	2180      	movs	r1, #128	; 0x80
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 fada 	bl	800afbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2240      	movs	r2, #64	; 0x40
 8009a14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2204      	movs	r2, #4
 8009a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d106      	bne.n	8009a8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e012      	b.n	8009ad8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d10b      	bne.n	8009ad6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d005      	beq.n	8009ad6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e014      	b.n	8009b24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d10d      	bne.n	8009b22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	78fa      	ldrb	r2, [r7, #3]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e014      	b.n	8009b70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d10d      	bne.n	8009b6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d007      	beq.n	8009b6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6852      	ldr	r2, [r2, #4]
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
  }

  return USBD_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b087      	sub	sp, #28
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009be4:	8a3b      	ldrh	r3, [r7, #16]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	b21a      	sxth	r2, r3
 8009bea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	b21b      	sxth	r3, r3
 8009bf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
	...

08009c04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c1a:	2b40      	cmp	r3, #64	; 0x40
 8009c1c:	d005      	beq.n	8009c2a <USBD_StdDevReq+0x26>
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	d853      	bhi.n	8009cca <USBD_StdDevReq+0xc6>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <USBD_StdDevReq+0x3a>
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	d14f      	bne.n	8009cca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3c:	e04a      	b.n	8009cd4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d83b      	bhi.n	8009cbe <USBD_StdDevReq+0xba>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <USBD_StdDevReq+0x48>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009ca1 	.word	0x08009ca1
 8009c50:	08009cb5 	.word	0x08009cb5
 8009c54:	08009cbf 	.word	0x08009cbf
 8009c58:	08009cab 	.word	0x08009cab
 8009c5c:	08009cbf 	.word	0x08009cbf
 8009c60:	08009c7f 	.word	0x08009c7f
 8009c64:	08009c75 	.word	0x08009c75
 8009c68:	08009cbf 	.word	0x08009cbf
 8009c6c:	08009c97 	.word	0x08009c97
 8009c70:	08009c89 	.word	0x08009c89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f9de 	bl	800a038 <USBD_GetDescriptor>
          break;
 8009c7c:	e024      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fb43 	bl	800a30c <USBD_SetAddress>
          break;
 8009c86:	e01f      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fb82 	bl	800a394 <USBD_SetConfig>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]
          break;
 8009c94:	e018      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fc21 	bl	800a4e0 <USBD_GetConfig>
          break;
 8009c9e:	e013      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fc52 	bl	800a54c <USBD_GetStatus>
          break;
 8009ca8:	e00e      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fc81 	bl	800a5b4 <USBD_SetFeature>
          break;
 8009cb2:	e009      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fc90 	bl	800a5dc <USBD_ClrFeature>
          break;
 8009cbc:	e004      	b.n	8009cc8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fce7 	bl	800a694 <USBD_CtlError>
          break;
 8009cc6:	bf00      	nop
      }
      break;
 8009cc8:	e004      	b.n	8009cd4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fce1 	bl	800a694 <USBD_CtlError>
      break;
 8009cd2:	bf00      	nop
  }

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop

08009ce0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cf6:	2b40      	cmp	r3, #64	; 0x40
 8009cf8:	d005      	beq.n	8009d06 <USBD_StdItfReq+0x26>
 8009cfa:	2b40      	cmp	r3, #64	; 0x40
 8009cfc:	d82f      	bhi.n	8009d5e <USBD_StdItfReq+0x7e>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <USBD_StdItfReq+0x26>
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d12b      	bne.n	8009d5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d81d      	bhi.n	8009d50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	889b      	ldrh	r3, [r3, #4]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d813      	bhi.n	8009d46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	88db      	ldrh	r3, [r3, #6]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d110      	bne.n	8009d5a <USBD_StdItfReq+0x7a>
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10d      	bne.n	8009d5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fd73 	bl	800a82a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d44:	e009      	b.n	8009d5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fca3 	bl	800a694 <USBD_CtlError>
          break;
 8009d4e:	e004      	b.n	8009d5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fc9e 	bl	800a694 <USBD_CtlError>
          break;
 8009d58:	e000      	b.n	8009d5c <USBD_StdItfReq+0x7c>
          break;
 8009d5a:	bf00      	nop
      }
      break;
 8009d5c:	e004      	b.n	8009d68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fc97 	bl	800a694 <USBD_CtlError>
      break;
 8009d66:	bf00      	nop
  }

  return ret;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	889b      	ldrh	r3, [r3, #4]
 8009d84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d8e:	2b40      	cmp	r3, #64	; 0x40
 8009d90:	d007      	beq.n	8009da2 <USBD_StdEPReq+0x30>
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	f200 8145 	bhi.w	800a022 <USBD_StdEPReq+0x2b0>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00c      	beq.n	8009db6 <USBD_StdEPReq+0x44>
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	f040 8140 	bne.w	800a022 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]
      break;
 8009db4:	e13a      	b.n	800a02c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d007      	beq.n	8009dce <USBD_StdEPReq+0x5c>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	f300 8129 	bgt.w	800a016 <USBD_StdEPReq+0x2a4>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d07f      	beq.n	8009ec8 <USBD_StdEPReq+0x156>
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d03c      	beq.n	8009e46 <USBD_StdEPReq+0xd4>
 8009dcc:	e123      	b.n	800a016 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d002      	beq.n	8009de0 <USBD_StdEPReq+0x6e>
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d016      	beq.n	8009e0c <USBD_StdEPReq+0x9a>
 8009dde:	e02c      	b.n	8009e3a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00d      	beq.n	8009e02 <USBD_StdEPReq+0x90>
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b80      	cmp	r3, #128	; 0x80
 8009dea:	d00a      	beq.n	8009e02 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 f929 	bl	800b048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009df6:	2180      	movs	r1, #128	; 0x80
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f925 	bl	800b048 <USBD_LL_StallEP>
 8009dfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e00:	e020      	b.n	8009e44 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fc45 	bl	800a694 <USBD_CtlError>
              break;
 8009e0a:	e01b      	b.n	8009e44 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	885b      	ldrh	r3, [r3, #2]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10e      	bne.n	8009e32 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00b      	beq.n	8009e32 <USBD_StdEPReq+0xc0>
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	2b80      	cmp	r3, #128	; 0x80
 8009e1e:	d008      	beq.n	8009e32 <USBD_StdEPReq+0xc0>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	88db      	ldrh	r3, [r3, #6]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 f90b 	bl	800b048 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fcf9 	bl	800a82a <USBD_CtlSendStatus>

              break;
 8009e38:	e004      	b.n	8009e44 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fc29 	bl	800a694 <USBD_CtlError>
              break;
 8009e42:	bf00      	nop
          }
          break;
 8009e44:	e0ec      	b.n	800a020 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d002      	beq.n	8009e58 <USBD_StdEPReq+0xe6>
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d016      	beq.n	8009e84 <USBD_StdEPReq+0x112>
 8009e56:	e030      	b.n	8009eba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <USBD_StdEPReq+0x108>
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b80      	cmp	r3, #128	; 0x80
 8009e62:	d00a      	beq.n	8009e7a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f8ed 	bl	800b048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e6e:	2180      	movs	r1, #128	; 0x80
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f8e9 	bl	800b048 <USBD_LL_StallEP>
 8009e76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e78:	e025      	b.n	8009ec6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fc09 	bl	800a694 <USBD_CtlError>
              break;
 8009e82:	e020      	b.n	8009ec6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	885b      	ldrh	r3, [r3, #2]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d11b      	bne.n	8009ec4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f001 f8f3 	bl	800b086 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fcc2 	bl	800a82a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009eb8:	e004      	b.n	8009ec4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fbe9 	bl	800a694 <USBD_CtlError>
              break;
 8009ec2:	e000      	b.n	8009ec6 <USBD_StdEPReq+0x154>
              break;
 8009ec4:	bf00      	nop
          }
          break;
 8009ec6:	e0ab      	b.n	800a020 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d002      	beq.n	8009eda <USBD_StdEPReq+0x168>
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d032      	beq.n	8009f3e <USBD_StdEPReq+0x1cc>
 8009ed8:	e097      	b.n	800a00a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <USBD_StdEPReq+0x17e>
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b80      	cmp	r3, #128	; 0x80
 8009ee4:	d004      	beq.n	8009ef0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fbd3 	bl	800a694 <USBD_CtlError>
                break;
 8009eee:	e091      	b.n	800a014 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	da0b      	bge.n	8009f10 <USBD_StdEPReq+0x19e>
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	3310      	adds	r3, #16
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	e00b      	b.n	8009f28 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	4413      	add	r3, r2
 8009f26:	3304      	adds	r3, #4
 8009f28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2202      	movs	r2, #2
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fc1d 	bl	800a776 <USBD_CtlSendData>
              break;
 8009f3c:	e06a      	b.n	800a014 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	da11      	bge.n	8009f6a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	f003 020f 	and.w	r2, r3, #15
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	3324      	adds	r3, #36	; 0x24
 8009f5a:	881b      	ldrh	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d117      	bne.n	8009f90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fb96 	bl	800a694 <USBD_CtlError>
                  break;
 8009f68:	e054      	b.n	800a014 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	f003 020f 	and.w	r2, r3, #15
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d104      	bne.n	8009f90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fb83 	bl	800a694 <USBD_CtlError>
                  break;
 8009f8e:	e041      	b.n	800a014 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	da0b      	bge.n	8009fb0 <USBD_StdEPReq+0x23e>
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	3310      	adds	r3, #16
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	4413      	add	r3, r2
 8009fac:	3304      	adds	r3, #4
 8009fae:	e00b      	b.n	8009fc8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <USBD_StdEPReq+0x264>
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b80      	cmp	r3, #128	; 0x80
 8009fd4:	d103      	bne.n	8009fde <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	e00e      	b.n	8009ffc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f86e 	bl	800b0c4 <USBD_LL_IsStallEP>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e002      	b.n	8009ffc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2202      	movs	r2, #2
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fbb7 	bl	800a776 <USBD_CtlSendData>
              break;
 800a008:	e004      	b.n	800a014 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fb41 	bl	800a694 <USBD_CtlError>
              break;
 800a012:	bf00      	nop
          }
          break;
 800a014:	e004      	b.n	800a020 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fb3b 	bl	800a694 <USBD_CtlError>
          break;
 800a01e:	bf00      	nop
      }
      break;
 800a020:	e004      	b.n	800a02c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fb35 	bl	800a694 <USBD_CtlError>
      break;
 800a02a:	bf00      	nop
  }

  return ret;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	885b      	ldrh	r3, [r3, #2]
 800a052:	0a1b      	lsrs	r3, r3, #8
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b01      	subs	r3, #1
 800a058:	2b06      	cmp	r3, #6
 800a05a:	f200 8128 	bhi.w	800a2ae <USBD_GetDescriptor+0x276>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <USBD_GetDescriptor+0x2c>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a081 	.word	0x0800a081
 800a068:	0800a099 	.word	0x0800a099
 800a06c:	0800a0d9 	.word	0x0800a0d9
 800a070:	0800a2af 	.word	0x0800a2af
 800a074:	0800a2af 	.word	0x0800a2af
 800a078:	0800a24f 	.word	0x0800a24f
 800a07c:	0800a27b 	.word	0x0800a27b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	7c12      	ldrb	r2, [r2, #16]
 800a08c:	f107 0108 	add.w	r1, r7, #8
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	60f8      	str	r0, [r7, #12]
      break;
 800a096:	e112      	b.n	800a2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7c1b      	ldrb	r3, [r3, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10d      	bne.n	800a0bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	f107 0208 	add.w	r2, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0ba:	e100      	b.n	800a2be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c4:	f107 0208 	add.w	r2, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	701a      	strb	r2, [r3, #0]
      break;
 800a0d6:	e0f2      	b.n	800a2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	885b      	ldrh	r3, [r3, #2]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	f200 80ac 	bhi.w	800a23c <USBD_GetDescriptor+0x204>
 800a0e4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <USBD_GetDescriptor+0xb4>)
 800a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ea:	bf00      	nop
 800a0ec:	0800a105 	.word	0x0800a105
 800a0f0:	0800a139 	.word	0x0800a139
 800a0f4:	0800a16d 	.word	0x0800a16d
 800a0f8:	0800a1a1 	.word	0x0800a1a1
 800a0fc:	0800a1d5 	.word	0x0800a1d5
 800a100:	0800a209 	.word	0x0800a209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	7c12      	ldrb	r2, [r2, #16]
 800a11c:	f107 0108 	add.w	r1, r7, #8
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
 800a124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a126:	e091      	b.n	800a24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fab2 	bl	800a694 <USBD_CtlError>
            err++;
 800a130:	7afb      	ldrb	r3, [r7, #11]
 800a132:	3301      	adds	r3, #1
 800a134:	72fb      	strb	r3, [r7, #11]
          break;
 800a136:	e089      	b.n	800a24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	7c12      	ldrb	r2, [r2, #16]
 800a150:	f107 0108 	add.w	r1, r7, #8
 800a154:	4610      	mov	r0, r2
 800a156:	4798      	blx	r3
 800a158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a15a:	e077      	b.n	800a24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fa98 	bl	800a694 <USBD_CtlError>
            err++;
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	3301      	adds	r3, #1
 800a168:	72fb      	strb	r3, [r7, #11]
          break;
 800a16a:	e06f      	b.n	800a24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	7c12      	ldrb	r2, [r2, #16]
 800a184:	f107 0108 	add.w	r1, r7, #8
 800a188:	4610      	mov	r0, r2
 800a18a:	4798      	blx	r3
 800a18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a18e:	e05d      	b.n	800a24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fa7e 	bl	800a694 <USBD_CtlError>
            err++;
 800a198:	7afb      	ldrb	r3, [r7, #11]
 800a19a:	3301      	adds	r3, #1
 800a19c:	72fb      	strb	r3, [r7, #11]
          break;
 800a19e:	e055      	b.n	800a24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7c12      	ldrb	r2, [r2, #16]
 800a1b8:	f107 0108 	add.w	r1, r7, #8
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4798      	blx	r3
 800a1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1c2:	e043      	b.n	800a24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fa64 	bl	800a694 <USBD_CtlError>
            err++;
 800a1cc:	7afb      	ldrb	r3, [r7, #11]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1d2:	e03b      	b.n	800a24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00b      	beq.n	800a1f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	7c12      	ldrb	r2, [r2, #16]
 800a1ec:	f107 0108 	add.w	r1, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1f6:	e029      	b.n	800a24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa4a 	bl	800a694 <USBD_CtlError>
            err++;
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	3301      	adds	r3, #1
 800a204:	72fb      	strb	r3, [r7, #11]
          break;
 800a206:	e021      	b.n	800a24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	7c12      	ldrb	r2, [r2, #16]
 800a220:	f107 0108 	add.w	r1, r7, #8
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22a:	e00f      	b.n	800a24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa30 	bl	800a694 <USBD_CtlError>
            err++;
 800a234:	7afb      	ldrb	r3, [r7, #11]
 800a236:	3301      	adds	r3, #1
 800a238:	72fb      	strb	r3, [r7, #11]
          break;
 800a23a:	e007      	b.n	800a24c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fa28 	bl	800a694 <USBD_CtlError>
          err++;
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	3301      	adds	r3, #1
 800a248:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a24a:	bf00      	nop
      }
      break;
 800a24c:	e037      	b.n	800a2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	7c1b      	ldrb	r3, [r3, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25e:	f107 0208 	add.w	r2, r7, #8
 800a262:	4610      	mov	r0, r2
 800a264:	4798      	blx	r3
 800a266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a268:	e029      	b.n	800a2be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fa11 	bl	800a694 <USBD_CtlError>
        err++;
 800a272:	7afb      	ldrb	r3, [r7, #11]
 800a274:	3301      	adds	r3, #1
 800a276:	72fb      	strb	r3, [r7, #11]
      break;
 800a278:	e021      	b.n	800a2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	7c1b      	ldrb	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10d      	bne.n	800a29e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28a:	f107 0208 	add.w	r2, r7, #8
 800a28e:	4610      	mov	r0, r2
 800a290:	4798      	blx	r3
 800a292:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	2207      	movs	r2, #7
 800a29a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a29c:	e00f      	b.n	800a2be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f9f7 	bl	800a694 <USBD_CtlError>
        err++;
 800a2a6:	7afb      	ldrb	r3, [r7, #11]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a2ac:	e007      	b.n	800a2be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f9ef 	bl	800a694 <USBD_CtlError>
      err++;
 800a2b6:	7afb      	ldrb	r3, [r7, #11]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a2bc:	bf00      	nop
  }

  if (err != 0U)
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d11e      	bne.n	800a302 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	88db      	ldrh	r3, [r3, #6]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d016      	beq.n	800a2fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a2cc:	893b      	ldrh	r3, [r7, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00e      	beq.n	800a2f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	88da      	ldrh	r2, [r3, #6]
 800a2d6:	893b      	ldrh	r3, [r7, #8]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bf28      	it	cs
 800a2dc:	4613      	movcs	r3, r2
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fa44 	bl	800a776 <USBD_CtlSendData>
 800a2ee:	e009      	b.n	800a304 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f9ce 	bl	800a694 <USBD_CtlError>
 800a2f8:	e004      	b.n	800a304 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fa95 	bl	800a82a <USBD_CtlSendStatus>
 800a300:	e000      	b.n	800a304 <USBD_GetDescriptor+0x2cc>
    return;
 800a302:	bf00      	nop
  }
}
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop

0800a30c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	889b      	ldrh	r3, [r3, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d131      	bne.n	800a382 <USBD_SetAddress+0x76>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d12d      	bne.n	800a382 <USBD_SetAddress+0x76>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	885b      	ldrh	r3, [r3, #2]
 800a32a:	2b7f      	cmp	r3, #127	; 0x7f
 800a32c:	d829      	bhi.n	800a382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b03      	cmp	r3, #3
 800a344:	d104      	bne.n	800a350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f9a3 	bl	800a694 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	e01d      	b.n	800a38c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7bfa      	ldrb	r2, [r7, #15]
 800a354:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fedd 	bl	800b11c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa61 	bl	800a82a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d004      	beq.n	800a378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2202      	movs	r2, #2
 800a372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a376:	e009      	b.n	800a38c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a380:	e004      	b.n	800a38c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f985 	bl	800a694 <USBD_CtlError>
  }
}
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	885b      	ldrh	r3, [r3, #2]
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	4b4c      	ldr	r3, [pc, #304]	; (800a4dc <USBD_SetConfig+0x148>)
 800a3aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3ac:	4b4b      	ldr	r3, [pc, #300]	; (800a4dc <USBD_SetConfig+0x148>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d905      	bls.n	800a3c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f96c 	bl	800a694 <USBD_CtlError>
    return USBD_FAIL;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e088      	b.n	800a4d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d002      	beq.n	800a3d2 <USBD_SetConfig+0x3e>
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d025      	beq.n	800a41c <USBD_SetConfig+0x88>
 800a3d0:	e071      	b.n	800a4b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3d2:	4b42      	ldr	r3, [pc, #264]	; (800a4dc <USBD_SetConfig+0x148>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d01c      	beq.n	800a414 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a3da:	4b40      	ldr	r3, [pc, #256]	; (800a4dc <USBD_SetConfig+0x148>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3e4:	4b3d      	ldr	r3, [pc, #244]	; (800a4dc <USBD_SetConfig+0x148>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff f948 	bl	8009680 <USBD_SetClassConfig>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f949 	bl	800a694 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a402:	e065      	b.n	800a4d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fa10 	bl	800a82a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2203      	movs	r2, #3
 800a40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a412:	e05d      	b.n	800a4d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fa08 	bl	800a82a <USBD_CtlSendStatus>
      break;
 800a41a:	e059      	b.n	800a4d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a41c:	4b2f      	ldr	r3, [pc, #188]	; (800a4dc <USBD_SetConfig+0x148>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d112      	bne.n	800a44a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a42c:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <USBD_SetConfig+0x148>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	461a      	mov	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a436:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <USBD_SetConfig+0x148>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff f93b 	bl	80096b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f9f1 	bl	800a82a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a448:	e042      	b.n	800a4d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a44a:	4b24      	ldr	r3, [pc, #144]	; (800a4dc <USBD_SetConfig+0x148>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d02a      	beq.n	800a4ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff f929 	bl	80096b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a466:	4b1d      	ldr	r3, [pc, #116]	; (800a4dc <USBD_SetConfig+0x148>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a470:	4b1a      	ldr	r3, [pc, #104]	; (800a4dc <USBD_SetConfig+0x148>)
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff f902 	bl	8009680 <USBD_SetClassConfig>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00f      	beq.n	800a4a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f903 	bl	800a694 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	b2db      	uxtb	r3, r3
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff f90e 	bl	80096b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a4a4:	e014      	b.n	800a4d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f9bf 	bl	800a82a <USBD_CtlSendStatus>
      break;
 800a4ac:	e010      	b.n	800a4d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f9bb 	bl	800a82a <USBD_CtlSendStatus>
      break;
 800a4b4:	e00c      	b.n	800a4d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f8eb 	bl	800a694 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4be:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <USBD_SetConfig+0x148>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff f8f7 	bl	80096b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ce:	bf00      	nop
  }

  return ret;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	2000065e 	.word	0x2000065e

0800a4e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	88db      	ldrh	r3, [r3, #6]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d004      	beq.n	800a4fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8cd 	bl	800a694 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4fa:	e023      	b.n	800a544 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	dc02      	bgt.n	800a50e <USBD_GetConfig+0x2e>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc03      	bgt.n	800a514 <USBD_GetConfig+0x34>
 800a50c:	e015      	b.n	800a53a <USBD_GetConfig+0x5a>
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d00b      	beq.n	800a52a <USBD_GetConfig+0x4a>
 800a512:	e012      	b.n	800a53a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3308      	adds	r3, #8
 800a51e:	2201      	movs	r2, #1
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f927 	bl	800a776 <USBD_CtlSendData>
        break;
 800a528:	e00c      	b.n	800a544 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3304      	adds	r3, #4
 800a52e:	2201      	movs	r2, #1
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f91f 	bl	800a776 <USBD_CtlSendData>
        break;
 800a538:	e004      	b.n	800a544 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f8a9 	bl	800a694 <USBD_CtlError>
        break;
 800a542:	bf00      	nop
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b02      	cmp	r3, #2
 800a562:	d81e      	bhi.n	800a5a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	88db      	ldrh	r3, [r3, #6]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d004      	beq.n	800a576 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f890 	bl	800a694 <USBD_CtlError>
        break;
 800a574:	e01a      	b.n	800a5ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f043 0202 	orr.w	r2, r3, #2
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	330c      	adds	r3, #12
 800a596:	2202      	movs	r2, #2
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f8eb 	bl	800a776 <USBD_CtlSendData>
      break;
 800a5a0:	e004      	b.n	800a5ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f875 	bl	800a694 <USBD_CtlError>
      break;
 800a5aa:	bf00      	nop
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	885b      	ldrh	r3, [r3, #2]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d106      	bne.n	800a5d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f92b 	bl	800a82a <USBD_CtlSendStatus>
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d80b      	bhi.n	800a60c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	885b      	ldrh	r3, [r3, #2]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d10c      	bne.n	800a616 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f910 	bl	800a82a <USBD_CtlSendStatus>
      }
      break;
 800a60a:	e004      	b.n	800a616 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f840 	bl	800a694 <USBD_CtlError>
      break;
 800a614:	e000      	b.n	800a618 <USBD_ClrFeature+0x3c>
      break;
 800a616:	bf00      	nop
  }
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	781a      	ldrb	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3301      	adds	r3, #1
 800a648:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff fabb 	bl	8009bc6 <SWAPBYTE>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3301      	adds	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff faae 	bl	8009bc6 <SWAPBYTE>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3301      	adds	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3301      	adds	r3, #1
 800a67c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7ff faa1 	bl	8009bc6 <SWAPBYTE>
 800a684:	4603      	mov	r3, r0
 800a686:	461a      	mov	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	80da      	strh	r2, [r3, #6]
}
 800a68c:	bf00      	nop
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a69e:	2180      	movs	r1, #128	; 0x80
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fcd1 	bl	800b048 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fccd 	bl	800b048 <USBD_LL_StallEP>
}
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d036      	beq.n	800a73a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6d0:	6938      	ldr	r0, [r7, #16]
 800a6d2:	f000 f836 	bl	800a742 <USBD_GetLen>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	3301      	adds	r3, #1
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	7812      	ldrb	r2, [r2, #0]
 800a6ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	2203      	movs	r2, #3
 800a6fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	3301      	adds	r3, #1
 800a704:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a706:	e013      	b.n	800a730 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4413      	add	r3, r2
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	7812      	ldrb	r2, [r2, #0]
 800a712:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3301      	adds	r3, #1
 800a718:	613b      	str	r3, [r7, #16]
    idx++;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	3301      	adds	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	4413      	add	r3, r2
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
    idx++;
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	3301      	adds	r3, #1
 800a72e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e7      	bne.n	800a708 <USBD_GetString+0x52>
 800a738:	e000      	b.n	800a73c <USBD_GetString+0x86>
    return;
 800a73a:	bf00      	nop
  }
}
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a742:	b480      	push	{r7}
 800a744:	b085      	sub	sp, #20
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a752:	e005      	b.n	800a760 <USBD_GetLen+0x1e>
  {
    len++;
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	3301      	adds	r3, #1
 800a758:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	3301      	adds	r3, #1
 800a75e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1f5      	bne.n	800a754 <USBD_GetLen+0x12>
  }

  return len;
 800a768:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2202      	movs	r2, #2
 800a786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	2100      	movs	r1, #0
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 fcdc 	bl	800b15a <USBD_LL_Transmit>

  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	2100      	movs	r1, #0
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 fccb 	bl	800b15a <USBD_LL_Transmit>

  return USBD_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2203      	movs	r2, #3
 800a7de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fccf 	bl	800b19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	2100      	movs	r1, #0
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 fcbe 	bl	800b19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2204      	movs	r2, #4
 800a836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a83a:	2300      	movs	r3, #0
 800a83c:	2200      	movs	r2, #0
 800a83e:	2100      	movs	r1, #0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fc8a 	bl	800b15a <USBD_LL_Transmit>

  return USBD_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2205      	movs	r2, #5
 800a85c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a860:	2300      	movs	r3, #0
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fc98 	bl	800b19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a87c:	2200      	movs	r2, #0
 800a87e:	4912      	ldr	r1, [pc, #72]	; (800a8c8 <MX_USB_DEVICE_Init+0x50>)
 800a880:	4812      	ldr	r0, [pc, #72]	; (800a8cc <MX_USB_DEVICE_Init+0x54>)
 800a882:	f7fe fe8f 	bl	80095a4 <USBD_Init>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a88c:	f7f7 fa08 	bl	8001ca0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a890:	490f      	ldr	r1, [pc, #60]	; (800a8d0 <MX_USB_DEVICE_Init+0x58>)
 800a892:	480e      	ldr	r0, [pc, #56]	; (800a8cc <MX_USB_DEVICE_Init+0x54>)
 800a894:	f7fe feb6 	bl	8009604 <USBD_RegisterClass>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a89e:	f7f7 f9ff 	bl	8001ca0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a8a2:	490c      	ldr	r1, [pc, #48]	; (800a8d4 <MX_USB_DEVICE_Init+0x5c>)
 800a8a4:	4809      	ldr	r0, [pc, #36]	; (800a8cc <MX_USB_DEVICE_Init+0x54>)
 800a8a6:	f7fe fe07 	bl	80094b8 <USBD_CDC_RegisterInterface>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a8b0:	f7f7 f9f6 	bl	8001ca0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8b4:	4805      	ldr	r0, [pc, #20]	; (800a8cc <MX_USB_DEVICE_Init+0x54>)
 800a8b6:	f7fe fecc 	bl	8009652 <USBD_Start>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8c0:	f7f7 f9ee 	bl	8001ca0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8c4:	bf00      	nop
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	2000016c 	.word	0x2000016c
 800a8cc:	20000a8c 	.word	0x20000a8c
 800a8d0:	20000054 	.word	0x20000054
 800a8d4:	20000158 	.word	0x20000158

0800a8d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4905      	ldr	r1, [pc, #20]	; (800a8f4 <CDC_Init_FS+0x1c>)
 800a8e0:	4805      	ldr	r0, [pc, #20]	; (800a8f8 <CDC_Init_FS+0x20>)
 800a8e2:	f7fe fdfe 	bl	80094e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8e6:	4905      	ldr	r1, [pc, #20]	; (800a8fc <CDC_Init_FS+0x24>)
 800a8e8:	4803      	ldr	r0, [pc, #12]	; (800a8f8 <CDC_Init_FS+0x20>)
 800a8ea:	f7fe fe18 	bl	800951e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	2000155c 	.word	0x2000155c
 800a8f8:	20000a8c 	.word	0x20000a8c
 800a8fc:	20000d5c 	.word	0x20000d5c

0800a900 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a904:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a906:	4618      	mov	r0, r3
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	6039      	str	r1, [r7, #0]
 800a91a:	71fb      	strb	r3, [r7, #7]
 800a91c:	4613      	mov	r3, r2
 800a91e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	2b23      	cmp	r3, #35	; 0x23
 800a924:	d84a      	bhi.n	800a9bc <CDC_Control_FS+0xac>
 800a926:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <CDC_Control_FS+0x1c>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a9bd 	.word	0x0800a9bd
 800a930:	0800a9bd 	.word	0x0800a9bd
 800a934:	0800a9bd 	.word	0x0800a9bd
 800a938:	0800a9bd 	.word	0x0800a9bd
 800a93c:	0800a9bd 	.word	0x0800a9bd
 800a940:	0800a9bd 	.word	0x0800a9bd
 800a944:	0800a9bd 	.word	0x0800a9bd
 800a948:	0800a9bd 	.word	0x0800a9bd
 800a94c:	0800a9bd 	.word	0x0800a9bd
 800a950:	0800a9bd 	.word	0x0800a9bd
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800a9bd 	.word	0x0800a9bd
 800a95c:	0800a9bd 	.word	0x0800a9bd
 800a960:	0800a9bd 	.word	0x0800a9bd
 800a964:	0800a9bd 	.word	0x0800a9bd
 800a968:	0800a9bd 	.word	0x0800a9bd
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a9bd 	.word	0x0800a9bd
 800a974:	0800a9bd 	.word	0x0800a9bd
 800a978:	0800a9bd 	.word	0x0800a9bd
 800a97c:	0800a9bd 	.word	0x0800a9bd
 800a980:	0800a9bd 	.word	0x0800a9bd
 800a984:	0800a9bd 	.word	0x0800a9bd
 800a988:	0800a9bd 	.word	0x0800a9bd
 800a98c:	0800a9bd 	.word	0x0800a9bd
 800a990:	0800a9bd 	.word	0x0800a9bd
 800a994:	0800a9bd 	.word	0x0800a9bd
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9bd 	.word	0x0800a9bd
 800a9a0:	0800a9bd 	.word	0x0800a9bd
 800a9a4:	0800a9bd 	.word	0x0800a9bd
 800a9a8:	0800a9bd 	.word	0x0800a9bd
 800a9ac:	0800a9bd 	.word	0x0800a9bd
 800a9b0:	0800a9bd 	.word	0x0800a9bd
 800a9b4:	0800a9bd 	.word	0x0800a9bd
 800a9b8:	0800a9bd 	.word	0x0800a9bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9bc:	bf00      	nop
  }

  return (USBD_OK);
 800a9be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	480f      	ldr	r0, [pc, #60]	; (800aa18 <CDC_Receive_FS+0x4c>)
 800a9da:	f7fe fda0 	bl	800951e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9de:	480e      	ldr	r0, [pc, #56]	; (800aa18 <CDC_Receive_FS+0x4c>)
 800a9e0:	f7fe fdb6 	bl	8009550 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 800a9e4:	2240      	movs	r2, #64	; 0x40
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	480c      	ldr	r0, [pc, #48]	; (800aa1c <CDC_Receive_FS+0x50>)
 800a9ea:	f000 fc87 	bl	800b2fc <memset>
  uint8_t len = (uint8_t)*Len;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	6879      	ldr	r1, [r7, #4]
 800a9fa:	4808      	ldr	r0, [pc, #32]	; (800aa1c <CDC_Receive_FS+0x50>)
 800a9fc:	f000 fc70 	bl	800b2e0 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	461a      	mov	r2, r3
 800aa04:	2100      	movs	r1, #0
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fc78 	bl	800b2fc <memset>

  return (USBD_OK);
 800aa0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20000a8c 	.word	0x20000a8c
 800aa1c:	2000098c 	.word	0x2000098c

0800aa20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
	...

0800aa44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2212      	movs	r2, #18
 800aa54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa56:	4b03      	ldr	r3, [pc, #12]	; (800aa64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	20000188 	.word	0x20000188

0800aa68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	6039      	str	r1, [r7, #0]
 800aa72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2204      	movs	r2, #4
 800aa78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa7a:	4b03      	ldr	r3, [pc, #12]	; (800aa88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	2000019c 	.word	0x2000019c

0800aa8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	4907      	ldr	r1, [pc, #28]	; (800aac0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaa2:	4808      	ldr	r0, [pc, #32]	; (800aac4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaa4:	f7ff fe07 	bl	800a6b6 <USBD_GetString>
 800aaa8:	e004      	b.n	800aab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4904      	ldr	r1, [pc, #16]	; (800aac0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaae:	4805      	ldr	r0, [pc, #20]	; (800aac4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aab0:	f7ff fe01 	bl	800a6b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aab4:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20001d5c 	.word	0x20001d5c
 800aac4:	0800b528 	.word	0x0800b528

0800aac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	4904      	ldr	r1, [pc, #16]	; (800aae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aad8:	4804      	ldr	r0, [pc, #16]	; (800aaec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aada:	f7ff fdec 	bl	800a6b6 <USBD_GetString>
  return USBD_StrDesc;
 800aade:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	20001d5c 	.word	0x20001d5c
 800aaec:	0800b53c 	.word	0x0800b53c

0800aaf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	6039      	str	r1, [r7, #0]
 800aafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	221a      	movs	r2, #26
 800ab00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab02:	f000 f843 	bl	800ab8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab06:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	200001a0 	.word	0x200001a0

0800ab14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	6039      	str	r1, [r7, #0]
 800ab1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d105      	bne.n	800ab32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4907      	ldr	r1, [pc, #28]	; (800ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab2a:	4808      	ldr	r0, [pc, #32]	; (800ab4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab2c:	f7ff fdc3 	bl	800a6b6 <USBD_GetString>
 800ab30:	e004      	b.n	800ab3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	4904      	ldr	r1, [pc, #16]	; (800ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab36:	4805      	ldr	r0, [pc, #20]	; (800ab4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab38:	f7ff fdbd 	bl	800a6b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20001d5c 	.word	0x20001d5c
 800ab4c:	0800b550 	.word	0x0800b550

0800ab50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	; (800ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	; (800ab88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab68:	f7ff fda5 	bl	800a6b6 <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	; (800ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	; (800ab88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab74:	f7ff fd9f 	bl	800a6b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20001d5c 	.word	0x20001d5c
 800ab88:	0800b55c 	.word	0x0800b55c

0800ab8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab92:	4b0f      	ldr	r3, [pc, #60]	; (800abd0 <Get_SerialNum+0x44>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab98:	4b0e      	ldr	r3, [pc, #56]	; (800abd4 <Get_SerialNum+0x48>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab9e:	4b0e      	ldr	r3, [pc, #56]	; (800abd8 <Get_SerialNum+0x4c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d009      	beq.n	800abc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abb2:	2208      	movs	r2, #8
 800abb4:	4909      	ldr	r1, [pc, #36]	; (800abdc <Get_SerialNum+0x50>)
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 f814 	bl	800abe4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abbc:	2204      	movs	r2, #4
 800abbe:	4908      	ldr	r1, [pc, #32]	; (800abe0 <Get_SerialNum+0x54>)
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	f000 f80f 	bl	800abe4 <IntToUnicode>
  }
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	1fff7a10 	.word	0x1fff7a10
 800abd4:	1fff7a14 	.word	0x1fff7a14
 800abd8:	1fff7a18 	.word	0x1fff7a18
 800abdc:	200001a2 	.word	0x200001a2
 800abe0:	200001b2 	.word	0x200001b2

0800abe4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4613      	mov	r3, r2
 800abf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abf6:	2300      	movs	r3, #0
 800abf8:	75fb      	strb	r3, [r7, #23]
 800abfa:	e027      	b.n	800ac4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	0f1b      	lsrs	r3, r3, #28
 800ac00:	2b09      	cmp	r3, #9
 800ac02:	d80b      	bhi.n	800ac1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	0f1b      	lsrs	r3, r3, #28
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4619      	mov	r1, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	440b      	add	r3, r1
 800ac14:	3230      	adds	r2, #48	; 0x30
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	e00a      	b.n	800ac32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	0f1b      	lsrs	r3, r3, #28
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	4619      	mov	r1, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	440b      	add	r3, r1
 800ac2c:	3237      	adds	r2, #55	; 0x37
 800ac2e:	b2d2      	uxtb	r2, r2
 800ac30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	011b      	lsls	r3, r3, #4
 800ac36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	4413      	add	r3, r2
 800ac42:	2200      	movs	r2, #0
 800ac44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	75fb      	strb	r3, [r7, #23]
 800ac4c:	7dfa      	ldrb	r2, [r7, #23]
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d3d3      	bcc.n	800abfc <IntToUnicode+0x18>
  }
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
	...

0800ac64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	; 0x28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac6c:	f107 0314 	add.w	r3, r7, #20
 800ac70:	2200      	movs	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	605a      	str	r2, [r3, #4]
 800ac76:	609a      	str	r2, [r3, #8]
 800ac78:	60da      	str	r2, [r3, #12]
 800ac7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac84:	d13a      	bne.n	800acfc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac86:	2300      	movs	r3, #0
 800ac88:	613b      	str	r3, [r7, #16]
 800ac8a:	4b1e      	ldr	r3, [pc, #120]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	4a1d      	ldr	r2, [pc, #116]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	6313      	str	r3, [r2, #48]	; 0x30
 800ac96:	4b1b      	ldr	r3, [pc, #108]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aca2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aca8:	2302      	movs	r3, #2
 800acaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acac:	2300      	movs	r3, #0
 800acae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acb0:	2303      	movs	r3, #3
 800acb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acb4:	230a      	movs	r3, #10
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acb8:	f107 0314 	add.w	r3, r7, #20
 800acbc:	4619      	mov	r1, r3
 800acbe:	4812      	ldr	r0, [pc, #72]	; (800ad08 <HAL_PCD_MspInit+0xa4>)
 800acc0:	f7f8 ff72 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800acc4:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800acc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc8:	4a0e      	ldr	r2, [pc, #56]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800acca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acce:	6353      	str	r3, [r2, #52]	; 0x34
 800acd0:	2300      	movs	r3, #0
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800acd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd8:	4a0a      	ldr	r2, [pc, #40]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800acda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acde:	6453      	str	r3, [r2, #68]	; 0x44
 800ace0:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <HAL_PCD_MspInit+0xa0>)
 800ace2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace8:	60fb      	str	r3, [r7, #12]
 800acea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800acec:	2200      	movs	r2, #0
 800acee:	2100      	movs	r1, #0
 800acf0:	2043      	movs	r0, #67	; 0x43
 800acf2:	f7f8 ff22 	bl	8003b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acf6:	2043      	movs	r0, #67	; 0x43
 800acf8:	f7f8 ff3b 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acfc:	bf00      	nop
 800acfe:	3728      	adds	r7, #40	; 0x28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	40023800 	.word	0x40023800
 800ad08:	40020000 	.word	0x40020000

0800ad0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fe fce0 	bl	80096e8 <USBD_LL_SetupStage>
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad42:	78fa      	ldrb	r2, [r7, #3]
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	440b      	add	r3, r1
 800ad50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f7fe fd1a 	bl	8009792 <USBD_LL_DataOutStage>
}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	440b      	add	r3, r1
 800ad86:	3348      	adds	r3, #72	; 0x48
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f7fe fd63 	bl	8009858 <USBD_LL_DataInStage>
}
 800ad92:	bf00      	nop
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fe fe77 	bl	8009a9c <USBD_LL_SOF>
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adbe:	2301      	movs	r3, #1
 800adc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d102      	bne.n	800add0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800adca:	2300      	movs	r3, #0
 800adcc:	73fb      	strb	r3, [r7, #15]
 800adce:	e008      	b.n	800ade2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d102      	bne.n	800adde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800add8:	2301      	movs	r3, #1
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	e001      	b.n	800ade2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800adde:	f7f6 ff5f 	bl	8001ca0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ade8:	7bfa      	ldrb	r2, [r7, #15]
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe fe17 	bl	8009a20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fdc3 	bl	8009984 <USBD_LL_Reset>
}
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fe12 	bl	8009a40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6812      	ldr	r2, [r2, #0]
 800ae2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae2e:	f043 0301 	orr.w	r3, r3, #1
 800ae32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a1b      	ldr	r3, [r3, #32]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d005      	beq.n	800ae48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <HAL_PCD_SuspendCallback+0x48>)
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	4a03      	ldr	r2, [pc, #12]	; (800ae50 <HAL_PCD_SuspendCallback+0x48>)
 800ae42:	f043 0306 	orr.w	r3, r3, #6
 800ae46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	e000ed00 	.word	0xe000ed00

0800ae54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe fe02 	bl	8009a6c <USBD_LL_Resume>
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fe50 	bl	8009b2c <USBD_LL_IsoOUTIncomplete>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aea6:	78fa      	ldrb	r2, [r7, #3]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fe18 	bl	8009ae0 <USBD_LL_IsoINIncomplete>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fe56 	bl	8009b78 <USBD_LL_DevConnected>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe fe53 	bl	8009b8e <USBD_LL_DevDisconnected>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d13c      	bne.n	800af7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af00:	4a20      	ldr	r2, [pc, #128]	; (800af84 <USBD_LL_Init+0x94>)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a1e      	ldr	r2, [pc, #120]	; (800af84 <USBD_LL_Init+0x94>)
 800af0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af10:	4b1c      	ldr	r3, [pc, #112]	; (800af84 <USBD_LL_Init+0x94>)
 800af12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af18:	4b1a      	ldr	r3, [pc, #104]	; (800af84 <USBD_LL_Init+0x94>)
 800af1a:	2204      	movs	r2, #4
 800af1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af1e:	4b19      	ldr	r3, [pc, #100]	; (800af84 <USBD_LL_Init+0x94>)
 800af20:	2202      	movs	r2, #2
 800af22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af24:	4b17      	ldr	r3, [pc, #92]	; (800af84 <USBD_LL_Init+0x94>)
 800af26:	2200      	movs	r2, #0
 800af28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af2a:	4b16      	ldr	r3, [pc, #88]	; (800af84 <USBD_LL_Init+0x94>)
 800af2c:	2202      	movs	r2, #2
 800af2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af30:	4b14      	ldr	r3, [pc, #80]	; (800af84 <USBD_LL_Init+0x94>)
 800af32:	2200      	movs	r2, #0
 800af34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <USBD_LL_Init+0x94>)
 800af38:	2200      	movs	r2, #0
 800af3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af3c:	4b11      	ldr	r3, [pc, #68]	; (800af84 <USBD_LL_Init+0x94>)
 800af3e:	2200      	movs	r2, #0
 800af40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af42:	4b10      	ldr	r3, [pc, #64]	; (800af84 <USBD_LL_Init+0x94>)
 800af44:	2200      	movs	r2, #0
 800af46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af48:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <USBD_LL_Init+0x94>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af4e:	480d      	ldr	r0, [pc, #52]	; (800af84 <USBD_LL_Init+0x94>)
 800af50:	f7fa fa7f 	bl	8005452 <HAL_PCD_Init>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af5a:	f7f6 fea1 	bl	8001ca0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af5e:	2180      	movs	r1, #128	; 0x80
 800af60:	4808      	ldr	r0, [pc, #32]	; (800af84 <USBD_LL_Init+0x94>)
 800af62:	f7fb fbdc 	bl	800671e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af66:	2240      	movs	r2, #64	; 0x40
 800af68:	2100      	movs	r1, #0
 800af6a:	4806      	ldr	r0, [pc, #24]	; (800af84 <USBD_LL_Init+0x94>)
 800af6c:	f7fb fb90 	bl	8006690 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af70:	2280      	movs	r2, #128	; 0x80
 800af72:	2101      	movs	r1, #1
 800af74:	4803      	ldr	r0, [pc, #12]	; (800af84 <USBD_LL_Init+0x94>)
 800af76:	f7fb fb8b 	bl	8006690 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20001f5c 	.word	0x20001f5c

0800af88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fa fb74 	bl	800568c <HAL_PCD_Start>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 f942 	bl	800b234 <USBD_Get_USB_Status>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	4608      	mov	r0, r1
 800afc8:	4611      	mov	r1, r2
 800afca:	461a      	mov	r2, r3
 800afcc:	4603      	mov	r3, r0
 800afce:	70fb      	strb	r3, [r7, #3]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70bb      	strb	r3, [r7, #2]
 800afd4:	4613      	mov	r3, r2
 800afd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afe6:	78bb      	ldrb	r3, [r7, #2]
 800afe8:	883a      	ldrh	r2, [r7, #0]
 800afea:	78f9      	ldrb	r1, [r7, #3]
 800afec:	f7fa ff58 	bl	8005ea0 <HAL_PCD_EP_Open>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 f91c 	bl	800b234 <USBD_Get_USB_Status>
 800affc:	4603      	mov	r3, r0
 800affe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b000:	7bbb      	ldrb	r3, [r7, #14]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b024:	78fa      	ldrb	r2, [r7, #3]
 800b026:	4611      	mov	r1, r2
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fa ffa1 	bl	8005f70 <HAL_PCD_EP_Close>
 800b02e:	4603      	mov	r3, r0
 800b030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	4618      	mov	r0, r3
 800b036:	f000 f8fd 	bl	800b234 <USBD_Get_USB_Status>
 800b03a:	4603      	mov	r3, r0
 800b03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b062:	78fa      	ldrb	r2, [r7, #3]
 800b064:	4611      	mov	r1, r2
 800b066:	4618      	mov	r0, r3
 800b068:	f7fb f879 	bl	800615e <HAL_PCD_EP_SetStall>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f8de 	bl	800b234 <USBD_Get_USB_Status>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	460b      	mov	r3, r1
 800b090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0a0:	78fa      	ldrb	r2, [r7, #3]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fb f8be 	bl	8006226 <HAL_PCD_EP_ClrStall>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 f8bf 	bl	800b234 <USBD_Get_USB_Status>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	da0b      	bge.n	800b0f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0e0:	78fb      	ldrb	r3, [r7, #3]
 800b0e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	440b      	add	r3, r1
 800b0f2:	333e      	adds	r3, #62	; 0x3e
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	e00b      	b.n	800b110 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0fe:	68f9      	ldr	r1, [r7, #12]
 800b100:	4613      	mov	r3, r2
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	1a9b      	subs	r3, r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b10e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fa fe8b 	bl	8005e56 <HAL_PCD_SetAddress>
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	4618      	mov	r0, r3
 800b148:	f000 f874 	bl	800b234 <USBD_Get_USB_Status>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b150:	7bbb      	ldrb	r3, [r7, #14]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b086      	sub	sp, #24
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
 800b166:	460b      	mov	r3, r1
 800b168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b178:	7af9      	ldrb	r1, [r7, #11]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	f7fa ffa4 	bl	80060ca <HAL_PCD_EP_Transmit>
 800b182:	4603      	mov	r3, r0
 800b184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 f853 	bl	800b234 <USBD_Get_USB_Status>
 800b18e:	4603      	mov	r3, r0
 800b190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b192:	7dbb      	ldrb	r3, [r7, #22]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	607a      	str	r2, [r7, #4]
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1ba:	7af9      	ldrb	r1, [r7, #11]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	f7fa ff20 	bl	8006004 <HAL_PCD_EP_Receive>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f832 	bl	800b234 <USBD_Get_USB_Status>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fa ff50 	bl	800609a <HAL_PCD_EP_GetRxCount>
 800b1fa:	4603      	mov	r3, r0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b20c:	4b03      	ldr	r3, [pc, #12]	; (800b21c <USBD_static_malloc+0x18>)
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20000660 	.word	0x20000660

0800b220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]

}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	2b03      	cmp	r3, #3
 800b246:	d817      	bhi.n	800b278 <USBD_Get_USB_Status+0x44>
 800b248:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <USBD_Get_USB_Status+0x1c>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b261 	.word	0x0800b261
 800b254:	0800b267 	.word	0x0800b267
 800b258:	0800b26d 	.word	0x0800b26d
 800b25c:	0800b273 	.word	0x0800b273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
    break;
 800b264:	e00b      	b.n	800b27e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	73fb      	strb	r3, [r7, #15]
    break;
 800b26a:	e008      	b.n	800b27e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b26c:	2301      	movs	r3, #1
 800b26e:	73fb      	strb	r3, [r7, #15]
    break;
 800b270:	e005      	b.n	800b27e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b272:	2303      	movs	r3, #3
 800b274:	73fb      	strb	r3, [r7, #15]
    break;
 800b276:	e002      	b.n	800b27e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b278:	2303      	movs	r3, #3
 800b27a:	73fb      	strb	r3, [r7, #15]
    break;
 800b27c:	bf00      	nop
  }
  return usb_status;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <__errno>:
 800b28c:	4b01      	ldr	r3, [pc, #4]	; (800b294 <__errno+0x8>)
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	200001bc 	.word	0x200001bc

0800b298 <__libc_init_array>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	4d0d      	ldr	r5, [pc, #52]	; (800b2d0 <__libc_init_array+0x38>)
 800b29c:	4c0d      	ldr	r4, [pc, #52]	; (800b2d4 <__libc_init_array+0x3c>)
 800b29e:	1b64      	subs	r4, r4, r5
 800b2a0:	10a4      	asrs	r4, r4, #2
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	42a6      	cmp	r6, r4
 800b2a6:	d109      	bne.n	800b2bc <__libc_init_array+0x24>
 800b2a8:	4d0b      	ldr	r5, [pc, #44]	; (800b2d8 <__libc_init_array+0x40>)
 800b2aa:	4c0c      	ldr	r4, [pc, #48]	; (800b2dc <__libc_init_array+0x44>)
 800b2ac:	f000 f916 	bl	800b4dc <_init>
 800b2b0:	1b64      	subs	r4, r4, r5
 800b2b2:	10a4      	asrs	r4, r4, #2
 800b2b4:	2600      	movs	r6, #0
 800b2b6:	42a6      	cmp	r6, r4
 800b2b8:	d105      	bne.n	800b2c6 <__libc_init_array+0x2e>
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c0:	4798      	blx	r3
 800b2c2:	3601      	adds	r6, #1
 800b2c4:	e7ee      	b.n	800b2a4 <__libc_init_array+0xc>
 800b2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ca:	4798      	blx	r3
 800b2cc:	3601      	adds	r6, #1
 800b2ce:	e7f2      	b.n	800b2b6 <__libc_init_array+0x1e>
 800b2d0:	0800cb54 	.word	0x0800cb54
 800b2d4:	0800cb54 	.word	0x0800cb54
 800b2d8:	0800cb54 	.word	0x0800cb54
 800b2dc:	0800cb58 	.word	0x0800cb58

0800b2e0 <memcpy>:
 800b2e0:	440a      	add	r2, r1
 800b2e2:	4291      	cmp	r1, r2
 800b2e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2e8:	d100      	bne.n	800b2ec <memcpy+0xc>
 800b2ea:	4770      	bx	lr
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2f6:	4291      	cmp	r1, r2
 800b2f8:	d1f9      	bne.n	800b2ee <memcpy+0xe>
 800b2fa:	bd10      	pop	{r4, pc}

0800b2fc <memset>:
 800b2fc:	4402      	add	r2, r0
 800b2fe:	4603      	mov	r3, r0
 800b300:	4293      	cmp	r3, r2
 800b302:	d100      	bne.n	800b306 <memset+0xa>
 800b304:	4770      	bx	lr
 800b306:	f803 1b01 	strb.w	r1, [r3], #1
 800b30a:	e7f9      	b.n	800b300 <memset+0x4>

0800b30c <sqrt>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	ed2d 8b02 	vpush	{d8}
 800b312:	ec55 4b10 	vmov	r4, r5, d0
 800b316:	f000 f82d 	bl	800b374 <__ieee754_sqrt>
 800b31a:	4b15      	ldr	r3, [pc, #84]	; (800b370 <sqrt+0x64>)
 800b31c:	eeb0 8a40 	vmov.f32	s16, s0
 800b320:	eef0 8a60 	vmov.f32	s17, s1
 800b324:	f993 3000 	ldrsb.w	r3, [r3]
 800b328:	3301      	adds	r3, #1
 800b32a:	d019      	beq.n	800b360 <sqrt+0x54>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	4620      	mov	r0, r4
 800b332:	4629      	mov	r1, r5
 800b334:	f7f5 fb9e 	bl	8000a74 <__aeabi_dcmpun>
 800b338:	b990      	cbnz	r0, 800b360 <sqrt+0x54>
 800b33a:	2200      	movs	r2, #0
 800b33c:	2300      	movs	r3, #0
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f5 fb6f 	bl	8000a24 <__aeabi_dcmplt>
 800b346:	b158      	cbz	r0, 800b360 <sqrt+0x54>
 800b348:	f7ff ffa0 	bl	800b28c <__errno>
 800b34c:	2321      	movs	r3, #33	; 0x21
 800b34e:	6003      	str	r3, [r0, #0]
 800b350:	2200      	movs	r2, #0
 800b352:	2300      	movs	r3, #0
 800b354:	4610      	mov	r0, r2
 800b356:	4619      	mov	r1, r3
 800b358:	f7f5 fa1c 	bl	8000794 <__aeabi_ddiv>
 800b35c:	ec41 0b18 	vmov	d8, r0, r1
 800b360:	eeb0 0a48 	vmov.f32	s0, s16
 800b364:	eef0 0a68 	vmov.f32	s1, s17
 800b368:	ecbd 8b02 	vpop	{d8}
 800b36c:	bd38      	pop	{r3, r4, r5, pc}
 800b36e:	bf00      	nop
 800b370:	20000220 	.word	0x20000220

0800b374 <__ieee754_sqrt>:
 800b374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b378:	ec55 4b10 	vmov	r4, r5, d0
 800b37c:	4e56      	ldr	r6, [pc, #344]	; (800b4d8 <__ieee754_sqrt+0x164>)
 800b37e:	43ae      	bics	r6, r5
 800b380:	ee10 0a10 	vmov	r0, s0
 800b384:	ee10 3a10 	vmov	r3, s0
 800b388:	4629      	mov	r1, r5
 800b38a:	462a      	mov	r2, r5
 800b38c:	d110      	bne.n	800b3b0 <__ieee754_sqrt+0x3c>
 800b38e:	ee10 2a10 	vmov	r2, s0
 800b392:	462b      	mov	r3, r5
 800b394:	f7f5 f8d4 	bl	8000540 <__aeabi_dmul>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f4 ff18 	bl	80001d4 <__adddf3>
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	ec45 4b10 	vmov	d0, r4, r5
 800b3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	dc10      	bgt.n	800b3d6 <__ieee754_sqrt+0x62>
 800b3b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b3b8:	4330      	orrs	r0, r6
 800b3ba:	d0f5      	beq.n	800b3a8 <__ieee754_sqrt+0x34>
 800b3bc:	b15d      	cbz	r5, 800b3d6 <__ieee754_sqrt+0x62>
 800b3be:	ee10 2a10 	vmov	r2, s0
 800b3c2:	462b      	mov	r3, r5
 800b3c4:	ee10 0a10 	vmov	r0, s0
 800b3c8:	f7f4 ff02 	bl	80001d0 <__aeabi_dsub>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	f7f5 f9e0 	bl	8000794 <__aeabi_ddiv>
 800b3d4:	e7e6      	b.n	800b3a4 <__ieee754_sqrt+0x30>
 800b3d6:	1509      	asrs	r1, r1, #20
 800b3d8:	d076      	beq.n	800b4c8 <__ieee754_sqrt+0x154>
 800b3da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b3de:	07ce      	lsls	r6, r1, #31
 800b3e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b3e4:	bf5e      	ittt	pl
 800b3e6:	0fda      	lsrpl	r2, r3, #31
 800b3e8:	005b      	lslpl	r3, r3, #1
 800b3ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b3ee:	0fda      	lsrs	r2, r3, #31
 800b3f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b3f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	106d      	asrs	r5, r5, #1
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	f04f 0e16 	mov.w	lr, #22
 800b402:	4684      	mov	ip, r0
 800b404:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b408:	eb0c 0401 	add.w	r4, ip, r1
 800b40c:	4294      	cmp	r4, r2
 800b40e:	bfde      	ittt	le
 800b410:	1b12      	suble	r2, r2, r4
 800b412:	eb04 0c01 	addle.w	ip, r4, r1
 800b416:	1840      	addle	r0, r0, r1
 800b418:	0052      	lsls	r2, r2, #1
 800b41a:	f1be 0e01 	subs.w	lr, lr, #1
 800b41e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b422:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b426:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b42a:	d1ed      	bne.n	800b408 <__ieee754_sqrt+0x94>
 800b42c:	4671      	mov	r1, lr
 800b42e:	2720      	movs	r7, #32
 800b430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b434:	4562      	cmp	r2, ip
 800b436:	eb04 060e 	add.w	r6, r4, lr
 800b43a:	dc02      	bgt.n	800b442 <__ieee754_sqrt+0xce>
 800b43c:	d113      	bne.n	800b466 <__ieee754_sqrt+0xf2>
 800b43e:	429e      	cmp	r6, r3
 800b440:	d811      	bhi.n	800b466 <__ieee754_sqrt+0xf2>
 800b442:	2e00      	cmp	r6, #0
 800b444:	eb06 0e04 	add.w	lr, r6, r4
 800b448:	da43      	bge.n	800b4d2 <__ieee754_sqrt+0x15e>
 800b44a:	f1be 0f00 	cmp.w	lr, #0
 800b44e:	db40      	blt.n	800b4d2 <__ieee754_sqrt+0x15e>
 800b450:	f10c 0801 	add.w	r8, ip, #1
 800b454:	eba2 020c 	sub.w	r2, r2, ip
 800b458:	429e      	cmp	r6, r3
 800b45a:	bf88      	it	hi
 800b45c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b460:	1b9b      	subs	r3, r3, r6
 800b462:	4421      	add	r1, r4
 800b464:	46c4      	mov	ip, r8
 800b466:	0052      	lsls	r2, r2, #1
 800b468:	3f01      	subs	r7, #1
 800b46a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b46e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b472:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b476:	d1dd      	bne.n	800b434 <__ieee754_sqrt+0xc0>
 800b478:	4313      	orrs	r3, r2
 800b47a:	d006      	beq.n	800b48a <__ieee754_sqrt+0x116>
 800b47c:	1c4c      	adds	r4, r1, #1
 800b47e:	bf13      	iteet	ne
 800b480:	3101      	addne	r1, #1
 800b482:	3001      	addeq	r0, #1
 800b484:	4639      	moveq	r1, r7
 800b486:	f021 0101 	bicne.w	r1, r1, #1
 800b48a:	1043      	asrs	r3, r0, #1
 800b48c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b490:	0849      	lsrs	r1, r1, #1
 800b492:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b496:	07c2      	lsls	r2, r0, #31
 800b498:	bf48      	it	mi
 800b49a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b49e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	463d      	mov	r5, r7
 800b4a6:	e77f      	b.n	800b3a8 <__ieee754_sqrt+0x34>
 800b4a8:	0ada      	lsrs	r2, r3, #11
 800b4aa:	3815      	subs	r0, #21
 800b4ac:	055b      	lsls	r3, r3, #21
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d0fa      	beq.n	800b4a8 <__ieee754_sqrt+0x134>
 800b4b2:	02d7      	lsls	r7, r2, #11
 800b4b4:	d50a      	bpl.n	800b4cc <__ieee754_sqrt+0x158>
 800b4b6:	f1c1 0420 	rsb	r4, r1, #32
 800b4ba:	fa23 f404 	lsr.w	r4, r3, r4
 800b4be:	1e4d      	subs	r5, r1, #1
 800b4c0:	408b      	lsls	r3, r1
 800b4c2:	4322      	orrs	r2, r4
 800b4c4:	1b41      	subs	r1, r0, r5
 800b4c6:	e788      	b.n	800b3da <__ieee754_sqrt+0x66>
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	e7f0      	b.n	800b4ae <__ieee754_sqrt+0x13a>
 800b4cc:	0052      	lsls	r2, r2, #1
 800b4ce:	3101      	adds	r1, #1
 800b4d0:	e7ef      	b.n	800b4b2 <__ieee754_sqrt+0x13e>
 800b4d2:	46e0      	mov	r8, ip
 800b4d4:	e7be      	b.n	800b454 <__ieee754_sqrt+0xe0>
 800b4d6:	bf00      	nop
 800b4d8:	7ff00000 	.word	0x7ff00000

0800b4dc <_init>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	bf00      	nop
 800b4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e2:	bc08      	pop	{r3}
 800b4e4:	469e      	mov	lr, r3
 800b4e6:	4770      	bx	lr

0800b4e8 <_fini>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr
