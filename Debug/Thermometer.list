
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008798  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e4  080096e4  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096ec  080096ec  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080096f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          000020b0  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002238  20002238  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002111b  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040a0  00000000  00000000  000412d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00045378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  00046408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000065c2  00000000  00000000  00047328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d04  00000000  00000000  0004d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9048  00000000  00000000  000645ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012d636  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000454c  00000000  00000000  0012d68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008908 	.word	0x08008908

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08008908 	.word	0x08008908

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <mlx90632_start_extended_mode>:
#	    endif
    }
}

void mlx90632_start_extended_mode()
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b0a7      	sub	sp, #156	; 0x9c
 80004c4:	af12      	add	r7, sp, #72	; 0x48
    uint16_t mlx_addr_1 = 0x3a << 1;
 80004c6:	2374      	movs	r3, #116	; 0x74
 80004c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint16_t mlx_addr_2 = 0x3a << 1;
 80004cc:	2374      	movs	r3, #116	; 0x74
 80004ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

    float float_temp_1 = 0.0;
 80004d2:	f04f 0300 	mov.w	r3, #0
 80004d6:	64bb      	str	r3, [r7, #72]	; 0x48
    float float_temp_2 = 0.0;
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	647b      	str	r3, [r7, #68]	; 0x44
    char char_temp_2[8];

    float pre_ambient, pre_object, ambient, object;

    int32_t
        PR = 0x00587f5b, PG = 0x04a10289, PT = 0xfff966f8, PO = 0x00001e0f,
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <mlx90632_start_extended_mode+0x78>)
 80004e0:	643b      	str	r3, [r7, #64]	; 0x40
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <mlx90632_start_extended_mode+0x7c>)
 80004e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004e6:	4b16      	ldr	r3, [pc, #88]	; (8000540 <mlx90632_start_extended_mode+0x80>)
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80004ea:	f641 630f 	movw	r3, #7695	; 0x1e0f
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
        Ea = 4859535, Eb = 5686508, Fa = 53855361, Fb = 42874149,
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <mlx90632_start_extended_mode+0x84>)
 80004f2:	633b      	str	r3, [r7, #48]	; 0x30
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <mlx90632_start_extended_mode+0x88>)
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <mlx90632_start_extended_mode+0x8c>)
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <mlx90632_start_extended_mode+0x90>)
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
        Ga = -14556410;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <mlx90632_start_extended_mode+0x94>)
 8000502:	623b      	str	r3, [r7, #32]
    int16_t
        Gb = 9728, Ha = 16384, Hb = 0, Ka = 10752,
 8000504:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000508:	83fb      	strh	r3, [r7, #30]
 800050a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800050e:	83bb      	strh	r3, [r7, #28]
 8000510:	2300      	movs	r3, #0
 8000512:	837b      	strh	r3, [r7, #26]
 8000514:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000518:	833b      	strh	r3, [r7, #24]
        ambient_new_raw, ambient_old_raw, object_new_raw, object_old_raw;

    int32_t ret, status;
    ret = mlx90632_set_meas_type(MLX90632_MTYP_EXTENDED, hi2c1);
 800051a:	4c0f      	ldr	r4, [pc, #60]	; (8000558 <mlx90632_start_extended_mode+0x98>)
 800051c:	4668      	mov	r0, sp
 800051e:	f104 030c 	add.w	r3, r4, #12
 8000522:	2248      	movs	r2, #72	; 0x48
 8000524:	4619      	mov	r1, r3
 8000526:	f008 f9d9 	bl	80088dc <memcpy>
 800052a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800052e:	2011      	movs	r0, #17
 8000530:	f000 faec 	bl	8000b0c <mlx90632_set_meas_type>
 8000534:	6178      	str	r0, [r7, #20]
//		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
//		 HAL_Delay(1000);
//		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
//	}

    while(1)
 8000536:	e7fe      	b.n	8000536 <mlx90632_start_extended_mode+0x76>
 8000538:	00587f5b 	.word	0x00587f5b
 800053c:	04a10289 	.word	0x04a10289
 8000540:	fff966f8 	.word	0xfff966f8
 8000544:	004a268f 	.word	0x004a268f
 8000548:	0056c4ec 	.word	0x0056c4ec
 800054c:	0335c481 	.word	0x0335c481
 8000550:	028e3525 	.word	0x028e3525
 8000554:	ff21e306 	.word	0xff21e306
 8000558:	20000820 	.word	0x20000820

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b093      	sub	sp, #76	; 0x4c
 8000560:	af12      	add	r7, sp, #72	; 0x48
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000562:	f001 f917 	bl	8001794 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000566:	f000 f841 	bl	80005ec <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800056a:	f000 f931 	bl	80007d0 <MX_GPIO_Init>
    MX_I2C1_Init();
 800056e:	f000 f8a5 	bl	80006bc <MX_I2C1_Init>
    MX_I2C2_Init();
 8000572:	f000 f8d1 	bl	8000718 <MX_I2C2_Init>
    MX_USB_DEVICE_Init();
 8000576:	f007 fc83 	bl	8007e80 <MX_USB_DEVICE_Init>
    MX_I2C3_Init();
 800057a:	f000 f8fb 	bl	8000774 <MX_I2C3_Init>
     * Temp sensor 1 - I2C1, temp sensor 2 - I2C2, Display - I2C3
     */

  // Initialize Display
#ifdef SSD1306_DISPLAY
    if (SSD1306_Init(hi2c3) != 1)
 800057e:	4c17      	ldr	r4, [pc, #92]	; (80005dc <main+0x80>)
 8000580:	4668      	mov	r0, sp
 8000582:	f104 0310 	add.w	r3, r4, #16
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	4619      	mov	r1, r3
 800058a:	f008 f9a7 	bl	80088dc <memcpy>
 800058e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000592:	f000 fb77 	bl	8000c84 <SSD1306_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00d      	beq.n	80005b8 <main+0x5c>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800059c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x84>)
 80005a2:	f001 fc54 	bl	8001e4e <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f001 f965 	bl	8001878 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0x84>)
 80005b4:	f001 fc4b 	bl	8001e4e <HAL_GPIO_TogglePin>
    }

    SSD1306_GotoXY (0,0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fe40 	bl	8001240 <SSD1306_GotoXY>
    SSD1306_Puts ("initialize", &Font_11x18, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	4908      	ldr	r1, [pc, #32]	; (80005e4 <main+0x88>)
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x8c>)
 80005c6:	f000 fed1 	bl	800136c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80005ca:	f000 fd71 	bl	80010b0 <SSD1306_UpdateScreen>

#if defined(MLX90614)
    mlx90614_start_standard_mode();
#elif defined(MLX90632)
//    mlx90632_start_standard_mode();
    mlx90632_start_extended_mode();
 80005ce:	f7ff ff77 	bl	80004c0 <mlx90632_start_extended_mode>
 80005d2:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3704      	adds	r7, #4
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	200007cc 	.word	0x200007cc
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	20000000 	.word	0x20000000
 80005e8:	08008920 	.word	0x08008920

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 f97c 	bl	80088f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000660:	23c0      	movs	r3, #192	; 0xc0
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fff7 	bl	8004664 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f924 	bl	80008c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fa5a 	bl	8004b54 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006a6:	f000 f90f 	bl	80008c8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f001 fbc3 	bl	8001e84 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f8e0 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000820 	.word	0x20000820
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C2_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_I2C2_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C2_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_I2C2_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_I2C2_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C2_Init+0x50>)
 8000756:	f001 fb95 	bl	8001e84 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f8b2 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000874 	.word	0x20000874
 800076c:	40005800 	.word	0x40005800
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C3_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2C3_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C3_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_I2C3_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C3_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C3_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2C3_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C3_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2C3_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C3_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2C3_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C3_Init+0x50>)
 80007b2:	f001 fb67 	bl	8001e84 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f884 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200007cc 	.word	0x200007cc
 80007c8:	40005c00 	.word	0x40005c00
 80007cc:	00061a80 	.word	0x00061a80

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <MX_GPIO_Init+0xec>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a33      	ldr	r2, [pc, #204]	; (80008bc <MX_GPIO_Init+0xec>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_GPIO_Init+0xec>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_GPIO_Init+0xec>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <MX_GPIO_Init+0xec>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_GPIO_Init+0xec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_GPIO_Init+0xec>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <MX_GPIO_Init+0xec>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_GPIO_Init+0xec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xec>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0xec>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xec>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0xec>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_GPIO_Init+0xec>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0xec>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <MX_GPIO_Init+0xf0>)
 800087a:	f001 facf 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800087e:	2301      	movs	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_GPIO_Init+0xf4>)
 8000892:	f001 f927 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000896:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xf0>)
 80008b0:	f001 f918 	bl	8001ae4 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40020000 	.word	0x40020000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>

080008d2 <mlx90632_addressed_reset>:

    return 0;
}

int32_t mlx90632_addressed_reset(I2C_HandleTypeDef hi2c)
{
 80008d2:	b084      	sub	sp, #16
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b097      	sub	sp, #92	; 0x5c
 80008d8:	af14      	add	r7, sp, #80	; 0x50
 80008da:	f107 0418 	add.w	r4, r7, #24
 80008de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_value;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value, hi2c);
 80008e2:	463c      	mov	r4, r7
 80008e4:	4668      	mov	r0, sp
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	224c      	movs	r2, #76	; 0x4c
 80008ec:	4619      	mov	r1, r3
 80008ee:	f007 fff5 	bl	80088dc <memcpy>
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	cb0c      	ldmia	r3, {r2, r3}
 80008f8:	4621      	mov	r1, r4
 80008fa:	f243 0001 	movw	r0, #12289	; 0x3001
 80008fe:	f000 f855 	bl	80009ac <mlx90632_i2c_read>
 8000902:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da01      	bge.n	800090e <mlx90632_addressed_reset+0x3c>
        return ret;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	e046      	b.n	800099c <mlx90632_addressed_reset+0xca>

    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
 800090e:	883b      	ldrh	r3, [r7, #0]
 8000910:	807b      	strh	r3, [r7, #2]
    reg_ctrl |= MLX90632_PWR_STATUS_STEP;
 8000912:	887b      	ldrh	r3, [r7, #2]
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	807b      	strh	r3, [r7, #2]
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 800091a:	887c      	ldrh	r4, [r7, #2]
 800091c:	4668      	mov	r0, sp
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	224c      	movs	r2, #76	; 0x4c
 8000924:	4619      	mov	r1, r3
 8000926:	f007 ffd9 	bl	80088dc <memcpy>
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	cb0c      	ldmia	r3, {r2, r3}
 8000930:	4621      	mov	r1, r4
 8000932:	f243 0001 	movw	r0, #12289	; 0x3001
 8000936:	f000 f8ad 	bl	8000a94 <mlx90632_i2c_write>
 800093a:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da01      	bge.n	8000946 <mlx90632_addressed_reset+0x74>
        return ret;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	e02a      	b.n	800099c <mlx90632_addressed_reset+0xca>

    ret = mlx90632_i2c_write(0x3005, MLX90632_RESET_CMD, hi2c);
 8000946:	4668      	mov	r0, sp
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	224c      	movs	r2, #76	; 0x4c
 800094e:	4619      	mov	r1, r3
 8000950:	f007 ffc4 	bl	80088dc <memcpy>
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	cb0c      	ldmia	r3, {r2, r3}
 800095a:	2106      	movs	r1, #6
 800095c:	f243 0005 	movw	r0, #12293	; 0x3005
 8000960:	f000 f898 	bl	8000a94 <mlx90632_i2c_write>
 8000964:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da01      	bge.n	8000970 <mlx90632_addressed_reset+0x9e>
        return ret;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	e015      	b.n	800099c <mlx90632_addressed_reset+0xca>

    usleep(150, 200);
 8000970:	21c8      	movs	r1, #200	; 0xc8
 8000972:	2096      	movs	r0, #150	; 0x96
 8000974:	f000 f8b8 	bl	8000ae8 <usleep>

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value, hi2c);
 8000978:	883c      	ldrh	r4, [r7, #0]
 800097a:	4668      	mov	r0, sp
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	224c      	movs	r2, #76	; 0x4c
 8000982:	4619      	mov	r1, r3
 8000984:	f007 ffaa 	bl	80088dc <memcpy>
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	cb0c      	ldmia	r3, {r2, r3}
 800098e:	4621      	mov	r1, r4
 8000990:	f243 0001 	movw	r0, #12289	; 0x3001
 8000994:	f000 f87e 	bl	8000a94 <mlx90632_i2c_write>
 8000998:	6078      	str	r0, [r7, #4]

    return ret;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009a6:	b004      	add	sp, #16
 80009a8:	4770      	bx	lr
	...

080009ac <mlx90632_i2c_read>:
#define CHIP_ADDRESS 0x3a << 1

/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value, I2C_HandleTypeDef hi2c)
{
 80009ac:	b082      	sub	sp, #8
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b088      	sub	sp, #32
 80009b2:	af04      	add	r7, sp, #16
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	f107 0118 	add.w	r1, r7, #24
 80009ba:	e881 000c 	stmia.w	r1, {r2, r3}
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 80009c2:	88fa      	ldrh	r2, [r7, #6]
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	2302      	movs	r3, #2
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2302      	movs	r3, #2
 80009d4:	2174      	movs	r1, #116	; 0x74
 80009d6:	f107 0018 	add.w	r0, r7, #24
 80009da:	f001 fd8f 	bl	80024fc <HAL_I2C_Mem_Read>
 80009de:	4603      	mov	r3, r0
 80009e0:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 80009e2:	7a7b      	ldrb	r3, [r7, #9]
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	7a3b      	ldrb	r3, [r7, #8]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	801a      	strh	r2, [r3, #0]
	if(ret < 0)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	da20      	bge.n	8000a3e <mlx90632_i2c_read+0x92>
	{
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a00:	4823      	ldr	r0, [pc, #140]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a02:	f001 fa24 	bl	8001e4e <HAL_GPIO_TogglePin>
		 HAL_Delay(1000);
 8000a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0a:	f000 ff35 	bl	8001878 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	481f      	ldr	r0, [pc, #124]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a14:	f001 fa1b 	bl	8001e4e <HAL_GPIO_TogglePin>
		 HAL_Delay(500);
 8000a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1c:	f000 ff2c 	bl	8001878 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	481a      	ldr	r0, [pc, #104]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a26:	f001 fa12 	bl	8001e4e <HAL_GPIO_TogglePin>
		 HAL_Delay(1000);
 8000a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2e:	f000 ff23 	bl	8001878 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a38:	f001 fa09 	bl	8001e4e <HAL_GPIO_TogglePin>
 8000a3c:	e01f      	b.n	8000a7e <mlx90632_i2c_read+0xd2>
	} else {
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a44:	f001 fa03 	bl	8001e4e <HAL_GPIO_TogglePin>
		 HAL_Delay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4c:	f000 ff14 	bl	8001878 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a56:	f001 f9fa 	bl	8001e4e <HAL_GPIO_TogglePin>
		 HAL_Delay(500);
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f000 ff0b 	bl	8001878 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a66:	480a      	ldr	r0, [pc, #40]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a68:	f001 f9f1 	bl	8001e4e <HAL_GPIO_TogglePin>
		 HAL_Delay(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a70:	f000 ff02 	bl	8001878 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <mlx90632_i2c_read+0xe4>)
 8000a7a:	f001 f9e8 	bl	8001e4e <HAL_GPIO_TogglePin>
	}
	return ret;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a8a:	b002      	add	sp, #8
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <mlx90632_i2c_write>:
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
	return ret;
}

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value, I2C_HandleTypeDef hi2c) {
 8000a94:	b082      	sub	sp, #8
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b088      	sub	sp, #32
 8000a9a:	af04      	add	r7, sp, #16
 8000a9c:	f107 0c18 	add.w	ip, r7, #24
 8000aa0:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 8000abc:	88fa      	ldrh	r2, [r7, #6]
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2302      	movs	r3, #2
 8000ace:	2174      	movs	r1, #116	; 0x74
 8000ad0:	f107 0018 	add.w	r0, r7, #24
 8000ad4:	f001 fc18 	bl	8002308 <HAL_I2C_Mem_Write>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae4:	b002      	add	sp, #8
 8000ae6:	4770      	bx	lr

08000ae8 <usleep>:

void usleep(int min_range, int max_range) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	while(--min_range);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f9      	bne.n	8000af2 <usleep+0xa>
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <mlx90632_set_meas_type>:

    return temp;
}

int32_t mlx90632_set_meas_type(uint8_t type, I2C_HandleTypeDef hi2c)
{
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	b590      	push	{r4, r7, lr}
 8000b10:	b099      	sub	sp, #100	; 0x64
 8000b12:	af14      	add	r7, sp, #80	; 0x50
 8000b14:	4604      	mov	r4, r0
 8000b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000b1e:	4623      	mov	r3, r4
 8000b20:	71fb      	strb	r3, [r7, #7]
    int32_t ret;
    uint16_t reg_ctrl;

    if ((type != MLX90632_MTYP_MEDICAL) & (type != MLX90632_MTYP_EXTENDED) & (type != MLX90632_MTYP_MEDICAL_BURST) & (type != MLX90632_MTYP_EXTENDED_BURST))
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b11      	cmp	r3, #17
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b80      	cmp	r3, #128	; 0x80
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	2a91      	cmp	r2, #145	; 0x91
 8000b52:	bf14      	ite	ne
 8000b54:	2201      	movne	r2, #1
 8000b56:	2200      	moveq	r2, #0
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <mlx90632_set_meas_type+0x5a>
        return -EINVAL;
 8000b60:	f06f 0315 	mvn.w	r3, #21
 8000b64:	e086      	b.n	8000c74 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_addressed_reset(hi2c);
 8000b66:	4668      	mov	r0, sp
 8000b68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b6c:	2244      	movs	r2, #68	; 0x44
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f007 feb4 	bl	80088dc <memcpy>
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b7a:	f7ff feaa 	bl	80008d2 <mlx90632_addressed_reset>
 8000b7e:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da01      	bge.n	8000b8a <mlx90632_set_meas_type+0x7e>
        return ret;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	e074      	b.n	8000c74 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 8000b8a:	f107 040a 	add.w	r4, r7, #10
 8000b8e:	4668      	mov	r0, sp
 8000b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b94:	224c      	movs	r2, #76	; 0x4c
 8000b96:	4619      	mov	r1, r3
 8000b98:	f007 fea0 	bl	80088dc <memcpy>
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	cb0c      	ldmia	r3, {r2, r3}
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	f243 0001 	movw	r0, #12289	; 0x3001
 8000ba8:	f7ff ff00 	bl	80009ac <mlx90632_i2c_read>
 8000bac:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da01      	bge.n	8000bb8 <mlx90632_set_meas_type+0xac>
        return ret;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	e05d      	b.n	8000c74 <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & (~MLX90632_CFG_MTYP_MASK & ~MLX90632_CFG_PWR_MASK);
 8000bb8:	897b      	ldrh	r3, [r7, #10]
 8000bba:	817b      	strh	r3, [r7, #10]
    reg_ctrl |= (MLX90632_MTYP_STATUS(MLX90632_MEASUREMENT_TYPE_STATUS(type)) | MLX90632_PWR_STATUS_HALT);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	897b      	ldrh	r3, [r7, #10]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	817b      	strh	r3, [r7, #10]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8000bd4:	897c      	ldrh	r4, [r7, #10]
 8000bd6:	4668      	mov	r0, sp
 8000bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bdc:	224c      	movs	r2, #76	; 0x4c
 8000bde:	4619      	mov	r1, r3
 8000be0:	f007 fe7c 	bl	80088dc <memcpy>
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	cb0c      	ldmia	r3, {r2, r3}
 8000bea:	4621      	mov	r1, r4
 8000bec:	f243 0001 	movw	r0, #12289	; 0x3001
 8000bf0:	f7ff ff50 	bl	8000a94 <mlx90632_i2c_write>
 8000bf4:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da01      	bge.n	8000c00 <mlx90632_set_meas_type+0xf4>
        return ret;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	e039      	b.n	8000c74 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 8000c00:	f107 040a 	add.w	r4, r7, #10
 8000c04:	4668      	mov	r0, sp
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	224c      	movs	r2, #76	; 0x4c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f007 fe65 	bl	80088dc <memcpy>
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	cb0c      	ldmia	r3, {r2, r3}
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f243 0001 	movw	r0, #12289	; 0x3001
 8000c1e:	f7ff fec5 	bl	80009ac <mlx90632_i2c_read>
 8000c22:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <mlx90632_set_meas_type+0x122>
        return ret;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	e022      	b.n	8000c74 <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & ~MLX90632_CFG_PWR_MASK;
 8000c2e:	897b      	ldrh	r3, [r7, #10]
 8000c30:	817b      	strh	r3, [r7, #10]
    if (MLX90632_MEASUREMENT_BURST_STATUS(type))
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da05      	bge.n	8000c46 <mlx90632_set_meas_type+0x13a>
    {
        reg_ctrl |= MLX90632_PWR_STATUS_SLEEP_STEP;
 8000c3a:	897b      	ldrh	r3, [r7, #10]
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	817b      	strh	r3, [r7, #10]
 8000c44:	e004      	b.n	8000c50 <mlx90632_set_meas_type+0x144>
    }
    else
    {
        reg_ctrl |= MLX90632_PWR_STATUS_CONTINUOUS;
 8000c46:	897b      	ldrh	r3, [r7, #10]
 8000c48:	f043 0306 	orr.w	r3, r3, #6
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	817b      	strh	r3, [r7, #10]
    }

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8000c50:	897c      	ldrh	r4, [r7, #10]
 8000c52:	4668      	mov	r0, sp
 8000c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c58:	224c      	movs	r2, #76	; 0x4c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f007 fe3e 	bl	80088dc <memcpy>
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	cb0c      	ldmia	r3, {r2, r3}
 8000c66:	4621      	mov	r1, r4
 8000c68:	f243 0001 	movw	r0, #12289	; 0x3001
 8000c6c:	f7ff ff12 	bl	8000a94 <mlx90632_i2c_write>
 8000c70:	60f8      	str	r0, [r7, #12]

    return ret;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c7e:	b004      	add	sp, #16
 8000c80:	4770      	bx	lr
	...

08000c84 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8000c84:	b084      	sub	sp, #16
 8000c86:	b590      	push	{r4, r7, lr}
 8000c88:	b097      	sub	sp, #92	; 0x5c
 8000c8a:	af14      	add	r7, sp, #80	; 0x50
 8000c8c:	f107 0418 	add.w	r4, r7, #24
 8000c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c94:	f000 fb90 	bl	80013b8 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <SSD1306_Init+0x44>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2254      	movs	r2, #84	; 0x54
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f007 fe1a 	bl	80088dc <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ca8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000cac:	2201      	movs	r2, #1
 8000cae:	2178      	movs	r1, #120	; 0x78
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <SSD1306_Init+0x44>)
 8000cb2:	f001 fe49 	bl	8002948 <HAL_I2C_IsDeviceReady>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e1ee      	b.n	800109e <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000cc0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000cc4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cc6:	e004      	b.n	8000cd2 <SSD1306_Init+0x4e>
 8000cc8:	20000908 	.word	0x20000908
		p--;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f9      	bne.n	8000ccc <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cd8:	4ce1      	ldr	r4, [pc, #900]	; (8001060 <SSD1306_Init+0x3dc>)
 8000cda:	23ae      	movs	r3, #174	; 0xae
 8000cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000cde:	4668      	mov	r0, sp
 8000ce0:	f104 0308 	add.w	r3, r4, #8
 8000ce4:	224c      	movs	r2, #76	; 0x4c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f007 fdf8 	bl	80088dc <memcpy>
 8000cec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2078      	movs	r0, #120	; 0x78
 8000cf4:	f000 fbbe 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000cf8:	4cd9      	ldr	r4, [pc, #868]	; (8001060 <SSD1306_Init+0x3dc>)
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000cfe:	4668      	mov	r0, sp
 8000d00:	f104 0308 	add.w	r3, r4, #8
 8000d04:	224c      	movs	r2, #76	; 0x4c
 8000d06:	4619      	mov	r1, r3
 8000d08:	f007 fde8 	bl	80088dc <memcpy>
 8000d0c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	; 0x78
 8000d14:	f000 fbae 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d18:	4cd1      	ldr	r4, [pc, #836]	; (8001060 <SSD1306_Init+0x3dc>)
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d1e:	4668      	mov	r0, sp
 8000d20:	f104 0308 	add.w	r3, r4, #8
 8000d24:	224c      	movs	r2, #76	; 0x4c
 8000d26:	4619      	mov	r1, r3
 8000d28:	f007 fdd8 	bl	80088dc <memcpy>
 8000d2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000d30:	2100      	movs	r1, #0
 8000d32:	2078      	movs	r0, #120	; 0x78
 8000d34:	f000 fb9e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d38:	4cc9      	ldr	r4, [pc, #804]	; (8001060 <SSD1306_Init+0x3dc>)
 8000d3a:	23b0      	movs	r3, #176	; 0xb0
 8000d3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d3e:	4668      	mov	r0, sp
 8000d40:	f104 0308 	add.w	r3, r4, #8
 8000d44:	224c      	movs	r2, #76	; 0x4c
 8000d46:	4619      	mov	r1, r3
 8000d48:	f007 fdc8 	bl	80088dc <memcpy>
 8000d4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fb8e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d58:	4cc1      	ldr	r4, [pc, #772]	; (8001060 <SSD1306_Init+0x3dc>)
 8000d5a:	23c8      	movs	r3, #200	; 0xc8
 8000d5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d5e:	4668      	mov	r0, sp
 8000d60:	f104 0308 	add.w	r3, r4, #8
 8000d64:	224c      	movs	r2, #76	; 0x4c
 8000d66:	4619      	mov	r1, r3
 8000d68:	f007 fdb8 	bl	80088dc <memcpy>
 8000d6c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fb7e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d78:	4cb9      	ldr	r4, [pc, #740]	; (8001060 <SSD1306_Init+0x3dc>)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f104 0308 	add.w	r3, r4, #8
 8000d84:	224c      	movs	r2, #76	; 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f007 fda8 	bl	80088dc <memcpy>
 8000d8c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000d90:	2100      	movs	r1, #0
 8000d92:	2078      	movs	r0, #120	; 0x78
 8000d94:	f000 fb6e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d98:	4cb1      	ldr	r4, [pc, #708]	; (8001060 <SSD1306_Init+0x3dc>)
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d9e:	4668      	mov	r0, sp
 8000da0:	f104 0308 	add.w	r3, r4, #8
 8000da4:	224c      	movs	r2, #76	; 0x4c
 8000da6:	4619      	mov	r1, r3
 8000da8:	f007 fd98 	bl	80088dc <memcpy>
 8000dac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000db0:	2100      	movs	r1, #0
 8000db2:	2078      	movs	r0, #120	; 0x78
 8000db4:	f000 fb5e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000db8:	4ca9      	ldr	r4, [pc, #676]	; (8001060 <SSD1306_Init+0x3dc>)
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000dbe:	4668      	mov	r0, sp
 8000dc0:	f104 0308 	add.w	r3, r4, #8
 8000dc4:	224c      	movs	r2, #76	; 0x4c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f007 fd88 	bl	80088dc <memcpy>
 8000dcc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2078      	movs	r0, #120	; 0x78
 8000dd4:	f000 fb4e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000dd8:	4ca1      	ldr	r4, [pc, #644]	; (8001060 <SSD1306_Init+0x3dc>)
 8000dda:	2381      	movs	r3, #129	; 0x81
 8000ddc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000dde:	4668      	mov	r0, sp
 8000de0:	f104 0308 	add.w	r3, r4, #8
 8000de4:	224c      	movs	r2, #76	; 0x4c
 8000de6:	4619      	mov	r1, r3
 8000de8:	f007 fd78 	bl	80088dc <memcpy>
 8000dec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 fb3e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000df8:	4c99      	ldr	r4, [pc, #612]	; (8001060 <SSD1306_Init+0x3dc>)
 8000dfa:	23ff      	movs	r3, #255	; 0xff
 8000dfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000dfe:	4668      	mov	r0, sp
 8000e00:	f104 0308 	add.w	r3, r4, #8
 8000e04:	224c      	movs	r2, #76	; 0x4c
 8000e06:	4619      	mov	r1, r3
 8000e08:	f007 fd68 	bl	80088dc <memcpy>
 8000e0c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	; 0x78
 8000e14:	f000 fb2e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e18:	4c91      	ldr	r4, [pc, #580]	; (8001060 <SSD1306_Init+0x3dc>)
 8000e1a:	23a1      	movs	r3, #161	; 0xa1
 8000e1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e1e:	4668      	mov	r0, sp
 8000e20:	f104 0308 	add.w	r3, r4, #8
 8000e24:	224c      	movs	r2, #76	; 0x4c
 8000e26:	4619      	mov	r1, r3
 8000e28:	f007 fd58 	bl	80088dc <memcpy>
 8000e2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	; 0x78
 8000e34:	f000 fb1e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e38:	4c89      	ldr	r4, [pc, #548]	; (8001060 <SSD1306_Init+0x3dc>)
 8000e3a:	23a6      	movs	r3, #166	; 0xa6
 8000e3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e3e:	4668      	mov	r0, sp
 8000e40:	f104 0308 	add.w	r3, r4, #8
 8000e44:	224c      	movs	r2, #76	; 0x4c
 8000e46:	4619      	mov	r1, r3
 8000e48:	f007 fd48 	bl	80088dc <memcpy>
 8000e4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e50:	2100      	movs	r1, #0
 8000e52:	2078      	movs	r0, #120	; 0x78
 8000e54:	f000 fb0e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000e58:	4c81      	ldr	r4, [pc, #516]	; (8001060 <SSD1306_Init+0x3dc>)
 8000e5a:	23a8      	movs	r3, #168	; 0xa8
 8000e5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e5e:	4668      	mov	r0, sp
 8000e60:	f104 0308 	add.w	r3, r4, #8
 8000e64:	224c      	movs	r2, #76	; 0x4c
 8000e66:	4619      	mov	r1, r3
 8000e68:	f007 fd38 	bl	80088dc <memcpy>
 8000e6c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e70:	2100      	movs	r1, #0
 8000e72:	2078      	movs	r0, #120	; 0x78
 8000e74:	f000 fafe 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e78:	4c79      	ldr	r4, [pc, #484]	; (8001060 <SSD1306_Init+0x3dc>)
 8000e7a:	233f      	movs	r3, #63	; 0x3f
 8000e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e7e:	4668      	mov	r0, sp
 8000e80:	f104 0308 	add.w	r3, r4, #8
 8000e84:	224c      	movs	r2, #76	; 0x4c
 8000e86:	4619      	mov	r1, r3
 8000e88:	f007 fd28 	bl	80088dc <memcpy>
 8000e8c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e90:	2100      	movs	r1, #0
 8000e92:	2078      	movs	r0, #120	; 0x78
 8000e94:	f000 faee 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e98:	4c71      	ldr	r4, [pc, #452]	; (8001060 <SSD1306_Init+0x3dc>)
 8000e9a:	23a4      	movs	r3, #164	; 0xa4
 8000e9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e9e:	4668      	mov	r0, sp
 8000ea0:	f104 0308 	add.w	r3, r4, #8
 8000ea4:	224c      	movs	r2, #76	; 0x4c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f007 fd18 	bl	80088dc <memcpy>
 8000eac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	; 0x78
 8000eb4:	f000 fade 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000eb8:	4c69      	ldr	r4, [pc, #420]	; (8001060 <SSD1306_Init+0x3dc>)
 8000eba:	23d3      	movs	r3, #211	; 0xd3
 8000ebc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ebe:	4668      	mov	r0, sp
 8000ec0:	f104 0308 	add.w	r3, r4, #8
 8000ec4:	224c      	movs	r2, #76	; 0x4c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f007 fd08 	bl	80088dc <memcpy>
 8000ecc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	f000 face 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ed8:	4c61      	ldr	r4, [pc, #388]	; (8001060 <SSD1306_Init+0x3dc>)
 8000eda:	2300      	movs	r3, #0
 8000edc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ede:	4668      	mov	r0, sp
 8000ee0:	f104 0308 	add.w	r3, r4, #8
 8000ee4:	224c      	movs	r2, #76	; 0x4c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f007 fcf8 	bl	80088dc <memcpy>
 8000eec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2078      	movs	r0, #120	; 0x78
 8000ef4:	f000 fabe 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ef8:	4c59      	ldr	r4, [pc, #356]	; (8001060 <SSD1306_Init+0x3dc>)
 8000efa:	23d5      	movs	r3, #213	; 0xd5
 8000efc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000efe:	4668      	mov	r0, sp
 8000f00:	f104 0308 	add.w	r3, r4, #8
 8000f04:	224c      	movs	r2, #76	; 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f007 fce8 	bl	80088dc <memcpy>
 8000f0c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f10:	2100      	movs	r1, #0
 8000f12:	2078      	movs	r0, #120	; 0x78
 8000f14:	f000 faae 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f18:	4c51      	ldr	r4, [pc, #324]	; (8001060 <SSD1306_Init+0x3dc>)
 8000f1a:	23f0      	movs	r3, #240	; 0xf0
 8000f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f1e:	4668      	mov	r0, sp
 8000f20:	f104 0308 	add.w	r3, r4, #8
 8000f24:	224c      	movs	r2, #76	; 0x4c
 8000f26:	4619      	mov	r1, r3
 8000f28:	f007 fcd8 	bl	80088dc <memcpy>
 8000f2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f30:	2100      	movs	r1, #0
 8000f32:	2078      	movs	r0, #120	; 0x78
 8000f34:	f000 fa9e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f38:	4c49      	ldr	r4, [pc, #292]	; (8001060 <SSD1306_Init+0x3dc>)
 8000f3a:	23d9      	movs	r3, #217	; 0xd9
 8000f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f3e:	4668      	mov	r0, sp
 8000f40:	f104 0308 	add.w	r3, r4, #8
 8000f44:	224c      	movs	r2, #76	; 0x4c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f007 fcc8 	bl	80088dc <memcpy>
 8000f4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f50:	2100      	movs	r1, #0
 8000f52:	2078      	movs	r0, #120	; 0x78
 8000f54:	f000 fa8e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f58:	4c41      	ldr	r4, [pc, #260]	; (8001060 <SSD1306_Init+0x3dc>)
 8000f5a:	2322      	movs	r3, #34	; 0x22
 8000f5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f5e:	4668      	mov	r0, sp
 8000f60:	f104 0308 	add.w	r3, r4, #8
 8000f64:	224c      	movs	r2, #76	; 0x4c
 8000f66:	4619      	mov	r1, r3
 8000f68:	f007 fcb8 	bl	80088dc <memcpy>
 8000f6c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fa7e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f78:	4c39      	ldr	r4, [pc, #228]	; (8001060 <SSD1306_Init+0x3dc>)
 8000f7a:	23da      	movs	r3, #218	; 0xda
 8000f7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f104 0308 	add.w	r3, r4, #8
 8000f84:	224c      	movs	r2, #76	; 0x4c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f007 fca8 	bl	80088dc <memcpy>
 8000f8c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f000 fa6e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f98:	4c31      	ldr	r4, [pc, #196]	; (8001060 <SSD1306_Init+0x3dc>)
 8000f9a:	2312      	movs	r3, #18
 8000f9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f9e:	4668      	mov	r0, sp
 8000fa0:	f104 0308 	add.w	r3, r4, #8
 8000fa4:	224c      	movs	r2, #76	; 0x4c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f007 fc98 	bl	80088dc <memcpy>
 8000fac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2078      	movs	r0, #120	; 0x78
 8000fb4:	f000 fa5e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000fb8:	4c29      	ldr	r4, [pc, #164]	; (8001060 <SSD1306_Init+0x3dc>)
 8000fba:	23db      	movs	r3, #219	; 0xdb
 8000fbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f104 0308 	add.w	r3, r4, #8
 8000fc4:	224c      	movs	r2, #76	; 0x4c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f007 fc88 	bl	80088dc <memcpy>
 8000fcc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	; 0x78
 8000fd4:	f000 fa4e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000fd8:	4c21      	ldr	r4, [pc, #132]	; (8001060 <SSD1306_Init+0x3dc>)
 8000fda:	2320      	movs	r3, #32
 8000fdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000fde:	4668      	mov	r0, sp
 8000fe0:	f104 0308 	add.w	r3, r4, #8
 8000fe4:	224c      	movs	r2, #76	; 0x4c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f007 fc78 	bl	80088dc <memcpy>
 8000fec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f000 fa3e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ff8:	4c19      	ldr	r4, [pc, #100]	; (8001060 <SSD1306_Init+0x3dc>)
 8000ffa:	238d      	movs	r3, #141	; 0x8d
 8000ffc:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ffe:	4668      	mov	r0, sp
 8001000:	f104 0308 	add.w	r3, r4, #8
 8001004:	224c      	movs	r2, #76	; 0x4c
 8001006:	4619      	mov	r1, r3
 8001008:	f007 fc68 	bl	80088dc <memcpy>
 800100c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa2e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001018:	4c11      	ldr	r4, [pc, #68]	; (8001060 <SSD1306_Init+0x3dc>)
 800101a:	2314      	movs	r3, #20
 800101c:	9313      	str	r3, [sp, #76]	; 0x4c
 800101e:	4668      	mov	r0, sp
 8001020:	f104 0308 	add.w	r3, r4, #8
 8001024:	224c      	movs	r2, #76	; 0x4c
 8001026:	4619      	mov	r1, r3
 8001028:	f007 fc58 	bl	80088dc <memcpy>
 800102c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	; 0x78
 8001034:	f000 fa1e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001038:	4c09      	ldr	r4, [pc, #36]	; (8001060 <SSD1306_Init+0x3dc>)
 800103a:	23af      	movs	r3, #175	; 0xaf
 800103c:	9313      	str	r3, [sp, #76]	; 0x4c
 800103e:	4668      	mov	r0, sp
 8001040:	f104 0308 	add.w	r3, r4, #8
 8001044:	224c      	movs	r2, #76	; 0x4c
 8001046:	4619      	mov	r1, r3
 8001048:	f007 fc48 	bl	80088dc <memcpy>
 800104c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001050:	2100      	movs	r1, #0
 8001052:	2078      	movs	r0, #120	; 0x78
 8001054:	f000 fa0e 	bl	8001474 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001058:	4c01      	ldr	r4, [pc, #4]	; (8001060 <SSD1306_Init+0x3dc>)
 800105a:	232e      	movs	r3, #46	; 0x2e
 800105c:	e002      	b.n	8001064 <SSD1306_Init+0x3e0>
 800105e:	bf00      	nop
 8001060:	20000908 	.word	0x20000908
 8001064:	9313      	str	r3, [sp, #76]	; 0x4c
 8001066:	4668      	mov	r0, sp
 8001068:	f104 0308 	add.w	r3, r4, #8
 800106c:	224c      	movs	r2, #76	; 0x4c
 800106e:	4619      	mov	r1, r3
 8001070:	f007 fc34 	bl	80088dc <memcpy>
 8001074:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	; 0x78
 800107c:	f000 f9fa 	bl	8001474 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f865 	bl	8001150 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001086:	f000 f813 	bl	80010b0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <SSD1306_Init+0x428>)
 800108c:	2200      	movs	r2, #0
 800108e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SSD1306_Init+0x428>)
 8001092:	2200      	movs	r2, #0
 8001094:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SSD1306_Init+0x428>)
 8001098:	2201      	movs	r2, #1
 800109a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800109c:	2301      	movs	r3, #1
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010a8:	b004      	add	sp, #16
 80010aa:	4770      	bx	lr
 80010ac:	200005a4 	.word	0x200005a4

080010b0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b097      	sub	sp, #92	; 0x5c
 80010b4:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e03d      	b.n	8001138 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	3b50      	subs	r3, #80	; 0x50
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4c21      	ldr	r4, [pc, #132]	; (8001148 <SSD1306_UpdateScreen+0x98>)
 80010c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010c6:	4668      	mov	r0, sp
 80010c8:	f104 0308 	add.w	r3, r4, #8
 80010cc:	224c      	movs	r2, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	f007 fc04 	bl	80088dc <memcpy>
 80010d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 f9ca 	bl	8001474 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010e0:	4c19      	ldr	r4, [pc, #100]	; (8001148 <SSD1306_UpdateScreen+0x98>)
 80010e2:	2300      	movs	r3, #0
 80010e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80010e6:	4668      	mov	r0, sp
 80010e8:	f104 0308 	add.w	r3, r4, #8
 80010ec:	224c      	movs	r2, #76	; 0x4c
 80010ee:	4619      	mov	r1, r3
 80010f0:	f007 fbf4 	bl	80088dc <memcpy>
 80010f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 f9ba 	bl	8001474 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001100:	4c11      	ldr	r4, [pc, #68]	; (8001148 <SSD1306_UpdateScreen+0x98>)
 8001102:	2310      	movs	r3, #16
 8001104:	9313      	str	r3, [sp, #76]	; 0x4c
 8001106:	4668      	mov	r0, sp
 8001108:	f104 0308 	add.w	r3, r4, #8
 800110c:	224c      	movs	r2, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	f007 fbe4 	bl	80088dc <memcpy>
 8001114:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 f9aa 	bl	8001474 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	01db      	lsls	r3, r3, #7
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <SSD1306_UpdateScreen+0x9c>)
 8001126:	441a      	add	r2, r3
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	2078      	movs	r0, #120	; 0x78
 800112e:	f000 f959 	bl	80013e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	3301      	adds	r3, #1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d9be      	bls.n	80010bc <SSD1306_UpdateScreen+0xc>
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	20000908 	.word	0x20000908
 800114c:	200001a4 	.word	0x200001a4

08001150 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <SSD1306_Fill+0x14>
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <SSD1306_Fill+0x16>
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116a:	4619      	mov	r1, r3
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <SSD1306_Fill+0x2c>)
 800116e:	f007 fbc3 	bl	80088f8 <memset>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001a4 	.word	0x200001a4

08001180 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	460b      	mov	r3, r1
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	70fb      	strb	r3, [r7, #3]
	if (
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	2b7f      	cmp	r3, #127	; 0x7f
 8001196:	d848      	bhi.n	800122a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	2b3f      	cmp	r3, #63	; 0x3f
 800119c:	d845      	bhi.n	800122a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <SSD1306_DrawPixel+0xb8>)
 80011a0:	791b      	ldrb	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d11a      	bne.n	80011f0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	b298      	uxth	r0, r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	01db      	lsls	r3, r3, #7
 80011c6:	4413      	add	r3, r2
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <SSD1306_DrawPixel+0xbc>)
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b259      	sxtb	r1, r3
 80011e0:	88fa      	ldrh	r2, [r7, #6]
 80011e2:	4603      	mov	r3, r0
 80011e4:	01db      	lsls	r3, r3, #7
 80011e6:	4413      	add	r3, r2
 80011e8:	b2c9      	uxtb	r1, r1
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <SSD1306_DrawPixel+0xbc>)
 80011ec:	54d1      	strb	r1, [r2, r3]
 80011ee:	e01d      	b.n	800122c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	b298      	uxth	r0, r3
 80011f8:	4603      	mov	r3, r0
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	4413      	add	r3, r2
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <SSD1306_DrawPixel+0xbc>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	b25a      	sxtb	r2, r3
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	b25b      	sxtb	r3, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	4013      	ands	r3, r2
 8001218:	b259      	sxtb	r1, r3
 800121a:	88fa      	ldrh	r2, [r7, #6]
 800121c:	4603      	mov	r3, r0
 800121e:	01db      	lsls	r3, r3, #7
 8001220:	4413      	add	r3, r2
 8001222:	b2c9      	uxtb	r1, r1
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <SSD1306_DrawPixel+0xbc>)
 8001226:	54d1      	strb	r1, [r2, r3]
 8001228:	e000      	b.n	800122c <SSD1306_DrawPixel+0xac>
		return;
 800122a:	bf00      	nop
	}
}
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200005a4 	.word	0x200005a4
 800123c:	200001a4 	.word	0x200001a4

08001240 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001250:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SSD1306_GotoXY+0x28>)
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <SSD1306_GotoXY+0x28>)
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	8053      	strh	r3, [r2, #2]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	200005a4 	.word	0x200005a4

0800126c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800127c:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <SSD1306_Putc+0xfc>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
	if (
 8001288:	2b7f      	cmp	r3, #127	; 0x7f
 800128a:	dc07      	bgt.n	800129c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <SSD1306_Putc+0xfc>)
 800128e:	885b      	ldrh	r3, [r3, #2]
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001298:	2b3f      	cmp	r3, #63	; 0x3f
 800129a:	dd01      	ble.n	80012a0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800129c:	2300      	movs	r3, #0
 800129e:	e05e      	b.n	800135e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e04b      	b.n	800133e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	3b20      	subs	r3, #32
 80012ae:	6839      	ldr	r1, [r7, #0]
 80012b0:	7849      	ldrb	r1, [r1, #1]
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	440b      	add	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	e030      	b.n	800132c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <SSD1306_Putc+0xfc>)
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b298      	uxth	r0, r3
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <SSD1306_Putc+0xfc>)
 80012e8:	885a      	ldrh	r2, [r3, #2]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	79ba      	ldrb	r2, [r7, #6]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff ff43 	bl	8001180 <SSD1306_DrawPixel>
 80012fa:	e014      	b.n	8001326 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <SSD1306_Putc+0xfc>)
 80012fe:	881a      	ldrh	r2, [r3, #0]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b298      	uxth	r0, r3
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <SSD1306_Putc+0xfc>)
 800130a:	885a      	ldrh	r2, [r3, #2]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b299      	uxth	r1, r3
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	f7ff ff2d 	bl	8001180 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	3301      	adds	r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4293      	cmp	r3, r2
 8001336:	d3c8      	bcc.n	80012ca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	461a      	mov	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4293      	cmp	r3, r2
 8001348:	d3ad      	bcc.n	80012a6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <SSD1306_Putc+0xfc>)
 800134c:	881a      	ldrh	r2, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4413      	add	r3, r2
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <SSD1306_Putc+0xfc>)
 800135a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800135c:	79fb      	ldrb	r3, [r7, #7]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200005a4 	.word	0x200005a4

0800136c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800137a:	e012      	b.n	80013a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff71 	bl	800126c <SSD1306_Putc>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d002      	beq.n	800139c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	e008      	b.n	80013ae <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1e8      	bne.n	800137c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	781b      	ldrb	r3, [r3, #0]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <ssd1306_I2C_Init+0x28>)
 80013c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013c2:	e002      	b.n	80013ca <ssd1306_I2C_Init+0x12>
		p--;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f9      	bne.n	80013c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	0003d090 	.word	0x0003d090

080013e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b0c7      	sub	sp, #284	; 0x11c
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4604      	mov	r4, r0
 80013ec:	4608      	mov	r0, r1
 80013ee:	4639      	mov	r1, r7
 80013f0:	600a      	str	r2, [r1, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	4622      	mov	r2, r4
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	4602      	mov	r2, r0
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	460a      	mov	r2, r1
 8001404:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	1dba      	adds	r2, r7, #6
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001416:	e010      	b.n	800143a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001418:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800141c:	463a      	mov	r2, r7
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	441a      	add	r2, r3
 8001422:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001426:	3301      	adds	r3, #1
 8001428:	7811      	ldrb	r1, [r2, #0]
 800142a:	f107 020c 	add.w	r2, r7, #12
 800142e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001430:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001434:	3301      	adds	r3, #1
 8001436:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800143a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800143e:	b29b      	uxth	r3, r3
 8001440:	1d3a      	adds	r2, r7, #4
 8001442:	8812      	ldrh	r2, [r2, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8e7      	bhi.n	8001418 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b299      	uxth	r1, r3
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	f107 020c 	add.w	r2, r7, #12
 800145a:	200a      	movs	r0, #10
 800145c:	9000      	str	r0, [sp, #0]
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <ssd1306_I2C_WriteMulti+0x8c>)
 8001460:	f000 fe54 	bl	800210c <HAL_I2C_Master_Transmit>
}
 8001464:	bf00      	nop
 8001466:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	bf00      	nop
 8001470:	20000908 	.word	0x20000908

08001474 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8001474:	b082      	sub	sp, #8
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af02      	add	r7, sp, #8
 800147c:	f107 0c18 	add.w	ip, r7, #24
 8001480:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	460b      	mov	r3, r1
 800148a:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001490:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001494:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	b299      	uxth	r1, r3
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	230a      	movs	r3, #10
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	f107 0018 	add.w	r0, r7, #24
 80014a8:	f000 fe30 	bl	800210c <HAL_I2C_Master_Transmit>
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014b6:	b002      	add	sp, #8
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_MspInit+0x4c>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x4c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a5b      	ldr	r2, [pc, #364]	; (8001698 <HAL_I2C_MspInit+0x18c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	4b5a      	ldr	r3, [pc, #360]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a59      	ldr	r2, [pc, #356]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800154a:	23c0      	movs	r3, #192	; 0xc0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154e:	2312      	movs	r3, #18
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155a:	2304      	movs	r3, #4
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	484e      	ldr	r0, [pc, #312]	; (80016a0 <HAL_I2C_MspInit+0x194>)
 8001566:	f000 fabd 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a4a      	ldr	r2, [pc, #296]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <HAL_I2C_MspInit+0x190>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001586:	e083      	b.n	8001690 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <HAL_I2C_MspInit+0x198>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12d      	bne.n	80015ee <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a40      	ldr	r2, [pc, #256]	; (800169c <HAL_I2C_MspInit+0x190>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_I2C_MspInit+0x190>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4835      	ldr	r0, [pc, #212]	; (80016a0 <HAL_I2C_MspInit+0x194>)
 80015cc:	f000 fa8a 	bl	8001ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_I2C_MspInit+0x190>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_I2C_MspInit+0x190>)
 80015da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_I2C_MspInit+0x190>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
}
 80015ec:	e050      	b.n	8001690 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_I2C_MspInit+0x19c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d14b      	bne.n	8001690 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_I2C_MspInit+0x190>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a26      	ldr	r2, [pc, #152]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_I2C_MspInit+0x190>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_I2C_MspInit+0x190>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a1f      	ldr	r2, [pc, #124]	; (800169c <HAL_I2C_MspInit+0x190>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001642:	2304      	movs	r3, #4
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <HAL_I2C_MspInit+0x1a0>)
 800164e:	f000 fa49 	bl	8001ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001658:	2312      	movs	r3, #18
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001664:	2304      	movs	r3, #4
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4810      	ldr	r0, [pc, #64]	; (80016b0 <HAL_I2C_MspInit+0x1a4>)
 8001670:	f000 fa38 	bl	8001ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_I2C_MspInit+0x190>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_I2C_MspInit+0x190>)
 800167e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_I2C_MspInit+0x190>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40005400 	.word	0x40005400
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40005800 	.word	0x40005800
 80016a8:	40005c00 	.word	0x40005c00
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020000 	.word	0x40020000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001700:	f000 f89a 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <OTG_FS_IRQHandler+0x10>)
 800170e:	f001 ff76 	bl	80035fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20001e30 	.word	0x20001e30

0800171c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800175c:	4c0b      	ldr	r4, [pc, #44]	; (800178c <LoopFillZerobss+0x26>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176a:	f7ff ffd7 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f007 f891 	bl	8008894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7fe fef3 	bl	800055c <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001784:	080096f4 	.word	0x080096f4
  ldr r2, =_sbss
 8001788:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800178c:	20002238 	.word	0x20002238

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_Init+0x40>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_Init+0x40>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x40>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f94f 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fe78 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f967 	bl	8001aca <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001814:	f000 f92f 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000008 	.word	0x20000008
 8001830:	20000010 	.word	0x20000010
 8001834:	2000000c 	.word	0x2000000c

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000010 	.word	0x20000010
 800185c:	2000095c 	.word	0x2000095c

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2000095c 	.word	0x2000095c

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000010 	.word	0x20000010

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e16b      	b.n	8001dd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 815a 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d130      	bne.n	8001b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d017      	beq.n	8001bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80b4 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a5f      	ldr	r2, [pc, #380]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a5b      	ldr	r2, [pc, #364]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x314>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x318>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_GPIO_Init+0x31c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <HAL_GPIO_Init+0x320>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x216>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x212>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_GPIO_Init+0x32c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x20e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x20a>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00e      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e00c      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4e:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f ae90 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40021c00 	.word	0x40021c00
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e60:	887a      	ldrh	r2, [r7, #2]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e12b      	b.n	80020ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fb2e 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ee8:	f002 ffdc 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8001eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a81      	ldr	r2, [pc, #516]	; (80020f8 <HAL_I2C_Init+0x274>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d807      	bhi.n	8001f08 <HAL_I2C_Init+0x84>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a80      	ldr	r2, [pc, #512]	; (80020fc <HAL_I2C_Init+0x278>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	bf94      	ite	ls
 8001f00:	2301      	movls	r3, #1
 8001f02:	2300      	movhi	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e006      	b.n	8001f16 <HAL_I2C_Init+0x92>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a7d      	ldr	r2, [pc, #500]	; (8002100 <HAL_I2C_Init+0x27c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0e7      	b.n	80020ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a78      	ldr	r2, [pc, #480]	; (8002104 <HAL_I2C_Init+0x280>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a6a      	ldr	r2, [pc, #424]	; (80020f8 <HAL_I2C_Init+0x274>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d802      	bhi.n	8001f58 <HAL_I2C_Init+0xd4>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3301      	adds	r3, #1
 8001f56:	e009      	b.n	8001f6c <HAL_I2C_Init+0xe8>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a69      	ldr	r2, [pc, #420]	; (8002108 <HAL_I2C_Init+0x284>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	430b      	orrs	r3, r1
 8001f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	495c      	ldr	r1, [pc, #368]	; (80020f8 <HAL_I2C_Init+0x274>)
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d819      	bhi.n	8001fc0 <HAL_I2C_Init+0x13c>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e59      	subs	r1, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f9a:	1c59      	adds	r1, r3, #1
 8001f9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_I2C_Init+0x138>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e59      	subs	r1, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fba:	e051      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e04f      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d111      	bne.n	8001fec <HAL_I2C_Init+0x168>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e012      	b.n	8002012 <HAL_I2C_Init+0x18e>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	0099      	lsls	r1, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002002:	3301      	adds	r3, #1
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Init+0x196>
 8002016:	2301      	movs	r3, #1
 8002018:	e022      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <HAL_I2C_Init+0x1bc>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e58      	subs	r0, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	440b      	add	r3, r1
 8002030:	fbb0 f3f3 	udiv	r3, r0, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203e:	e00f      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	0099      	lsls	r1, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	6809      	ldr	r1, [r1, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800208e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6911      	ldr	r1, [r2, #16]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68d2      	ldr	r2, [r2, #12]
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	000186a0 	.word	0x000186a0
 80020fc:	001e847f 	.word	0x001e847f
 8002100:	003d08ff 	.word	0x003d08ff
 8002104:	431bde83 	.word	0x431bde83
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	461a      	mov	r2, r3
 8002118:	460b      	mov	r3, r1
 800211a:	817b      	strh	r3, [r7, #10]
 800211c:	4613      	mov	r3, r2
 800211e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fb9e 	bl	8001860 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	f040 80e0 	bne.w	80022f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2319      	movs	r3, #25
 800213a:	2201      	movs	r2, #1
 800213c:	4970      	ldr	r1, [pc, #448]	; (8002300 <HAL_I2C_Master_Transmit+0x1f4>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 ff30 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	e0d3      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_I2C_Master_Transmit+0x50>
 8002158:	2302      	movs	r3, #2
 800215a:	e0cc      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d007      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2221      	movs	r2, #33	; 0x21
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2210      	movs	r2, #16
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_I2C_Master_Transmit+0x1f8>)
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c4:	8979      	ldrh	r1, [r7, #10]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fcea 	bl	8002ba4 <I2C_MasterRequestWrite>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e08d      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021f0:	e066      	b.n	80022c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 ffaa 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b04      	cmp	r3, #4
 8002208:	d107      	bne.n	800221a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d11b      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x188>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d017      	beq.n	8002294 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	6a39      	ldr	r1, [r7, #32]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 ff9a 	bl	80031d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e01a      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d194      	bne.n	80021f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	00100002 	.word	0x00100002
 8002304:	ffff0000 	.word	0xffff0000

08002308 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002322:	f7ff fa9d 	bl	8001860 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b20      	cmp	r3, #32
 8002332:	f040 80d9 	bne.w	80024e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2319      	movs	r3, #25
 800233c:	2201      	movs	r2, #1
 800233e:	496d      	ldr	r1, [pc, #436]	; (80024f4 <HAL_I2C_Mem_Write+0x1ec>)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fe2f 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
 800234e:	e0cc      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2C_Mem_Write+0x56>
 800235a:	2302      	movs	r3, #2
 800235c:	e0c5      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d007      	beq.n	8002384 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_I2C_Mem_Write+0x1f0>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023c6:	88f8      	ldrh	r0, [r7, #6]
 80023c8:	893a      	ldrh	r2, [r7, #8]
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4603      	mov	r3, r0
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fc66 	bl	8002ca8 <I2C_RequestMemoryWrite>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d052      	beq.n	8002488 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e081      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 feb0 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11b      	bne.n	8002488 <HAL_I2C_Mem_Write+0x180>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d017      	beq.n	8002488 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1aa      	bne.n	80023e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fe9c 	bl	80031d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e016      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	00100002 	.word	0x00100002
 80024f8:	ffff0000 	.word	0xffff0000

080024fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002516:	f7ff f9a3 	bl	8001860 <HAL_GetTick>
 800251a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	f040 8208 	bne.w	800293a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2319      	movs	r3, #25
 8002530:	2201      	movs	r2, #1
 8002532:	497b      	ldr	r1, [pc, #492]	; (8002720 <HAL_I2C_Mem_Read+0x224>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fd35 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
 8002542:	e1fb      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Mem_Read+0x56>
 800254e:	2302      	movs	r3, #2
 8002550:	e1f4      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d007      	beq.n	8002578 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2222      	movs	r2, #34	; 0x22
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a5b      	ldr	r2, [pc, #364]	; (8002724 <HAL_I2C_Mem_Read+0x228>)
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ba:	88f8      	ldrh	r0, [r7, #6]
 80025bc:	893a      	ldrh	r2, [r7, #8]
 80025be:	8979      	ldrh	r1, [r7, #10]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4603      	mov	r3, r0
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fc02 	bl	8002dd4 <I2C_RequestMemoryRead>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1b0      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e184      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b01      	cmp	r3, #1
 8002610:	d11b      	bne.n	800264a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e164      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	2b02      	cmp	r3, #2
 8002650:	d11b      	bne.n	800268a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002660:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	e144      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026a0:	e138      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	f200 80f1 	bhi.w	800288e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d123      	bne.n	80026fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fdcb 	bl	8003254 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e139      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026fa:	e10b      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	2b02      	cmp	r3, #2
 8002702:	d14e      	bne.n	80027a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	2200      	movs	r2, #0
 800270c:	4906      	ldr	r1, [pc, #24]	; (8002728 <HAL_I2C_Mem_Read+0x22c>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fc48 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e10e      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
 800271e:	bf00      	nop
 8002720:	00100002 	.word	0x00100002
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a0:	e0b8      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	2200      	movs	r2, #0
 80027aa:	4966      	ldr	r1, [pc, #408]	; (8002944 <HAL_I2C_Mem_Read+0x448>)
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fbf9 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0bf      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	2200      	movs	r2, #0
 8002806:	494f      	ldr	r1, [pc, #316]	; (8002944 <HAL_I2C_Mem_Read+0x448>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fbcb 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e091      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288c:	e042      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fcde 	bl	8003254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e04c      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d118      	bne.n	8002914 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f aec2 	bne.w	80026a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	00010004 	.word	0x00010004

08002948 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	460b      	mov	r3, r1
 8002956:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7fe ff82 	bl	8001860 <HAL_GetTick>
 800295c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	f040 8111 	bne.w	8002b92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2319      	movs	r3, #25
 8002976:	2201      	movs	r2, #1
 8002978:	4988      	ldr	r1, [pc, #544]	; (8002b9c <HAL_I2C_IsDeviceReady+0x254>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb12 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	e104      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2C_IsDeviceReady+0x50>
 8002994:	2302      	movs	r3, #2
 8002996:	e0fd      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d007      	beq.n	80029be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2224      	movs	r2, #36	; 0x24
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a70      	ldr	r2, [pc, #448]	; (8002ba0 <HAL_I2C_IsDeviceReady+0x258>)
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fad0 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d103      	bne.n	8002a22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0b6      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a36:	f7fe ff13 	bl	8001860 <HAL_GetTick>
 8002a3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a6a:	e025      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fef8 	bl	8001860 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <HAL_I2C_IsDeviceReady+0x13a>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	22a0      	movs	r2, #160	; 0xa0
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_I2C_IsDeviceReady+0x188>
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_I2C_IsDeviceReady+0x188>
 8002aca:	7dbb      	ldrb	r3, [r7, #22]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0cd      	beq.n	8002a6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d129      	bne.n	8002b3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2319      	movs	r3, #25
 8002b12:	2201      	movs	r2, #1
 8002b14:	4921      	ldr	r1, [pc, #132]	; (8002b9c <HAL_I2C_IsDeviceReady+0x254>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fa44 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e036      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e02c      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2319      	movs	r3, #25
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	490f      	ldr	r1, [pc, #60]	; (8002b9c <HAL_I2C_IsDeviceReady+0x254>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fa20 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e012      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f4ff af32 	bcc.w	80029e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00100002 	.word	0x00100002
 8002ba0:	ffff0000 	.word	0xffff0000

08002ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d006      	beq.n	8002bce <I2C_MasterRequestWrite+0x2a>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d003      	beq.n	8002bce <I2C_MasterRequestWrite+0x2a>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bcc:	d108      	bne.n	8002be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e00b      	b.n	8002bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	2b12      	cmp	r3, #18
 8002be6:	d107      	bne.n	8002bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f9cd 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e035      	b.n	8002c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c34:	d108      	bne.n	8002c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	e01b      	b.n	8002c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	11db      	asrs	r3, r3, #7
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0306 	and.w	r3, r3, #6
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f063 030f 	orn	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	490e      	ldr	r1, [pc, #56]	; (8002ca0 <I2C_MasterRequestWrite+0xfc>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f9f3 	bl	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e010      	b.n	8002c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4907      	ldr	r1, [pc, #28]	; (8002ca4 <I2C_MasterRequestWrite+0x100>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f9e3 	bl	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	00010008 	.word	0x00010008
 8002ca4:	00010002 	.word	0x00010002

08002ca8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f960 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf8:	d103      	bne.n	8002d02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e05f      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <I2C_RequestMemoryWrite+0x128>)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f998 	bl	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e04c      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fa02 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d107      	bne.n	8002d6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e02b      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	e021      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	6a39      	ldr	r1, [r7, #32]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f9dc 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d107      	bne.n	8002db6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e005      	b.n	8002dc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dba:	893b      	ldrh	r3, [r7, #8]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	00010002 	.word	0x00010002

08002dd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e34:	d103      	bne.n	8002e3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0aa      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	6a3a      	ldr	r2, [r7, #32]
 8002e56:	4952      	ldr	r1, [pc, #328]	; (8002fa0 <I2C_RequestMemoryRead+0x1cc>)
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f8fa 	bl	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e097      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f964 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d107      	bne.n	8002ea6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e076      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
 8002eba:	e021      	b.n	8002f00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f93e 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d107      	bne.n	8002ef2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e050      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef6:	893b      	ldrh	r3, [r7, #8]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	6a39      	ldr	r1, [r7, #32]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f923 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d107      	bne.n	8002f28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e035      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f82b 	bl	8002fa4 <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f62:	d103      	bne.n	8002f6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e013      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f70:	897b      	ldrh	r3, [r7, #10]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	6a3a      	ldr	r2, [r7, #32]
 8002f84:	4906      	ldr	r1, [pc, #24]	; (8002fa0 <I2C_RequestMemoryRead+0x1cc>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f863 	bl	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	00010002 	.word	0x00010002

08002fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb4:	e025      	b.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbc:	d021      	beq.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fc4f 	bl	8001860 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d116      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e023      	b.n	800304a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10d      	bne.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	e00c      	b.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	429a      	cmp	r2, r3
 8003046:	d0b6      	beq.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003060:	e051      	b.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003070:	d123      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800308a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e046      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c0:	d021      	beq.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe fbcd 	bl	8001860 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d116      	bne.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e020      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10c      	bne.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e00b      	b.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d18d      	bne.n	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315c:	e02d      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f8ce 	bl	8003300 <I2C_IsAcknowledgeFailed>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e02d      	b.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003174:	d021      	beq.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fe fb73 	bl	8001860 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e007      	b.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d1ca      	bne.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031de:	e02d      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f88d 	bl	8003300 <I2C_IsAcknowledgeFailed>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e02d      	b.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f6:	d021      	beq.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f8:	f7fe fb32 	bl	8001860 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	d302      	bcc.n	800320e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e007      	b.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d1ca      	bne.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003260:	e042      	b.n	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d119      	bne.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e029      	b.n	80032f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fadc 	bl	8001860 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d116      	bne.n	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d1b5      	bne.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003316:	d11b      	bne.n	8003350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800335e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003360:	b08f      	sub	sp, #60	; 0x3c
 8003362:	af0a      	add	r7, sp, #40	; 0x28
 8003364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e10f      	b.n	8003590 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 ff6e 	bl	800826c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2203      	movs	r2, #3
 8003394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 fea1 	bl	80050f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	687e      	ldr	r6, [r7, #4]
 80033bc:	466d      	mov	r5, sp
 80033be:	f106 0410 	add.w	r4, r6, #16
 80033c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80033d2:	1d33      	adds	r3, r6, #4
 80033d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	f001 fd78 	bl	8004ecc <USB_CoreInit>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0d0      	b.n	8003590 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 fe8f 	bl	8005118 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e04a      	b.n	8003496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	333d      	adds	r3, #61	; 0x3d
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	333c      	adds	r3, #60	; 0x3c
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	b298      	uxth	r0, r3
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3342      	adds	r3, #66	; 0x42
 800343c:	4602      	mov	r2, r0
 800343e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	333f      	adds	r3, #63	; 0x3f
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3344      	adds	r3, #68	; 0x44
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3350      	adds	r3, #80	; 0x50
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	3301      	adds	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d3af      	bcc.n	8003400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e044      	b.n	8003530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	3301      	adds	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d3b5      	bcc.n	80034a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	687e      	ldr	r6, [r7, #4]
 8003542:	466d      	mov	r5, sp
 8003544:	f106 0410 	add.w	r4, r6, #16
 8003548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003554:	e885 0003 	stmia.w	r5, {r0, r1}
 8003558:	1d33      	adds	r3, r6, #4
 800355a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800355c:	6838      	ldr	r0, [r7, #0]
 800355e:	f001 fe27 	bl	80051b0 <USB_DevInit>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e00d      	b.n	8003590 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f002 fea3 	bl	80062d4 <USB_DevDisconnect>

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003598 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_PCD_Start+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e020      	b.n	80035f6 <HAL_PCD_Start+0x5e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d109      	bne.n	80035d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 fd79 	bl	80050d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fe53 	bl	8006292 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035fe:	b590      	push	{r4, r7, lr}
 8003600:	b08d      	sub	sp, #52	; 0x34
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f002 ff11 	bl	800643c <USB_GetMode>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 839d 	bne.w	8003d5c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f002 fe75 	bl	8006316 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8393 	beq.w	8003d5a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fe6c 	bl	8006316 <USB_ReadInterrupts>
 800363e:	4603      	mov	r3, r0
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d107      	bne.n	8003658 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f002 0202 	and.w	r2, r2, #2
 8003656:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fe5a 	bl	8006316 <USB_ReadInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d161      	bne.n	8003730 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0210 	bic.w	r2, r2, #16
 800367a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	0c5b      	lsrs	r3, r3, #17
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d124      	bne.n	80036f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d035      	beq.n	8003720 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6a38      	ldr	r0, [r7, #32]
 80036c8:	f002 fc91 	bl	8005fee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d8:	441a      	add	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ea:	441a      	add	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	619a      	str	r2, [r3, #24]
 80036f0:	e016      	b.n	8003720 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	0c5b      	lsrs	r3, r3, #17
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d110      	bne.n	8003720 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003704:	2208      	movs	r2, #8
 8003706:	4619      	mov	r1, r3
 8003708:	6a38      	ldr	r0, [r7, #32]
 800370a:	f002 fc70 	bl	8005fee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800371a:	441a      	add	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0210 	orr.w	r2, r2, #16
 800372e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fdee 	bl	8006316 <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003740:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003744:	d16e      	bne.n	8003824 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fdf4 	bl	800633c <USB_ReadDevAllOutEpInterrupt>
 8003754:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003756:	e062      	b.n	800381e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d057      	beq.n	8003812 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fe19 	bl	80063a4 <USB_ReadDevOutEPInterrupt>
 8003772:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378a:	461a      	mov	r2, r3
 800378c:	2301      	movs	r3, #1
 800378e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fdb0 	bl	80042f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ae:	461a      	mov	r2, r3
 80037b0:	2308      	movs	r3, #8
 80037b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 feaa 	bl	8004510 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d2:	461a      	mov	r2, r3
 80037d4:	2310      	movs	r3, #16
 80037d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ee:	461a      	mov	r2, r3
 80037f0:	2320      	movs	r3, #32
 80037f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003810:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	3301      	adds	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d199      	bne.n	8003758 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f002 fd74 	bl	8006316 <USB_ReadInterrupts>
 800382e:	4603      	mov	r3, r0
 8003830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003838:	f040 80c0 	bne.w	80039bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f002 fd95 	bl	8006370 <USB_ReadDevAllInEpInterrupt>
 8003846:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800384c:	e0b2      	b.n	80039b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a7 	beq.w	80039a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f002 fdbb 	bl	80063e0 <USB_ReadDevInEPInterrupt>
 800386a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d057      	beq.n	8003926 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	2201      	movs	r2, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	43db      	mvns	r3, r3
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003896:	4013      	ands	r3, r2
 8003898:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	461a      	mov	r2, r3
 80038a8:	2301      	movs	r3, #1
 80038aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d132      	bne.n	800391a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3348      	adds	r3, #72	; 0x48
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4403      	add	r3, r0
 80038d4:	3344      	adds	r3, #68	; 0x44
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4419      	add	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4403      	add	r3, r0
 80038e8:	3348      	adds	r3, #72	; 0x48
 80038ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d113      	bne.n	800391a <HAL_PCD_IRQHandler+0x31c>
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3350      	adds	r3, #80	; 0x50
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003912:	461a      	mov	r2, r3
 8003914:	2101      	movs	r1, #1
 8003916:	f002 fdc3 	bl	80064a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f004 fd24 	bl	800836e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	2308      	movs	r3, #8
 8003940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	461a      	mov	r2, r3
 800395a:	2310      	movs	r3, #16
 800395c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	461a      	mov	r2, r3
 8003976:	2340      	movs	r3, #64	; 0x40
 8003978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	461a      	mov	r2, r3
 8003992:	2302      	movs	r3, #2
 8003994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fc1b 	bl	80041de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	3301      	adds	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f47f af49 	bne.w	800384e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 fca8 	bl	8006316 <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d0:	d122      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d108      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fe26 	bl	800464c <HAL_PCDEx_LPM_Callback>
 8003a00:	e002      	b.n	8003a08 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f004 fd2a 	bl	800845c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f002 fc7a 	bl	8006316 <USB_ReadInterrupts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2c:	d112      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f004 fce6 	bl	8008410 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a52:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 fc5c 	bl	8006316 <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a68:	f040 80c7 	bne.w	8003bfa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2110      	movs	r1, #16
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fcf6 	bl	8005478 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	e056      	b.n	8003b40 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ac4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3a3      	bcc.n	8003a92 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b76:	f043 030b 	orr.w	r3, r3, #11
 8003b7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8c:	f043 030b 	orr.w	r3, r3, #11
 8003b90:	6453      	str	r3, [r2, #68]	; 0x44
 8003b92:	e015      	b.n	8003bc0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ba6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003baa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bba:	f043 030b 	orr.w	r3, r3, #11
 8003bbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003bd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003be4:	461a      	mov	r2, r3
 8003be6:	f002 fc5b 	bl	80064a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fb89 	bl	8006316 <USB_ReadInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	d124      	bne.n	8003c5a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 fc1f 	bl	8006458 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fc87 	bl	8005532 <USB_GetDevSpeed>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681c      	ldr	r4, [r3, #0]
 8003c30:	f001 f92c 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8003c34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f001 f9a6 	bl	8004f90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f004 fbba 	bl	80083be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 fb59 	bl	8006316 <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d10a      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f004 fb97 	bl	80083a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f002 0208 	and.w	r2, r2, #8
 8003c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f002 fb44 	bl	8006316 <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c98:	d10f      	bne.n	8003cba <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f004 fbf9 	bl	800849c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f002 fb29 	bl	8006316 <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cce:	d10f      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f004 fbcc 	bl	8008478 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f002 fb0e 	bl	8006316 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d10a      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f004 fbda 	bl	80084c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 faf8 	bl	8006316 <USB_ReadInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d115      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f004 fbca 	bl	80084dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	e000      	b.n	8003d5c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003d5a:	bf00      	nop
    }
  }
}
 8003d5c:	3734      	adds	r7, #52	; 0x34
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}

08003d62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_PCD_SetAddress+0x1a>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e013      	b.n	8003da4 <HAL_PCD_SetAddress+0x42>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 fa56 	bl	8006246 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	70fb      	strb	r3, [r7, #3]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	803b      	strh	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	da0f      	bge.n	8003df2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	f003 020f 	and.w	r2, r3, #15
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	3338      	adds	r3, #56	; 0x38
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	3304      	adds	r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	705a      	strb	r2, [r3, #1]
 8003df0:	e00f      	b.n	8003e12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e1e:	883a      	ldrh	r2, [r7, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	78ba      	ldrb	r2, [r7, #2]
 8003e28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e3c:	78bb      	ldrb	r3, [r7, #2]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d102      	bne.n	8003e48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_PCD_EP_Open+0xaa>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e00e      	b.n	8003e74 <HAL_PCD_EP_Open+0xc8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 fb89 	bl	800557c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003e72:	7afb      	ldrb	r3, [r7, #11]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da0f      	bge.n	8003eb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3338      	adds	r3, #56	; 0x38
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	705a      	strb	r2, [r3, #1]
 8003eae:	e00f      	b.n	8003ed0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 020f 	and.w	r2, r3, #15
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_PCD_EP_Close+0x6e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e00e      	b.n	8003f08 <HAL_PCD_EP_Close+0x8c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 fbc7 	bl	800568c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	f001 fea2 	bl	8005ccc <USB_EP0StartXfer>
 8003f88:	e008      	b.n	8003f9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	f001 fc54 	bl	8005844 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fc8:	681b      	ldr	r3, [r3, #0]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	3338      	adds	r3, #56	; 0x38
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2201      	movs	r2, #1
 8004014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d102      	bne.n	8004030 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	6979      	ldr	r1, [r7, #20]
 8004048:	f001 fe40 	bl	8005ccc <USB_EP0StartXfer>
 800404c:	e008      	b.n	8004060 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	f001 fbf2 	bl	8005844 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 020f 	and.w	r2, r3, #15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d901      	bls.n	8004088 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e050      	b.n	800412a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408c:	2b00      	cmp	r3, #0
 800408e:	da0f      	bge.n	80040b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3338      	adds	r3, #56	; 0x38
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	705a      	strb	r2, [r3, #1]
 80040ae:	e00d      	b.n	80040cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_EP_SetStall+0x82>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e01e      	b.n	800412a <HAL_PCD_EP_SetStall+0xc0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 ffcf 	bl	800609e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	b2d9      	uxtb	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800411a:	461a      	mov	r2, r3
 800411c:	f002 f9c0 	bl	80064a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d901      	bls.n	8004150 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e042      	b.n	80041d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da0f      	bge.n	8004178 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	3304      	adds	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	705a      	strb	r2, [r3, #1]
 8004176:	e00f      	b.n	8004198 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_PCD_EP_ClrStall+0x86>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e00e      	b.n	80041d6 <HAL_PCD_EP_ClrStall+0xa4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 ffd7 	bl	800617a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08a      	sub	sp, #40	; 0x28
 80041e2:	af02      	add	r7, sp, #8
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	3338      	adds	r3, #56	; 0x38
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	3304      	adds	r3, #4
 8004204:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	429a      	cmp	r2, r3
 8004210:	d901      	bls.n	8004216 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e06c      	b.n	80042f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	429a      	cmp	r2, r3
 800422a:	d902      	bls.n	8004232 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3303      	adds	r3, #3
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800423a:	e02b      	b.n	8004294 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	429a      	cmp	r2, r3
 8004250:	d902      	bls.n	8004258 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3303      	adds	r3, #3
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68d9      	ldr	r1, [r3, #12]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004270:	b2db      	uxtb	r3, r3
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	4603      	mov	r3, r0
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f001 fe7b 	bl	8005f72 <USB_WritePacket>

    ep->xfer_buff  += len;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d809      	bhi.n	80042be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d203      	bcs.n	80042be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1be      	bne.n	800423c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d811      	bhi.n	80042ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2201      	movs	r2, #1
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	6939      	ldr	r1, [r7, #16]
 80042e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ea:	4013      	ands	r3, r2
 80042ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	333c      	adds	r3, #60	; 0x3c
 8004310:	3304      	adds	r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b01      	cmp	r3, #1
 800432c:	f040 80a0 	bne.w	8004470 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d015      	beq.n	8004366 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a72      	ldr	r2, [pc, #456]	; (8004508 <PCD_EP_OutXfrComplete_int+0x210>)
 800433e:	4293      	cmp	r3, r2
 8004340:	f240 80dd 	bls.w	80044fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80d7 	beq.w	80044fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004362:	6093      	str	r3, [r2, #8]
 8004364:	e0cb      	b.n	80044fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	461a      	mov	r2, r3
 800437e:	2320      	movs	r3, #32
 8004380:	6093      	str	r3, [r2, #8]
 8004382:	e0bc      	b.n	80044fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80b7 	bne.w	80044fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a5d      	ldr	r2, [pc, #372]	; (8004508 <PCD_EP_OutXfrComplete_int+0x210>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d90f      	bls.n	80043b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	461a      	mov	r2, r3
 80043b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b4:	6093      	str	r3, [r2, #8]
 80043b6:	e0a2      	b.n	80044fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	0159      	lsls	r1, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	440b      	add	r3, r1
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80043de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4403      	add	r3, r0
 8004416:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4419      	add	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4403      	add	r3, r0
 800442c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004430:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d114      	bne.n	8004462 <PCD_EP_OutXfrComplete_int+0x16a>
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800445a:	461a      	mov	r2, r3
 800445c:	2101      	movs	r1, #1
 800445e:	f002 f81f 	bl	80064a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f003 ff65 	bl	8008338 <HAL_PCD_DataOutStageCallback>
 800446e:	e046      	b.n	80044fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a26      	ldr	r2, [pc, #152]	; (800450c <PCD_EP_OutXfrComplete_int+0x214>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d124      	bne.n	80044c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448e:	461a      	mov	r2, r3
 8004490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004494:	6093      	str	r3, [r2, #8]
 8004496:	e032      	b.n	80044fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	461a      	mov	r2, r3
 80044b0:	2320      	movs	r3, #32
 80044b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f003 ff3c 	bl	8008338 <HAL_PCD_DataOutStageCallback>
 80044c0:	e01d      	b.n	80044fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d114      	bne.n	80044f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044ea:	461a      	mov	r2, r3
 80044ec:	2100      	movs	r1, #0
 80044ee:	f001 ffd7 	bl	80064a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f003 ff1d 	bl	8008338 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	4f54300a 	.word	0x4f54300a
 800450c:	4f54310a 	.word	0x4f54310a

08004510 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	333c      	adds	r3, #60	; 0x3c
 8004528:	3304      	adds	r3, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a15      	ldr	r2, [pc, #84]	; (8004598 <PCD_EP_OutSetupPacket_int+0x88>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d90e      	bls.n	8004564 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	461a      	mov	r2, r3
 800455e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004562:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f003 fed5 	bl	8008314 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <PCD_EP_OutSetupPacket_int+0x88>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d90c      	bls.n	800458c <PCD_EP_OutSetupPacket_int+0x7c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d108      	bne.n	800458c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004584:	461a      	mov	r2, r3
 8004586:	2101      	movs	r1, #1
 8004588:	f001 ff8a 	bl	80064a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	4f54300a 	.word	0x4f54300a

0800459c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
 80045a8:	4613      	mov	r3, r2
 80045aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d107      	bne.n	80045ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045ba:	883b      	ldrh	r3, [r7, #0]
 80045bc:	0419      	lsls	r1, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
 80045c8:	e028      	b.n	800461c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	4413      	add	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	e00d      	b.n	80045fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	3340      	adds	r3, #64	; 0x40
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	4413      	add	r3, r2
 80045f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	3301      	adds	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	3b01      	subs	r3, #1
 8004600:	429a      	cmp	r2, r3
 8004602:	d3ec      	bcc.n	80045de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004604:	883b      	ldrh	r3, [r7, #0]
 8004606:	0418      	lsls	r0, r3, #16
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6819      	ldr	r1, [r3, #0]
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	3b01      	subs	r3, #1
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	4302      	orrs	r2, r0
 8004614:	3340      	adds	r3, #64	; 0x40
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e264      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d075      	beq.n	800476e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004682:	4ba3      	ldr	r3, [pc, #652]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b04      	cmp	r3, #4
 800468c:	d00c      	beq.n	80046a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468e:	4ba0      	ldr	r3, [pc, #640]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004696:	2b08      	cmp	r3, #8
 8004698:	d112      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469a:	4b9d      	ldr	r3, [pc, #628]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	4b99      	ldr	r3, [pc, #612]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d05b      	beq.n	800476c <HAL_RCC_OscConfig+0x108>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d157      	bne.n	800476c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e23f      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d106      	bne.n	80046d8 <HAL_RCC_OscConfig+0x74>
 80046ca:	4b91      	ldr	r3, [pc, #580]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a90      	ldr	r2, [pc, #576]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e01d      	b.n	8004714 <HAL_RCC_OscConfig+0xb0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x98>
 80046e2:	4b8b      	ldr	r3, [pc, #556]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a8a      	ldr	r2, [pc, #552]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a87      	ldr	r2, [pc, #540]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0xb0>
 80046fc:	4b84      	ldr	r3, [pc, #528]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a83      	ldr	r2, [pc, #524]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b81      	ldr	r3, [pc, #516]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a80      	ldr	r2, [pc, #512]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd f8a0 	bl	8001860 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004724:	f7fd f89c 	bl	8001860 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e204      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b76      	ldr	r3, [pc, #472]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xc0>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fd f88c 	bl	8001860 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd f888 	bl	8001860 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1f0      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	4b6c      	ldr	r3, [pc, #432]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0xe8>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d063      	beq.n	8004842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800477a:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004786:	4b62      	ldr	r3, [pc, #392]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800478e:	2b08      	cmp	r3, #8
 8004790:	d11c      	bne.n	80047cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004792:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d116      	bne.n	80047cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_RCC_OscConfig+0x152>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d001      	beq.n	80047b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e1c4      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b6:	4b56      	ldr	r3, [pc, #344]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4952      	ldr	r1, [pc, #328]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	e03a      	b.n	8004842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d4:	4b4f      	ldr	r3, [pc, #316]	; (8004914 <HAL_RCC_OscConfig+0x2b0>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fd f841 	bl	8001860 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e2:	f7fd f83d 	bl	8001860 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1a5      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	4b46      	ldr	r3, [pc, #280]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4940      	ldr	r1, [pc, #256]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004816:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCC_OscConfig+0x2b0>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fd f820 	bl	8001860 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004824:	f7fd f81c 	bl	8001860 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e184      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d030      	beq.n	80048b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004856:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x2b4>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd f800 	bl	8001860 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004864:	f7fc fffc 	bl	8001860 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e164      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x200>
 8004882:	e015      	b.n	80048b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004884:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x2b4>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fc ffe9 	bl	8001860 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004892:	f7fc ffe5 	bl	8001860 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e14d      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80a0 	beq.w	80049fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_OscConfig+0x2b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d121      	bne.n	800493e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_RCC_OscConfig+0x2b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_RCC_OscConfig+0x2b8>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004906:	f7fc ffab 	bl	8001860 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	e011      	b.n	8004932 <HAL_RCC_OscConfig+0x2ce>
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	42470000 	.word	0x42470000
 8004918:	42470e80 	.word	0x42470e80
 800491c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004920:	f7fc ff9e 	bl	8001860 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e106      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b85      	ldr	r3, [pc, #532]	; (8004b48 <HAL_RCC_OscConfig+0x4e4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <HAL_RCC_OscConfig+0x2f0>
 8004946:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a80      	ldr	r2, [pc, #512]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	e01c      	b.n	800498e <HAL_RCC_OscConfig+0x32a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_OscConfig+0x312>
 800495c:	4b7b      	ldr	r3, [pc, #492]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a7a      	ldr	r2, [pc, #488]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b78      	ldr	r3, [pc, #480]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a77      	ldr	r2, [pc, #476]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	e00b      	b.n	800498e <HAL_RCC_OscConfig+0x32a>
 8004976:	4b75      	ldr	r3, [pc, #468]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a74      	ldr	r2, [pc, #464]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a71      	ldr	r2, [pc, #452]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004996:	f7fc ff63 	bl	8001860 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fc ff5f 	bl	8001860 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e0c5      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ee      	beq.n	800499e <HAL_RCC_OscConfig+0x33a>
 80049c0:	e014      	b.n	80049ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fc ff4d 	bl	8001860 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fc ff49 	bl	8001860 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0af      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ee      	bne.n	80049ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d105      	bne.n	80049fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a55      	ldr	r2, [pc, #340]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 809b 	beq.w	8004b3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a08:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d05c      	beq.n	8004ace <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d141      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1c:	4b4c      	ldr	r3, [pc, #304]	; (8004b50 <HAL_RCC_OscConfig+0x4ec>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fc ff1d 	bl	8001860 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fc ff19 	bl	8001860 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e081      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	019b      	lsls	r3, r3, #6
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	3b01      	subs	r3, #1
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	4937      	ldr	r1, [pc, #220]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_OscConfig+0x4ec>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fc fef2 	bl	8001860 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fc feee 	bl	8001860 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e056      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a92:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x41c>
 8004a9e:	e04e      	b.n	8004b3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_RCC_OscConfig+0x4ec>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fc fedb 	bl	8001860 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fc fed7 	bl	8001860 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e03f      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x44a>
 8004acc:	e037      	b.n	8004b3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e032      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ada:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d028      	beq.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d121      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d11a      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d111      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	42470060 	.word	0x42470060

08004b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0cc      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b68:	4b68      	ldr	r3, [pc, #416]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d90c      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b65      	ldr	r3, [pc, #404]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0b8      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d020      	beq.n	8004bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a52      	ldr	r2, [pc, #328]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	494d      	ldr	r1, [pc, #308]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d044      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d119      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d003      	beq.n	8004c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e06f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c22:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e067      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c32:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4934      	ldr	r1, [pc, #208]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c44:	f7fc fe0c 	bl	8001860 <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fc fe08 	bl	8001860 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e04f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1eb      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c74:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d20c      	bcs.n	8004c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e032      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4916      	ldr	r1, [pc, #88]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	490e      	ldr	r1, [pc, #56]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cda:	f000 f821 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490a      	ldr	r1, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_ClockConfig+0x1c8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc fd6c 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	080096cc 	.word	0x080096cc
 8004d18:	20000008 	.word	0x20000008
 8004d1c:	2000000c 	.word	0x2000000c

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	b5b0      	push	{r4, r5, r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d26:	2100      	movs	r1, #0
 8004d28:	6079      	str	r1, [r7, #4]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	60f9      	str	r1, [r7, #12]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d32:	2100      	movs	r1, #0
 8004d34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d36:	4952      	ldr	r1, [pc, #328]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d38:	6889      	ldr	r1, [r1, #8]
 8004d3a:	f001 010c 	and.w	r1, r1, #12
 8004d3e:	2908      	cmp	r1, #8
 8004d40:	d00d      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x3e>
 8004d42:	2908      	cmp	r1, #8
 8004d44:	f200 8094 	bhi.w	8004e70 <HAL_RCC_GetSysClockFreq+0x150>
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x32>
 8004d4c:	2904      	cmp	r1, #4
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x38>
 8004d50:	e08e      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d52:	4b4c      	ldr	r3, [pc, #304]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x164>)
 8004d54:	60bb      	str	r3, [r7, #8]
       break;
 8004d56:	e08e      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d5a:	60bb      	str	r3, [r7, #8]
      break;
 8004d5c:	e08b      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d5e:	4948      	ldr	r1, [pc, #288]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d60:	6849      	ldr	r1, [r1, #4]
 8004d62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d66:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d68:	4945      	ldr	r1, [pc, #276]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d6a:	6849      	ldr	r1, [r1, #4]
 8004d6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d024      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d74:	4942      	ldr	r1, [pc, #264]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d76:	6849      	ldr	r1, [r1, #4]
 8004d78:	0989      	lsrs	r1, r1, #6
 8004d7a:	4608      	mov	r0, r1
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d84:	f04f 0500 	mov.w	r5, #0
 8004d88:	ea00 0204 	and.w	r2, r0, r4
 8004d8c:	ea01 0305 	and.w	r3, r1, r5
 8004d90:	493d      	ldr	r1, [pc, #244]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d92:	fb01 f003 	mul.w	r0, r1, r3
 8004d96:	2100      	movs	r1, #0
 8004d98:	fb01 f102 	mul.w	r1, r1, r2
 8004d9c:	1844      	adds	r4, r0, r1
 8004d9e:	493a      	ldr	r1, [pc, #232]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x168>)
 8004da0:	fba2 0101 	umull	r0, r1, r2, r1
 8004da4:	1863      	adds	r3, r4, r1
 8004da6:	4619      	mov	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	f7fb fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4613      	mov	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e04a      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbe:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	099b      	lsrs	r3, r3, #6
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dce:	f04f 0100 	mov.w	r1, #0
 8004dd2:	ea02 0400 	and.w	r4, r2, r0
 8004dd6:	ea03 0501 	and.w	r5, r3, r1
 8004dda:	4620      	mov	r0, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	014b      	lsls	r3, r1, #5
 8004de8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dec:	0142      	lsls	r2, r0, #5
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	1b00      	subs	r0, r0, r4
 8004df4:	eb61 0105 	sbc.w	r1, r1, r5
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	018b      	lsls	r3, r1, #6
 8004e02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e06:	0182      	lsls	r2, r0, #6
 8004e08:	1a12      	subs	r2, r2, r0
 8004e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e0e:	f04f 0000 	mov.w	r0, #0
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	00d9      	lsls	r1, r3, #3
 8004e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e1c:	00d0      	lsls	r0, r2, #3
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	1912      	adds	r2, r2, r4
 8004e24:	eb45 0303 	adc.w	r3, r5, r3
 8004e28:	f04f 0000 	mov.w	r0, #0
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	0299      	lsls	r1, r3, #10
 8004e32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e36:	0290      	lsls	r0, r2, #10
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4619      	mov	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	f7fb f9be 	bl	80001c8 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4613      	mov	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	60bb      	str	r3, [r7, #8]
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x164>)
 8004e72:	60bb      	str	r3, [r7, #8]
      break;
 8004e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e76:	68bb      	ldr	r3, [r7, #8]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	017d7840 	.word	0x017d7840

08004e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000008 	.word	0x20000008

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ea8:	f7ff fff0 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0a9b      	lsrs	r3, r3, #10
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4903      	ldr	r1, [pc, #12]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	080096dc 	.word	0x080096dc

08004ecc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ecc:	b084      	sub	sp, #16
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	f107 001c 	add.w	r0, r7, #28
 8004eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d122      	bne.n	8004f2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 fb1c 	bl	800655c <USB_CoreReset>
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e01a      	b.n	8004f60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fb10 	bl	800655c <USB_CoreReset>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
 8004f52:	e005      	b.n	8004f60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d10b      	bne.n	8004f7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f043 0206 	orr.w	r2, r3, #6
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8a:	b004      	add	sp, #16
 8004f8c:	4770      	bx	lr
	...

08004f90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d165      	bne.n	8005070 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a41      	ldr	r2, [pc, #260]	; (80050ac <USB_SetTurnaroundTime+0x11c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <USB_SetTurnaroundTime+0x2a>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a40      	ldr	r2, [pc, #256]	; (80050b0 <USB_SetTurnaroundTime+0x120>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d202      	bcs.n	8004fba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e062      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <USB_SetTurnaroundTime+0x120>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d306      	bcc.n	8004fd0 <USB_SetTurnaroundTime+0x40>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a3b      	ldr	r2, [pc, #236]	; (80050b4 <USB_SetTurnaroundTime+0x124>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d202      	bcs.n	8004fd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004fca:	230e      	movs	r3, #14
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e057      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <USB_SetTurnaroundTime+0x124>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d306      	bcc.n	8004fe6 <USB_SetTurnaroundTime+0x56>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <USB_SetTurnaroundTime+0x128>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d202      	bcs.n	8004fe6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004fe0:	230d      	movs	r3, #13
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e04c      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4a33      	ldr	r2, [pc, #204]	; (80050b8 <USB_SetTurnaroundTime+0x128>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d306      	bcc.n	8004ffc <USB_SetTurnaroundTime+0x6c>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4a32      	ldr	r2, [pc, #200]	; (80050bc <USB_SetTurnaroundTime+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d802      	bhi.n	8004ffc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e041      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4a2f      	ldr	r2, [pc, #188]	; (80050bc <USB_SetTurnaroundTime+0x12c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d906      	bls.n	8005012 <USB_SetTurnaroundTime+0x82>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <USB_SetTurnaroundTime+0x130>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d802      	bhi.n	8005012 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800500c:	230b      	movs	r3, #11
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e036      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <USB_SetTurnaroundTime+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d906      	bls.n	8005028 <USB_SetTurnaroundTime+0x98>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <USB_SetTurnaroundTime+0x134>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d802      	bhi.n	8005028 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005022:	230a      	movs	r3, #10
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e02b      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4a26      	ldr	r2, [pc, #152]	; (80050c4 <USB_SetTurnaroundTime+0x134>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d906      	bls.n	800503e <USB_SetTurnaroundTime+0xae>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <USB_SetTurnaroundTime+0x138>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d202      	bcs.n	800503e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005038:	2309      	movs	r3, #9
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e020      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <USB_SetTurnaroundTime+0x138>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d306      	bcc.n	8005054 <USB_SetTurnaroundTime+0xc4>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4a20      	ldr	r2, [pc, #128]	; (80050cc <USB_SetTurnaroundTime+0x13c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d802      	bhi.n	8005054 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800504e:	2308      	movs	r3, #8
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e015      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <USB_SetTurnaroundTime+0x13c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d906      	bls.n	800506a <USB_SetTurnaroundTime+0xda>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <USB_SetTurnaroundTime+0x140>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d202      	bcs.n	800506a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005064:	2307      	movs	r3, #7
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e00a      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800506a:	2306      	movs	r3, #6
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e007      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005076:	2309      	movs	r3, #9
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e001      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800507c:	2309      	movs	r3, #9
 800507e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	00d8acbf 	.word	0x00d8acbf
 80050b0:	00e4e1c0 	.word	0x00e4e1c0
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	01067380 	.word	0x01067380
 80050bc:	011a499f 	.word	0x011a499f
 80050c0:	01312cff 	.word	0x01312cff
 80050c4:	014ca43f 	.word	0x014ca43f
 80050c8:	016e3600 	.word	0x016e3600
 80050cc:	01a6ab1f 	.word	0x01a6ab1f
 80050d0:	01e84800 	.word	0x01e84800

080050d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d115      	bne.n	8005166 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005146:	2001      	movs	r0, #1
 8005148:	f7fc fb96 	bl	8001878 <HAL_Delay>
      ms++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f972 	bl	800643c <USB_GetMode>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d01e      	beq.n	800519c <USB_SetCurrentMode+0x84>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b31      	cmp	r3, #49	; 0x31
 8005162:	d9f0      	bls.n	8005146 <USB_SetCurrentMode+0x2e>
 8005164:	e01a      	b.n	800519c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d115      	bne.n	8005198 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005178:	2001      	movs	r0, #1
 800517a:	f7fc fb7d 	bl	8001878 <HAL_Delay>
      ms++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f959 	bl	800643c <USB_GetMode>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <USB_SetCurrentMode+0x84>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b31      	cmp	r3, #49	; 0x31
 8005194:	d9f0      	bls.n	8005178 <USB_SetCurrentMode+0x60>
 8005196:	e001      	b.n	800519c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e005      	b.n	80051a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b32      	cmp	r3, #50	; 0x32
 80051a0:	d101      	bne.n	80051a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051b0:	b084      	sub	sp, #16
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e009      	b.n	80051e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3340      	adds	r3, #64	; 0x40
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3301      	adds	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b0e      	cmp	r3, #14
 80051e8:	d9f2      	bls.n	80051d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11c      	bne.n	800522a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051fe:	f043 0302 	orr.w	r3, r3, #2
 8005202:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
 8005228:	e00b      	b.n	8005242 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005248:	461a      	mov	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	4619      	mov	r1, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525c:	461a      	mov	r2, r3
 800525e:	680b      	ldr	r3, [r1, #0]
 8005260:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2b01      	cmp	r3, #1
 8005266:	d10c      	bne.n	8005282 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f945 	bl	8005500 <USB_SetDevSpeed>
 8005276:	e008      	b.n	800528a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005278:	2101      	movs	r1, #1
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f940 	bl	8005500 <USB_SetDevSpeed>
 8005280:	e003      	b.n	800528a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005282:	2103      	movs	r1, #3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f93b 	bl	8005500 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800528a:	2110      	movs	r1, #16
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8f3 	bl	8005478 <USB_FlushTxFifo>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f90f 	bl	80054c0 <USB_FlushRxFifo>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	461a      	mov	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	461a      	mov	r2, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	461a      	mov	r2, r3
 80052cc:	2300      	movs	r3, #0
 80052ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e043      	b.n	800535e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ec:	d118      	bne.n	8005320 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e013      	b.n	8005332 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	461a      	mov	r2, r3
 8005318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e008      	b.n	8005332 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	461a      	mov	r2, r3
 800532e:	2300      	movs	r3, #0
 8005330:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	461a      	mov	r2, r3
 8005340:	2300      	movs	r3, #0
 8005342:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005356:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3301      	adds	r3, #1
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3b7      	bcc.n	80052d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e043      	b.n	80053f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005382:	d118      	bne.n	80053b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	461a      	mov	r2, r3
 8005398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e013      	b.n	80053c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e008      	b.n	80053c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	461a      	mov	r2, r3
 80053c4:	2300      	movs	r3, #0
 80053c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d4:	461a      	mov	r2, r3
 80053d6:	2300      	movs	r3, #0
 80053d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	461a      	mov	r2, r3
 80053e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3301      	adds	r3, #1
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d3b7      	bcc.n	800536c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800540a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800540e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800541c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <USB_DevInit+0x2c4>)
 8005436:	4313      	orrs	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f043 0208 	orr.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005470:	b004      	add	sp, #16
 8005472:	4770      	bx	lr
 8005474:	803c3800 	.word	0x803c3800

08005478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <USB_FlushTxFifo+0x44>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e006      	b.n	80054b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d0f1      	beq.n	8005492 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	00030d40 	.word	0x00030d40

080054c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2210      	movs	r2, #16
 80054d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <USB_FlushRxFifo+0x3c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e006      	b.n	80054f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d0f1      	beq.n	80054d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	00030d40 	.word	0x00030d40

08005500 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005520:	4313      	orrs	r3, r2
 8005522:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005532:	b480      	push	{r7}
 8005534:	b087      	sub	sp, #28
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0306 	and.w	r3, r3, #6
 800554a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005552:	2300      	movs	r3, #0
 8005554:	75fb      	strb	r3, [r7, #23]
 8005556:	e00a      	b.n	800556e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d002      	beq.n	8005564 <USB_GetDevSpeed+0x32>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d102      	bne.n	800556a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005564:	2302      	movs	r3, #2
 8005566:	75fb      	strb	r3, [r7, #23]
 8005568:	e001      	b.n	800556e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800556a:	230f      	movs	r3, #15
 800556c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d13a      	bne.n	800560e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d155      	bne.n	800567c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	78db      	ldrb	r3, [r3, #3]
 80055ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	059b      	lsls	r3, r3, #22
 80055f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055f4:	4313      	orrs	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e036      	b.n	800567c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800562c:	4313      	orrs	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11a      	bne.n	800567c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	78db      	ldrb	r3, [r3, #3]
 8005660:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005662:	430b      	orrs	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d161      	bne.n	800576c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056be:	d11f      	bne.n	8005700 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	b29b      	uxth	r3, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4013      	ands	r3, r2
 8005722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2101      	movs	r1, #1
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	b29b      	uxth	r3, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4013      	ands	r3, r2
 8005746:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0159      	lsls	r1, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	440b      	add	r3, r1
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	4619      	mov	r1, r3
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <USB_DeactivateEndpoint+0x1b0>)
 8005766:	4013      	ands	r3, r2
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	e060      	b.n	800582e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005782:	d11f      	bne.n	80057c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	2101      	movs	r1, #1
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	43db      	mvns	r3, r3
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e4:	4013      	ands	r3, r2
 80057e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	43db      	mvns	r3, r3
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005808:	4013      	ands	r3, r2
 800580a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	440b      	add	r3, r1
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	4619      	mov	r1, r3
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <USB_DeactivateEndpoint+0x1b4>)
 800582a:	4013      	ands	r3, r2
 800582c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	ec337800 	.word	0xec337800
 8005840:	eff37800 	.word	0xeff37800

08005844 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 815c 	bne.w	8005b1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d132      	bne.n	80058d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800588c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005890:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058cc:	0cdb      	lsrs	r3, r3, #19
 80058ce:	04db      	lsls	r3, r3, #19
 80058d0:	6113      	str	r3, [r2, #16]
 80058d2:	e074      	b.n	80059be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	0cdb      	lsrs	r3, r3, #19
 80058f0:	04db      	lsls	r3, r3, #19
 80058f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005912:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005924:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6959      	ldr	r1, [r3, #20]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	440b      	add	r3, r1
 8005930:	1e59      	subs	r1, r3, #1
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	fbb1 f3f3 	udiv	r3, r1, r3
 800593a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800593c:	4b9d      	ldr	r3, [pc, #628]	; (8005bb4 <USB_EPStartXfer+0x370>)
 800593e:	400b      	ands	r3, r1
 8005940:	69b9      	ldr	r1, [r7, #24]
 8005942:	0148      	lsls	r0, r1, #5
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	4401      	add	r1, r0
 8005948:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800594c:	4313      	orrs	r3, r2
 800594e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005966:	69b9      	ldr	r1, [r7, #24]
 8005968:	0148      	lsls	r0, r1, #5
 800596a:	69f9      	ldr	r1, [r7, #28]
 800596c:	4401      	add	r1, r0
 800596e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005972:	4313      	orrs	r3, r2
 8005974:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	78db      	ldrb	r3, [r3, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d11f      	bne.n	80059be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800599c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d14b      	bne.n	8005a5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	461a      	mov	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d128      	bne.n	8005a3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d110      	bne.n	8005a1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e00f      	b.n	8005a3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	e12f      	b.n	8005cbc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d015      	beq.n	8005ab0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8117 	beq.w	8005cbc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	634b      	str	r3, [r1, #52]	; 0x34
 8005aae:	e105      	b.n	8005cbc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d110      	bne.n	8005ae2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e00f      	b.n	8005b02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68d9      	ldr	r1, [r3, #12]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	b298      	uxth	r0, r3
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4603      	mov	r3, r0
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa2b 	bl	8005f72 <USB_WritePacket>
 8005b1c:	e0ce      	b.n	8005cbc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b38:	0cdb      	lsrs	r3, r3, #19
 8005b3a:	04db      	lsls	r3, r3, #19
 8005b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d126      	bne.n	8005bb8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b80:	69b9      	ldr	r1, [r7, #24]
 8005b82:	0148      	lsls	r0, r1, #5
 8005b84:	69f9      	ldr	r1, [r7, #28]
 8005b86:	4401      	add	r1, r0
 8005b88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bae:	6113      	str	r3, [r2, #16]
 8005bb0:	e036      	b.n	8005c20 <USB_EPStartXfer+0x3dc>
 8005bb2:	bf00      	nop
 8005bb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	1e5a      	subs	r2, r3, #1
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	8afb      	ldrh	r3, [r7, #22]
 8005bde:	04d9      	lsls	r1, r3, #19
 8005be0:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <USB_EPStartXfer+0x484>)
 8005be2:	400b      	ands	r3, r1
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	0148      	lsls	r0, r1, #5
 8005be8:	69f9      	ldr	r1, [r7, #28]
 8005bea:	4401      	add	r1, r0
 8005bec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	8af9      	ldrh	r1, [r7, #22]
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	0148      	lsls	r0, r1, #5
 8005c14:	69f9      	ldr	r1, [r7, #28]
 8005c16:	4401      	add	r1, r0
 8005c18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d10d      	bne.n	8005c42 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68d9      	ldr	r1, [r3, #12]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	460a      	mov	r2, r1
 8005c40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d128      	bne.n	8005c9c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d110      	bne.n	8005c7c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e00f      	b.n	8005c9c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	1ff80000 	.word	0x1ff80000

08005ccc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	f040 80cd 	bne.w	8005e88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d132      	bne.n	8005d5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	0cdb      	lsrs	r3, r3, #19
 8005d56:	04db      	lsls	r3, r3, #19
 8005d58:	6113      	str	r3, [r2, #16]
 8005d5a:	e04e      	b.n	8005dfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	0cdb      	lsrs	r3, r3, #19
 8005d78:	04db      	lsls	r3, r3, #19
 8005d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d903      	bls.n	8005db4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dea:	6939      	ldr	r1, [r7, #16]
 8005dec:	0148      	lsls	r0, r1, #5
 8005dee:	6979      	ldr	r1, [r7, #20]
 8005df0:	4401      	add	r1, r0
 8005df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d11e      	bne.n	8005e3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	461a      	mov	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e092      	b.n	8005f64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d07e      	beq.n	8005f64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	2101      	movs	r1, #1
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e82:	4313      	orrs	r3, r2
 8005e84:	634b      	str	r3, [r1, #52]	; 0x34
 8005e86:	e06d      	b.n	8005f64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea2:	0cdb      	lsrs	r3, r3, #19
 8005ea4:	04db      	lsls	r3, r3, #19
 8005ea6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ec6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f12:	6939      	ldr	r1, [r7, #16]
 8005f14:	0148      	lsls	r0, r1, #5
 8005f16:	6979      	ldr	r1, [r7, #20]
 8005f18:	4401      	add	r1, r0
 8005f1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10d      	bne.n	8005f44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	68d9      	ldr	r1, [r3, #12]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	460a      	mov	r2, r1
 8005f42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b089      	sub	sp, #36	; 0x24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	461a      	mov	r2, r3
 8005f80:	460b      	mov	r3, r1
 8005f82:	71fb      	strb	r3, [r7, #7]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d123      	bne.n	8005fe0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f98:	88bb      	ldrh	r3, [r7, #4]
 8005f9a:	3303      	adds	r3, #3
 8005f9c:	089b      	lsrs	r3, r3, #2
 8005f9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e018      	b.n	8005fd8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	031a      	lsls	r2, r3, #12
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d3e2      	bcc.n	8005fa6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3724      	adds	r7, #36	; 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b08b      	sub	sp, #44	; 0x2c
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	089b      	lsrs	r3, r3, #2
 8006008:	b29b      	uxth	r3, r3
 800600a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006014:	2300      	movs	r3, #0
 8006016:	623b      	str	r3, [r7, #32]
 8006018:	e014      	b.n	8006044 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	601a      	str	r2, [r3, #0]
    pDest++;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	3301      	adds	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	3301      	adds	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	3301      	adds	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	3301      	adds	r3, #1
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	3301      	adds	r3, #1
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	429a      	cmp	r2, r3
 800604a:	d3e6      	bcc.n	800601a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800604c:	8bfb      	ldrh	r3, [r7, #30]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01e      	beq.n	8006090 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605c:	461a      	mov	r2, r3
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	701a      	strb	r2, [r3, #0]
      i++;
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	3301      	adds	r3, #1
 800607c:	623b      	str	r3, [r7, #32]
      pDest++;
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	3301      	adds	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006084:	8bfb      	ldrh	r3, [r7, #30]
 8006086:	3b01      	subs	r3, #1
 8006088:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800608a:	8bfb      	ldrh	r3, [r7, #30]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ea      	bne.n	8006066 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006092:	4618      	mov	r0, r3
 8006094:	372c      	adds	r7, #44	; 0x2c
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d12c      	bne.n	8006114 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	db12      	blt.n	80060f2 <USB_EPSetStall+0x54>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060f0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	e02b      	b.n	800616c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	db12      	blt.n	800614c <USB_EPSetStall+0xae>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00f      	beq.n	800614c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800616a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d128      	bne.n	80061e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	78db      	ldrb	r3, [r3, #3]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d003      	beq.n	80061c6 <USB_EPClearStall+0x4c>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	78db      	ldrb	r3, [r3, #3]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d138      	bne.n	8006238 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e027      	b.n	8006238 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006206:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	78db      	ldrb	r3, [r3, #3]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d003      	beq.n	8006218 <USB_EPClearStall+0x9e>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d10f      	bne.n	8006238 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006264:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006268:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006280:	4313      	orrs	r3, r2
 8006282:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ac:	f023 0303 	bic.w	r3, r3, #3
 80062b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c0:	f023 0302 	bic.w	r3, r3, #2
 80062c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006302:	f043 0302 	orr.w	r3, r3, #2
 8006306:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4013      	ands	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4013      	ands	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	0c1b      	lsrs	r3, r3, #16
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	b29b      	uxth	r3, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063d2:	68bb      	ldr	r3, [r7, #8]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
 8006410:	01db      	lsls	r3, r3, #7
 8006412:	b2db      	uxtb	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4013      	ands	r3, r2
 800642c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642e:	68bb      	ldr	r3, [r7, #8]
}
 8006430:	4618      	mov	r0, r3
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0301 	and.w	r3, r3, #1
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006476:	f023 0307 	bic.w	r3, r3, #7
 800647a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	460b      	mov	r3, r1
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	333c      	adds	r3, #60	; 0x3c
 80064b6:	3304      	adds	r3, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4a26      	ldr	r2, [pc, #152]	; (8006558 <USB_EP0_OutStart+0xb8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d90a      	bls.n	80064da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d4:	d101      	bne.n	80064da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e037      	b.n	800654a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006508:	f043 0318 	orr.w	r3, r3, #24
 800650c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006520:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10f      	bne.n	8006548 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006542:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	4f54300a 	.word	0x4f54300a

0800655c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <USB_CoreReset+0x60>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e01a      	b.n	80065ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	daf3      	bge.n	8006568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f043 0201 	orr.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	4a09      	ldr	r2, [pc, #36]	; (80065bc <USB_CoreReset+0x60>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d901      	bls.n	80065a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e006      	b.n	80065ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d0f1      	beq.n	8006590 <USB_CoreReset+0x34>

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	00030d40 	.word	0x00030d40

080065c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065d0:	f002 f91c 	bl	800880c <USBD_static_malloc>
 80065d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e066      	b.n	80066b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7c1b      	ldrb	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d119      	bne.n	800662c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fc:	2202      	movs	r2, #2
 80065fe:	2181      	movs	r1, #129	; 0x81
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 ffe0 	bl	80085c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800660c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006610:	2202      	movs	r2, #2
 8006612:	2101      	movs	r1, #1
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 ffd6 	bl	80085c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2210      	movs	r2, #16
 8006626:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800662a:	e016      	b.n	800665a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	2202      	movs	r2, #2
 8006630:	2181      	movs	r1, #129	; 0x81
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 ffc7 	bl	80085c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	2202      	movs	r2, #2
 8006642:	2101      	movs	r1, #1
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 ffbe 	bl	80085c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2210      	movs	r2, #16
 8006656:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800665a:	2308      	movs	r3, #8
 800665c:	2203      	movs	r2, #3
 800665e:	2182      	movs	r1, #130	; 0x82
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 ffb0 	bl	80085c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7c1b      	ldrb	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800669a:	2101      	movs	r1, #1
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f002 f881 	bl	80087a4 <USBD_LL_PrepareReceive>
 80066a2:	e007      	b.n	80066b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066aa:	2340      	movs	r3, #64	; 0x40
 80066ac:	2101      	movs	r1, #1
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f002 f878 	bl	80087a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066ca:	2181      	movs	r1, #129	; 0x81
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ffa0 	bl	8008612 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066d8:	2101      	movs	r1, #1
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 ff99 	bl	8008612 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066e8:	2182      	movs	r1, #130	; 0x82
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 ff91 	bl	8008612 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671a:	4618      	mov	r0, r3
 800671c:	f002 f884 	bl	8008828 <USBD_static_free>
    pdev->pClassData = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006744:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	e0af      	b.n	80068bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006764:	2b00      	cmp	r3, #0
 8006766:	d03f      	beq.n	80067e8 <USBD_CDC_Setup+0xb4>
 8006768:	2b20      	cmp	r3, #32
 800676a:	f040 809f 	bne.w	80068ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	88db      	ldrh	r3, [r3, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d02e      	beq.n	80067d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	b25b      	sxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	da16      	bge.n	80067ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800678c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	88d2      	ldrh	r2, [r2, #6]
 8006792:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	88db      	ldrh	r3, [r3, #6]
 8006798:	2b07      	cmp	r3, #7
 800679a:	bf28      	it	cs
 800679c:	2307      	movcs	r3, #7
 800679e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	89fa      	ldrh	r2, [r7, #14]
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fae9 	bl	8007d7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80067ac:	e085      	b.n	80068ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785a      	ldrb	r2, [r3, #1]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	88db      	ldrh	r3, [r3, #6]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80067c4:	6939      	ldr	r1, [r7, #16]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	88db      	ldrh	r3, [r3, #6]
 80067ca:	461a      	mov	r2, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fb02 	bl	8007dd6 <USBD_CtlPrepareRx>
      break;
 80067d2:	e072      	b.n	80068ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	7850      	ldrb	r0, [r2, #1]
 80067e0:	2200      	movs	r2, #0
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	4798      	blx	r3
      break;
 80067e6:	e068      	b.n	80068ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b0b      	cmp	r3, #11
 80067ee:	d852      	bhi.n	8006896 <USBD_CDC_Setup+0x162>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBD_CDC_Setup+0xc4>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	08006829 	.word	0x08006829
 80067fc:	080068a5 	.word	0x080068a5
 8006800:	08006897 	.word	0x08006897
 8006804:	08006897 	.word	0x08006897
 8006808:	08006897 	.word	0x08006897
 800680c:	08006897 	.word	0x08006897
 8006810:	08006897 	.word	0x08006897
 8006814:	08006897 	.word	0x08006897
 8006818:	08006897 	.word	0x08006897
 800681c:	08006897 	.word	0x08006897
 8006820:	08006853 	.word	0x08006853
 8006824:	0800687d 	.word	0x0800687d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b03      	cmp	r3, #3
 8006832:	d107      	bne.n	8006844 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006834:	f107 030a 	add.w	r3, r7, #10
 8006838:	2202      	movs	r2, #2
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 fa9e 	bl	8007d7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006842:	e032      	b.n	80068aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fa28 	bl	8007c9c <USBD_CtlError>
            ret = USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	75fb      	strb	r3, [r7, #23]
          break;
 8006850:	e02b      	b.n	80068aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d107      	bne.n	800686e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800685e:	f107 030d 	add.w	r3, r7, #13
 8006862:	2201      	movs	r2, #1
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fa89 	bl	8007d7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800686c:	e01d      	b.n	80068aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 fa13 	bl	8007c9c <USBD_CtlError>
            ret = USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	75fb      	strb	r3, [r7, #23]
          break;
 800687a:	e016      	b.n	80068aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b03      	cmp	r3, #3
 8006886:	d00f      	beq.n	80068a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fa06 	bl	8007c9c <USBD_CtlError>
            ret = USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006894:	e008      	b.n	80068a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f9ff 	bl	8007c9c <USBD_CtlError>
          ret = USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	75fb      	strb	r3, [r7, #23]
          break;
 80068a2:	e002      	b.n	80068aa <USBD_CDC_Setup+0x176>
          break;
 80068a4:	bf00      	nop
 80068a6:	e008      	b.n	80068ba <USBD_CDC_Setup+0x186>
          break;
 80068a8:	bf00      	nop
      }
      break;
 80068aa:	e006      	b.n	80068ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 f9f4 	bl	8007c9c <USBD_CtlError>
      ret = USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	75fb      	strb	r3, [r7, #23]
      break;
 80068b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e04f      	b.n	8006986 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3318      	adds	r3, #24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d029      	beq.n	8006958 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	3318      	adds	r3, #24
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	78f9      	ldrb	r1, [r7, #3]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	460b      	mov	r3, r1
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4403      	add	r3, r0
 8006924:	3344      	adds	r3, #68	; 0x44
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	fbb2 f1f3 	udiv	r1, r2, r3
 800692c:	fb03 f301 	mul.w	r3, r3, r1
 8006930:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006932:	2b00      	cmp	r3, #0
 8006934:	d110      	bne.n	8006958 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3318      	adds	r3, #24
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800694a:	78f9      	ldrb	r1, [r7, #3]
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 ff06 	bl	8008762 <USBD_LL_Transmit>
 8006956:	e015      	b.n	8006984 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e015      	b.n	80069dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 ff16 	bl	80087e6 <USBD_LL_GetRxDataSize>
 80069ba:	4602      	mov	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069d6:	4611      	mov	r1, r2
 80069d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e01b      	b.n	8006a36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d015      	beq.n	8006a34 <USBD_CDC_EP0_RxReady+0x50>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a0e:	2bff      	cmp	r3, #255	; 0xff
 8006a10:	d010      	beq.n	8006a34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006a20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a28:	b292      	uxth	r2, r2
 8006a2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2243      	movs	r2, #67	; 0x43
 8006a4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006a4e:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	2000009c 	.word	0x2000009c

08006a60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2243      	movs	r2, #67	; 0x43
 8006a6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006a6e:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	20000058 	.word	0x20000058

08006a80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2243      	movs	r2, #67	; 0x43
 8006a8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	200000e0 	.word	0x200000e0

08006aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	220a      	movs	r2, #10
 8006aac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006aae:	4b03      	ldr	r3, [pc, #12]	; (8006abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000014 	.word	0x20000014

08006ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e004      	b.n	8006ade <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e008      	b.n	8006b1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e004      	b.n	8006b4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e016      	b.n	8006ba4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7c1b      	ldrb	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b88:	2101      	movs	r1, #1
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fe0a 	bl	80087a4 <USBD_LL_PrepareReceive>
 8006b90:	e007      	b.n	8006ba2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b98:	2340      	movs	r3, #64	; 0x40
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fe01 	bl	80087a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e01f      	b.n	8006c04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	79fa      	ldrb	r2, [r7, #7]
 8006bf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f001 fc7d 	bl	80084f8 <USBD_LL_Init>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e016      	b.n	8006c52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	f107 020e 	add.w	r2, r7, #14
 8006c44:	4610      	mov	r0, r2
 8006c46:	4798      	blx	r3
 8006c48:	4602      	mov	r2, r0
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fc94 	bl	8008590 <USBD_LL_Start>
 8006c68:	4603      	mov	r3, r0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	4611      	mov	r1, r2
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 ff90 	bl	8007c28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d01a      	beq.n	8006d62 <USBD_LL_SetupStage+0x72>
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d822      	bhi.n	8006d76 <USBD_LL_SetupStage+0x86>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <USBD_LL_SetupStage+0x4a>
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d00a      	beq.n	8006d4e <USBD_LL_SetupStage+0x5e>
 8006d38:	e01d      	b.n	8006d76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa62 	bl	800720c <USBD_StdDevReq>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d4c:	e020      	b.n	8006d90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fac6 	bl	80072e8 <USBD_StdItfReq>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	e016      	b.n	8006d90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb05 	bl	800737a <USBD_StdEPReq>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]
      break;
 8006d74:	e00c      	b.n	8006d90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fc63 	bl	8008650 <USBD_LL_StallEP>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8e:	bf00      	nop
  }

  return ret;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	460b      	mov	r3, r1
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d138      	bne.n	8006e20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006db4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d14a      	bne.n	8006e56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d913      	bls.n	8006df4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4293      	cmp	r3, r2
 8006de4:	bf28      	it	cs
 8006de6:	4613      	movcs	r3, r2
 8006de8:	461a      	mov	r2, r3
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f001 f80f 	bl	8007e10 <USBD_CtlContinueRx>
 8006df2:	e030      	b.n	8006e56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d10b      	bne.n	8006e18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f001 f80a 	bl	8007e32 <USBD_CtlSendStatus>
 8006e1e:	e01a      	b.n	8006e56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d114      	bne.n	8006e56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	7afa      	ldrb	r2, [r7, #11]
 8006e42:	4611      	mov	r1, r2
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	4798      	blx	r3
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	e000      	b.n	8006e58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e6e:	7afb      	ldrb	r3, [r7, #11]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d16b      	bne.n	8006f4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3314      	adds	r3, #20
 8006e78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d156      	bne.n	8006f32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d914      	bls.n	8006eba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 ff84 	bl	8007db4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eac:	2300      	movs	r3, #0
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f001 fc76 	bl	80087a4 <USBD_LL_PrepareReceive>
 8006eb8:	e03b      	b.n	8006f32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d11c      	bne.n	8006f00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d316      	bcc.n	8006f00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d20f      	bcs.n	8006f00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 ff65 	bl	8007db4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f001 fc53 	bl	80087a4 <USBD_LL_PrepareReceive>
 8006efe:	e018      	b.n	8006f32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d10b      	bne.n	8006f24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f001 fb92 	bl	8008650 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 ff93 	bl	8007e58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d122      	bne.n	8006f82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fe98 	bl	8006c72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f4a:	e01a      	b.n	8006f82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d114      	bne.n	8006f82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	7afa      	ldrb	r2, [r7, #11]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	4798      	blx	r3
 8006f74:	4603      	mov	r3, r0
 8006f76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	e000      	b.n	8006f84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e02f      	b.n	8007020 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00f      	beq.n	8006fea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6852      	ldr	r2, [r2, #4]
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fea:	2340      	movs	r3, #64	; 0x40
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fae8 	bl	80085c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2240      	movs	r2, #64	; 0x40
 8007002:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	2200      	movs	r2, #0
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fada 	bl	80085c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2240      	movs	r2, #64	; 0x40
 800701c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2204      	movs	r2, #4
 8007062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b04      	cmp	r3, #4
 8007086:	d106      	bne.n	8007096 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800708e:	b2da      	uxtb	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e012      	b.n	80070e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d10b      	bne.n	80070de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070fe:	2303      	movs	r3, #3
 8007100:	e014      	b.n	800712c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d10d      	bne.n	800712a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	4611      	mov	r1, r2
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800714a:	2303      	movs	r3, #3
 800714c:	e014      	b.n	8007178 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b03      	cmp	r3, #3
 8007158:	d10d      	bne.n	8007176 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6852      	ldr	r2, [r2, #4]
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	4611      	mov	r1, r2
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
  }

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b087      	sub	sp, #28
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3301      	adds	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071ec:	8a3b      	ldrh	r3, [r7, #16]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	b21a      	sxth	r2, r3
 80071f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b21b      	sxth	r3, r3
 80071fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071fc:	89fb      	ldrh	r3, [r7, #14]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d005      	beq.n	8007232 <USBD_StdDevReq+0x26>
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d853      	bhi.n	80072d2 <USBD_StdDevReq+0xc6>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <USBD_StdDevReq+0x3a>
 800722e:	2b20      	cmp	r3, #32
 8007230:	d14f      	bne.n	80072d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
      break;
 8007244:	e04a      	b.n	80072dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b09      	cmp	r3, #9
 800724c:	d83b      	bhi.n	80072c6 <USBD_StdDevReq+0xba>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_StdDevReq+0x48>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072a9 	.word	0x080072a9
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072c7 	.word	0x080072c7
 8007260:	080072b3 	.word	0x080072b3
 8007264:	080072c7 	.word	0x080072c7
 8007268:	08007287 	.word	0x08007287
 800726c:	0800727d 	.word	0x0800727d
 8007270:	080072c7 	.word	0x080072c7
 8007274:	0800729f 	.word	0x0800729f
 8007278:	08007291 	.word	0x08007291
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9de 	bl	8007640 <USBD_GetDescriptor>
          break;
 8007284:	e024      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fb43 	bl	8007914 <USBD_SetAddress>
          break;
 800728e:	e01f      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb82 	bl	800799c <USBD_SetConfig>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
          break;
 800729c:	e018      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fc21 	bl	8007ae8 <USBD_GetConfig>
          break;
 80072a6:	e013      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fc52 	bl	8007b54 <USBD_GetStatus>
          break;
 80072b0:	e00e      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc81 	bl	8007bbc <USBD_SetFeature>
          break;
 80072ba:	e009      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc90 	bl	8007be4 <USBD_ClrFeature>
          break;
 80072c4:	e004      	b.n	80072d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fce7 	bl	8007c9c <USBD_CtlError>
          break;
 80072ce:	bf00      	nop
      }
      break;
 80072d0:	e004      	b.n	80072dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fce1 	bl	8007c9c <USBD_CtlError>
      break;
 80072da:	bf00      	nop
  }

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop

080072e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072fe:	2b40      	cmp	r3, #64	; 0x40
 8007300:	d005      	beq.n	800730e <USBD_StdItfReq+0x26>
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d82f      	bhi.n	8007366 <USBD_StdItfReq+0x7e>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <USBD_StdItfReq+0x26>
 800730a:	2b20      	cmp	r3, #32
 800730c:	d12b      	bne.n	8007366 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	2b02      	cmp	r3, #2
 800731a:	d81d      	bhi.n	8007358 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	889b      	ldrh	r3, [r3, #4]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d813      	bhi.n	800734e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	88db      	ldrh	r3, [r3, #6]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d110      	bne.n	8007362 <USBD_StdItfReq+0x7a>
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10d      	bne.n	8007362 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd73 	bl	8007e32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800734c:	e009      	b.n	8007362 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fca3 	bl	8007c9c <USBD_CtlError>
          break;
 8007356:	e004      	b.n	8007362 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc9e 	bl	8007c9c <USBD_CtlError>
          break;
 8007360:	e000      	b.n	8007364 <USBD_StdItfReq+0x7c>
          break;
 8007362:	bf00      	nop
      }
      break;
 8007364:	e004      	b.n	8007370 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fc97 	bl	8007c9c <USBD_CtlError>
      break;
 800736e:	bf00      	nop
  }

  return ret;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	889b      	ldrh	r3, [r3, #4]
 800738c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d007      	beq.n	80073aa <USBD_StdEPReq+0x30>
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	f200 8145 	bhi.w	800762a <USBD_StdEPReq+0x2b0>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00c      	beq.n	80073be <USBD_StdEPReq+0x44>
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	f040 8140 	bne.w	800762a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
      break;
 80073bc:	e13a      	b.n	8007634 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d007      	beq.n	80073d6 <USBD_StdEPReq+0x5c>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	f300 8129 	bgt.w	800761e <USBD_StdEPReq+0x2a4>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d07f      	beq.n	80074d0 <USBD_StdEPReq+0x156>
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d03c      	beq.n	800744e <USBD_StdEPReq+0xd4>
 80073d4:	e123      	b.n	800761e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d002      	beq.n	80073e8 <USBD_StdEPReq+0x6e>
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d016      	beq.n	8007414 <USBD_StdEPReq+0x9a>
 80073e6:	e02c      	b.n	8007442 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <USBD_StdEPReq+0x90>
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d00a      	beq.n	800740a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 f929 	bl	8008650 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073fe:	2180      	movs	r1, #128	; 0x80
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f925 	bl	8008650 <USBD_LL_StallEP>
 8007406:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007408:	e020      	b.n	800744c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fc45 	bl	8007c9c <USBD_CtlError>
              break;
 8007412:	e01b      	b.n	800744c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	885b      	ldrh	r3, [r3, #2]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10e      	bne.n	800743a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <USBD_StdEPReq+0xc0>
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d008      	beq.n	800743a <USBD_StdEPReq+0xc0>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	88db      	ldrh	r3, [r3, #6]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 f90b 	bl	8008650 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fcf9 	bl	8007e32 <USBD_CtlSendStatus>

              break;
 8007440:	e004      	b.n	800744c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fc29 	bl	8007c9c <USBD_CtlError>
              break;
 800744a:	bf00      	nop
          }
          break;
 800744c:	e0ec      	b.n	8007628 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d002      	beq.n	8007460 <USBD_StdEPReq+0xe6>
 800745a:	2b03      	cmp	r3, #3
 800745c:	d016      	beq.n	800748c <USBD_StdEPReq+0x112>
 800745e:	e030      	b.n	80074c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <USBD_StdEPReq+0x108>
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d00a      	beq.n	8007482 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f8ed 	bl	8008650 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f8e9 	bl	8008650 <USBD_LL_StallEP>
 800747e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007480:	e025      	b.n	80074ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fc09 	bl	8007c9c <USBD_CtlError>
              break;
 800748a:	e020      	b.n	80074ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	885b      	ldrh	r3, [r3, #2]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11b      	bne.n	80074cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 f8f3 	bl	800868e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fcc2 	bl	8007e32 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80074c0:	e004      	b.n	80074cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fbe9 	bl	8007c9c <USBD_CtlError>
              break;
 80074ca:	e000      	b.n	80074ce <USBD_StdEPReq+0x154>
              break;
 80074cc:	bf00      	nop
          }
          break;
 80074ce:	e0ab      	b.n	8007628 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d002      	beq.n	80074e2 <USBD_StdEPReq+0x168>
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d032      	beq.n	8007546 <USBD_StdEPReq+0x1cc>
 80074e0:	e097      	b.n	8007612 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <USBD_StdEPReq+0x17e>
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d004      	beq.n	80074f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fbd3 	bl	8007c9c <USBD_CtlError>
                break;
 80074f6:	e091      	b.n	800761c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da0b      	bge.n	8007518 <USBD_StdEPReq+0x19e>
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	3310      	adds	r3, #16
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4413      	add	r3, r2
 8007514:	3304      	adds	r3, #4
 8007516:	e00b      	b.n	8007530 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	3304      	adds	r3, #4
 8007530:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2202      	movs	r2, #2
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fc1d 	bl	8007d7e <USBD_CtlSendData>
              break;
 8007544:	e06a      	b.n	800761c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	da11      	bge.n	8007572 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	f003 020f 	and.w	r2, r3, #15
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3324      	adds	r3, #36	; 0x24
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d117      	bne.n	8007598 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fb96 	bl	8007c9c <USBD_CtlError>
                  break;
 8007570:	e054      	b.n	800761c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	f003 020f 	and.w	r2, r3, #15
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb83 	bl	8007c9c <USBD_CtlError>
                  break;
 8007596:	e041      	b.n	800761c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	da0b      	bge.n	80075b8 <USBD_StdEPReq+0x23e>
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	3310      	adds	r3, #16
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	4413      	add	r3, r2
 80075b4:	3304      	adds	r3, #4
 80075b6:	e00b      	b.n	80075d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	3304      	adds	r3, #4
 80075d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <USBD_StdEPReq+0x264>
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b80      	cmp	r3, #128	; 0x80
 80075dc:	d103      	bne.n	80075e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e00e      	b.n	8007604 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f86e 	bl	80086cc <USBD_LL_IsStallEP>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e002      	b.n	8007604 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2202      	movs	r2, #2
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fbb7 	bl	8007d7e <USBD_CtlSendData>
              break;
 8007610:	e004      	b.n	800761c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fb41 	bl	8007c9c <USBD_CtlError>
              break;
 800761a:	bf00      	nop
          }
          break;
 800761c:	e004      	b.n	8007628 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb3b 	bl	8007c9c <USBD_CtlError>
          break;
 8007626:	bf00      	nop
      }
      break;
 8007628:	e004      	b.n	8007634 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fb35 	bl	8007c9c <USBD_CtlError>
      break;
 8007632:	bf00      	nop
  }

  return ret;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	885b      	ldrh	r3, [r3, #2]
 800765a:	0a1b      	lsrs	r3, r3, #8
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	2b06      	cmp	r3, #6
 8007662:	f200 8128 	bhi.w	80078b6 <USBD_GetDescriptor+0x276>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <USBD_GetDescriptor+0x2c>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	08007689 	.word	0x08007689
 8007670:	080076a1 	.word	0x080076a1
 8007674:	080076e1 	.word	0x080076e1
 8007678:	080078b7 	.word	0x080078b7
 800767c:	080078b7 	.word	0x080078b7
 8007680:	08007857 	.word	0x08007857
 8007684:	08007883 	.word	0x08007883
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
      break;
 800769e:	e112      	b.n	80078c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7c1b      	ldrb	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10d      	bne.n	80076c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	f107 0208 	add.w	r2, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	2202      	movs	r2, #2
 80076c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076c2:	e100      	b.n	80078c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	f107 0208 	add.w	r2, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3301      	adds	r3, #1
 80076da:	2202      	movs	r2, #2
 80076dc:	701a      	strb	r2, [r3, #0]
      break;
 80076de:	e0f2      	b.n	80078c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	f200 80ac 	bhi.w	8007844 <USBD_GetDescriptor+0x204>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <USBD_GetDescriptor+0xb4>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	08007741 	.word	0x08007741
 80076fc:	08007775 	.word	0x08007775
 8007700:	080077a9 	.word	0x080077a9
 8007704:	080077dd 	.word	0x080077dd
 8007708:	08007811 	.word	0x08007811
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7c12      	ldrb	r2, [r2, #16]
 8007724:	f107 0108 	add.w	r1, r7, #8
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772e:	e091      	b.n	8007854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fab2 	bl	8007c9c <USBD_CtlError>
            err++;
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	3301      	adds	r3, #1
 800773c:	72fb      	strb	r3, [r7, #11]
          break;
 800773e:	e089      	b.n	8007854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7c12      	ldrb	r2, [r2, #16]
 8007758:	f107 0108 	add.w	r1, r7, #8
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007762:	e077      	b.n	8007854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa98 	bl	8007c9c <USBD_CtlError>
            err++;
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	3301      	adds	r3, #1
 8007770:	72fb      	strb	r3, [r7, #11]
          break;
 8007772:	e06f      	b.n	8007854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007796:	e05d      	b.n	8007854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa7e 	bl	8007c9c <USBD_CtlError>
            err++;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	3301      	adds	r3, #1
 80077a4:	72fb      	strb	r3, [r7, #11]
          break;
 80077a6:	e055      	b.n	8007854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ca:	e043      	b.n	8007854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa64 	bl	8007c9c <USBD_CtlError>
            err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
          break;
 80077da:	e03b      	b.n	8007854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 0108 	add.w	r1, r7, #8
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fe:	e029      	b.n	8007854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa4a 	bl	8007c9c <USBD_CtlError>
            err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
          break;
 800780e:	e021      	b.n	8007854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7c12      	ldrb	r2, [r2, #16]
 8007828:	f107 0108 	add.w	r1, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007832:	e00f      	b.n	8007854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa30 	bl	8007c9c <USBD_CtlError>
            err++;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	3301      	adds	r3, #1
 8007840:	72fb      	strb	r3, [r7, #11]
          break;
 8007842:	e007      	b.n	8007854 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa28 	bl	8007c9c <USBD_CtlError>
          err++;
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	3301      	adds	r3, #1
 8007850:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007852:	bf00      	nop
      }
      break;
 8007854:	e037      	b.n	80078c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	f107 0208 	add.w	r2, r7, #8
 800786a:	4610      	mov	r0, r2
 800786c:	4798      	blx	r3
 800786e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007870:	e029      	b.n	80078c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa11 	bl	8007c9c <USBD_CtlError>
        err++;
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	3301      	adds	r3, #1
 800787e:	72fb      	strb	r3, [r7, #11]
      break;
 8007880:	e021      	b.n	80078c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7c1b      	ldrb	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f107 0208 	add.w	r2, r7, #8
 8007896:	4610      	mov	r0, r2
 8007898:	4798      	blx	r3
 800789a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	2207      	movs	r2, #7
 80078a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078a4:	e00f      	b.n	80078c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9f7 	bl	8007c9c <USBD_CtlError>
        err++;
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	3301      	adds	r3, #1
 80078b2:	72fb      	strb	r3, [r7, #11]
      break;
 80078b4:	e007      	b.n	80078c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9ef 	bl	8007c9c <USBD_CtlError>
      err++;
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	3301      	adds	r3, #1
 80078c2:	72fb      	strb	r3, [r7, #11]
      break;
 80078c4:	bf00      	nop
  }

  if (err != 0U)
 80078c6:	7afb      	ldrb	r3, [r7, #11]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11e      	bne.n	800790a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	88db      	ldrh	r3, [r3, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d016      	beq.n	8007902 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00e      	beq.n	80078f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88da      	ldrh	r2, [r3, #6]
 80078de:	893b      	ldrh	r3, [r7, #8]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bf28      	it	cs
 80078e4:	4613      	movcs	r3, r2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078ea:	893b      	ldrh	r3, [r7, #8]
 80078ec:	461a      	mov	r2, r3
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fa44 	bl	8007d7e <USBD_CtlSendData>
 80078f6:	e009      	b.n	800790c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9ce 	bl	8007c9c <USBD_CtlError>
 8007900:	e004      	b.n	800790c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa95 	bl	8007e32 <USBD_CtlSendStatus>
 8007908:	e000      	b.n	800790c <USBD_GetDescriptor+0x2cc>
    return;
 800790a:	bf00      	nop
  }
}
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop

08007914 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d131      	bne.n	800798a <USBD_SetAddress+0x76>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d12d      	bne.n	800798a <USBD_SetAddress+0x76>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	2b7f      	cmp	r3, #127	; 0x7f
 8007934:	d829      	bhi.n	800798a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	885b      	ldrh	r3, [r3, #2]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d104      	bne.n	8007958 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f9a3 	bl	8007c9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007956:	e01d      	b.n	8007994 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7bfa      	ldrb	r2, [r7, #15]
 800795c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fedd 	bl	8008724 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa61 	bl	8007e32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2202      	movs	r2, #2
 800797a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797e:	e009      	b.n	8007994 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	e004      	b.n	8007994 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f985 	bl	8007c9c <USBD_CtlError>
  }
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	885b      	ldrh	r3, [r3, #2]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	4b4c      	ldr	r3, [pc, #304]	; (8007ae4 <USBD_SetConfig+0x148>)
 80079b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079b4:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <USBD_SetConfig+0x148>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d905      	bls.n	80079c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f96c 	bl	8007c9c <USBD_CtlError>
    return USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e088      	b.n	8007ada <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d002      	beq.n	80079da <USBD_SetConfig+0x3e>
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d025      	beq.n	8007a24 <USBD_SetConfig+0x88>
 80079d8:	e071      	b.n	8007abe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079da:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <USBD_SetConfig+0x148>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01c      	beq.n	8007a1c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80079e2:	4b40      	ldr	r3, [pc, #256]	; (8007ae4 <USBD_SetConfig+0x148>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079ec:	4b3d      	ldr	r3, [pc, #244]	; (8007ae4 <USBD_SetConfig+0x148>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff f948 	bl	8006c88 <USBD_SetClassConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d004      	beq.n	8007a0c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f949 	bl	8007c9c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a0a:	e065      	b.n	8007ad8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa10 	bl	8007e32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2203      	movs	r2, #3
 8007a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a1a:	e05d      	b.n	8007ad8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa08 	bl	8007e32 <USBD_CtlSendStatus>
      break;
 8007a22:	e059      	b.n	8007ad8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a24:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d112      	bne.n	8007a52 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a34:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a3e:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff f93b 	bl	8006cc0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9f1 	bl	8007e32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a50:	e042      	b.n	8007ad8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a52:	4b24      	ldr	r3, [pc, #144]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d02a      	beq.n	8007ab6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff f929 	bl	8006cc0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff f902 	bl	8006c88 <USBD_SetClassConfig>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00f      	beq.n	8007aae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f903 	bl	8007c9c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f90e 	bl	8006cc0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007aac:	e014      	b.n	8007ad8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f9bf 	bl	8007e32 <USBD_CtlSendStatus>
      break;
 8007ab4:	e010      	b.n	8007ad8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9bb 	bl	8007e32 <USBD_CtlSendStatus>
      break;
 8007abc:	e00c      	b.n	8007ad8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8eb 	bl	8007c9c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <USBD_SetConfig+0x148>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff f8f7 	bl	8006cc0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad6:	bf00      	nop
  }

  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200005aa 	.word	0x200005aa

08007ae8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d004      	beq.n	8007b04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f8cd 	bl	8007c9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b02:	e023      	b.n	8007b4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	dc02      	bgt.n	8007b16 <USBD_GetConfig+0x2e>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc03      	bgt.n	8007b1c <USBD_GetConfig+0x34>
 8007b14:	e015      	b.n	8007b42 <USBD_GetConfig+0x5a>
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d00b      	beq.n	8007b32 <USBD_GetConfig+0x4a>
 8007b1a:	e012      	b.n	8007b42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3308      	adds	r3, #8
 8007b26:	2201      	movs	r2, #1
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f927 	bl	8007d7e <USBD_CtlSendData>
        break;
 8007b30:	e00c      	b.n	8007b4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3304      	adds	r3, #4
 8007b36:	2201      	movs	r2, #1
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f91f 	bl	8007d7e <USBD_CtlSendData>
        break;
 8007b40:	e004      	b.n	8007b4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8a9 	bl	8007c9c <USBD_CtlError>
        break;
 8007b4a:	bf00      	nop
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d81e      	bhi.n	8007baa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	88db      	ldrh	r3, [r3, #6]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d004      	beq.n	8007b7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f890 	bl	8007c9c <USBD_CtlError>
        break;
 8007b7c:	e01a      	b.n	8007bb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 0202 	orr.w	r2, r3, #2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8eb 	bl	8007d7e <USBD_CtlSendData>
      break;
 8007ba8:	e004      	b.n	8007bb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f875 	bl	8007c9c <USBD_CtlError>
      break;
 8007bb2:	bf00      	nop
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	885b      	ldrh	r3, [r3, #2]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d106      	bne.n	8007bdc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f92b 	bl	8007e32 <USBD_CtlSendStatus>
  }
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d80b      	bhi.n	8007c14 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	885b      	ldrh	r3, [r3, #2]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10c      	bne.n	8007c1e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f910 	bl	8007e32 <USBD_CtlSendStatus>
      }
      break;
 8007c12:	e004      	b.n	8007c1e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f840 	bl	8007c9c <USBD_CtlError>
      break;
 8007c1c:	e000      	b.n	8007c20 <USBD_ClrFeature+0x3c>
      break;
 8007c1e:	bf00      	nop
  }
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fabb 	bl	80071ce <SWAPBYTE>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff faae 	bl	80071ce <SWAPBYTE>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff faa1 	bl	80071ce <SWAPBYTE>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	80da      	strh	r2, [r3, #6]
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fcd1 	bl	8008650 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fccd 	bl	8008650 <USBD_LL_StallEP>
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b086      	sub	sp, #24
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d036      	beq.n	8007d42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cd8:	6938      	ldr	r0, [r7, #16]
 8007cda:	f000 f836 	bl	8007d4a <USBD_GetLen>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	7812      	ldrb	r2, [r2, #0]
 8007cf6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	4413      	add	r3, r2
 8007d04:	2203      	movs	r2, #3
 8007d06:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d0e:	e013      	b.n	8007d38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4413      	add	r3, r2
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	613b      	str	r3, [r7, #16]
    idx++;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	3301      	adds	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	3301      	adds	r3, #1
 8007d36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e7      	bne.n	8007d10 <USBD_GetString+0x52>
 8007d40:	e000      	b.n	8007d44 <USBD_GetString+0x86>
    return;
 8007d42:	bf00      	nop
  }
}
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d5a:	e005      	b.n	8007d68 <USBD_GetLen+0x1e>
  {
    len++;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f5      	bne.n	8007d5c <USBD_GetLen+0x12>
  }

  return len;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	2100      	movs	r1, #0
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fcdc 	bl	8008762 <USBD_LL_Transmit>

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fccb 	bl	8008762 <USBD_LL_Transmit>

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2203      	movs	r2, #3
 8007de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fccf 	bl	80087a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	2100      	movs	r1, #0
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fcbe 	bl	80087a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e42:	2300      	movs	r3, #0
 8007e44:	2200      	movs	r2, #0
 8007e46:	2100      	movs	r1, #0
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc8a 	bl	8008762 <USBD_LL_Transmit>

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2205      	movs	r2, #5
 8007e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fc98 	bl	80087a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e84:	2200      	movs	r2, #0
 8007e86:	4912      	ldr	r1, [pc, #72]	; (8007ed0 <MX_USB_DEVICE_Init+0x50>)
 8007e88:	4812      	ldr	r0, [pc, #72]	; (8007ed4 <MX_USB_DEVICE_Init+0x54>)
 8007e8a:	f7fe fe8f 	bl	8006bac <USBD_Init>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e94:	f7f8 fd18 	bl	80008c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e98:	490f      	ldr	r1, [pc, #60]	; (8007ed8 <MX_USB_DEVICE_Init+0x58>)
 8007e9a:	480e      	ldr	r0, [pc, #56]	; (8007ed4 <MX_USB_DEVICE_Init+0x54>)
 8007e9c:	f7fe feb6 	bl	8006c0c <USBD_RegisterClass>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ea6:	f7f8 fd0f 	bl	80008c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007eaa:	490c      	ldr	r1, [pc, #48]	; (8007edc <MX_USB_DEVICE_Init+0x5c>)
 8007eac:	4809      	ldr	r0, [pc, #36]	; (8007ed4 <MX_USB_DEVICE_Init+0x54>)
 8007eae:	f7fe fe07 	bl	8006ac0 <USBD_CDC_RegisterInterface>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007eb8:	f7f8 fd06 	bl	80008c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ebc:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <MX_USB_DEVICE_Init+0x54>)
 8007ebe:	f7fe fecc 	bl	8006c5a <USBD_Start>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ec8:	f7f8 fcfe 	bl	80008c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ecc:	bf00      	nop
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000138 	.word	0x20000138
 8007ed4:	20000960 	.word	0x20000960
 8007ed8:	20000020 	.word	0x20000020
 8007edc:	20000124 	.word	0x20000124

08007ee0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4905      	ldr	r1, [pc, #20]	; (8007efc <CDC_Init_FS+0x1c>)
 8007ee8:	4805      	ldr	r0, [pc, #20]	; (8007f00 <CDC_Init_FS+0x20>)
 8007eea:	f7fe fdfe 	bl	8006aea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007eee:	4905      	ldr	r1, [pc, #20]	; (8007f04 <CDC_Init_FS+0x24>)
 8007ef0:	4803      	ldr	r0, [pc, #12]	; (8007f00 <CDC_Init_FS+0x20>)
 8007ef2:	f7fe fe18 	bl	8006b26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ef6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20001430 	.word	0x20001430
 8007f00:	20000960 	.word	0x20000960
 8007f04:	20000c30 	.word	0x20000c30

08007f08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	2b23      	cmp	r3, #35	; 0x23
 8007f2c:	d84a      	bhi.n	8007fc4 <CDC_Control_FS+0xac>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <CDC_Control_FS+0x1c>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007fc5 	.word	0x08007fc5
 8007f38:	08007fc5 	.word	0x08007fc5
 8007f3c:	08007fc5 	.word	0x08007fc5
 8007f40:	08007fc5 	.word	0x08007fc5
 8007f44:	08007fc5 	.word	0x08007fc5
 8007f48:	08007fc5 	.word	0x08007fc5
 8007f4c:	08007fc5 	.word	0x08007fc5
 8007f50:	08007fc5 	.word	0x08007fc5
 8007f54:	08007fc5 	.word	0x08007fc5
 8007f58:	08007fc5 	.word	0x08007fc5
 8007f5c:	08007fc5 	.word	0x08007fc5
 8007f60:	08007fc5 	.word	0x08007fc5
 8007f64:	08007fc5 	.word	0x08007fc5
 8007f68:	08007fc5 	.word	0x08007fc5
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fc5 	.word	0x08007fc5
 8007f74:	08007fc5 	.word	0x08007fc5
 8007f78:	08007fc5 	.word	0x08007fc5
 8007f7c:	08007fc5 	.word	0x08007fc5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08007fc5 	.word	0x08007fc5
 8007f8c:	08007fc5 	.word	0x08007fc5
 8007f90:	08007fc5 	.word	0x08007fc5
 8007f94:	08007fc5 	.word	0x08007fc5
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	08007fc5 	.word	0x08007fc5
 8007fa0:	08007fc5 	.word	0x08007fc5
 8007fa4:	08007fc5 	.word	0x08007fc5
 8007fa8:	08007fc5 	.word	0x08007fc5
 8007fac:	08007fc5 	.word	0x08007fc5
 8007fb0:	08007fc5 	.word	0x08007fc5
 8007fb4:	08007fc5 	.word	0x08007fc5
 8007fb8:	08007fc5 	.word	0x08007fc5
 8007fbc:	08007fc5 	.word	0x08007fc5
 8007fc0:	08007fc5 	.word	0x08007fc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fc4:	bf00      	nop
  }

  return (USBD_OK);
 8007fc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	480f      	ldr	r0, [pc, #60]	; (8008020 <CDC_Receive_FS+0x4c>)
 8007fe2:	f7fe fda0 	bl	8006b26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fe6:	480e      	ldr	r0, [pc, #56]	; (8008020 <CDC_Receive_FS+0x4c>)
 8007fe8:	f7fe fdb6 	bl	8006b58 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8007fec:	2240      	movs	r2, #64	; 0x40
 8007fee:	2100      	movs	r1, #0
 8007ff0:	480c      	ldr	r0, [pc, #48]	; (8008024 <CDC_Receive_FS+0x50>)
 8007ff2:	f000 fc81 	bl	80088f8 <memset>
  uint8_t len = (uint8_t)*Len;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	461a      	mov	r2, r3
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4808      	ldr	r0, [pc, #32]	; (8008024 <CDC_Receive_FS+0x50>)
 8008004:	f000 fc6a 	bl	80088dc <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	461a      	mov	r2, r3
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc72 	bl	80088f8 <memset>

  return (USBD_OK);
 8008014:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000960 	.word	0x20000960
 8008024:	200008c8 	.word	0x200008c8

08008028 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800803a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800803e:	4618      	mov	r0, r3
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2212      	movs	r2, #18
 800805c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800805e:	4b03      	ldr	r3, [pc, #12]	; (800806c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	20000154 	.word	0x20000154

08008070 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2204      	movs	r2, #4
 8008080:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008082:	4b03      	ldr	r3, [pc, #12]	; (8008090 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20000168 	.word	0x20000168

08008094 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	6039      	str	r1, [r7, #0]
 800809e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4907      	ldr	r1, [pc, #28]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080aa:	4808      	ldr	r0, [pc, #32]	; (80080cc <USBD_FS_ProductStrDescriptor+0x38>)
 80080ac:	f7ff fe07 	bl	8007cbe <USBD_GetString>
 80080b0:	e004      	b.n	80080bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4904      	ldr	r1, [pc, #16]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080b6:	4805      	ldr	r0, [pc, #20]	; (80080cc <USBD_FS_ProductStrDescriptor+0x38>)
 80080b8:	f7ff fe01 	bl	8007cbe <USBD_GetString>
  }
  return USBD_StrDesc;
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20001c30 	.word	0x20001c30
 80080cc:	0800892c 	.word	0x0800892c

080080d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	4904      	ldr	r1, [pc, #16]	; (80080f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080e0:	4804      	ldr	r0, [pc, #16]	; (80080f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080e2:	f7ff fdec 	bl	8007cbe <USBD_GetString>
  return USBD_StrDesc;
 80080e6:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20001c30 	.word	0x20001c30
 80080f4:	08008940 	.word	0x08008940

080080f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	221a      	movs	r2, #26
 8008108:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800810a:	f000 f843 	bl	8008194 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800810e:	4b02      	ldr	r3, [pc, #8]	; (8008118 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	2000016c 	.word	0x2000016c

0800811c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d105      	bne.n	800813a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4907      	ldr	r1, [pc, #28]	; (8008150 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008132:	4808      	ldr	r0, [pc, #32]	; (8008154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008134:	f7ff fdc3 	bl	8007cbe <USBD_GetString>
 8008138:	e004      	b.n	8008144 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4904      	ldr	r1, [pc, #16]	; (8008150 <USBD_FS_ConfigStrDescriptor+0x34>)
 800813e:	4805      	ldr	r0, [pc, #20]	; (8008154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008140:	f7ff fdbd 	bl	8007cbe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008144:	4b02      	ldr	r3, [pc, #8]	; (8008150 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20001c30 	.word	0x20001c30
 8008154:	08008954 	.word	0x08008954

08008158 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4907      	ldr	r1, [pc, #28]	; (800818c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800816e:	4808      	ldr	r0, [pc, #32]	; (8008190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008170:	f7ff fda5 	bl	8007cbe <USBD_GetString>
 8008174:	e004      	b.n	8008180 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800817a:	4805      	ldr	r0, [pc, #20]	; (8008190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800817c:	f7ff fd9f 	bl	8007cbe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20001c30 	.word	0x20001c30
 8008190:	08008960 	.word	0x08008960

08008194 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <Get_SerialNum+0x44>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081a0:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <Get_SerialNum+0x48>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081a6:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <Get_SerialNum+0x4c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d009      	beq.n	80081ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081ba:	2208      	movs	r2, #8
 80081bc:	4909      	ldr	r1, [pc, #36]	; (80081e4 <Get_SerialNum+0x50>)
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f814 	bl	80081ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081c4:	2204      	movs	r2, #4
 80081c6:	4908      	ldr	r1, [pc, #32]	; (80081e8 <Get_SerialNum+0x54>)
 80081c8:	68b8      	ldr	r0, [r7, #8]
 80081ca:	f000 f80f 	bl	80081ec <IntToUnicode>
  }
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	1fff7a10 	.word	0x1fff7a10
 80081dc:	1fff7a14 	.word	0x1fff7a14
 80081e0:	1fff7a18 	.word	0x1fff7a18
 80081e4:	2000016e 	.word	0x2000016e
 80081e8:	2000017e 	.word	0x2000017e

080081ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]
 8008202:	e027      	b.n	8008254 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0f1b      	lsrs	r3, r3, #28
 8008208:	2b09      	cmp	r3, #9
 800820a:	d80b      	bhi.n	8008224 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	0f1b      	lsrs	r3, r3, #28
 8008210:	b2da      	uxtb	r2, r3
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4619      	mov	r1, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	440b      	add	r3, r1
 800821c:	3230      	adds	r2, #48	; 0x30
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e00a      	b.n	800823a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	0f1b      	lsrs	r3, r3, #28
 8008228:	b2da      	uxtb	r2, r3
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4619      	mov	r1, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	440b      	add	r3, r1
 8008234:	3237      	adds	r2, #55	; 0x37
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	3301      	adds	r3, #1
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4413      	add	r3, r2
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	3301      	adds	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]
 8008254:	7dfa      	ldrb	r2, [r7, #23]
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	429a      	cmp	r2, r3
 800825a:	d3d3      	bcc.n	8008204 <IntToUnicode+0x18>
  }
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	60da      	str	r2, [r3, #12]
 8008282:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800828c:	d13a      	bne.n	8008304 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	4b1e      	ldr	r3, [pc, #120]	; (800830c <HAL_PCD_MspInit+0xa0>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	4a1d      	ldr	r2, [pc, #116]	; (800830c <HAL_PCD_MspInit+0xa0>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	6313      	str	r3, [r2, #48]	; 0x30
 800829e:	4b1b      	ldr	r3, [pc, #108]	; (800830c <HAL_PCD_MspInit+0xa0>)
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80082aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80082ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b0:	2302      	movs	r3, #2
 80082b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082b8:	2303      	movs	r3, #3
 80082ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082bc:	230a      	movs	r3, #10
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c0:	f107 0314 	add.w	r3, r7, #20
 80082c4:	4619      	mov	r1, r3
 80082c6:	4812      	ldr	r0, [pc, #72]	; (8008310 <HAL_PCD_MspInit+0xa4>)
 80082c8:	f7f9 fc0c 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082cc:	4b0f      	ldr	r3, [pc, #60]	; (800830c <HAL_PCD_MspInit+0xa0>)
 80082ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d0:	4a0e      	ldr	r2, [pc, #56]	; (800830c <HAL_PCD_MspInit+0xa0>)
 80082d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d6:	6353      	str	r3, [r2, #52]	; 0x34
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	4b0b      	ldr	r3, [pc, #44]	; (800830c <HAL_PCD_MspInit+0xa0>)
 80082de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e0:	4a0a      	ldr	r2, [pc, #40]	; (800830c <HAL_PCD_MspInit+0xa0>)
 80082e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082e6:	6453      	str	r3, [r2, #68]	; 0x44
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <HAL_PCD_MspInit+0xa0>)
 80082ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082f4:	2200      	movs	r2, #0
 80082f6:	2100      	movs	r1, #0
 80082f8:	2043      	movs	r0, #67	; 0x43
 80082fa:	f7f9 fbbc 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082fe:	2043      	movs	r0, #67	; 0x43
 8008300:	f7f9 fbd5 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008304:	bf00      	nop
 8008306:	3728      	adds	r7, #40	; 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40023800 	.word	0x40023800
 8008310:	40020000 	.word	0x40020000

08008314 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f7fe fce0 	bl	8006cf0 <USBD_LL_SetupStage>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	4619      	mov	r1, r3
 8008362:	f7fe fd1a 	bl	8006d9a <USBD_LL_DataOutStage>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	3348      	adds	r3, #72	; 0x48
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	4619      	mov	r1, r3
 8008396:	f7fe fd63 	bl	8006e60 <USBD_LL_DataInStage>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe fe77 	bl	80070a4 <USBD_LL_SOF>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083d2:	2300      	movs	r3, #0
 80083d4:	73fb      	strb	r3, [r7, #15]
 80083d6:	e008      	b.n	80083ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d102      	bne.n	80083e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
 80083e4:	e001      	b.n	80083ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083e6:	f7f8 fa6f 	bl	80008c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083f0:	7bfa      	ldrb	r2, [r7, #15]
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fe fe17 	bl	8007028 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fdc3 	bl	8006f8c <USBD_LL_Reset>
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fe12 	bl	8007048 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <HAL_PCD_SuspendCallback+0x48>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	4a03      	ldr	r2, [pc, #12]	; (8008458 <HAL_PCD_SuspendCallback+0x48>)
 800844a:	f043 0306 	orr.w	r3, r3, #6
 800844e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	e000ed00 	.word	0xe000ed00

0800845c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fe02 	bl	8007074 <USBD_LL_Resume>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fe50 	bl	8007134 <USBD_LL_IsoOUTIncomplete>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fe18 	bl	80070e8 <USBD_LL_IsoINIncomplete>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fe56 	bl	8007180 <USBD_LL_DevConnected>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fe53 	bl	8007196 <USBD_LL_DevDisconnected>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d13c      	bne.n	8008582 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008508:	4a20      	ldr	r2, [pc, #128]	; (800858c <USBD_LL_Init+0x94>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a1e      	ldr	r2, [pc, #120]	; (800858c <USBD_LL_Init+0x94>)
 8008514:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008518:	4b1c      	ldr	r3, [pc, #112]	; (800858c <USBD_LL_Init+0x94>)
 800851a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800851e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008520:	4b1a      	ldr	r3, [pc, #104]	; (800858c <USBD_LL_Init+0x94>)
 8008522:	2204      	movs	r2, #4
 8008524:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008526:	4b19      	ldr	r3, [pc, #100]	; (800858c <USBD_LL_Init+0x94>)
 8008528:	2202      	movs	r2, #2
 800852a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800852c:	4b17      	ldr	r3, [pc, #92]	; (800858c <USBD_LL_Init+0x94>)
 800852e:	2200      	movs	r2, #0
 8008530:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <USBD_LL_Init+0x94>)
 8008534:	2202      	movs	r2, #2
 8008536:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008538:	4b14      	ldr	r3, [pc, #80]	; (800858c <USBD_LL_Init+0x94>)
 800853a:	2200      	movs	r2, #0
 800853c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800853e:	4b13      	ldr	r3, [pc, #76]	; (800858c <USBD_LL_Init+0x94>)
 8008540:	2200      	movs	r2, #0
 8008542:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008544:	4b11      	ldr	r3, [pc, #68]	; (800858c <USBD_LL_Init+0x94>)
 8008546:	2200      	movs	r2, #0
 8008548:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800854a:	4b10      	ldr	r3, [pc, #64]	; (800858c <USBD_LL_Init+0x94>)
 800854c:	2200      	movs	r2, #0
 800854e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <USBD_LL_Init+0x94>)
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008556:	480d      	ldr	r0, [pc, #52]	; (800858c <USBD_LL_Init+0x94>)
 8008558:	f7fa ff01 	bl	800335e <HAL_PCD_Init>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008562:	f7f8 f9b1 	bl	80008c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008566:	2180      	movs	r1, #128	; 0x80
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <USBD_LL_Init+0x94>)
 800856a:	f7fc f85e 	bl	800462a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800856e:	2240      	movs	r2, #64	; 0x40
 8008570:	2100      	movs	r1, #0
 8008572:	4806      	ldr	r0, [pc, #24]	; (800858c <USBD_LL_Init+0x94>)
 8008574:	f7fc f812 	bl	800459c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008578:	2280      	movs	r2, #128	; 0x80
 800857a:	2101      	movs	r1, #1
 800857c:	4803      	ldr	r0, [pc, #12]	; (800858c <USBD_LL_Init+0x94>)
 800857e:	f7fc f80d 	bl	800459c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20001e30 	.word	0x20001e30

08008590 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fa fff6 	bl	8003598 <HAL_PCD_Start>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f942 	bl	800883c <USBD_Get_USB_Status>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	4608      	mov	r0, r1
 80085d0:	4611      	mov	r1, r2
 80085d2:	461a      	mov	r2, r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	70fb      	strb	r3, [r7, #3]
 80085d8:	460b      	mov	r3, r1
 80085da:	70bb      	strb	r3, [r7, #2]
 80085dc:	4613      	mov	r3, r2
 80085de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085ee:	78bb      	ldrb	r3, [r7, #2]
 80085f0:	883a      	ldrh	r2, [r7, #0]
 80085f2:	78f9      	ldrb	r1, [r7, #3]
 80085f4:	f7fb fbda 	bl	8003dac <HAL_PCD_EP_Open>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f91c 	bl	800883c <USBD_Get_USB_Status>
 8008604:	4603      	mov	r3, r0
 8008606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008608:	7bbb      	ldrb	r3, [r7, #14]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	460b      	mov	r3, r1
 800861c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f7fb fc23 	bl	8003e7c <HAL_PCD_EP_Close>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f8fd 	bl	800883c <USBD_Get_USB_Status>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008646:	7bbb      	ldrb	r3, [r7, #14]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f7fb fcfb 	bl	800406a <HAL_PCD_EP_SetStall>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 f8de 	bl	800883c <USBD_Get_USB_Status>
 8008680:	4603      	mov	r3, r0
 8008682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008684:	7bbb      	ldrb	r3, [r7, #14]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086a8:	78fa      	ldrb	r2, [r7, #3]
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fb fd40 	bl	8004132 <HAL_PCD_EP_ClrStall>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f8bf 	bl	800883c <USBD_Get_USB_Status>
 80086be:	4603      	mov	r3, r0
 80086c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	da0b      	bge.n	8008700 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	4613      	mov	r3, r2
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	333e      	adds	r3, #62	; 0x3e
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	e00b      	b.n	8008718 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008716:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800873e:	78fa      	ldrb	r2, [r7, #3]
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f7fb fb0d 	bl	8003d62 <HAL_PCD_SetAddress>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f874 	bl	800883c <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	460b      	mov	r3, r1
 8008770:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008780:	7af9      	ldrb	r1, [r7, #11]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	f7fb fc26 	bl	8003fd6 <HAL_PCD_EP_Transmit>
 800878a:	4603      	mov	r3, r0
 800878c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f853 	bl	800883c <USBD_Get_USB_Status>
 8008796:	4603      	mov	r3, r0
 8008798:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800879a:	7dbb      	ldrb	r3, [r7, #22]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	460b      	mov	r3, r1
 80087b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087c2:	7af9      	ldrb	r1, [r7, #11]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	f7fb fba2 	bl	8003f10 <HAL_PCD_EP_Receive>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f832 	bl	800883c <USBD_Get_USB_Status>
 80087d8:	4603      	mov	r3, r0
 80087da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	4611      	mov	r1, r2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fb fbd2 	bl	8003fa6 <HAL_PCD_EP_GetRxCount>
 8008802:	4603      	mov	r3, r0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008814:	4b03      	ldr	r3, [pc, #12]	; (8008824 <USBD_static_malloc+0x18>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	200005ac 	.word	0x200005ac

08008828 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d817      	bhi.n	8008880 <USBD_Get_USB_Status+0x44>
 8008850:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <USBD_Get_USB_Status+0x1c>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	08008869 	.word	0x08008869
 800885c:	0800886f 	.word	0x0800886f
 8008860:	08008875 	.word	0x08008875
 8008864:	0800887b 	.word	0x0800887b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
    break;
 800886c:	e00b      	b.n	8008886 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800886e:	2303      	movs	r3, #3
 8008870:	73fb      	strb	r3, [r7, #15]
    break;
 8008872:	e008      	b.n	8008886 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
    break;
 8008878:	e005      	b.n	8008886 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	73fb      	strb	r3, [r7, #15]
    break;
 800887e:	e002      	b.n	8008886 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008880:	2303      	movs	r3, #3
 8008882:	73fb      	strb	r3, [r7, #15]
    break;
 8008884:	bf00      	nop
  }
  return usb_status;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <__libc_init_array>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	4d0d      	ldr	r5, [pc, #52]	; (80088cc <__libc_init_array+0x38>)
 8008898:	4c0d      	ldr	r4, [pc, #52]	; (80088d0 <__libc_init_array+0x3c>)
 800889a:	1b64      	subs	r4, r4, r5
 800889c:	10a4      	asrs	r4, r4, #2
 800889e:	2600      	movs	r6, #0
 80088a0:	42a6      	cmp	r6, r4
 80088a2:	d109      	bne.n	80088b8 <__libc_init_array+0x24>
 80088a4:	4d0b      	ldr	r5, [pc, #44]	; (80088d4 <__libc_init_array+0x40>)
 80088a6:	4c0c      	ldr	r4, [pc, #48]	; (80088d8 <__libc_init_array+0x44>)
 80088a8:	f000 f82e 	bl	8008908 <_init>
 80088ac:	1b64      	subs	r4, r4, r5
 80088ae:	10a4      	asrs	r4, r4, #2
 80088b0:	2600      	movs	r6, #0
 80088b2:	42a6      	cmp	r6, r4
 80088b4:	d105      	bne.n	80088c2 <__libc_init_array+0x2e>
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088bc:	4798      	blx	r3
 80088be:	3601      	adds	r6, #1
 80088c0:	e7ee      	b.n	80088a0 <__libc_init_array+0xc>
 80088c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c6:	4798      	blx	r3
 80088c8:	3601      	adds	r6, #1
 80088ca:	e7f2      	b.n	80088b2 <__libc_init_array+0x1e>
 80088cc:	080096ec 	.word	0x080096ec
 80088d0:	080096ec 	.word	0x080096ec
 80088d4:	080096ec 	.word	0x080096ec
 80088d8:	080096f0 	.word	0x080096f0

080088dc <memcpy>:
 80088dc:	440a      	add	r2, r1
 80088de:	4291      	cmp	r1, r2
 80088e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088e4:	d100      	bne.n	80088e8 <memcpy+0xc>
 80088e6:	4770      	bx	lr
 80088e8:	b510      	push	{r4, lr}
 80088ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f2:	4291      	cmp	r1, r2
 80088f4:	d1f9      	bne.n	80088ea <memcpy+0xe>
 80088f6:	bd10      	pop	{r4, pc}

080088f8 <memset>:
 80088f8:	4402      	add	r2, r0
 80088fa:	4603      	mov	r3, r0
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d100      	bne.n	8008902 <memset+0xa>
 8008900:	4770      	bx	lr
 8008902:	f803 1b01 	strb.w	r1, [r3], #1
 8008906:	e7f9      	b.n	80088fc <memset+0x4>

08008908 <_init>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	bf00      	nop
 800890c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890e:	bc08      	pop	{r3}
 8008910:	469e      	mov	lr, r3
 8008912:	4770      	bx	lr

08008914 <_fini>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr
