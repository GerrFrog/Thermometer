
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ccc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002220  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b074  0800b074  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b07c  0800b07c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b07c  0800b07c  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b080  0800b080  0001b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800b084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          0000205c  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021ec  200021ec  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001db8b  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2e  00000000  00000000  0003dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00041780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  000426a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242e2  00000000  00000000  00043480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c05  00000000  00000000  00067762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70b5  00000000  00000000  0007c367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014341c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004038  00000000  00000000  00143470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e3c 	.word	0x08008e3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08008e3c 	.word	0x08008e3c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <dtoc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dtoc(double digit, char* arr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ca6:	6078      	str	r0, [r7, #4]
	if (digit <= 10.0)
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <dtoc+0x154>)
 8000cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cb2:	f7ff fde1 	bl	8000878 <__aeabi_dcmple>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d017      	beq.n	8000cec <dtoc+0x50>
	{
		arr[0] = 'l';
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	226c      	movs	r2, #108	; 0x6c
 8000cc0:	701a      	strb	r2, [r3, #0]
		arr[1] = 'e';
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	2265      	movs	r2, #101	; 0x65
 8000cc8:	701a      	strb	r2, [r3, #0]
		arr[2] = 's';
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	2273      	movs	r2, #115	; 0x73
 8000cd0:	701a      	strb	r2, [r3, #0]
		arr[3] = 's';
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	2273      	movs	r2, #115	; 0x73
 8000cd8:	701a      	strb	r2, [r3, #0]
		arr[4] = '\0';
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		arr[5] = '\0';
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3305      	adds	r3, #5
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
		return;
 8000cea:	e07d      	b.n	8000de8 <dtoc+0x14c>
	}
	int l_digit = digit * 100.0;
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <dtoc+0x158>)
 8000cf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf6:	f7ff fa6f 	bl	80001d8 <__aeabi_dmul>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff fdd7 	bl	80008b4 <__aeabi_d2iz>
 8000d06:	4603      	mov	r3, r0
 8000d08:	617b      	str	r3, [r7, #20]
	arr[7] = '\0';
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
	arr[6] = 'C';
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3306      	adds	r3, #6
 8000d16:	2243      	movs	r2, #67	; 0x43
 8000d18:	701a      	strb	r2, [r3, #0]
	arr[5] = ' ';
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3305      	adds	r3, #5
 8000d1e:	2220      	movs	r2, #32
 8000d20:	701a      	strb	r2, [r3, #0]
	arr[4] = l_digit % 10 + '0';
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <dtoc+0x15c>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	1099      	asrs	r1, r3, #2
 8000d2c:	17d3      	asrs	r3, r2, #31
 8000d2e:	1ac9      	subs	r1, r1, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad1      	subs	r1, r2, r3
 8000d3a:	b2ca      	uxtb	r2, r1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3304      	adds	r3, #4
 8000d40:	3230      	adds	r2, #48	; 0x30
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <dtoc+0x15c>)
 8000d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4e:	1092      	asrs	r2, r2, #2
 8000d50:	17db      	asrs	r3, r3, #31
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
	arr[3] = l_digit % 10 + '0';
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <dtoc+0x15c>)
 8000d5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d5e:	1099      	asrs	r1, r3, #2
 8000d60:	17d3      	asrs	r3, r2, #31
 8000d62:	1ac9      	subs	r1, r1, r3
 8000d64:	460b      	mov	r3, r1
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	1ad1      	subs	r1, r2, r3
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3303      	adds	r3, #3
 8000d74:	3230      	adds	r2, #48	; 0x30
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <dtoc+0x15c>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1092      	asrs	r2, r2, #2
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
	arr[2] = ',';
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	222c      	movs	r2, #44	; 0x2c
 8000d90:	701a      	strb	r2, [r3, #0]
	arr[1] = l_digit % 10 + '0';
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <dtoc+0x15c>)
 8000d96:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9a:	1099      	asrs	r1, r3, #2
 8000d9c:	17d3      	asrs	r3, r2, #31
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	1ad1      	subs	r1, r2, r3
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	3230      	adds	r2, #48	; 0x30
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <dtoc+0x15c>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	1092      	asrs	r2, r2, #2
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
	arr[0] = l_digit % 10 + '0';
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <dtoc+0x15c>)
 8000dca:	fb83 1302 	smull	r1, r3, r3, r2
 8000dce:	1099      	asrs	r1, r3, #2
 8000dd0:	17d3      	asrs	r3, r2, #31
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	1ad1      	subs	r1, r2, r3
 8000dde:	b2cb      	uxtb	r3, r1
 8000de0:	3330      	adds	r3, #48	; 0x30
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	701a      	strb	r2, [r3, #0]
}
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40240000 	.word	0x40240000
 8000df4:	40590000 	.word	0x40590000
 8000df8:	66666667 	.word	0x66666667

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b5b0      	push	{r4, r5, r7, lr}
 8000dfe:	b09e      	sub	sp, #120	; 0x78
 8000e00:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f001 f883 	bl	8001f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f8e7 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f000 f9a9 	bl	8001160 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e0e:	f000 f94b 	bl	80010a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e12:	f000 f977 	bl	8001104 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000e16:	f007 faa7 	bl	8008368 <MX_USB_DEVICE_Init>
  // TODO:temp1 - I2C1, temp2 - I2C2, display - I2C3
  int mlx_address;
  float float_temp;
  char char_temp[8];
  uint8_t in_buff[2];
  char initializing_status[] = "initial...";
 8000e1a:	4a67      	ldr	r2, [pc, #412]	; (8000fb8 <main+0x1bc>)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e20:	c303      	stmia	r3!, {r0, r1}
 8000e22:	801a      	strh	r2, [r3, #0]
 8000e24:	3302      	adds	r3, #2
 8000e26:	0c12      	lsrs	r2, r2, #16
 8000e28:	701a      	strb	r2, [r3, #0]
  uint8_t *message = "Temperature:\n";
 8000e2a:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <main+0x1c0>)
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *end = '\n';
 8000e2e:	230a      	movs	r3, #10
 8000e30:	623b      	str	r3, [r7, #32]

  // Initialize Display
  if (SSD1306_Init(hi2c2) != 1)
 8000e32:	4c63      	ldr	r4, [pc, #396]	; (8000fc0 <main+0x1c4>)
 8000e34:	4668      	mov	r0, sp
 8000e36:	f104 0310 	add.w	r3, r4, #16
 8000e3a:	2244      	movs	r2, #68	; 0x44
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f007 ffe7 	bl	8008e10 <memcpy>
 8000e42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e46:	f000 fb29 	bl	800149c <SSD1306_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d00d      	beq.n	8000e6c <main+0x70>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e54:	485b      	ldr	r0, [pc, #364]	; (8000fc4 <main+0x1c8>)
 8000e56:	f001 fbce 	bl	80025f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5e:	f001 f8c7 	bl	8001ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	4857      	ldr	r0, [pc, #348]	; (8000fc4 <main+0x1c8>)
 8000e68:	f001 fbc5 	bl	80025f6 <HAL_GPIO_TogglePin>
  }

  // Initialize MLX Sensor
  SSD1306_GotoXY (0,0);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fdf2 	bl	8001a58 <SSD1306_GotoXY>
  SSD1306_Puts (initializing_status, &Font_11x18, 1);
 8000e74:	463b      	mov	r3, r7
 8000e76:	2201      	movs	r2, #1
 8000e78:	4953      	ldr	r1, [pc, #332]	; (8000fc8 <main+0x1cc>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fe82 	bl	8001b84 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000e80:	f000 fd22 	bl	80018c8 <SSD1306_UpdateScreen>

  mlx_address = MLX90614_ScanDevices(hi2c1);
 8000e84:	4c51      	ldr	r4, [pc, #324]	; (8000fcc <main+0x1d0>)
 8000e86:	4668      	mov	r0, sp
 8000e88:	f104 0310 	add.w	r3, r4, #16
 8000e8c:	2244      	movs	r2, #68	; 0x44
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f007 ffbe 	bl	8008e10 <memcpy>
 8000e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e98:	f000 faaa 	bl	80013f0 <MLX90614_ScanDevices>
 8000e9c:	61f8      	str	r0, [r7, #28]

  if (HAL_I2C_Mem_Read(&hi2c1, (0x00<<1), 0x07, 1, in_buff, 2, 100) != HAL_OK)
 8000e9e:	2364      	movs	r3, #100	; 0x64
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2207      	movs	r2, #7
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4846      	ldr	r0, [pc, #280]	; (8000fcc <main+0x1d0>)
 8000eb4:	f001 fdfc 	bl	8002ab0 <HAL_I2C_Mem_Read>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00d      	beq.n	8000eda <main+0xde>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec2:	4840      	ldr	r0, [pc, #256]	; (8000fc4 <main+0x1c8>)
 8000ec4:	f001 fb97 	bl	80025f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f001 f891 	bl	8001ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed2:	483c      	ldr	r0, [pc, #240]	; (8000fc4 <main+0x1c8>)
 8000ed4:	f001 fb8f 	bl	80025f6 <HAL_GPIO_TogglePin>
 8000ed8:	e00c      	b.n	8000ef4 <main+0xf8>
  } else {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <main+0x1c8>)
 8000ee0:	f001 fb89 	bl	80025f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000ee4:	2064      	movs	r0, #100	; 0x64
 8000ee6:	f001 f883 	bl	8001ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	4835      	ldr	r0, [pc, #212]	; (8000fc4 <main+0x1c8>)
 8000ef0:	f001 fb81 	bl	80025f6 <HAL_GPIO_TogglePin>
  }

  SSD1306_Clear();
 8000ef4:	f000 fe6b 	bl	8001bce <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	float_temp = MLX90614_ReadTemp(mlx_address, 0x07, hi2c1);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	b2dd      	uxtb	r5, r3
 8000efc:	4c33      	ldr	r4, [pc, #204]	; (8000fcc <main+0x1d0>)
 8000efe:	4668      	mov	r0, sp
 8000f00:	f104 0308 	add.w	r3, r4, #8
 8000f04:	224c      	movs	r2, #76	; 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f007 ff82 	bl	8008e10 <memcpy>
 8000f0c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f10:	2107      	movs	r1, #7
 8000f12:	4628      	mov	r0, r5
 8000f14:	f000 fa20 	bl	8001358 <MLX90614_ReadTemp>
 8000f18:	ed87 0a06 	vstr	s0, [r7, #24]
	dtoc(float_temp, char_temp);
 8000f1c:	69b8      	ldr	r0, [r7, #24]
 8000f1e:	f7ff fbe9 	bl	80006f4 <__aeabi_f2d>
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	ec45 4b10 	vmov	d0, r4, r5
 8000f30:	f7ff feb4 	bl	8000c9c <dtoc>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000f34:	2101      	movs	r1, #1
 8000f36:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <main+0x1d4>)
 8000f38:	f001 fb2c 	bl	8002594 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10a      	bne.n	8000f58 <main+0x15c>
	{
		SSD1306_GotoXY(0, 0);
 8000f42:	2100      	movs	r1, #0
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 fd87 	bl	8001a58 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp, &Font_16x26, 1);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4920      	ldr	r1, [pc, #128]	; (8000fd4 <main+0x1d8>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fe16 	bl	8001b84 <SSD1306_Puts>
	}

	SSD1306_GotoXY(0, 29);
 8000f58:	211d      	movs	r1, #29
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 fd7c 	bl	8001a58 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp, &Font_11x18, 1);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2201      	movs	r2, #1
 8000f66:	4918      	ldr	r1, [pc, #96]	; (8000fc8 <main+0x1cc>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fe0b 	bl	8001b84 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8000f6e:	f000 fcab 	bl	80018c8 <SSD1306_UpdateScreen>

	CDC_Transmit_FS(message, strlen(message));
 8000f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f74:	f7ff f928 	bl	80001c8 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f80:	f007 fac6 	bl	8008510 <CDC_Transmit_FS>
	CDC_Transmit_FS((uint8_t*)char_temp, strlen((uint8_t*)char_temp));
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f91d 	bl	80001c8 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 fab9 	bl	8008510 <CDC_Transmit_FS>
	CDC_Transmit_FS(end, strlen(end));
 8000f9e:	6a38      	ldr	r0, [r7, #32]
 8000fa0:	f7ff f912 	bl	80001c8 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6a38      	ldr	r0, [r7, #32]
 8000fac:	f007 fab0 	bl	8008510 <CDC_Transmit_FS>

	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 f81d 	bl	8001ff0 <HAL_Delay>
	float_temp = MLX90614_ReadTemp(mlx_address, 0x07, hi2c1);
 8000fb6:	e79f      	b.n	8000ef8 <main+0xfc>
 8000fb8:	08008e64 	.word	0x08008e64
 8000fbc:	08008e54 	.word	0x08008e54
 8000fc0:	20000828 	.word	0x20000828
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	200007d4 	.word	0x200007d4
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 ff20 	bl	8008e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <SystemClock_Config+0xc8>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <SystemClock_Config+0xc8>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <SystemClock_Config+0xc8>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <SystemClock_Config+0xcc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <SystemClock_Config+0xcc>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <SystemClock_Config+0xcc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001048:	2310      	movs	r3, #16
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800104c:	23c0      	movs	r3, #192	; 0xc0
 800104e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001054:	2304      	movs	r3, #4
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fd45 	bl	8004aec <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001068:	f000 f8e8 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 ffa8 	bl	8004fdc <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001092:	f000 f8d3 	bl	800123c <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <MX_I2C1_Init+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_I2C1_Init+0x58>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010e6:	f001 faa1 	bl	800262c <HAL_I2C_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f0:	f000 f8a4 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200007d4 	.word	0x200007d4
 80010fc:	40005400 	.word	0x40005400
 8001100:	000186a0 	.word	0x000186a0

08001104 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C2_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_I2C2_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C2_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_I2C2_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C2_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_I2C2_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_I2C2_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_I2C2_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2C2_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2C2_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2C2_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2C2_Init+0x50>)
 8001142:	f001 fa73 	bl	800262c <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f876 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000828 	.word	0x20000828
 8001158:	40005800 	.word	0x40005800
 800115c:	00061a80 	.word	0x00061a80

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <MX_GPIO_Init+0xd0>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a25      	ldr	r2, [pc, #148]	; (8001230 <MX_GPIO_Init+0xd0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_GPIO_Init+0xd4>)
 80011ee:	f001 f9e9 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_GPIO_Init+0xd8>)
 8001206:	f001 f829 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800120a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_GPIO_Init+0xd4>)
 8001224:	f001 f81a 	bl	800225c <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40020000 	.word	0x40020000

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8001254:	2300      	movs	r3, #0
 8001256:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8001258:	e015      	b.n	8001286 <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b29a      	uxth	r2, r3
 8001264:	89fb      	ldrh	r3, [r7, #14]
 8001266:	4053      	eors	r3, r2
 8001268:	b29b      	uxth	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 800126e:	89bb      	ldrh	r3, [r7, #12]
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <CRC8_Calc+0x58>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	b21a      	sxth	r2, r3
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	4053      	eors	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	70fa      	strb	r2, [r7, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e4      	bne.n	800125a <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 8001290:	89fb      	ldrh	r3, [r7, #14]
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	08008eb4 	.word	0x08008eb4

080012a4 <MLX90614_ReadReg>:

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c) {
 80012a4:	b082      	sub	sp, #8
 80012a6:	b590      	push	{r4, r7, lr}
 80012a8:	b08b      	sub	sp, #44	; 0x2c
 80012aa:	af04      	add	r7, sp, #16
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	460b      	mov	r3, r1
 80012b4:	71bb      	strb	r3, [r7, #6]
 80012b6:	4613      	mov	r3, r2
 80012b8:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	b299      	uxth	r1, r3
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2303      	movs	r3, #3
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	f001 fbe9 	bl	8002ab0 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 80012f6:	7c3b      	ldrb	r3, [r7, #16]
 80012f8:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 80012fa:	7c7b      	ldrb	r3, [r7, #17]
 80012fc:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2105      	movs	r1, #5
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff9f 	bl	8001248 <CRC8_Calc>
 800130a:	4603      	mov	r3, r0
 800130c:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 800130e:	7c7b      	ldrb	r3, [r7, #17]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	7c3b      	ldrb	r3, [r7, #16]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 800131e:	7cbb      	ldrb	r3, [r7, #18]
 8001320:	7d7a      	ldrb	r2, [r7, #21]
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <MLX90614_ReadReg+0x86>
		data = 0x0000;
 8001326:	2300      	movs	r3, #0
 8001328:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10b      	bne.n	8001348 <MLX90614_ReadReg+0xa4>
 8001330:	7cbb      	ldrb	r3, [r7, #18]
 8001332:	8afc      	ldrh	r4, [r7, #22]
 8001334:	79b8      	ldrb	r0, [r7, #6]
 8001336:	79f9      	ldrb	r1, [r7, #7]
 8001338:	7d7a      	ldrb	r2, [r7, #21]
 800133a:	9201      	str	r2, [sp, #4]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4623      	mov	r3, r4
 8001340:	4602      	mov	r2, r0
 8001342:	2001      	movs	r0, #1
 8001344:	f000 f896 	bl	8001474 <MLX90614_SendDebugMsg>

	//HAL_Delay(1);
	return data;
 8001348:	8afb      	ldrh	r3, [r7, #22]
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001354:	b002      	add	sp, #8
 8001356:	4770      	bx	lr

08001358 <MLX90614_ReadTemp>:
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr, I2C_HandleTypeDef hi2c) {
 8001358:	b082      	sub	sp, #8
 800135a:	b5b0      	push	{r4, r5, r7, lr}
 800135c:	b098      	sub	sp, #96	; 0x60
 800135e:	af14      	add	r7, sp, #80	; 0x50
 8001360:	f107 0420 	add.w	r4, r7, #32
 8001364:	e884 000c 	stmia.w	r4, {r2, r3}
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	460b      	mov	r3, r1
 800136e:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF, hi2c);
 8001370:	79bd      	ldrb	r5, [r7, #6]
 8001372:	79fc      	ldrb	r4, [r7, #7]
 8001374:	4668      	mov	r0, sp
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	2250      	movs	r2, #80	; 0x50
 800137c:	4619      	mov	r1, r3
 800137e:	f007 fd47 	bl	8008e10 <memcpy>
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2200      	movs	r2, #0
 8001386:	4629      	mov	r1, r5
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff ff8b 	bl	80012a4 <MLX90614_ReadReg>
 800138e:	4603      	mov	r3, r0
 8001390:	81fb      	strh	r3, [r7, #14]

	temp = data*0.02 - 273.15;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f99b 	bl	80006d0 <__aeabi_i2d>
 800139a:	a311      	add	r3, pc, #68	; (adr r3, 80013e0 <MLX90614_ReadTemp+0x88>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff1a 	bl	80001d8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	a30e      	add	r3, pc, #56	; (adr r3, 80013e8 <MLX90614_ReadTemp+0x90>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f83f 	bl	8000434 <__aeabi_dsub>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff faa1 	bl	8000904 <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	60bb      	str	r3, [r7, #8]

	return temp;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	ee07 3a90 	vmov	s15, r3
}
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013d8:	b002      	add	sp, #8
 80013da:	4770      	bx	lr
 80013dc:	f3af 8000 	nop.w
 80013e0:	47ae147b 	.word	0x47ae147b
 80013e4:	3f947ae1 	.word	0x3f947ae1
 80013e8:	66666666 	.word	0x66666666
 80013ec:	40711266 	.word	0x40711266

080013f0 <MLX90614_ScanDevices>:
int MLX90614_ScanDevices (I2C_HandleTypeDef hi2c) {
 80013f0:	b084      	sub	sp, #16
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f107 0c10 	add.w	ip, r7, #16
 80013fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;
	for (int i = 0; i<126; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	e029      	b.n	800145a <MLX90614_ScanDevices+0x6a>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	b29b      	uxth	r3, r3
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b299      	uxth	r1, r3
 800140e:	2302      	movs	r3, #2
 8001410:	2202      	movs	r2, #2
 8001412:	f107 0010 	add.w	r0, r7, #16
 8001416:	f001 fd71 	bl	8002efc <HAL_I2C_IsDeviceReady>
 800141a:	4603      	mov	r3, r0
 800141c:	70fb      	strb	r3, [r7, #3]
		if (result != HAL_OK)
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <MLX90614_ScanDevices+0x3e>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <MLX90614_ScanDevices+0x80>)
 800142a:	f001 f8e4 	bl	80025f6 <HAL_GPIO_TogglePin>
		}
		if (result == HAL_OK)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10f      	bne.n	8001454 <MLX90614_ScanDevices+0x64>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <MLX90614_ScanDevices+0x80>)
 800143a:	f001 f8dc 	bl	80025f6 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800143e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001442:	f000 fdd5 	bl	8001ff0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <MLX90614_ScanDevices+0x80>)
 800144c:	f001 f8d3 	bl	80025f6 <HAL_GPIO_TogglePin>
		  return i;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	e005      	b.n	8001460 <MLX90614_ScanDevices+0x70>
	for (int i = 0; i<126; i++)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b7d      	cmp	r3, #125	; 0x7d
 800145e:	ddd2      	ble.n	8001406 <MLX90614_ScanDevices+0x16>
		}
	}
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800146a:	b004      	add	sp, #16
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40020c00 	.word	0x40020c00

08001474 <MLX90614_SendDebugMsg>:
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc) {
 8001474:	b490      	push	{r4, r7}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	4603      	mov	r3, r0
 8001488:	71bb      	strb	r3, [r7, #6]
 800148a:	460b      	mov	r3, r1
 800148c:	717b      	strb	r3, [r7, #5]
 800148e:	4613      	mov	r3, r2
 8001490:	807b      	strh	r3, [r7, #2]
	}
	else if (op_type == MLX90614_DBG_MSG_R) {

	}

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bc90      	pop	{r4, r7}
 800149a:	4770      	bx	lr

0800149c <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 800149c:	b084      	sub	sp, #16
 800149e:	b590      	push	{r4, r7, lr}
 80014a0:	b097      	sub	sp, #92	; 0x5c
 80014a2:	af14      	add	r7, sp, #80	; 0x50
 80014a4:	f107 0418 	add.w	r4, r7, #24
 80014a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 80014ac:	f000 fb98 	bl	8001be0 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <SSD1306_Init+0x44>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2254      	movs	r2, #84	; 0x54
 80014ba:	4619      	mov	r1, r3
 80014bc:	f007 fca8 	bl	8008e10 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014c4:	2201      	movs	r2, #1
 80014c6:	2178      	movs	r1, #120	; 0x78
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <SSD1306_Init+0x44>)
 80014ca:	f001 fd17 	bl	8002efc <HAL_I2C_IsDeviceReady>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e1ee      	b.n	80018b6 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 80014d8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014de:	e004      	b.n	80014ea <SSD1306_Init+0x4e>
 80014e0:	200008bc 	.word	0x200008bc
		p--;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014f0:	4ce1      	ldr	r4, [pc, #900]	; (8001878 <SSD1306_Init+0x3dc>)
 80014f2:	23ae      	movs	r3, #174	; 0xae
 80014f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80014f6:	4668      	mov	r0, sp
 80014f8:	f104 0308 	add.w	r3, r4, #8
 80014fc:	224c      	movs	r2, #76	; 0x4c
 80014fe:	4619      	mov	r1, r3
 8001500:	f007 fc86 	bl	8008e10 <memcpy>
 8001504:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 fbc6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001510:	4cd9      	ldr	r4, [pc, #868]	; (8001878 <SSD1306_Init+0x3dc>)
 8001512:	2320      	movs	r3, #32
 8001514:	9313      	str	r3, [sp, #76]	; 0x4c
 8001516:	4668      	mov	r0, sp
 8001518:	f104 0308 	add.w	r3, r4, #8
 800151c:	224c      	movs	r2, #76	; 0x4c
 800151e:	4619      	mov	r1, r3
 8001520:	f007 fc76 	bl	8008e10 <memcpy>
 8001524:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001528:	2100      	movs	r1, #0
 800152a:	2078      	movs	r0, #120	; 0x78
 800152c:	f000 fbb6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001530:	4cd1      	ldr	r4, [pc, #836]	; (8001878 <SSD1306_Init+0x3dc>)
 8001532:	2310      	movs	r3, #16
 8001534:	9313      	str	r3, [sp, #76]	; 0x4c
 8001536:	4668      	mov	r0, sp
 8001538:	f104 0308 	add.w	r3, r4, #8
 800153c:	224c      	movs	r2, #76	; 0x4c
 800153e:	4619      	mov	r1, r3
 8001540:	f007 fc66 	bl	8008e10 <memcpy>
 8001544:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fba6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001550:	4cc9      	ldr	r4, [pc, #804]	; (8001878 <SSD1306_Init+0x3dc>)
 8001552:	23b0      	movs	r3, #176	; 0xb0
 8001554:	9313      	str	r3, [sp, #76]	; 0x4c
 8001556:	4668      	mov	r0, sp
 8001558:	f104 0308 	add.w	r3, r4, #8
 800155c:	224c      	movs	r2, #76	; 0x4c
 800155e:	4619      	mov	r1, r3
 8001560:	f007 fc56 	bl	8008e10 <memcpy>
 8001564:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001568:	2100      	movs	r1, #0
 800156a:	2078      	movs	r0, #120	; 0x78
 800156c:	f000 fb96 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001570:	4cc1      	ldr	r4, [pc, #772]	; (8001878 <SSD1306_Init+0x3dc>)
 8001572:	23c8      	movs	r3, #200	; 0xc8
 8001574:	9313      	str	r3, [sp, #76]	; 0x4c
 8001576:	4668      	mov	r0, sp
 8001578:	f104 0308 	add.w	r3, r4, #8
 800157c:	224c      	movs	r2, #76	; 0x4c
 800157e:	4619      	mov	r1, r3
 8001580:	f007 fc46 	bl	8008e10 <memcpy>
 8001584:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fb86 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001590:	4cb9      	ldr	r4, [pc, #740]	; (8001878 <SSD1306_Init+0x3dc>)
 8001592:	2300      	movs	r3, #0
 8001594:	9313      	str	r3, [sp, #76]	; 0x4c
 8001596:	4668      	mov	r0, sp
 8001598:	f104 0308 	add.w	r3, r4, #8
 800159c:	224c      	movs	r2, #76	; 0x4c
 800159e:	4619      	mov	r1, r3
 80015a0:	f007 fc36 	bl	8008e10 <memcpy>
 80015a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015a8:	2100      	movs	r1, #0
 80015aa:	2078      	movs	r0, #120	; 0x78
 80015ac:	f000 fb76 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015b0:	4cb1      	ldr	r4, [pc, #708]	; (8001878 <SSD1306_Init+0x3dc>)
 80015b2:	2310      	movs	r3, #16
 80015b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80015b6:	4668      	mov	r0, sp
 80015b8:	f104 0308 	add.w	r3, r4, #8
 80015bc:	224c      	movs	r2, #76	; 0x4c
 80015be:	4619      	mov	r1, r3
 80015c0:	f007 fc26 	bl	8008e10 <memcpy>
 80015c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015c8:	2100      	movs	r1, #0
 80015ca:	2078      	movs	r0, #120	; 0x78
 80015cc:	f000 fb66 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015d0:	4ca9      	ldr	r4, [pc, #676]	; (8001878 <SSD1306_Init+0x3dc>)
 80015d2:	2340      	movs	r3, #64	; 0x40
 80015d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80015d6:	4668      	mov	r0, sp
 80015d8:	f104 0308 	add.w	r3, r4, #8
 80015dc:	224c      	movs	r2, #76	; 0x4c
 80015de:	4619      	mov	r1, r3
 80015e0:	f007 fc16 	bl	8008e10 <memcpy>
 80015e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 fb56 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015f0:	4ca1      	ldr	r4, [pc, #644]	; (8001878 <SSD1306_Init+0x3dc>)
 80015f2:	2381      	movs	r3, #129	; 0x81
 80015f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80015f6:	4668      	mov	r0, sp
 80015f8:	f104 0308 	add.w	r3, r4, #8
 80015fc:	224c      	movs	r2, #76	; 0x4c
 80015fe:	4619      	mov	r1, r3
 8001600:	f007 fc06 	bl	8008e10 <memcpy>
 8001604:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	; 0x78
 800160c:	f000 fb46 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001610:	4c99      	ldr	r4, [pc, #612]	; (8001878 <SSD1306_Init+0x3dc>)
 8001612:	23ff      	movs	r3, #255	; 0xff
 8001614:	9313      	str	r3, [sp, #76]	; 0x4c
 8001616:	4668      	mov	r0, sp
 8001618:	f104 0308 	add.w	r3, r4, #8
 800161c:	224c      	movs	r2, #76	; 0x4c
 800161e:	4619      	mov	r1, r3
 8001620:	f007 fbf6 	bl	8008e10 <memcpy>
 8001624:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 fb36 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001630:	4c91      	ldr	r4, [pc, #580]	; (8001878 <SSD1306_Init+0x3dc>)
 8001632:	23a1      	movs	r3, #161	; 0xa1
 8001634:	9313      	str	r3, [sp, #76]	; 0x4c
 8001636:	4668      	mov	r0, sp
 8001638:	f104 0308 	add.w	r3, r4, #8
 800163c:	224c      	movs	r2, #76	; 0x4c
 800163e:	4619      	mov	r1, r3
 8001640:	f007 fbe6 	bl	8008e10 <memcpy>
 8001644:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f000 fb26 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001650:	4c89      	ldr	r4, [pc, #548]	; (8001878 <SSD1306_Init+0x3dc>)
 8001652:	23a6      	movs	r3, #166	; 0xa6
 8001654:	9313      	str	r3, [sp, #76]	; 0x4c
 8001656:	4668      	mov	r0, sp
 8001658:	f104 0308 	add.w	r3, r4, #8
 800165c:	224c      	movs	r2, #76	; 0x4c
 800165e:	4619      	mov	r1, r3
 8001660:	f007 fbd6 	bl	8008e10 <memcpy>
 8001664:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001668:	2100      	movs	r1, #0
 800166a:	2078      	movs	r0, #120	; 0x78
 800166c:	f000 fb16 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001670:	4c81      	ldr	r4, [pc, #516]	; (8001878 <SSD1306_Init+0x3dc>)
 8001672:	23a8      	movs	r3, #168	; 0xa8
 8001674:	9313      	str	r3, [sp, #76]	; 0x4c
 8001676:	4668      	mov	r0, sp
 8001678:	f104 0308 	add.w	r3, r4, #8
 800167c:	224c      	movs	r2, #76	; 0x4c
 800167e:	4619      	mov	r1, r3
 8001680:	f007 fbc6 	bl	8008e10 <memcpy>
 8001684:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f000 fb06 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001690:	4c79      	ldr	r4, [pc, #484]	; (8001878 <SSD1306_Init+0x3dc>)
 8001692:	233f      	movs	r3, #63	; 0x3f
 8001694:	9313      	str	r3, [sp, #76]	; 0x4c
 8001696:	4668      	mov	r0, sp
 8001698:	f104 0308 	add.w	r3, r4, #8
 800169c:	224c      	movs	r2, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	f007 fbb6 	bl	8008e10 <memcpy>
 80016a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	; 0x78
 80016ac:	f000 faf6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016b0:	4c71      	ldr	r4, [pc, #452]	; (8001878 <SSD1306_Init+0x3dc>)
 80016b2:	23a4      	movs	r3, #164	; 0xa4
 80016b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80016b6:	4668      	mov	r0, sp
 80016b8:	f104 0308 	add.w	r3, r4, #8
 80016bc:	224c      	movs	r2, #76	; 0x4c
 80016be:	4619      	mov	r1, r3
 80016c0:	f007 fba6 	bl	8008e10 <memcpy>
 80016c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016c8:	2100      	movs	r1, #0
 80016ca:	2078      	movs	r0, #120	; 0x78
 80016cc:	f000 fae6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016d0:	4c69      	ldr	r4, [pc, #420]	; (8001878 <SSD1306_Init+0x3dc>)
 80016d2:	23d3      	movs	r3, #211	; 0xd3
 80016d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80016d6:	4668      	mov	r0, sp
 80016d8:	f104 0308 	add.w	r3, r4, #8
 80016dc:	224c      	movs	r2, #76	; 0x4c
 80016de:	4619      	mov	r1, r3
 80016e0:	f007 fb96 	bl	8008e10 <memcpy>
 80016e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f000 fad6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016f0:	4c61      	ldr	r4, [pc, #388]	; (8001878 <SSD1306_Init+0x3dc>)
 80016f2:	2300      	movs	r3, #0
 80016f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80016f6:	4668      	mov	r0, sp
 80016f8:	f104 0308 	add.w	r3, r4, #8
 80016fc:	224c      	movs	r2, #76	; 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	f007 fb86 	bl	8008e10 <memcpy>
 8001704:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001708:	2100      	movs	r1, #0
 800170a:	2078      	movs	r0, #120	; 0x78
 800170c:	f000 fac6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001710:	4c59      	ldr	r4, [pc, #356]	; (8001878 <SSD1306_Init+0x3dc>)
 8001712:	23d5      	movs	r3, #213	; 0xd5
 8001714:	9313      	str	r3, [sp, #76]	; 0x4c
 8001716:	4668      	mov	r0, sp
 8001718:	f104 0308 	add.w	r3, r4, #8
 800171c:	224c      	movs	r2, #76	; 0x4c
 800171e:	4619      	mov	r1, r3
 8001720:	f007 fb76 	bl	8008e10 <memcpy>
 8001724:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fab6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001730:	4c51      	ldr	r4, [pc, #324]	; (8001878 <SSD1306_Init+0x3dc>)
 8001732:	23f0      	movs	r3, #240	; 0xf0
 8001734:	9313      	str	r3, [sp, #76]	; 0x4c
 8001736:	4668      	mov	r0, sp
 8001738:	f104 0308 	add.w	r3, r4, #8
 800173c:	224c      	movs	r2, #76	; 0x4c
 800173e:	4619      	mov	r1, r3
 8001740:	f007 fb66 	bl	8008e10 <memcpy>
 8001744:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 faa6 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001750:	4c49      	ldr	r4, [pc, #292]	; (8001878 <SSD1306_Init+0x3dc>)
 8001752:	23d9      	movs	r3, #217	; 0xd9
 8001754:	9313      	str	r3, [sp, #76]	; 0x4c
 8001756:	4668      	mov	r0, sp
 8001758:	f104 0308 	add.w	r3, r4, #8
 800175c:	224c      	movs	r2, #76	; 0x4c
 800175e:	4619      	mov	r1, r3
 8001760:	f007 fb56 	bl	8008e10 <memcpy>
 8001764:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	; 0x78
 800176c:	f000 fa96 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001770:	4c41      	ldr	r4, [pc, #260]	; (8001878 <SSD1306_Init+0x3dc>)
 8001772:	2322      	movs	r3, #34	; 0x22
 8001774:	9313      	str	r3, [sp, #76]	; 0x4c
 8001776:	4668      	mov	r0, sp
 8001778:	f104 0308 	add.w	r3, r4, #8
 800177c:	224c      	movs	r2, #76	; 0x4c
 800177e:	4619      	mov	r1, r3
 8001780:	f007 fb46 	bl	8008e10 <memcpy>
 8001784:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001788:	2100      	movs	r1, #0
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f000 fa86 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001790:	4c39      	ldr	r4, [pc, #228]	; (8001878 <SSD1306_Init+0x3dc>)
 8001792:	23da      	movs	r3, #218	; 0xda
 8001794:	9313      	str	r3, [sp, #76]	; 0x4c
 8001796:	4668      	mov	r0, sp
 8001798:	f104 0308 	add.w	r3, r4, #8
 800179c:	224c      	movs	r2, #76	; 0x4c
 800179e:	4619      	mov	r1, r3
 80017a0:	f007 fb36 	bl	8008e10 <memcpy>
 80017a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017a8:	2100      	movs	r1, #0
 80017aa:	2078      	movs	r0, #120	; 0x78
 80017ac:	f000 fa76 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017b0:	4c31      	ldr	r4, [pc, #196]	; (8001878 <SSD1306_Init+0x3dc>)
 80017b2:	2312      	movs	r3, #18
 80017b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017b6:	4668      	mov	r0, sp
 80017b8:	f104 0308 	add.w	r3, r4, #8
 80017bc:	224c      	movs	r2, #76	; 0x4c
 80017be:	4619      	mov	r1, r3
 80017c0:	f007 fb26 	bl	8008e10 <memcpy>
 80017c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 fa66 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017d0:	4c29      	ldr	r4, [pc, #164]	; (8001878 <SSD1306_Init+0x3dc>)
 80017d2:	23db      	movs	r3, #219	; 0xdb
 80017d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017d6:	4668      	mov	r0, sp
 80017d8:	f104 0308 	add.w	r3, r4, #8
 80017dc:	224c      	movs	r2, #76	; 0x4c
 80017de:	4619      	mov	r1, r3
 80017e0:	f007 fb16 	bl	8008e10 <memcpy>
 80017e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	; 0x78
 80017ec:	f000 fa56 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017f0:	4c21      	ldr	r4, [pc, #132]	; (8001878 <SSD1306_Init+0x3dc>)
 80017f2:	2320      	movs	r3, #32
 80017f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017f6:	4668      	mov	r0, sp
 80017f8:	f104 0308 	add.w	r3, r4, #8
 80017fc:	224c      	movs	r2, #76	; 0x4c
 80017fe:	4619      	mov	r1, r3
 8001800:	f007 fb06 	bl	8008e10 <memcpy>
 8001804:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 fa46 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001810:	4c19      	ldr	r4, [pc, #100]	; (8001878 <SSD1306_Init+0x3dc>)
 8001812:	238d      	movs	r3, #141	; 0x8d
 8001814:	9313      	str	r3, [sp, #76]	; 0x4c
 8001816:	4668      	mov	r0, sp
 8001818:	f104 0308 	add.w	r3, r4, #8
 800181c:	224c      	movs	r2, #76	; 0x4c
 800181e:	4619      	mov	r1, r3
 8001820:	f007 faf6 	bl	8008e10 <memcpy>
 8001824:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001828:	2100      	movs	r1, #0
 800182a:	2078      	movs	r0, #120	; 0x78
 800182c:	f000 fa36 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001830:	4c11      	ldr	r4, [pc, #68]	; (8001878 <SSD1306_Init+0x3dc>)
 8001832:	2314      	movs	r3, #20
 8001834:	9313      	str	r3, [sp, #76]	; 0x4c
 8001836:	4668      	mov	r0, sp
 8001838:	f104 0308 	add.w	r3, r4, #8
 800183c:	224c      	movs	r2, #76	; 0x4c
 800183e:	4619      	mov	r1, r3
 8001840:	f007 fae6 	bl	8008e10 <memcpy>
 8001844:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001848:	2100      	movs	r1, #0
 800184a:	2078      	movs	r0, #120	; 0x78
 800184c:	f000 fa26 	bl	8001c9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001850:	4c09      	ldr	r4, [pc, #36]	; (8001878 <SSD1306_Init+0x3dc>)
 8001852:	23af      	movs	r3, #175	; 0xaf
 8001854:	9313      	str	r3, [sp, #76]	; 0x4c
 8001856:	4668      	mov	r0, sp
 8001858:	f104 0308 	add.w	r3, r4, #8
 800185c:	224c      	movs	r2, #76	; 0x4c
 800185e:	4619      	mov	r1, r3
 8001860:	f007 fad6 	bl	8008e10 <memcpy>
 8001864:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	; 0x78
 800186c:	f000 fa16 	bl	8001c9c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001870:	4c01      	ldr	r4, [pc, #4]	; (8001878 <SSD1306_Init+0x3dc>)
 8001872:	232e      	movs	r3, #46	; 0x2e
 8001874:	e002      	b.n	800187c <SSD1306_Init+0x3e0>
 8001876:	bf00      	nop
 8001878:	200008bc 	.word	0x200008bc
 800187c:	9313      	str	r3, [sp, #76]	; 0x4c
 800187e:	4668      	mov	r0, sp
 8001880:	f104 0308 	add.w	r3, r4, #8
 8001884:	224c      	movs	r2, #76	; 0x4c
 8001886:	4619      	mov	r1, r3
 8001888:	f007 fac2 	bl	8008e10 <memcpy>
 800188c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 fa02 	bl	8001c9c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f865 	bl	8001968 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800189e:	f000 f813 	bl	80018c8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <SSD1306_Init+0x428>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SSD1306_Init+0x428>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SSD1306_Init+0x428>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80018c0:	b004      	add	sp, #16
 80018c2:	4770      	bx	lr
 80018c4:	200005ac 	.word	0x200005ac

080018c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b097      	sub	sp, #92	; 0x5c
 80018cc:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e03d      	b.n	8001950 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	3b50      	subs	r3, #80	; 0x50
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4c21      	ldr	r4, [pc, #132]	; (8001960 <SSD1306_UpdateScreen+0x98>)
 80018dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80018de:	4668      	mov	r0, sp
 80018e0:	f104 0308 	add.w	r3, r4, #8
 80018e4:	224c      	movs	r2, #76	; 0x4c
 80018e6:	4619      	mov	r1, r3
 80018e8:	f007 fa92 	bl	8008e10 <memcpy>
 80018ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	; 0x78
 80018f4:	f000 f9d2 	bl	8001c9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018f8:	4c19      	ldr	r4, [pc, #100]	; (8001960 <SSD1306_UpdateScreen+0x98>)
 80018fa:	2300      	movs	r3, #0
 80018fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80018fe:	4668      	mov	r0, sp
 8001900:	f104 0308 	add.w	r3, r4, #8
 8001904:	224c      	movs	r2, #76	; 0x4c
 8001906:	4619      	mov	r1, r3
 8001908:	f007 fa82 	bl	8008e10 <memcpy>
 800190c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001910:	2100      	movs	r1, #0
 8001912:	2078      	movs	r0, #120	; 0x78
 8001914:	f000 f9c2 	bl	8001c9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001918:	4c11      	ldr	r4, [pc, #68]	; (8001960 <SSD1306_UpdateScreen+0x98>)
 800191a:	2310      	movs	r3, #16
 800191c:	9313      	str	r3, [sp, #76]	; 0x4c
 800191e:	4668      	mov	r0, sp
 8001920:	f104 0308 	add.w	r3, r4, #8
 8001924:	224c      	movs	r2, #76	; 0x4c
 8001926:	4619      	mov	r1, r3
 8001928:	f007 fa72 	bl	8008e10 <memcpy>
 800192c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001930:	2100      	movs	r1, #0
 8001932:	2078      	movs	r0, #120	; 0x78
 8001934:	f000 f9b2 	bl	8001c9c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	01db      	lsls	r3, r3, #7
 800193c:	4a09      	ldr	r2, [pc, #36]	; (8001964 <SSD1306_UpdateScreen+0x9c>)
 800193e:	441a      	add	r2, r3
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	2078      	movs	r0, #120	; 0x78
 8001946:	f000 f961 	bl	8001c0c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	3301      	adds	r3, #1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b07      	cmp	r3, #7
 8001954:	d9be      	bls.n	80018d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	200008bc 	.word	0x200008bc
 8001964:	200001ac 	.word	0x200001ac

08001968 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <SSD1306_Fill+0x14>
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <SSD1306_Fill+0x16>
 800197c:	23ff      	movs	r3, #255	; 0xff
 800197e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001982:	4619      	mov	r1, r3
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <SSD1306_Fill+0x2c>)
 8001986:	f007 fa51 	bl	8008e2c <memset>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200001ac 	.word	0x200001ac

08001998 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	460b      	mov	r3, r1
 80019a4:	80bb      	strh	r3, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	70fb      	strb	r3, [r7, #3]
	if (
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	2b7f      	cmp	r3, #127	; 0x7f
 80019ae:	d848      	bhi.n	8001a42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	2b3f      	cmp	r3, #63	; 0x3f
 80019b4:	d845      	bhi.n	8001a42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <SSD1306_DrawPixel+0xb8>)
 80019b8:	791b      	ldrb	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d006      	beq.n	80019cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d11a      	bne.n	8001a08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	08db      	lsrs	r3, r3, #3
 80019d8:	b298      	uxth	r0, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	01db      	lsls	r3, r3, #7
 80019de:	4413      	add	r3, r2
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <SSD1306_DrawPixel+0xbc>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	b25a      	sxtb	r2, r3
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b259      	sxtb	r1, r3
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	4603      	mov	r3, r0
 80019fc:	01db      	lsls	r3, r3, #7
 80019fe:	4413      	add	r3, r2
 8001a00:	b2c9      	uxtb	r1, r1
 8001a02:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <SSD1306_DrawPixel+0xbc>)
 8001a04:	54d1      	strb	r1, [r2, r3]
 8001a06:	e01d      	b.n	8001a44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	b298      	uxth	r0, r3
 8001a10:	4603      	mov	r3, r0
 8001a12:	01db      	lsls	r3, r3, #7
 8001a14:	4413      	add	r3, r2
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <SSD1306_DrawPixel+0xbc>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	b25a      	sxtb	r2, r3
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	b259      	sxtb	r1, r3
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	4603      	mov	r3, r0
 8001a36:	01db      	lsls	r3, r3, #7
 8001a38:	4413      	add	r3, r2
 8001a3a:	b2c9      	uxtb	r1, r1
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SSD1306_DrawPixel+0xbc>)
 8001a3e:	54d1      	strb	r1, [r2, r3]
 8001a40:	e000      	b.n	8001a44 <SSD1306_DrawPixel+0xac>
		return;
 8001a42:	bf00      	nop
	}
}
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200005ac 	.word	0x200005ac
 8001a54:	200001ac 	.word	0x200001ac

08001a58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	80fb      	strh	r3, [r7, #6]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SSD1306_GotoXY+0x28>)
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <SSD1306_GotoXY+0x28>)
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	8053      	strh	r3, [r2, #2]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200005ac 	.word	0x200005ac

08001a84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	4613      	mov	r3, r2
 8001a92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
	if (
 8001aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa2:	dc07      	bgt.n	8001ab4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001aa6:	885b      	ldrh	r3, [r3, #2]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ab0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ab2:	dd01      	ble.n	8001ab8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e05e      	b.n	8001b76 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e04b      	b.n	8001b56 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	3b20      	subs	r3, #32
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	7849      	ldrb	r1, [r1, #1]
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	440b      	add	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	e030      	b.n	8001b44 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d010      	beq.n	8001b14 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	b298      	uxth	r0, r3
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001b00:	885a      	ldrh	r2, [r3, #2]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	79ba      	ldrb	r2, [r7, #6]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff ff43 	bl	8001998 <SSD1306_DrawPixel>
 8001b12:	e014      	b.n	8001b3e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001b22:	885a      	ldrh	r2, [r3, #2]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b299      	uxth	r1, r3
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f7ff ff2d 	bl	8001998 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	3301      	adds	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d3c8      	bcc.n	8001ae2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d3ad      	bcc.n	8001abe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <SSD1306_Putc+0xfc>)
 8001b72:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200005ac 	.word	0x200005ac

08001b84 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b92:	e012      	b.n	8001bba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	79fa      	ldrb	r2, [r7, #7]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff71 	bl	8001a84 <SSD1306_Putc>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d002      	beq.n	8001bb4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	e008      	b.n	8001bc6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1e8      	bne.n	8001b94 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fec8 	bl	8001968 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001bd8:	f7ff fe76 	bl	80018c8 <SSD1306_UpdateScreen>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <ssd1306_I2C_Init+0x28>)
 8001be8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bea:	e002      	b.n	8001bf2 <ssd1306_I2C_Init+0x12>
		p--;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f9      	bne.n	8001bec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	0003d090 	.word	0x0003d090

08001c0c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b0c7      	sub	sp, #284	; 0x11c
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	4604      	mov	r4, r0
 8001c14:	4608      	mov	r0, r1
 8001c16:	4639      	mov	r1, r7
 8001c18:	600a      	str	r2, [r1, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	4622      	mov	r2, r4
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	1dbb      	adds	r3, r7, #6
 8001c24:	4602      	mov	r2, r0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	1dba      	adds	r2, r7, #6
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c3e:	e010      	b.n	8001c62 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001c40:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c44:	463a      	mov	r2, r7
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	441a      	add	r2, r3
 8001c4a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c4e:	3301      	adds	r3, #1
 8001c50:	7811      	ldrb	r1, [r2, #0]
 8001c52:	f107 020c 	add.w	r2, r7, #12
 8001c56:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001c58:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	1d3a      	adds	r2, r7, #4
 8001c6a:	8812      	ldrh	r2, [r2, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8e7      	bhi.n	8001c40 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b299      	uxth	r1, r3
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	200a      	movs	r0, #10
 8001c84:	9000      	str	r0, [sp, #0]
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <ssd1306_I2C_WriteMulti+0x8c>)
 8001c88:	f000 fe14 	bl	80028b4 <HAL_I2C_Master_Transmit>
}
 8001c8c:	bf00      	nop
 8001c8e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200008bc 	.word	0x200008bc

08001c9c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af02      	add	r7, sp, #8
 8001ca4:	f107 0c18 	add.w	ip, r7, #24
 8001ca8:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001cb8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001cbc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	f107 020c 	add.w	r2, r7, #12
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f107 0018 	add.w	r0, r7, #24
 8001cd0:	f000 fdf0 	bl	80028b4 <HAL_I2C_Master_Transmit>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cde:	b002      	add	sp, #8
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a32      	ldr	r2, [pc, #200]	; (8001e1c <HAL_I2C_MspInit+0xe8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d76:	2312      	movs	r3, #18
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d82:	2304      	movs	r3, #4
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4825      	ldr	r0, [pc, #148]	; (8001e24 <HAL_I2C_MspInit+0xf0>)
 8001d8e:	f000 fa65 	bl	800225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dae:	e031      	b.n	8001e14 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_I2C_MspInit+0xf4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12c      	bne.n	8001e14 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ddc:	2312      	movs	r3, #18
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001de8:	2304      	movs	r3, #4
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	480c      	ldr	r0, [pc, #48]	; (8001e24 <HAL_I2C_MspInit+0xf0>)
 8001df4:	f000 fa32 	bl	800225c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e06:	6413      	str	r3, [r2, #64]	; 0x40
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_I2C_MspInit+0xec>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40005800 	.word	0x40005800

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f89a 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <OTG_FS_IRQHandler+0x10>)
 8001e86:	f001 fdfe 	bl	8003a86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20001de4 	.word	0x20001de4

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <SystemInit+0x20>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <SystemInit+0x20>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ebe:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed4:	4c0b      	ldr	r4, [pc, #44]	; (8001f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ee2:	f7ff ffd7 	bl	8001e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f006 ff6f 	bl	8008dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eea:	f7fe ff87 	bl	8000dfc <main>
  bx  lr    
 8001eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001efc:	0800b084 	.word	0x0800b084
  ldr r2, =_sbss
 8001f00:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001f04:	200021ec 	.word	0x200021ec

08001f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC_IRQHandler>
	...

08001f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_Init+0x40>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_Init+0x40>)
 8001f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_Init+0x40>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 f94f 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	200f      	movs	r0, #15
 8001f3c:	f000 f808 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff fed0 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f967 	bl	8002242 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8c:	f000 f92f 	bl	80021ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	20000018 	.word	0x20000018
 8001fac:	20000014 	.word	0x20000014

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000018 	.word	0x20000018
 8001fd4:	20000910 	.word	0x20000910

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000910 	.word	0x20000910

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000018 	.word	0x20000018

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e16b      	b.n	8002550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 815a 	bne.w	800254a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b4 	beq.w	800254a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b60      	ldr	r3, [pc, #384]	; (8002568 <HAL_GPIO_Init+0x30c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a5f      	ldr	r2, [pc, #380]	; (8002568 <HAL_GPIO_Init+0x30c>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <HAL_GPIO_Init+0x30c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a5b      	ldr	r2, [pc, #364]	; (800256c <HAL_GPIO_Init+0x310>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_GPIO_Init+0x314>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02b      	beq.n	8002482 <HAL_GPIO_Init+0x226>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a51      	ldr	r2, [pc, #324]	; (8002574 <HAL_GPIO_Init+0x318>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x222>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a50      	ldr	r2, [pc, #320]	; (8002578 <HAL_GPIO_Init+0x31c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x21e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_GPIO_Init+0x320>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x21a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_GPIO_Init+0x324>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x216>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4d      	ldr	r2, [pc, #308]	; (8002584 <HAL_GPIO_Init+0x328>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x212>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_GPIO_Init+0x32c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_GPIO_Init+0x330>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x20a>
 8002462:	2307      	movs	r3, #7
 8002464:	e00e      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002466:	2308      	movs	r3, #8
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246a:	2306      	movs	r3, #6
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x310>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_GPIO_Init+0x334>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002544:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae90 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40021400 	.word	0x40021400
 8002588:	40021800 	.word	0x40021800
 800258c:	40021c00 	.word	0x40021c00
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	041a      	lsls	r2, r3, #16
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43d9      	mvns	r1, r3
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	400b      	ands	r3, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e12b      	b.n	8002896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fb6e 	bl	8001d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800268e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002690:	f002 fe4c 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8002694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a81      	ldr	r2, [pc, #516]	; (80028a0 <HAL_I2C_Init+0x274>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d807      	bhi.n	80026b0 <HAL_I2C_Init+0x84>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a80      	ldr	r2, [pc, #512]	; (80028a4 <HAL_I2C_Init+0x278>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e006      	b.n	80026be <HAL_I2C_Init+0x92>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a7d      	ldr	r2, [pc, #500]	; (80028a8 <HAL_I2C_Init+0x27c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	bf94      	ite	ls
 80026b8:	2301      	movls	r3, #1
 80026ba:	2300      	movhi	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0e7      	b.n	8002896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a78      	ldr	r2, [pc, #480]	; (80028ac <HAL_I2C_Init+0x280>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a6a      	ldr	r2, [pc, #424]	; (80028a0 <HAL_I2C_Init+0x274>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d802      	bhi.n	8002700 <HAL_I2C_Init+0xd4>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3301      	adds	r3, #1
 80026fe:	e009      	b.n	8002714 <HAL_I2C_Init+0xe8>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_I2C_Init+0x284>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	3301      	adds	r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	495c      	ldr	r1, [pc, #368]	; (80028a0 <HAL_I2C_Init+0x274>)
 8002730:	428b      	cmp	r3, r1
 8002732:	d819      	bhi.n	8002768 <HAL_I2C_Init+0x13c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e59      	subs	r1, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002742:	1c59      	adds	r1, r3, #1
 8002744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002748:	400b      	ands	r3, r1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_I2C_Init+0x138>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e59      	subs	r1, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fbb1 f3f3 	udiv	r3, r1, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	e051      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002764:	2304      	movs	r3, #4
 8002766:	e04f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <HAL_I2C_Init+0x168>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e012      	b.n	80027ba <HAL_I2C_Init+0x18e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	0099      	lsls	r1, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Init+0x196>
 80027be:	2301      	movs	r3, #1
 80027c0:	e022      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <HAL_I2C_Init+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e58      	subs	r0, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	440b      	add	r3, r1
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6809      	ldr	r1, [r1, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6911      	ldr	r1, [r2, #16]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	4311      	orrs	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	001e847f 	.word	0x001e847f
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	10624dd3 	.word	0x10624dd3

080028b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	460b      	mov	r3, r1
 80028c2:	817b      	strh	r3, [r7, #10]
 80028c4:	4613      	mov	r3, r2
 80028c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff fb86 	bl	8001fd8 <HAL_GetTick>
 80028cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	f040 80e0 	bne.w	8002a9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2319      	movs	r3, #25
 80028e2:	2201      	movs	r2, #1
 80028e4:	4970      	ldr	r1, [pc, #448]	; (8002aa8 <HAL_I2C_Master_Transmit+0x1f4>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fda0 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0d3      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_I2C_Master_Transmit+0x50>
 8002900:	2302      	movs	r3, #2
 8002902:	e0cc      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d007      	beq.n	800292a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002938:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2221      	movs	r2, #33	; 0x21
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2210      	movs	r2, #16
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	893a      	ldrh	r2, [r7, #8]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_I2C_Master_Transmit+0x1f8>)
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fbf0 	bl	8003158 <I2C_MasterRequestWrite>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e08d      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002998:	e066      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	6a39      	ldr	r1, [r7, #32]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fe1a 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06b      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0x188>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fe0a 	bl	800365a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e01a      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d194      	bne.n	800299a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	00100002 	.word	0x00100002
 8002aac:	ffff0000 	.word	0xffff0000

08002ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff fa85 	bl	8001fd8 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	f040 8208 	bne.w	8002eee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2319      	movs	r3, #25
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	497b      	ldr	r1, [pc, #492]	; (8002cd4 <HAL_I2C_Mem_Read+0x224>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc9f 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	e1fb      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Mem_Read+0x56>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e1f4      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d007      	beq.n	8002b2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2222      	movs	r2, #34	; 0x22
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_I2C_Mem_Read+0x228>)
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6e:	88f8      	ldrh	r0, [r7, #6]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fb6c 	bl	800325c <I2C_RequestMemoryRead>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1b0      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e184      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11b      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e164      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11b      	bne.n	8002c3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	e144      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c54:	e138      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	f200 80f1 	bhi.w	8002e42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d123      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fd35 	bl	80036dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e139      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cae:	e10b      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d14e      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	4906      	ldr	r1, [pc, #24]	; (8002cdc <HAL_I2C_Mem_Read+0x22c>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fbb2 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e10e      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
 8002cd2:	bf00      	nop
 8002cd4:	00100002 	.word	0x00100002
 8002cd8:	ffff0000 	.word	0xffff0000
 8002cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d54:	e0b8      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4966      	ldr	r1, [pc, #408]	; (8002ef8 <HAL_I2C_Mem_Read+0x448>)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fb63 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0bf      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	2200      	movs	r2, #0
 8002dba:	494f      	ldr	r1, [pc, #316]	; (8002ef8 <HAL_I2C_Mem_Read+0x448>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fb35 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e091      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e40:	e042      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fc48 	bl	80036dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e04c      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d118      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f aec2 	bne.w	8002c56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010004 	.word	0x00010004

08002efc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff f864 	bl	8001fd8 <HAL_GetTick>
 8002f10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	f040 8111 	bne.w	8003146 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2319      	movs	r3, #25
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4988      	ldr	r1, [pc, #544]	; (8003150 <HAL_I2C_IsDeviceReady+0x254>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa7c 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e104      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_I2C_IsDeviceReady+0x50>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0fd      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d007      	beq.n	8002f72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a70      	ldr	r2, [pc, #448]	; (8003154 <HAL_I2C_IsDeviceReady+0x258>)
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fa3a 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d103      	bne.n	8002fd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0b6      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fff5 	bl	8001fd8 <HAL_GetTick>
 8002fee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800301e:	e025      	b.n	800306c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe ffda 	bl	8001fd8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <HAL_I2C_IsDeviceReady+0x13a>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	22a0      	movs	r2, #160	; 0xa0
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2ba0      	cmp	r3, #160	; 0xa0
 8003076:	d005      	beq.n	8003084 <HAL_I2C_IsDeviceReady+0x188>
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_I2C_IsDeviceReady+0x188>
 800307e:	7dbb      	ldrb	r3, [r7, #22]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0cd      	beq.n	8003020 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b02      	cmp	r3, #2
 8003098:	d129      	bne.n	80030ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	4921      	ldr	r1, [pc, #132]	; (8003150 <HAL_I2C_IsDeviceReady+0x254>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9ae 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e036      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e02c      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003106:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2319      	movs	r3, #25
 800310e:	2201      	movs	r2, #1
 8003110:	490f      	ldr	r1, [pc, #60]	; (8003150 <HAL_I2C_IsDeviceReady+0x254>)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f98a 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e012      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	3301      	adds	r3, #1
 8003126:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	f4ff af32 	bcc.w	8002f96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	00100002 	.word	0x00100002
 8003154:	ffff0000 	.word	0xffff0000

08003158 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	460b      	mov	r3, r1
 8003166:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d006      	beq.n	8003182 <I2C_MasterRequestWrite+0x2a>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d003      	beq.n	8003182 <I2C_MasterRequestWrite+0x2a>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003180:	d108      	bne.n	8003194 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e00b      	b.n	80031ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	2b12      	cmp	r3, #18
 800319a:	d107      	bne.n	80031ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f937 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	d103      	bne.n	80031dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e035      	b.n	800324c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e8:	d108      	bne.n	80031fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ea:	897b      	ldrh	r3, [r7, #10]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	e01b      	b.n	8003234 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	11db      	asrs	r3, r3, #7
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f003 0306 	and.w	r3, r3, #6
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f063 030f 	orn	r3, r3, #15
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <I2C_MasterRequestWrite+0xfc>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f95d 	bl	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e010      	b.n	800324c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <I2C_MasterRequestWrite+0x100>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f94d 	bl	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	00010008 	.word	0x00010008
 8003258:	00010002 	.word	0x00010002

0800325c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	2200      	movs	r2, #0
 800329e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8c2 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032bc:	d103      	bne.n	80032c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e0aa      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	4952      	ldr	r1, [pc, #328]	; (8003428 <I2C_RequestMemoryRead+0x1cc>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f8fa 	bl	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e097      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f964 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e076      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	e021      	b.n	8003388 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f93e 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b04      	cmp	r3, #4
 8003368:	d107      	bne.n	800337a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e050      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800337e:	893b      	ldrh	r3, [r7, #8]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	6a39      	ldr	r1, [r7, #32]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f923 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e035      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f82b 	bl	800342c <I2C_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ea:	d103      	bne.n	80033f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e013      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033f8:	897b      	ldrh	r3, [r7, #10]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	4906      	ldr	r1, [pc, #24]	; (8003428 <I2C_RequestMemoryRead+0x1cc>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f863 	bl	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	00010002 	.word	0x00010002

0800342c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343c:	e025      	b.n	800348a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003444:	d021      	beq.n	800348a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003446:	f7fe fdc7 	bl	8001fd8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d116      	bne.n	800348a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e023      	b.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10d      	bne.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	e00c      	b.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d0b6      	beq.n	800343e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e8:	e051      	b.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d123      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e046      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003548:	d021      	beq.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fd45 	bl	8001fd8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e020      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10c      	bne.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	e00b      	b.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d18d      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e4:	e02d      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f8ce 	bl	8003788 <I2C_IsAcknowledgeFailed>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e02d      	b.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fc:	d021      	beq.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe fceb 	bl	8001fd8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e007      	b.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d1ca      	bne.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003666:	e02d      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f88d 	bl	8003788 <I2C_IsAcknowledgeFailed>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e02d      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800367e:	d021      	beq.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003680:	f7fe fcaa 	bl	8001fd8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d302      	bcc.n	8003696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e007      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d1ca      	bne.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036e8:	e042      	b.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d119      	bne.n	800372c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0210 	mvn.w	r2, #16
 8003700:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e029      	b.n	8003780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fe fc54 	bl	8001fd8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d1b5      	bne.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d11b      	bne.n	80037d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0204 	orr.w	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e8:	b08f      	sub	sp, #60	; 0x3c
 80037ea:	af0a      	add	r7, sp, #40	; 0x28
 80037ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e10f      	b.n	8003a18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f004 ffc4 	bl	80087a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2203      	movs	r2, #3
 800381c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fea1 	bl	800557e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	687e      	ldr	r6, [r7, #4]
 8003844:	466d      	mov	r5, sp
 8003846:	f106 0410 	add.w	r4, r6, #16
 800384a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003856:	e885 0003 	stmia.w	r5, {r0, r1}
 800385a:	1d33      	adds	r3, r6, #4
 800385c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385e:	6838      	ldr	r0, [r7, #0]
 8003860:	f001 fd78 	bl	8005354 <USB_CoreInit>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0d0      	b.n	8003a18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fe8f 	bl	80055a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e04a      	b.n	800391e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	333d      	adds	r3, #61	; 0x3d
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	333c      	adds	r3, #60	; 0x3c
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	b298      	uxth	r0, r3
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3342      	adds	r3, #66	; 0x42
 80038c4:	4602      	mov	r2, r0
 80038c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	333f      	adds	r3, #63	; 0x3f
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	3344      	adds	r3, #68	; 0x44
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3348      	adds	r3, #72	; 0x48
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3350      	adds	r3, #80	; 0x50
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3301      	adds	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3af      	bcc.n	8003888 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e044      	b.n	80039b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3301      	adds	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3b5      	bcc.n	800392e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	687e      	ldr	r6, [r7, #4]
 80039ca:	466d      	mov	r5, sp
 80039cc:	f106 0410 	add.w	r4, r6, #16
 80039d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e0:	1d33      	adds	r3, r6, #4
 80039e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	f001 fe27 	bl	8005638 <USB_DevInit>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e00d      	b.n	8003a18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f002 fea3 	bl	800675c <USB_DevDisconnect>

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_PCD_Start+0x1c>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e020      	b.n	8003a7e <HAL_PCD_Start+0x5e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d109      	bne.n	8003a60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d005      	beq.n	8003a60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fd79 	bl	800555c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 fe53 	bl	800671a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a86:	b590      	push	{r4, r7, lr}
 8003a88:	b08d      	sub	sp, #52	; 0x34
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 ff11 	bl	80068c4 <USB_GetMode>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 839d 	bne.w	80041e4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fe75 	bl	800679e <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8393 	beq.w	80041e2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f002 fe6c 	bl	800679e <USB_ReadInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d107      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f002 0202 	and.w	r2, r2, #2
 8003ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fe5a 	bl	800679e <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d161      	bne.n	8003bb8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0210 	bic.w	r2, r2, #16
 8003b02:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	0c5b      	lsrs	r3, r3, #17
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d124      	bne.n	8003b7a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d035      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6a38      	ldr	r0, [r7, #32]
 8003b50:	f002 fc91 	bl	8006476 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b60:	441a      	add	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b72:	441a      	add	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	619a      	str	r2, [r3, #24]
 8003b78:	e016      	b.n	8003ba8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	0c5b      	lsrs	r3, r3, #17
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d110      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6a38      	ldr	r0, [r7, #32]
 8003b92:	f002 fc70 	bl	8006476 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba2:	441a      	add	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0210 	orr.w	r2, r2, #16
 8003bb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fdee 	bl	800679e <USB_ReadInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bcc:	d16e      	bne.n	8003cac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 fdf4 	bl	80067c4 <USB_ReadDevAllOutEpInterrupt>
 8003bdc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bde:	e062      	b.n	8003ca6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d057      	beq.n	8003c9a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 fe19 	bl	800682c <USB_ReadDevOutEPInterrupt>
 8003bfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	2301      	movs	r3, #1
 8003c16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fdb0 	bl	8004780 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	461a      	mov	r2, r3
 8003c38:	2308      	movs	r3, #8
 8003c3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 feaa 	bl	8004998 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	2320      	movs	r3, #32
 8003c7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d199      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 fd74 	bl	800679e <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cc0:	f040 80c0 	bne.w	8003e44 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 fd95 	bl	80067f8 <USB_ReadDevAllInEpInterrupt>
 8003cce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cd4:	e0b2      	b.n	8003e3c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a7 	beq.w	8003e30 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 fdbb 	bl	8006868 <USB_ReadDevInEPInterrupt>
 8003cf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d057      	beq.n	8003dae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2201      	movs	r2, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69f9      	ldr	r1, [r7, #28]
 8003d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1e:	4013      	ands	r3, r2
 8003d20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2301      	movs	r3, #1
 8003d32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d132      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3348      	adds	r3, #72	; 0x48
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4403      	add	r3, r0
 8003d5c:	3344      	adds	r3, #68	; 0x44
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4419      	add	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4403      	add	r3, r0
 8003d70:	3348      	adds	r3, #72	; 0x48
 8003d72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d113      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x31c>
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	3350      	adds	r3, #80	; 0x50
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d108      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	f002 fdc3 	bl	8006928 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f004 fd7a 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de0:	461a      	mov	r2, r3
 8003de2:	2310      	movs	r3, #16
 8003de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2340      	movs	r3, #64	; 0x40
 8003e00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fc1b 	bl	8004666 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	3301      	adds	r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f47f af49 	bne.w	8003cd6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f002 fca8 	bl	800679e <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e58:	d122      	bne.n	8003ea0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e80:	2100      	movs	r1, #0
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fe26 	bl	8004ad4 <HAL_PCDEx_LPM_Callback>
 8003e88:	e002      	b.n	8003e90 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f004 fd80 	bl	8008990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 fc7a 	bl	800679e <USB_ReadInterrupts>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d112      	bne.n	8003edc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f004 fd3c 	bl	8008944 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003eda:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f002 fc5c 	bl	800679e <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	f040 80c7 	bne.w	8004082 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fcf6 	bl	8005900 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f18:	e056      	b.n	8003fc8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	461a      	mov	r2, r3
 8003f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f4c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fc0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d3a3      	bcc.n	8003f1a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fe4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f043 030b 	orr.w	r3, r3, #11
 8004002:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004014:	f043 030b 	orr.w	r3, r3, #11
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	e015      	b.n	8004048 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800402a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800402e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004032:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004042:	f043 030b 	orr.w	r3, r3, #11
 8004046:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004056:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800405a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800406c:	461a      	mov	r2, r3
 800406e:	f002 fc5b 	bl	8006928 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f002 fb89 	bl	800679e <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004096:	d124      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f002 fc1f 	bl	80068e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fc87 	bl	80059ba <USB_GetDevSpeed>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681c      	ldr	r4, [r3, #0]
 80040b8:	f001 f92c 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 80040bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	4620      	mov	r0, r4
 80040c8:	f001 f9a6 	bl	8005418 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f004 fc10 	bl	80088f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 fb59 	bl	800679e <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d10a      	bne.n	800410c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f004 fbed 	bl	80088d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f002 0208 	and.w	r2, r2, #8
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f002 fb44 	bl	800679e <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004120:	d10f      	bne.n	8004142 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f004 fc4f 	bl	80089d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f002 fb29 	bl	800679e <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004156:	d10f      	bne.n	8004178 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	b2db      	uxtb	r3, r3
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f004 fc22 	bl	80089ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f002 fb0e 	bl	800679e <USB_ReadInterrupts>
 8004182:	4603      	mov	r3, r0
 8004184:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d10a      	bne.n	80041a4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f004 fc30 	bl	80089f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f002 faf8 	bl	800679e <USB_ReadInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d115      	bne.n	80041e4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f004 fc20 	bl	8008a10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	e000      	b.n	80041e4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80041e2:	bf00      	nop
    }
  }
}
 80041e4:	3734      	adds	r7, #52	; 0x34
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd90      	pop	{r4, r7, pc}

080041ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_PCD_SetAddress+0x1a>
 8004200:	2302      	movs	r3, #2
 8004202:	e013      	b.n	800422c <HAL_PCD_SetAddress+0x42>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f002 fa56 	bl	80066ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4603      	mov	r3, r0
 8004244:	70fb      	strb	r3, [r7, #3]
 8004246:	460b      	mov	r3, r1
 8004248:	803b      	strh	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004256:	2b00      	cmp	r3, #0
 8004258:	da0f      	bge.n	800427a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	3338      	adds	r3, #56	; 0x38
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	705a      	strb	r2, [r3, #1]
 8004278:	e00f      	b.n	800429a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042a6:	883a      	ldrh	r2, [r7, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	78ba      	ldrb	r2, [r7, #2]
 80042b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042c4:	78bb      	ldrb	r3, [r7, #2]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d102      	bne.n	80042d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_PCD_EP_Open+0xaa>
 80042da:	2302      	movs	r3, #2
 80042dc:	e00e      	b.n	80042fc <HAL_PCD_EP_Open+0xc8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 fb89 	bl	8005a04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80042fa:	7afb      	ldrb	r3, [r7, #11]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da0f      	bge.n	8004338 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	3338      	adds	r3, #56	; 0x38
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	705a      	strb	r2, [r3, #1]
 8004336:	e00f      	b.n	8004358 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	3304      	adds	r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_PCD_EP_Close+0x6e>
 800436e:	2302      	movs	r3, #2
 8004370:	e00e      	b.n	8004390 <HAL_PCD_EP_Close+0x8c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fbc7 	bl	8005b14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	460b      	mov	r3, r1
 80043a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a8:	7afb      	ldrb	r3, [r7, #11]
 80043aa:	f003 020f 	and.w	r2, r3, #15
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	3304      	adds	r3, #4
 80043c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2200      	movs	r2, #0
 80043d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043da:	7afb      	ldrb	r3, [r7, #11]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f4:	7afb      	ldrb	r3, [r7, #11]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	f001 fea2 	bl	8006154 <USB_EP0StartXfer>
 8004410:	e008      	b.n	8004424 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	f001 fc54 	bl	8005ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004450:	681b      	ldr	r3, [r3, #0]
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	460b      	mov	r3, r1
 800446c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446e:	7afb      	ldrb	r3, [r7, #11]
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	3338      	adds	r3, #56	; 0x38
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2201      	movs	r2, #1
 800449c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800449e:	7afb      	ldrb	r3, [r7, #11]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	f001 fe40 	bl	8006154 <USB_EP0StartXfer>
 80044d4:	e008      	b.n	80044e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	6979      	ldr	r1, [r7, #20]
 80044e4:	f001 fbf2 	bl	8005ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d901      	bls.n	8004510 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e050      	b.n	80045b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004514:	2b00      	cmp	r3, #0
 8004516:	da0f      	bge.n	8004538 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3338      	adds	r3, #56	; 0x38
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	705a      	strb	r2, [r3, #1]
 8004536:	e00d      	b.n	8004554 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	3304      	adds	r3, #4
 800454c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_PCD_EP_SetStall+0x82>
 8004570:	2302      	movs	r3, #2
 8004572:	e01e      	b.n	80045b2 <HAL_PCD_EP_SetStall+0xc0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68f9      	ldr	r1, [r7, #12]
 8004582:	4618      	mov	r0, r3
 8004584:	f001 ffcf 	bl	8006526 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	b2d9      	uxtb	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045a2:	461a      	mov	r2, r3
 80045a4:	f002 f9c0 	bl	8006928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d901      	bls.n	80045d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e042      	b.n	800465e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da0f      	bge.n	8004600 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	3338      	adds	r3, #56	; 0x38
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	3304      	adds	r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	705a      	strb	r2, [r3, #1]
 80045fe:	e00f      	b.n	8004620 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	3304      	adds	r3, #4
 8004618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_PCD_EP_ClrStall+0x86>
 800463c:	2302      	movs	r3, #2
 800463e:	e00e      	b.n	800465e <HAL_PCD_EP_ClrStall+0xa4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68f9      	ldr	r1, [r7, #12]
 800464e:	4618      	mov	r0, r3
 8004650:	f001 ffd7 	bl	8006602 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	; 0x28
 800466a:	af02      	add	r7, sp, #8
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	3338      	adds	r3, #56	; 0x38
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	429a      	cmp	r2, r3
 8004698:	d901      	bls.n	800469e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e06c      	b.n	8004778 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d902      	bls.n	80046ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3303      	adds	r3, #3
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046c2:	e02b      	b.n	800471c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d902      	bls.n	80046e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3303      	adds	r3, #3
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4603      	mov	r3, r0
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f001 fe7b 	bl	80063fa <USB_WritePacket>

    ep->xfer_buff  += len;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	441a      	add	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	b29b      	uxth	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	429a      	cmp	r2, r3
 8004730:	d809      	bhi.n	8004746 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800473a:	429a      	cmp	r2, r3
 800473c:	d203      	bcs.n	8004746 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1be      	bne.n	80046c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	429a      	cmp	r2, r3
 8004750:	d811      	bhi.n	8004776 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	2201      	movs	r2, #1
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	43db      	mvns	r3, r3
 800476c:	6939      	ldr	r1, [r7, #16]
 800476e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004772:	4013      	ands	r3, r2
 8004774:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	333c      	adds	r3, #60	; 0x3c
 8004798:	3304      	adds	r3, #4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f040 80a0 	bne.w	80048f8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d015      	beq.n	80047ee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a72      	ldr	r2, [pc, #456]	; (8004990 <PCD_EP_OutXfrComplete_int+0x210>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	f240 80dd 	bls.w	8004986 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80d7 	beq.w	8004986 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	e0cb      	b.n	8004986 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	2320      	movs	r3, #32
 8004808:	6093      	str	r3, [r2, #8]
 800480a:	e0bc      	b.n	8004986 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 80b7 	bne.w	8004986 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <PCD_EP_OutXfrComplete_int+0x210>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d90f      	bls.n	8004840 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	461a      	mov	r2, r3
 8004838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483c:	6093      	str	r3, [r2, #8]
 800483e:	e0a2      	b.n	8004986 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004852:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	0159      	lsls	r1, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	440b      	add	r3, r1
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004866:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4403      	add	r3, r0
 8004876:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800487a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4403      	add	r3, r0
 800489e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4419      	add	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4403      	add	r3, r0
 80048b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048b8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d114      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x16a>
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048e2:	461a      	mov	r2, r3
 80048e4:	2101      	movs	r1, #1
 80048e6:	f002 f81f 	bl	8006928 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f003 ffbb 	bl	800886c <HAL_PCD_DataOutStageCallback>
 80048f6:	e046      	b.n	8004986 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a26      	ldr	r2, [pc, #152]	; (8004994 <PCD_EP_OutXfrComplete_int+0x214>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d124      	bne.n	800494a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	461a      	mov	r2, r3
 8004918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491c:	6093      	str	r3, [r2, #8]
 800491e:	e032      	b.n	8004986 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	461a      	mov	r2, r3
 8004938:	2320      	movs	r3, #32
 800493a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f003 ff92 	bl	800886c <HAL_PCD_DataOutStageCallback>
 8004948:	e01d      	b.n	8004986 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d114      	bne.n	800497a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004972:	461a      	mov	r2, r3
 8004974:	2100      	movs	r1, #0
 8004976:	f001 ffd7 	bl	8006928 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f003 ff73 	bl	800886c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	4f54300a 	.word	0x4f54300a
 8004994:	4f54310a 	.word	0x4f54310a

08004998 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	333c      	adds	r3, #60	; 0x3c
 80049b0:	3304      	adds	r3, #4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d90e      	bls.n	80049ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f003 ff2b 	bl	8008848 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d90c      	bls.n	8004a14 <PCD_EP_OutSetupPacket_int+0x7c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d108      	bne.n	8004a14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2101      	movs	r1, #1
 8004a10:	f001 ff8a 	bl	8006928 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	4f54300a 	.word	0x4f54300a

08004a24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
 8004a30:	4613      	mov	r3, r2
 8004a32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a42:	883b      	ldrh	r3, [r7, #0]
 8004a44:	0419      	lsls	r1, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a50:	e028      	b.n	8004aa4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e00d      	b.n	8004a82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	3340      	adds	r3, #64	; 0x40
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3ec      	bcc.n	8004a66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a8c:	883b      	ldrh	r3, [r7, #0]
 8004a8e:	0418      	lsls	r0, r3, #16
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4302      	orrs	r2, r0
 8004a9c:	3340      	adds	r3, #64	; 0x40
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e264      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d075      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0a:	4ba3      	ldr	r3, [pc, #652]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d00c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b16:	4ba0      	ldr	r3, [pc, #640]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d112      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b22:	4b9d      	ldr	r3, [pc, #628]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2e:	d10b      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d05b      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x108>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d157      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e23f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d106      	bne.n	8004b60 <HAL_RCC_OscConfig+0x74>
 8004b52:	4b91      	ldr	r3, [pc, #580]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a90      	ldr	r2, [pc, #576]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e01d      	b.n	8004b9c <HAL_RCC_OscConfig+0xb0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x98>
 8004b6a:	4b8b      	ldr	r3, [pc, #556]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a8a      	ldr	r2, [pc, #552]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b88      	ldr	r3, [pc, #544]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a87      	ldr	r2, [pc, #540]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e00b      	b.n	8004b9c <HAL_RCC_OscConfig+0xb0>
 8004b84:	4b84      	ldr	r3, [pc, #528]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a83      	ldr	r2, [pc, #524]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fa18 	bl	8001fd8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd fa14 	bl	8001fd8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e204      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0xc0>
 8004bca:	e014      	b.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fa04 	bl	8001fd8 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fd fa00 	bl	8001fd8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e1f0      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	4b6c      	ldr	r3, [pc, #432]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0xe8>
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d063      	beq.n	8004cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c02:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0e:	4b62      	ldr	r3, [pc, #392]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d11c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	4b5c      	ldr	r3, [pc, #368]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_RCC_OscConfig+0x152>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d001      	beq.n	8004c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e1c4      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4952      	ldr	r1, [pc, #328]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e03a      	b.n	8004cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d020      	beq.n	8004c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <HAL_RCC_OscConfig+0x2b0>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fd f9b9 	bl	8001fd8 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fd f9b5 	bl	8001fd8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1a5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	4b46      	ldr	r3, [pc, #280]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4940      	ldr	r1, [pc, #256]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	e015      	b.n	8004cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_RCC_OscConfig+0x2b0>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fd f998 	bl	8001fd8 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fd f994 	bl	8001fd8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e184      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d030      	beq.n	8004d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cde:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_RCC_OscConfig+0x2b4>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fd f978 	bl	8001fd8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cec:	f7fd f974 	bl	8001fd8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e164      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x200>
 8004d0a:	e015      	b.n	8004d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0c:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <HAL_RCC_OscConfig+0x2b4>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d12:	f7fd f961 	bl	8001fd8 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fd f95d 	bl	8001fd8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e14d      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a0 	beq.w	8004e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_OscConfig+0x2b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_RCC_OscConfig+0x2b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <HAL_RCC_OscConfig+0x2b8>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7fd f923 	bl	8001fd8 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e011      	b.n	8004dba <HAL_RCC_OscConfig+0x2ce>
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470000 	.word	0x42470000
 8004da0:	42470e80 	.word	0x42470e80
 8004da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da8:	f7fd f916 	bl	8001fd8 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e106      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dba:	4b85      	ldr	r3, [pc, #532]	; (8004fd0 <HAL_RCC_OscConfig+0x4e4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
 8004dce:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	e01c      	b.n	8004e16 <HAL_RCC_OscConfig+0x32a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCC_OscConfig+0x312>
 8004de4:	4b7b      	ldr	r3, [pc, #492]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a7a      	ldr	r2, [pc, #488]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
 8004df0:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a77      	ldr	r2, [pc, #476]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x32a>
 8004dfe:	4b75      	ldr	r3, [pc, #468]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b72      	ldr	r3, [pc, #456]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a71      	ldr	r2, [pc, #452]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd f8db 	bl	8001fd8 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fd f8d7 	bl	8001fd8 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0c5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCC_OscConfig+0x33a>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4a:	f7fd f8c5 	bl	8001fd8 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fd f8c1 	bl	8001fd8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0af      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	4b5a      	ldr	r3, [pc, #360]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a55      	ldr	r2, [pc, #340]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 809b 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d05c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d141      	bne.n	8004f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <HAL_RCC_OscConfig+0x4ec>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd f895 	bl	8001fd8 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd f891 	bl	8001fd8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e081      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec4:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	019b      	lsls	r3, r3, #6
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	4937      	ldr	r1, [pc, #220]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x4ec>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fd f86a 	bl	8001fd8 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fd f866 	bl	8001fd8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e056      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x41c>
 8004f26:	e04e      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x4ec>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2e:	f7fd f853 	bl	8001fd8 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f36:	f7fd f84f 	bl	8001fd8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e03f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f48:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x44a>
 8004f54:	e037      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e032      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d028      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d121      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d11a      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f92:	4013      	ands	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	3b01      	subs	r3, #1
 8004fac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	42470060 	.word	0x42470060

08004fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0cc      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b68      	ldr	r3, [pc, #416]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d90c      	bls.n	8005018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b65      	ldr	r3, [pc, #404]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b63      	ldr	r3, [pc, #396]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0b8      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005030:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a58      	ldr	r2, [pc, #352]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800503a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005048:	4b53      	ldr	r3, [pc, #332]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a52      	ldr	r2, [pc, #328]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4b50      	ldr	r3, [pc, #320]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	494d      	ldr	r1, [pc, #308]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d044      	beq.n	80050fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	4b47      	ldr	r3, [pc, #284]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d119      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e07f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d003      	beq.n	800509a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005096:	2b03      	cmp	r3, #3
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509a:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050aa:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e067      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ba:	4b37      	ldr	r3, [pc, #220]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 0203 	bic.w	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4934      	ldr	r1, [pc, #208]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050cc:	f7fc ff84 	bl	8001fd8 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d4:	f7fc ff80 	bl	8001fd8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e04f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 020c 	and.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d1eb      	bne.n	80050d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050fc:	4b25      	ldr	r3, [pc, #148]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d20c      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e032      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005130:	4b19      	ldr	r3, [pc, #100]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4916      	ldr	r1, [pc, #88]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	490e      	ldr	r1, [pc, #56]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005162:	f000 f821 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	490a      	ldr	r1, [pc, #40]	; (800519c <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fc fee4 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023c00 	.word	0x40023c00
 8005198:	40023800 	.word	0x40023800
 800519c:	0800b05c 	.word	0x0800b05c
 80051a0:	20000010 	.word	0x20000010
 80051a4:	20000014 	.word	0x20000014

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b5b0      	push	{r4, r5, r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051ae:	2100      	movs	r1, #0
 80051b0:	6079      	str	r1, [r7, #4]
 80051b2:	2100      	movs	r1, #0
 80051b4:	60f9      	str	r1, [r7, #12]
 80051b6:	2100      	movs	r1, #0
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051ba:	2100      	movs	r1, #0
 80051bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051be:	4952      	ldr	r1, [pc, #328]	; (8005308 <HAL_RCC_GetSysClockFreq+0x160>)
 80051c0:	6889      	ldr	r1, [r1, #8]
 80051c2:	f001 010c 	and.w	r1, r1, #12
 80051c6:	2908      	cmp	r1, #8
 80051c8:	d00d      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80051ca:	2908      	cmp	r1, #8
 80051cc:	f200 8094 	bhi.w	80052f8 <HAL_RCC_GetSysClockFreq+0x150>
 80051d0:	2900      	cmp	r1, #0
 80051d2:	d002      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x32>
 80051d4:	2904      	cmp	r1, #4
 80051d6:	d003      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x38>
 80051d8:	e08e      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051da:	4b4c      	ldr	r3, [pc, #304]	; (800530c <HAL_RCC_GetSysClockFreq+0x164>)
 80051dc:	60bb      	str	r3, [r7, #8]
       break;
 80051de:	e08e      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051e0:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <HAL_RCC_GetSysClockFreq+0x168>)
 80051e2:	60bb      	str	r3, [r7, #8]
      break;
 80051e4:	e08b      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e6:	4948      	ldr	r1, [pc, #288]	; (8005308 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e8:	6849      	ldr	r1, [r1, #4]
 80051ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80051ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051f0:	4945      	ldr	r1, [pc, #276]	; (8005308 <HAL_RCC_GetSysClockFreq+0x160>)
 80051f2:	6849      	ldr	r1, [r1, #4]
 80051f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80051f8:	2900      	cmp	r1, #0
 80051fa:	d024      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fc:	4942      	ldr	r1, [pc, #264]	; (8005308 <HAL_RCC_GetSysClockFreq+0x160>)
 80051fe:	6849      	ldr	r1, [r1, #4]
 8005200:	0989      	lsrs	r1, r1, #6
 8005202:	4608      	mov	r0, r1
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	f240 14ff 	movw	r4, #511	; 0x1ff
 800520c:	f04f 0500 	mov.w	r5, #0
 8005210:	ea00 0204 	and.w	r2, r0, r4
 8005214:	ea01 0305 	and.w	r3, r1, r5
 8005218:	493d      	ldr	r1, [pc, #244]	; (8005310 <HAL_RCC_GetSysClockFreq+0x168>)
 800521a:	fb01 f003 	mul.w	r0, r1, r3
 800521e:	2100      	movs	r1, #0
 8005220:	fb01 f102 	mul.w	r1, r1, r2
 8005224:	1844      	adds	r4, r0, r1
 8005226:	493a      	ldr	r1, [pc, #232]	; (8005310 <HAL_RCC_GetSysClockFreq+0x168>)
 8005228:	fba2 0101 	umull	r0, r1, r2, r1
 800522c:	1863      	adds	r3, r4, r1
 800522e:	4619      	mov	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	f7fb fbb4 	bl	80009a4 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e04a      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005246:	4b30      	ldr	r3, [pc, #192]	; (8005308 <HAL_RCC_GetSysClockFreq+0x160>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	461a      	mov	r2, r3
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	ea02 0400 	and.w	r4, r2, r0
 800525e:	ea03 0501 	and.w	r5, r3, r1
 8005262:	4620      	mov	r0, r4
 8005264:	4629      	mov	r1, r5
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	014b      	lsls	r3, r1, #5
 8005270:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005274:	0142      	lsls	r2, r0, #5
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	1b00      	subs	r0, r0, r4
 800527c:	eb61 0105 	sbc.w	r1, r1, r5
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	018b      	lsls	r3, r1, #6
 800528a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800528e:	0182      	lsls	r2, r0, #6
 8005290:	1a12      	subs	r2, r2, r0
 8005292:	eb63 0301 	sbc.w	r3, r3, r1
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	00d9      	lsls	r1, r3, #3
 80052a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a4:	00d0      	lsls	r0, r2, #3
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	1912      	adds	r2, r2, r4
 80052ac:	eb45 0303 	adc.w	r3, r5, r3
 80052b0:	f04f 0000 	mov.w	r0, #0
 80052b4:	f04f 0100 	mov.w	r1, #0
 80052b8:	0299      	lsls	r1, r3, #10
 80052ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052be:	0290      	lsls	r0, r2, #10
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4610      	mov	r0, r2
 80052c6:	4619      	mov	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f7fb fb68 	bl	80009a4 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_RCC_GetSysClockFreq+0x160>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	3301      	adds	r3, #1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	60bb      	str	r3, [r7, #8]
      break;
 80052f6:	e002      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <HAL_RCC_GetSysClockFreq+0x164>)
 80052fa:	60bb      	str	r3, [r7, #8]
      break;
 80052fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fe:	68bb      	ldr	r3, [r7, #8]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bdb0      	pop	{r4, r5, r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	00f42400 	.word	0x00f42400
 8005310:	017d7840 	.word	0x017d7840

08005314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000010 	.word	0x20000010

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	; (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	0800b06c 	.word	0x0800b06c

08005354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005354:	b084      	sub	sp, #16
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	f107 001c 	add.w	r0, r7, #28
 8005362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	2b01      	cmp	r3, #1
 800536a:	d122      	bne.n	80053b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fb1c 	bl	80069e4 <USB_CoreReset>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	e01a      	b.n	80053e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 fb10 	bl	80069e4 <USB_CoreReset>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
 80053da:	e005      	b.n	80053e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10b      	bne.n	8005406 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f043 0206 	orr.w	r2, r3, #6
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005412:	b004      	add	sp, #16
 8005414:	4770      	bx	lr
	...

08005418 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d165      	bne.n	80054f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a41      	ldr	r2, [pc, #260]	; (8005534 <USB_SetTurnaroundTime+0x11c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d906      	bls.n	8005442 <USB_SetTurnaroundTime+0x2a>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4a40      	ldr	r2, [pc, #256]	; (8005538 <USB_SetTurnaroundTime+0x120>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d202      	bcs.n	8005442 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800543c:	230f      	movs	r3, #15
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e062      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <USB_SetTurnaroundTime+0x120>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d306      	bcc.n	8005458 <USB_SetTurnaroundTime+0x40>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4a3b      	ldr	r2, [pc, #236]	; (800553c <USB_SetTurnaroundTime+0x124>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d202      	bcs.n	8005458 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005452:	230e      	movs	r3, #14
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e057      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a38      	ldr	r2, [pc, #224]	; (800553c <USB_SetTurnaroundTime+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d306      	bcc.n	800546e <USB_SetTurnaroundTime+0x56>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4a37      	ldr	r2, [pc, #220]	; (8005540 <USB_SetTurnaroundTime+0x128>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d202      	bcs.n	800546e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005468:	230d      	movs	r3, #13
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e04c      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a33      	ldr	r2, [pc, #204]	; (8005540 <USB_SetTurnaroundTime+0x128>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d306      	bcc.n	8005484 <USB_SetTurnaroundTime+0x6c>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a32      	ldr	r2, [pc, #200]	; (8005544 <USB_SetTurnaroundTime+0x12c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d802      	bhi.n	8005484 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800547e:	230c      	movs	r3, #12
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e041      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a2f      	ldr	r2, [pc, #188]	; (8005544 <USB_SetTurnaroundTime+0x12c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d906      	bls.n	800549a <USB_SetTurnaroundTime+0x82>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <USB_SetTurnaroundTime+0x130>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d802      	bhi.n	800549a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005494:	230b      	movs	r3, #11
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e036      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <USB_SetTurnaroundTime+0x130>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d906      	bls.n	80054b0 <USB_SetTurnaroundTime+0x98>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4a29      	ldr	r2, [pc, #164]	; (800554c <USB_SetTurnaroundTime+0x134>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d802      	bhi.n	80054b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054aa:	230a      	movs	r3, #10
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	e02b      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a26      	ldr	r2, [pc, #152]	; (800554c <USB_SetTurnaroundTime+0x134>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d906      	bls.n	80054c6 <USB_SetTurnaroundTime+0xae>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a25      	ldr	r2, [pc, #148]	; (8005550 <USB_SetTurnaroundTime+0x138>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d202      	bcs.n	80054c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054c0:	2309      	movs	r3, #9
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e020      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4a21      	ldr	r2, [pc, #132]	; (8005550 <USB_SetTurnaroundTime+0x138>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d306      	bcc.n	80054dc <USB_SetTurnaroundTime+0xc4>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a20      	ldr	r2, [pc, #128]	; (8005554 <USB_SetTurnaroundTime+0x13c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d802      	bhi.n	80054dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054d6:	2308      	movs	r3, #8
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e015      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <USB_SetTurnaroundTime+0x13c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d906      	bls.n	80054f2 <USB_SetTurnaroundTime+0xda>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <USB_SetTurnaroundTime+0x140>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d202      	bcs.n	80054f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054ec:	2307      	movs	r3, #7
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e00a      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054f2:	2306      	movs	r3, #6
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e007      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054fe:	2309      	movs	r3, #9
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e001      	b.n	8005508 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005504:	2309      	movs	r3, #9
 8005506:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	00d8acbf 	.word	0x00d8acbf
 8005538:	00e4e1c0 	.word	0x00e4e1c0
 800553c:	00f42400 	.word	0x00f42400
 8005540:	01067380 	.word	0x01067380
 8005544:	011a499f 	.word	0x011a499f
 8005548:	01312cff 	.word	0x01312cff
 800554c:	014ca43f 	.word	0x014ca43f
 8005550:	016e3600 	.word	0x016e3600
 8005554:	01a6ab1f 	.word	0x01a6ab1f
 8005558:	01e84800 	.word	0x01e84800

0800555c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d115      	bne.n	80055ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7fc fd0e 	bl	8001ff0 <HAL_Delay>
      ms++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f972 	bl	80068c4 <USB_GetMode>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d01e      	beq.n	8005624 <USB_SetCurrentMode+0x84>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b31      	cmp	r3, #49	; 0x31
 80055ea:	d9f0      	bls.n	80055ce <USB_SetCurrentMode+0x2e>
 80055ec:	e01a      	b.n	8005624 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d115      	bne.n	8005620 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005600:	2001      	movs	r0, #1
 8005602:	f7fc fcf5 	bl	8001ff0 <HAL_Delay>
      ms++;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 f959 	bl	80068c4 <USB_GetMode>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <USB_SetCurrentMode+0x84>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b31      	cmp	r3, #49	; 0x31
 800561c:	d9f0      	bls.n	8005600 <USB_SetCurrentMode+0x60>
 800561e:	e001      	b.n	8005624 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e005      	b.n	8005630 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b32      	cmp	r3, #50	; 0x32
 8005628:	d101      	bne.n	800562e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005638:	b084      	sub	sp, #16
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e009      	b.n	800566c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	3340      	adds	r3, #64	; 0x40
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	2200      	movs	r2, #0
 8005664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	3301      	adds	r3, #1
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b0e      	cmp	r3, #14
 8005670:	d9f2      	bls.n	8005658 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11c      	bne.n	80056b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005686:	f043 0302 	orr.w	r3, r3, #2
 800568a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
 80056b0:	e00b      	b.n	80056ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	4619      	mov	r1, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	461a      	mov	r2, r3
 80056e6:	680b      	ldr	r3, [r1, #0]
 80056e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10c      	bne.n	800570a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056f6:	2100      	movs	r1, #0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f945 	bl	8005988 <USB_SetDevSpeed>
 80056fe:	e008      	b.n	8005712 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005700:	2101      	movs	r1, #1
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f940 	bl	8005988 <USB_SetDevSpeed>
 8005708:	e003      	b.n	8005712 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800570a:	2103      	movs	r1, #3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f93b 	bl	8005988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005712:	2110      	movs	r1, #16
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f8f3 	bl	8005900 <USB_FlushTxFifo>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f90f 	bl	8005948 <USB_FlushRxFifo>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	461a      	mov	r2, r3
 800573c:	2300      	movs	r3, #0
 800573e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	461a      	mov	r2, r3
 8005748:	2300      	movs	r3, #0
 800574a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	e043      	b.n	80057e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005774:	d118      	bne.n	80057a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e013      	b.n	80057ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	461a      	mov	r2, r3
 80057a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e008      	b.n	80057ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	461a      	mov	r2, r3
 80057da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3301      	adds	r3, #1
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3b7      	bcc.n	800575e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e043      	b.n	800587c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580a:	d118      	bne.n	800583e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e013      	b.n	8005850 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	e008      	b.n	8005850 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	461a      	mov	r2, r3
 800584c:	2300      	movs	r3, #0
 800584e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005874:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	429a      	cmp	r2, r3
 8005882:	d3b7      	bcc.n	80057f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005896:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f043 0210 	orr.w	r2, r3, #16
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <USB_DevInit+0x2c4>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f043 0208 	orr.w	r2, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr
 80058fc:	803c3800 	.word	0x803c3800

08005900 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	019b      	lsls	r3, r3, #6
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <USB_FlushTxFifo+0x44>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b20      	cmp	r3, #32
 8005934:	d0f1      	beq.n	800591a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	00030d40 	.word	0x00030d40

08005948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2210      	movs	r2, #16
 8005958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <USB_FlushRxFifo+0x3c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b10      	cmp	r3, #16
 8005974:	d0f1      	beq.n	800595a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	00030d40 	.word	0x00030d40

08005988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0306 	and.w	r3, r3, #6
 80059d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059da:	2300      	movs	r3, #0
 80059dc:	75fb      	strb	r3, [r7, #23]
 80059de:	e00a      	b.n	80059f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d002      	beq.n	80059ec <USB_GetDevSpeed+0x32>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b06      	cmp	r3, #6
 80059ea:	d102      	bne.n	80059f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059ec:	2302      	movs	r3, #2
 80059ee:	75fb      	strb	r3, [r7, #23]
 80059f0:	e001      	b.n	80059f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059f2:	230f      	movs	r3, #15
 80059f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d13a      	bne.n	8005a96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	68f9      	ldr	r1, [r7, #12]
 8005a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d155      	bne.n	8005b04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	78db      	ldrb	r3, [r3, #3]
 8005a72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	059b      	lsls	r3, r3, #22
 8005a7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	e036      	b.n	8005b04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d11a      	bne.n	8005b04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aea:	430b      	orrs	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d161      	bne.n	8005bf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b46:	d11f      	bne.n	8005b88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba8:	4013      	ands	r3, r2
 8005baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	0159      	lsls	r1, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	440b      	add	r3, r1
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	4619      	mov	r1, r3
 8005bec:	4b35      	ldr	r3, [pc, #212]	; (8005cc4 <USB_DeactivateEndpoint+0x1b0>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
 8005bf2:	e060      	b.n	8005cb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0a:	d11f      	bne.n	8005c4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	43db      	mvns	r3, r3
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f303 	lsl.w	r3, r1, r3
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c90:	4013      	ands	r3, r2
 8005c92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	0159      	lsls	r1, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	440b      	add	r3, r1
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <USB_DeactivateEndpoint+0x1b4>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	ec337800 	.word	0xec337800
 8005cc8:	eff37800 	.word	0xeff37800

08005ccc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	f040 815c 	bne.w	8005fa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d132      	bne.n	8005d5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	0cdb      	lsrs	r3, r3, #19
 8005d56:	04db      	lsls	r3, r3, #19
 8005d58:	6113      	str	r3, [r2, #16]
 8005d5a:	e074      	b.n	8005e46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	0cdb      	lsrs	r3, r3, #19
 8005d78:	04db      	lsls	r3, r3, #19
 8005d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6959      	ldr	r1, [r3, #20]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	440b      	add	r3, r1
 8005db8:	1e59      	subs	r1, r3, #1
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dc2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dc4:	4b9d      	ldr	r3, [pc, #628]	; (800603c <USB_EPStartXfer+0x370>)
 8005dc6:	400b      	ands	r3, r1
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	0148      	lsls	r0, r1, #5
 8005dcc:	69f9      	ldr	r1, [r7, #28]
 8005dce:	4401      	add	r1, r0
 8005dd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dee:	69b9      	ldr	r1, [r7, #24]
 8005df0:	0148      	lsls	r0, r1, #5
 8005df2:	69f9      	ldr	r1, [r7, #28]
 8005df4:	4401      	add	r1, r0
 8005df6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	78db      	ldrb	r3, [r3, #3]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d11f      	bne.n	8005e46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d14b      	bne.n	8005ee4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	461a      	mov	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d128      	bne.n	8005ec2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d110      	bne.n	8005ea2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	e00f      	b.n	8005ec2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005edc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e12f      	b.n	8006144 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	78db      	ldrb	r3, [r3, #3]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d015      	beq.n	8005f38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8117 	beq.w	8006144 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f32:	4313      	orrs	r3, r2
 8005f34:	634b      	str	r3, [r1, #52]	; 0x34
 8005f36:	e105      	b.n	8006144 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d110      	bne.n	8005f6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e00f      	b.n	8005f8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	68d9      	ldr	r1, [r3, #12]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	b298      	uxth	r0, r3
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa2b 	bl	80063fa <USB_WritePacket>
 8005fa4:	e0ce      	b.n	8006144 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc0:	0cdb      	lsrs	r3, r3, #19
 8005fc2:	04db      	lsls	r3, r3, #19
 8005fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d126      	bne.n	8006040 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006008:	69b9      	ldr	r1, [r7, #24]
 800600a:	0148      	lsls	r0, r1, #5
 800600c:	69f9      	ldr	r1, [r7, #28]
 800600e:	4401      	add	r1, r0
 8006010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006014:	4313      	orrs	r3, r2
 8006016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006036:	6113      	str	r3, [r2, #16]
 8006038:	e036      	b.n	80060a8 <USB_EPStartXfer+0x3dc>
 800603a:	bf00      	nop
 800603c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4413      	add	r3, r2
 800604a:	1e5a      	subs	r2, r3, #1
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	8afb      	ldrh	r3, [r7, #22]
 8006066:	04d9      	lsls	r1, r3, #19
 8006068:	4b39      	ldr	r3, [pc, #228]	; (8006150 <USB_EPStartXfer+0x484>)
 800606a:	400b      	ands	r3, r1
 800606c:	69b9      	ldr	r1, [r7, #24]
 800606e:	0148      	lsls	r0, r1, #5
 8006070:	69f9      	ldr	r1, [r7, #28]
 8006072:	4401      	add	r1, r0
 8006074:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006078:	4313      	orrs	r3, r2
 800607a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	8af9      	ldrh	r1, [r7, #22]
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006098:	69b9      	ldr	r1, [r7, #24]
 800609a:	0148      	lsls	r0, r1, #5
 800609c:	69f9      	ldr	r1, [r7, #28]
 800609e:	4401      	add	r1, r0
 80060a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a4:	4313      	orrs	r3, r2
 80060a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10d      	bne.n	80060ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	68d9      	ldr	r1, [r3, #12]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	460a      	mov	r2, r1
 80060c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	78db      	ldrb	r3, [r3, #3]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d128      	bne.n	8006124 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d110      	bne.n	8006104 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00f      	b.n	8006124 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006122:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	1ff80000 	.word	0x1ff80000

08006154 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	f040 80cd 	bne.w	8006310 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d132      	bne.n	80061e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800619c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	0cdb      	lsrs	r3, r3, #19
 80061de:	04db      	lsls	r3, r3, #19
 80061e0:	6113      	str	r3, [r2, #16]
 80061e2:	e04e      	b.n	8006282 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fe:	0cdb      	lsrs	r3, r3, #19
 8006200:	04db      	lsls	r3, r3, #19
 8006202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006222:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006226:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	d903      	bls.n	800623c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800625a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006272:	6939      	ldr	r1, [r7, #16]
 8006274:	0148      	lsls	r0, r1, #5
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	4401      	add	r1, r0
 800627a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800627e:	4313      	orrs	r3, r2
 8006280:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d11e      	bne.n	80062c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	461a      	mov	r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	e092      	b.n	80063ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d07e      	beq.n	80063ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	2101      	movs	r1, #1
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	6979      	ldr	r1, [r7, #20]
 8006306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630a:	4313      	orrs	r3, r2
 800630c:	634b      	str	r3, [r1, #52]	; 0x34
 800630e:	e06d      	b.n	80063ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632a:	0cdb      	lsrs	r3, r3, #19
 800632c:	04db      	lsls	r3, r3, #19
 800632e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800634e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006352:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006382:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800639a:	6939      	ldr	r1, [r7, #16]
 800639c:	0148      	lsls	r0, r1, #5
 800639e:	6979      	ldr	r1, [r7, #20]
 80063a0:	4401      	add	r1, r0
 80063a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063a6:	4313      	orrs	r3, r2
 80063a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10d      	bne.n	80063cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	68d9      	ldr	r1, [r3, #12]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	460a      	mov	r2, r1
 80063ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b089      	sub	sp, #36	; 0x24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	460b      	mov	r3, r1
 800640a:	71fb      	strb	r3, [r7, #7]
 800640c:	4613      	mov	r3, r2
 800640e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800641c:	2b00      	cmp	r3, #0
 800641e:	d123      	bne.n	8006468 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006420:	88bb      	ldrh	r3, [r7, #4]
 8006422:	3303      	adds	r3, #3
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e018      	b.n	8006460 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	031a      	lsls	r2, r3, #12
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	4413      	add	r3, r2
 8006436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643a:	461a      	mov	r2, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	3301      	adds	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	3301      	adds	r3, #1
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	429a      	cmp	r2, r3
 8006466:	d3e2      	bcc.n	800642e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3724      	adds	r7, #36	; 0x24
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006476:	b480      	push	{r7}
 8006478:	b08b      	sub	sp, #44	; 0x2c
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	4613      	mov	r3, r2
 8006482:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	b29b      	uxth	r3, r3
 8006492:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006494:	88fb      	ldrh	r3, [r7, #6]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	623b      	str	r3, [r7, #32]
 80064a0:	e014      	b.n	80064cc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	3301      	adds	r3, #1
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	3301      	adds	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	3301      	adds	r3, #1
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	3301      	adds	r3, #1
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	3301      	adds	r3, #1
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d3e6      	bcc.n	80064a2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064d4:	8bfb      	ldrh	r3, [r7, #30]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01e      	beq.n	8006518 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e4:	461a      	mov	r2, r3
 80064e6:	f107 0310 	add.w	r3, r7, #16
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	fa22 f303 	lsr.w	r3, r2, r3
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	701a      	strb	r2, [r3, #0]
      i++;
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	3301      	adds	r3, #1
 8006504:	623b      	str	r3, [r7, #32]
      pDest++;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	3301      	adds	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800650c:	8bfb      	ldrh	r3, [r7, #30]
 800650e:	3b01      	subs	r3, #1
 8006510:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006512:	8bfb      	ldrh	r3, [r7, #30]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ea      	bne.n	80064ee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800651a:	4618      	mov	r0, r3
 800651c:	372c      	adds	r7, #44	; 0x2c
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d12c      	bne.n	800659c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	db12      	blt.n	800657a <USB_EPSetStall+0x54>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006574:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006578:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e02b      	b.n	80065f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db12      	blt.n	80065d4 <USB_EPSetStall+0xae>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00f      	beq.n	80065d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d128      	bne.n	8006670 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800663c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d003      	beq.n	800664e <USB_EPClearStall+0x4c>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	78db      	ldrb	r3, [r3, #3]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d138      	bne.n	80066c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e027      	b.n	80066c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800668e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	78db      	ldrb	r3, [r3, #3]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d003      	beq.n	80066a0 <USB_EPClearStall+0x9e>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	78db      	ldrb	r3, [r3, #3]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d10f      	bne.n	80066c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006708:	4313      	orrs	r3, r2
 800670a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006734:	f023 0303 	bic.w	r3, r3, #3
 8006738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006748:	f023 0302 	bic.w	r3, r3, #2
 800674c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678a:	f043 0302 	orr.w	r3, r3, #2
 800678e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4013      	ands	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067b6:	68fb      	ldr	r3, [r7, #12]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4013      	ands	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	0c1b      	lsrs	r3, r3, #16
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	b29b      	uxth	r3, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800685a:	68bb      	ldr	r3, [r7, #8]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	01db      	lsls	r3, r3, #7
 800689a:	b2db      	uxtb	r3, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4013      	ands	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068b6:	68bb      	ldr	r3, [r7, #8]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0301 	and.w	r3, r3, #1
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068fe:	f023 0307 	bic.w	r3, r3, #7
 8006902:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006916:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	460b      	mov	r3, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	333c      	adds	r3, #60	; 0x3c
 800693e:	3304      	adds	r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <USB_EP0_OutStart+0xb8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d90a      	bls.n	8006962 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800695c:	d101      	bne.n	8006962 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e037      	b.n	80069d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	461a      	mov	r2, r3
 800696a:	2300      	movs	r3, #0
 800696c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	f043 0318 	orr.w	r3, r3, #24
 8006994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10f      	bne.n	80069d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	4f54300a 	.word	0x4f54300a

080069e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <USB_CoreReset+0x60>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e01a      	b.n	8006a36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	daf3      	bge.n	80069f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f043 0201 	orr.w	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <USB_CoreReset+0x60>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e006      	b.n	8006a36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d0f1      	beq.n	8006a18 <USB_CoreReset+0x34>

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	00030d40 	.word	0x00030d40

08006a48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a58:	f002 f972 	bl	8008d40 <USBD_static_malloc>
 8006a5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e066      	b.n	8006b3e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7c1b      	ldrb	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d119      	bne.n	8006ab4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a84:	2202      	movs	r2, #2
 8006a86:	2181      	movs	r1, #129	; 0x81
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f002 f836 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a98:	2202      	movs	r2, #2
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f82c 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2210      	movs	r2, #16
 8006aae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006ab2:	e016      	b.n	8006ae2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	2181      	movs	r1, #129	; 0x81
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f002 f81d 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	2202      	movs	r2, #2
 8006aca:	2101      	movs	r1, #1
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f002 f814 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2210      	movs	r2, #16
 8006ade:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	2182      	movs	r1, #130	; 0x82
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f002 f806 	bl	8008afa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f002 f8d7 	bl	8008cd8 <USBD_LL_PrepareReceive>
 8006b2a:	e007      	b.n	8006b3c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	2101      	movs	r1, #1
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f002 f8ce 	bl	8008cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b52:	2181      	movs	r1, #129	; 0x81
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fff6 	bl	8008b46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b60:	2101      	movs	r1, #1
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 ffef 	bl	8008b46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b70:	2182      	movs	r1, #130	; 0x82
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 ffe7 	bl	8008b46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00e      	beq.n	8006bb0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f002 f8da 	bl	8008d5c <USBD_static_free>
    pdev->pClassData = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e0af      	b.n	8006d44 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d03f      	beq.n	8006c70 <USBD_CDC_Setup+0xb4>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	f040 809f 	bne.w	8006d34 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	88db      	ldrh	r3, [r3, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02e      	beq.n	8006c5c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da16      	bge.n	8006c36 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006c14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	88d2      	ldrh	r2, [r2, #6]
 8006c1a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	88db      	ldrh	r3, [r3, #6]
 8006c20:	2b07      	cmp	r3, #7
 8006c22:	bf28      	it	cs
 8006c24:	2307      	movcs	r3, #7
 8006c26:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	89fa      	ldrh	r2, [r7, #14]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 fb19 	bl	8008266 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006c34:	e085      	b.n	8006d42 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785a      	ldrb	r2, [r3, #1]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	88db      	ldrh	r3, [r3, #6]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c4c:	6939      	ldr	r1, [r7, #16]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	88db      	ldrh	r3, [r3, #6]
 8006c52:	461a      	mov	r2, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fb32 	bl	80082be <USBD_CtlPrepareRx>
      break;
 8006c5a:	e072      	b.n	8006d42 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	7850      	ldrb	r0, [r2, #1]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	4798      	blx	r3
      break;
 8006c6e:	e068      	b.n	8006d42 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b0b      	cmp	r3, #11
 8006c76:	d852      	bhi.n	8006d1e <USBD_CDC_Setup+0x162>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <USBD_CDC_Setup+0xc4>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006cb1 	.word	0x08006cb1
 8006c84:	08006d2d 	.word	0x08006d2d
 8006c88:	08006d1f 	.word	0x08006d1f
 8006c8c:	08006d1f 	.word	0x08006d1f
 8006c90:	08006d1f 	.word	0x08006d1f
 8006c94:	08006d1f 	.word	0x08006d1f
 8006c98:	08006d1f 	.word	0x08006d1f
 8006c9c:	08006d1f 	.word	0x08006d1f
 8006ca0:	08006d1f 	.word	0x08006d1f
 8006ca4:	08006d1f 	.word	0x08006d1f
 8006ca8:	08006cdb 	.word	0x08006cdb
 8006cac:	08006d05 	.word	0x08006d05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d107      	bne.n	8006ccc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cbc:	f107 030a 	add.w	r3, r7, #10
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 face 	bl	8008266 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cca:	e032      	b.n	8006d32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fa58 	bl	8008184 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd8:	e02b      	b.n	8006d32 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d107      	bne.n	8006cf6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ce6:	f107 030d 	add.w	r3, r7, #13
 8006cea:	2201      	movs	r2, #1
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fab9 	bl	8008266 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf4:	e01d      	b.n	8006d32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fa43 	bl	8008184 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	75fb      	strb	r3, [r7, #23]
          break;
 8006d02:	e016      	b.n	8006d32 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d00f      	beq.n	8006d30 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fa36 	bl	8008184 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d1c:	e008      	b.n	8006d30 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fa2f 	bl	8008184 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2a:	e002      	b.n	8006d32 <USBD_CDC_Setup+0x176>
          break;
 8006d2c:	bf00      	nop
 8006d2e:	e008      	b.n	8006d42 <USBD_CDC_Setup+0x186>
          break;
 8006d30:	bf00      	nop
      }
      break;
 8006d32:	e006      	b.n	8006d42 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fa24 	bl	8008184 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e04f      	b.n	8006e0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3318      	adds	r3, #24
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d029      	beq.n	8006de0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3318      	adds	r3, #24
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	78f9      	ldrb	r1, [r7, #3]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	460b      	mov	r3, r1
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	1a5b      	subs	r3, r3, r1
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4403      	add	r3, r0
 8006dac:	3344      	adds	r3, #68	; 0x44
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006db4:	fb03 f301 	mul.w	r3, r3, r1
 8006db8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d110      	bne.n	8006de0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006dbe:	78fa      	ldrb	r2, [r7, #3]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	3318      	adds	r3, #24
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dd2:	78f9      	ldrb	r1, [r7, #3]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 ff5c 	bl	8008c96 <USBD_LL_Transmit>
 8006dde:	e015      	b.n	8006e0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e015      	b.n	8006e64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 ff6c 	bl	8008d1a <USBD_LL_GetRxDataSize>
 8006e42:	4602      	mov	r2, r0
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e01b      	b.n	8006ebe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <USBD_CDC_EP0_RxReady+0x50>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e96:	2bff      	cmp	r3, #255	; 0xff
 8006e98:	d010      	beq.n	8006ebc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006ea8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2243      	movs	r2, #67	; 0x43
 8006ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	200000a4 	.word	0x200000a4

08006ee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2243      	movs	r2, #67	; 0x43
 8006ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000060 	.word	0x20000060

08006f08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2243      	movs	r2, #67	; 0x43
 8006f14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f16:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	200000e8 	.word	0x200000e8

08006f28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220a      	movs	r2, #10
 8006f34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	2000001c 	.word	0x2000001c

08006f48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e004      	b.n	8006f66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e008      	b.n	8006fa2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e004      	b.n	8006fd4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e01a      	b.n	8007038 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007008:	2b00      	cmp	r3, #0
 800700a:	d114      	bne.n	8007036 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2201      	movs	r2, #1
 8007010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800702a:	2181      	movs	r1, #129	; 0x81
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fe32 	bl	8008c96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800705a:	2303      	movs	r3, #3
 800705c:	e016      	b.n	800708c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7c1b      	ldrb	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800706c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007070:	2101      	movs	r1, #1
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fe30 	bl	8008cd8 <USBD_LL_PrepareReceive>
 8007078:	e007      	b.n	800708a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007080:	2340      	movs	r3, #64	; 0x40
 8007082:	2101      	movs	r1, #1
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 fe27 	bl	8008cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e01f      	b.n	80070ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	79fa      	ldrb	r2, [r7, #7]
 80070de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f001 fca3 	bl	8008a2c <USBD_LL_Init>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007108:	2303      	movs	r3, #3
 800710a:	e016      	b.n	800713a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	f107 020e 	add.w	r2, r7, #14
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
 8007130:	4602      	mov	r2, r0
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 fcba 	bl	8008ac4 <USBD_LL_Start>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	78fa      	ldrb	r2, [r7, #3]
 8007194:	4611      	mov	r1, r2
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	4611      	mov	r1, r2
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
  }

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 ff90 	bl	8008110 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800720c:	f003 031f 	and.w	r3, r3, #31
 8007210:	2b02      	cmp	r3, #2
 8007212:	d01a      	beq.n	800724a <USBD_LL_SetupStage+0x72>
 8007214:	2b02      	cmp	r3, #2
 8007216:	d822      	bhi.n	800725e <USBD_LL_SetupStage+0x86>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <USBD_LL_SetupStage+0x4a>
 800721c:	2b01      	cmp	r3, #1
 800721e:	d00a      	beq.n	8007236 <USBD_LL_SetupStage+0x5e>
 8007220:	e01d      	b.n	800725e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa62 	bl	80076f4 <USBD_StdDevReq>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e020      	b.n	8007278 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fac6 	bl	80077d0 <USBD_StdItfReq>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]
      break;
 8007248:	e016      	b.n	8007278 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fb05 	bl	8007862 <USBD_StdEPReq>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]
      break;
 800725c:	e00c      	b.n	8007278 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 fc89 	bl	8008b84 <USBD_LL_StallEP>
 8007272:	4603      	mov	r3, r0
 8007274:	73fb      	strb	r3, [r7, #15]
      break;
 8007276:	bf00      	nop
  }

  return ret;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	460b      	mov	r3, r1
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d138      	bne.n	8007308 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800729c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d14a      	bne.n	800733e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d913      	bls.n	80072dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	4293      	cmp	r3, r2
 80072cc:	bf28      	it	cs
 80072ce:	4613      	movcs	r3, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 f80f 	bl	80082f8 <USBD_CtlContinueRx>
 80072da:	e030      	b.n	800733e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d10b      	bne.n	8007300 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f001 f80a 	bl	800831a <USBD_CtlSendStatus>
 8007306:	e01a      	b.n	800733e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d114      	bne.n	800733e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	7afa      	ldrb	r2, [r7, #11]
 800732a:	4611      	mov	r1, r2
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	4798      	blx	r3
 8007330:	4603      	mov	r3, r0
 8007332:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	e000      	b.n	8007340 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	460b      	mov	r3, r1
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d16b      	bne.n	8007434 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3314      	adds	r3, #20
 8007360:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007368:	2b02      	cmp	r3, #2
 800736a:	d156      	bne.n	800741a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	429a      	cmp	r2, r3
 8007376:	d914      	bls.n	80073a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	1ad2      	subs	r2, r2, r3
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	461a      	mov	r2, r3
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 ff84 	bl	800829c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 fc9c 	bl	8008cd8 <USBD_LL_PrepareReceive>
 80073a0:	e03b      	b.n	800741a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d11c      	bne.n	80073e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d316      	bcc.n	80073e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d20f      	bcs.n	80073e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 ff65 	bl	800829c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073da:	2300      	movs	r3, #0
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f001 fc79 	bl	8008cd8 <USBD_LL_PrepareReceive>
 80073e6:	e018      	b.n	800741a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d10b      	bne.n	800740c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f001 fbb8 	bl	8008b84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 ff93 	bl	8008340 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007420:	2b01      	cmp	r3, #1
 8007422:	d122      	bne.n	800746a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fe98 	bl	800715a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007432:	e01a      	b.n	800746a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d114      	bne.n	800746a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00e      	beq.n	800746a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	7afa      	ldrb	r2, [r7, #11]
 8007456:	4611      	mov	r1, r2
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	4798      	blx	r3
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	e000      	b.n	800746c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e02f      	b.n	8007508 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00f      	beq.n	80074d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6852      	ldr	r2, [r2, #4]
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	4611      	mov	r1, r2
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	2200      	movs	r2, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fb0e 	bl	8008afa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2240      	movs	r2, #64	; 0x40
 80074ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	2200      	movs	r2, #0
 80074f2:	2180      	movs	r1, #128	; 0x80
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 fb00 	bl	8008afa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2240      	movs	r2, #64	; 0x40
 8007504:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753e:	b2da      	uxtb	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2204      	movs	r2, #4
 800754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b04      	cmp	r3, #4
 800756e:	d106      	bne.n	800757e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007576:	b2da      	uxtb	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800759e:	2303      	movs	r3, #3
 80075a0:	e012      	b.n	80075c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d10b      	bne.n	80075c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e014      	b.n	8007614 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d10d      	bne.n	8007612 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007632:	2303      	movs	r3, #3
 8007634:	e014      	b.n	8007660 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b03      	cmp	r3, #3
 8007640:	d10d      	bne.n	800765e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	4611      	mov	r1, r2
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d009      	beq.n	80076ac <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6852      	ldr	r2, [r2, #4]
 80076a4:	b2d2      	uxtb	r2, r2
 80076a6:	4611      	mov	r1, r2
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
  }

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b087      	sub	sp, #28
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3301      	adds	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076d4:	8a3b      	ldrh	r3, [r7, #16]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	b21a      	sxth	r2, r3
 80076da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076de:	4313      	orrs	r3, r2
 80076e0:	b21b      	sxth	r3, r3
 80076e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076e4:	89fb      	ldrh	r3, [r7, #14]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
	...

080076f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d005      	beq.n	800771a <USBD_StdDevReq+0x26>
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d853      	bhi.n	80077ba <USBD_StdDevReq+0xc6>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <USBD_StdDevReq+0x3a>
 8007716:	2b20      	cmp	r3, #32
 8007718:	d14f      	bne.n	80077ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
      break;
 800772c:	e04a      	b.n	80077c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b09      	cmp	r3, #9
 8007734:	d83b      	bhi.n	80077ae <USBD_StdDevReq+0xba>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <USBD_StdDevReq+0x48>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007791 	.word	0x08007791
 8007740:	080077a5 	.word	0x080077a5
 8007744:	080077af 	.word	0x080077af
 8007748:	0800779b 	.word	0x0800779b
 800774c:	080077af 	.word	0x080077af
 8007750:	0800776f 	.word	0x0800776f
 8007754:	08007765 	.word	0x08007765
 8007758:	080077af 	.word	0x080077af
 800775c:	08007787 	.word	0x08007787
 8007760:	08007779 	.word	0x08007779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9de 	bl	8007b28 <USBD_GetDescriptor>
          break;
 800776c:	e024      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb43 	bl	8007dfc <USBD_SetAddress>
          break;
 8007776:	e01f      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fb82 	bl	8007e84 <USBD_SetConfig>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
          break;
 8007784:	e018      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fc21 	bl	8007fd0 <USBD_GetConfig>
          break;
 800778e:	e013      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fc52 	bl	800803c <USBD_GetStatus>
          break;
 8007798:	e00e      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fc81 	bl	80080a4 <USBD_SetFeature>
          break;
 80077a2:	e009      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc90 	bl	80080cc <USBD_ClrFeature>
          break;
 80077ac:	e004      	b.n	80077b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fce7 	bl	8008184 <USBD_CtlError>
          break;
 80077b6:	bf00      	nop
      }
      break;
 80077b8:	e004      	b.n	80077c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fce1 	bl	8008184 <USBD_CtlError>
      break;
 80077c2:	bf00      	nop
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d005      	beq.n	80077f6 <USBD_StdItfReq+0x26>
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d82f      	bhi.n	800784e <USBD_StdItfReq+0x7e>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <USBD_StdItfReq+0x26>
 80077f2:	2b20      	cmp	r3, #32
 80077f4:	d12b      	bne.n	800784e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	2b02      	cmp	r3, #2
 8007802:	d81d      	bhi.n	8007840 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	889b      	ldrh	r3, [r3, #4]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	d813      	bhi.n	8007836 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	88db      	ldrh	r3, [r3, #6]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d110      	bne.n	800784a <USBD_StdItfReq+0x7a>
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10d      	bne.n	800784a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fd73 	bl	800831a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007834:	e009      	b.n	800784a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fca3 	bl	8008184 <USBD_CtlError>
          break;
 800783e:	e004      	b.n	800784a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fc9e 	bl	8008184 <USBD_CtlError>
          break;
 8007848:	e000      	b.n	800784c <USBD_StdItfReq+0x7c>
          break;
 800784a:	bf00      	nop
      }
      break;
 800784c:	e004      	b.n	8007858 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc97 	bl	8008184 <USBD_CtlError>
      break;
 8007856:	bf00      	nop
  }

  return ret;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	889b      	ldrh	r3, [r3, #4]
 8007874:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d007      	beq.n	8007892 <USBD_StdEPReq+0x30>
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	f200 8145 	bhi.w	8007b12 <USBD_StdEPReq+0x2b0>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00c      	beq.n	80078a6 <USBD_StdEPReq+0x44>
 800788c:	2b20      	cmp	r3, #32
 800788e:	f040 8140 	bne.w	8007b12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
      break;
 80078a4:	e13a      	b.n	8007b1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d007      	beq.n	80078be <USBD_StdEPReq+0x5c>
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f300 8129 	bgt.w	8007b06 <USBD_StdEPReq+0x2a4>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d07f      	beq.n	80079b8 <USBD_StdEPReq+0x156>
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d03c      	beq.n	8007936 <USBD_StdEPReq+0xd4>
 80078bc:	e123      	b.n	8007b06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d002      	beq.n	80078d0 <USBD_StdEPReq+0x6e>
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d016      	beq.n	80078fc <USBD_StdEPReq+0x9a>
 80078ce:	e02c      	b.n	800792a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00d      	beq.n	80078f2 <USBD_StdEPReq+0x90>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d00a      	beq.n	80078f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f94f 	bl	8008b84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e6:	2180      	movs	r1, #128	; 0x80
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f94b 	bl	8008b84 <USBD_LL_StallEP>
 80078ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f0:	e020      	b.n	8007934 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc45 	bl	8008184 <USBD_CtlError>
              break;
 80078fa:	e01b      	b.n	8007934 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	885b      	ldrh	r3, [r3, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10e      	bne.n	8007922 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <USBD_StdEPReq+0xc0>
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b80      	cmp	r3, #128	; 0x80
 800790e:	d008      	beq.n	8007922 <USBD_StdEPReq+0xc0>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f931 	bl	8008b84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fcf9 	bl	800831a <USBD_CtlSendStatus>

              break;
 8007928:	e004      	b.n	8007934 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc29 	bl	8008184 <USBD_CtlError>
              break;
 8007932:	bf00      	nop
          }
          break;
 8007934:	e0ec      	b.n	8007b10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d002      	beq.n	8007948 <USBD_StdEPReq+0xe6>
 8007942:	2b03      	cmp	r3, #3
 8007944:	d016      	beq.n	8007974 <USBD_StdEPReq+0x112>
 8007946:	e030      	b.n	80079aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00d      	beq.n	800796a <USBD_StdEPReq+0x108>
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b80      	cmp	r3, #128	; 0x80
 8007952:	d00a      	beq.n	800796a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 f913 	bl	8008b84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f90f 	bl	8008b84 <USBD_LL_StallEP>
 8007966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007968:	e025      	b.n	80079b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc09 	bl	8008184 <USBD_CtlError>
              break;
 8007972:	e020      	b.n	80079b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11b      	bne.n	80079b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f919 	bl	8008bc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fcc2 	bl	800831a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80079a8:	e004      	b.n	80079b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fbe9 	bl	8008184 <USBD_CtlError>
              break;
 80079b2:	e000      	b.n	80079b6 <USBD_StdEPReq+0x154>
              break;
 80079b4:	bf00      	nop
          }
          break;
 80079b6:	e0ab      	b.n	8007b10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d002      	beq.n	80079ca <USBD_StdEPReq+0x168>
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d032      	beq.n	8007a2e <USBD_StdEPReq+0x1cc>
 80079c8:	e097      	b.n	8007afa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <USBD_StdEPReq+0x17e>
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	2b80      	cmp	r3, #128	; 0x80
 80079d4:	d004      	beq.n	80079e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fbd3 	bl	8008184 <USBD_CtlError>
                break;
 80079de:	e091      	b.n	8007b04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da0b      	bge.n	8007a00 <USBD_StdEPReq+0x19e>
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	3310      	adds	r3, #16
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	3304      	adds	r3, #4
 80079fe:	e00b      	b.n	8007a18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	3304      	adds	r3, #4
 8007a18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2202      	movs	r2, #2
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fc1d 	bl	8008266 <USBD_CtlSendData>
              break;
 8007a2c:	e06a      	b.n	8007b04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da11      	bge.n	8007a5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	f003 020f 	and.w	r2, r3, #15
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	3324      	adds	r3, #36	; 0x24
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d117      	bne.n	8007a80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fb96 	bl	8008184 <USBD_CtlError>
                  break;
 8007a58:	e054      	b.n	8007b04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	f003 020f 	and.w	r2, r3, #15
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fb83 	bl	8008184 <USBD_CtlError>
                  break;
 8007a7e:	e041      	b.n	8007b04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da0b      	bge.n	8007aa0 <USBD_StdEPReq+0x23e>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	3310      	adds	r3, #16
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	e00b      	b.n	8007ab8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <USBD_StdEPReq+0x264>
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d103      	bne.n	8007ace <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	e00e      	b.n	8007aec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f894 	bl	8008c00 <USBD_LL_IsStallEP>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	e002      	b.n	8007aec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2202      	movs	r2, #2
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fbb7 	bl	8008266 <USBD_CtlSendData>
              break;
 8007af8:	e004      	b.n	8007b04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fb41 	bl	8008184 <USBD_CtlError>
              break;
 8007b02:	bf00      	nop
          }
          break;
 8007b04:	e004      	b.n	8007b10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb3b 	bl	8008184 <USBD_CtlError>
          break;
 8007b0e:	bf00      	nop
      }
      break;
 8007b10:	e004      	b.n	8007b1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fb35 	bl	8008184 <USBD_CtlError>
      break;
 8007b1a:	bf00      	nop
  }

  return ret;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	2b06      	cmp	r3, #6
 8007b4a:	f200 8128 	bhi.w	8007d9e <USBD_GetDescriptor+0x276>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <USBD_GetDescriptor+0x2c>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b89 	.word	0x08007b89
 8007b5c:	08007bc9 	.word	0x08007bc9
 8007b60:	08007d9f 	.word	0x08007d9f
 8007b64:	08007d9f 	.word	0x08007d9f
 8007b68:	08007d3f 	.word	0x08007d3f
 8007b6c:	08007d6b 	.word	0x08007d6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
      break;
 8007b86:	e112      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7c1b      	ldrb	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10d      	bne.n	8007bac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f107 0208 	add.w	r2, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007baa:	e100      	b.n	8007dae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	f107 0208 	add.w	r2, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	701a      	strb	r2, [r3, #0]
      break;
 8007bc6:	e0f2      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	885b      	ldrh	r3, [r3, #2]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b05      	cmp	r3, #5
 8007bd0:	f200 80ac 	bhi.w	8007d2c <USBD_GetDescriptor+0x204>
 8007bd4:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <USBD_GetDescriptor+0xb4>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007bf5 	.word	0x08007bf5
 8007be0:	08007c29 	.word	0x08007c29
 8007be4:	08007c5d 	.word	0x08007c5d
 8007be8:	08007c91 	.word	0x08007c91
 8007bec:	08007cc5 	.word	0x08007cc5
 8007bf0:	08007cf9 	.word	0x08007cf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	7c12      	ldrb	r2, [r2, #16]
 8007c0c:	f107 0108 	add.w	r1, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c16:	e091      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fab2 	bl	8008184 <USBD_CtlError>
            err++;
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	3301      	adds	r3, #1
 8007c24:	72fb      	strb	r3, [r7, #11]
          break;
 8007c26:	e089      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	7c12      	ldrb	r2, [r2, #16]
 8007c40:	f107 0108 	add.w	r1, r7, #8
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4a:	e077      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa98 	bl	8008184 <USBD_CtlError>
            err++;
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	3301      	adds	r3, #1
 8007c58:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5a:	e06f      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7c12      	ldrb	r2, [r2, #16]
 8007c74:	f107 0108 	add.w	r1, r7, #8
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7e:	e05d      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa7e 	bl	8008184 <USBD_CtlError>
            err++;
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8e:	e055      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7c12      	ldrb	r2, [r2, #16]
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb2:	e043      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa64 	bl	8008184 <USBD_CtlError>
            err++;
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc2:	e03b      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce6:	e029      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa4a 	bl	8008184 <USBD_CtlError>
            err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf6:	e021      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1a:	e00f      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa30 	bl	8008184 <USBD_CtlError>
            err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2a:	e007      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa28 	bl	8008184 <USBD_CtlError>
          err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007d3a:	bf00      	nop
      }
      break;
 8007d3c:	e037      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7c1b      	ldrb	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4e:	f107 0208 	add.w	r2, r7, #8
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
 8007d56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d58:	e029      	b.n	8007dae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa11 	bl	8008184 <USBD_CtlError>
        err++;
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	3301      	adds	r3, #1
 8007d66:	72fb      	strb	r3, [r7, #11]
      break;
 8007d68:	e021      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	7c1b      	ldrb	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10d      	bne.n	8007d8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f107 0208 	add.w	r2, r7, #8
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4798      	blx	r3
 8007d82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	2207      	movs	r2, #7
 8007d8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d8c:	e00f      	b.n	8007dae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f9f7 	bl	8008184 <USBD_CtlError>
        err++;
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d9c:	e007      	b.n	8007dae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f9ef 	bl	8008184 <USBD_CtlError>
      err++;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	3301      	adds	r3, #1
 8007daa:	72fb      	strb	r3, [r7, #11]
      break;
 8007dac:	bf00      	nop
  }

  if (err != 0U)
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d11e      	bne.n	8007df2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	88db      	ldrh	r3, [r3, #6]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d016      	beq.n	8007dea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88da      	ldrh	r2, [r3, #6]
 8007dc6:	893b      	ldrh	r3, [r7, #8]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	bf28      	it	cs
 8007dcc:	4613      	movcs	r3, r2
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dd2:	893b      	ldrh	r3, [r7, #8]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa44 	bl	8008266 <USBD_CtlSendData>
 8007dde:	e009      	b.n	8007df4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9ce 	bl	8008184 <USBD_CtlError>
 8007de8:	e004      	b.n	8007df4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa95 	bl	800831a <USBD_CtlSendStatus>
 8007df0:	e000      	b.n	8007df4 <USBD_GetDescriptor+0x2cc>
    return;
 8007df2:	bf00      	nop
  }
}
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	889b      	ldrh	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d131      	bne.n	8007e72 <USBD_SetAddress+0x76>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d12d      	bne.n	8007e72 <USBD_SetAddress+0x76>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e1c:	d829      	bhi.n	8007e72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d104      	bne.n	8007e40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9a3 	bl	8008184 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3e:	e01d      	b.n	8007e7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7bfa      	ldrb	r2, [r7, #15]
 8007e44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 ff03 	bl	8008c58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa61 	bl	800831a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	e009      	b.n	8007e7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e70:	e004      	b.n	8007e7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f985 	bl	8008184 <USBD_CtlError>
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	4b4c      	ldr	r3, [pc, #304]	; (8007fcc <USBD_SetConfig+0x148>)
 8007e9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <USBD_SetConfig+0x148>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d905      	bls.n	8007eb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f96c 	bl	8008184 <USBD_CtlError>
    return USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e088      	b.n	8007fc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d002      	beq.n	8007ec2 <USBD_SetConfig+0x3e>
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d025      	beq.n	8007f0c <USBD_SetConfig+0x88>
 8007ec0:	e071      	b.n	8007fa6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ec2:	4b42      	ldr	r3, [pc, #264]	; (8007fcc <USBD_SetConfig+0x148>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01c      	beq.n	8007f04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007eca:	4b40      	ldr	r3, [pc, #256]	; (8007fcc <USBD_SetConfig+0x148>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ed4:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <USBD_SetConfig+0x148>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff f948 	bl	8007170 <USBD_SetClassConfig>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f949 	bl	8008184 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ef2:	e065      	b.n	8007fc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa10 	bl	800831a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f02:	e05d      	b.n	8007fc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa08 	bl	800831a <USBD_CtlSendStatus>
      break;
 8007f0a:	e059      	b.n	8007fc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f0c:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <USBD_SetConfig+0x148>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d112      	bne.n	8007f3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f1c:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <USBD_SetConfig+0x148>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f26:	4b29      	ldr	r3, [pc, #164]	; (8007fcc <USBD_SetConfig+0x148>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff f93b 	bl	80071a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9f1 	bl	800831a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f38:	e042      	b.n	8007fc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007f3a:	4b24      	ldr	r3, [pc, #144]	; (8007fcc <USBD_SetConfig+0x148>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d02a      	beq.n	8007f9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff f929 	bl	80071a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f56:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <USBD_SetConfig+0x148>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f60:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <USBD_SetConfig+0x148>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff f902 	bl	8007170 <USBD_SetClassConfig>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f903 	bl	8008184 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff f90e 	bl	80071a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f94:	e014      	b.n	8007fc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9bf 	bl	800831a <USBD_CtlSendStatus>
      break;
 8007f9c:	e010      	b.n	8007fc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9bb 	bl	800831a <USBD_CtlSendStatus>
      break;
 8007fa4:	e00c      	b.n	8007fc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f8eb 	bl	8008184 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fae:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <USBD_SetConfig+0x148>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff f8f7 	bl	80071a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	bf00      	nop
  }

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200005b2 	.word	0x200005b2

08007fd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d004      	beq.n	8007fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f8cd 	bl	8008184 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fea:	e023      	b.n	8008034 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	dc02      	bgt.n	8007ffe <USBD_GetConfig+0x2e>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dc03      	bgt.n	8008004 <USBD_GetConfig+0x34>
 8007ffc:	e015      	b.n	800802a <USBD_GetConfig+0x5a>
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d00b      	beq.n	800801a <USBD_GetConfig+0x4a>
 8008002:	e012      	b.n	800802a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3308      	adds	r3, #8
 800800e:	2201      	movs	r2, #1
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f927 	bl	8008266 <USBD_CtlSendData>
        break;
 8008018:	e00c      	b.n	8008034 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	2201      	movs	r2, #1
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f91f 	bl	8008266 <USBD_CtlSendData>
        break;
 8008028:	e004      	b.n	8008034 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f8a9 	bl	8008184 <USBD_CtlError>
        break;
 8008032:	bf00      	nop
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	2b02      	cmp	r3, #2
 8008052:	d81e      	bhi.n	8008092 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	88db      	ldrh	r3, [r3, #6]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d004      	beq.n	8008066 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f890 	bl	8008184 <USBD_CtlError>
        break;
 8008064:	e01a      	b.n	800809c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f043 0202 	orr.w	r2, r3, #2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	330c      	adds	r3, #12
 8008086:	2202      	movs	r2, #2
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f8eb 	bl	8008266 <USBD_CtlSendData>
      break;
 8008090:	e004      	b.n	800809c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f875 	bl	8008184 <USBD_CtlError>
      break;
 800809a:	bf00      	nop
  }
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d106      	bne.n	80080c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f92b 	bl	800831a <USBD_CtlSendStatus>
  }
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d80b      	bhi.n	80080fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	885b      	ldrh	r3, [r3, #2]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d10c      	bne.n	8008106 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f910 	bl	800831a <USBD_CtlSendStatus>
      }
      break;
 80080fa:	e004      	b.n	8008106 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f840 	bl	8008184 <USBD_CtlError>
      break;
 8008104:	e000      	b.n	8008108 <USBD_ClrFeature+0x3c>
      break;
 8008106:	bf00      	nop
  }
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3301      	adds	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fabb 	bl	80076b6 <SWAPBYTE>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff faae 	bl	80076b6 <SWAPBYTE>
 800815a:	4603      	mov	r3, r0
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff faa1 	bl	80076b6 <SWAPBYTE>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	80da      	strh	r2, [r3, #6]
}
 800817c:	bf00      	nop
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800818e:	2180      	movs	r1, #128	; 0x80
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fcf7 	bl	8008b84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008196:	2100      	movs	r1, #0
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fcf3 	bl	8008b84 <USBD_LL_StallEP>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b086      	sub	sp, #24
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d036      	beq.n	800822a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081c0:	6938      	ldr	r0, [r7, #16]
 80081c2:	f000 f836 	bl	8008232 <USBD_GetLen>
 80081c6:	4603      	mov	r3, r0
 80081c8:	3301      	adds	r3, #1
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4413      	add	r3, r2
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	3301      	adds	r3, #1
 80081e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	2203      	movs	r2, #3
 80081ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	3301      	adds	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081f6:	e013      	b.n	8008220 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	7812      	ldrb	r2, [r2, #0]
 8008202:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	3301      	adds	r3, #1
 8008208:	613b      	str	r3, [r7, #16]
    idx++;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	3301      	adds	r3, #1
 800820e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
    idx++;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	3301      	adds	r3, #1
 800821e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e7      	bne.n	80081f8 <USBD_GetString+0x52>
 8008228:	e000      	b.n	800822c <USBD_GetString+0x86>
    return;
 800822a:	bf00      	nop
  }
}
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008242:	e005      	b.n	8008250 <USBD_GetLen+0x1e>
  {
    len++;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	3301      	adds	r3, #1
 8008248:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	3301      	adds	r3, #1
 800824e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f5      	bne.n	8008244 <USBD_GetLen+0x12>
  }

  return len;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2202      	movs	r2, #2
 8008276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	2100      	movs	r1, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fd02 	bl	8008c96 <USBD_LL_Transmit>

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	2100      	movs	r1, #0
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fcf1 	bl	8008c96 <USBD_LL_Transmit>

  return USBD_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2203      	movs	r2, #3
 80082ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	2100      	movs	r1, #0
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fcf5 	bl	8008cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fce4 	bl	8008cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2204      	movs	r2, #4
 8008326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800832a:	2300      	movs	r3, #0
 800832c:	2200      	movs	r2, #0
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fcb0 	bl	8008c96 <USBD_LL_Transmit>

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2205      	movs	r2, #5
 800834c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008350:	2300      	movs	r3, #0
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fcbe 	bl	8008cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800836c:	2200      	movs	r2, #0
 800836e:	4912      	ldr	r1, [pc, #72]	; (80083b8 <MX_USB_DEVICE_Init+0x50>)
 8008370:	4812      	ldr	r0, [pc, #72]	; (80083bc <MX_USB_DEVICE_Init+0x54>)
 8008372:	f7fe fe8f 	bl	8007094 <USBD_Init>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800837c:	f7f8 ff5e 	bl	800123c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008380:	490f      	ldr	r1, [pc, #60]	; (80083c0 <MX_USB_DEVICE_Init+0x58>)
 8008382:	480e      	ldr	r0, [pc, #56]	; (80083bc <MX_USB_DEVICE_Init+0x54>)
 8008384:	f7fe feb6 	bl	80070f4 <USBD_RegisterClass>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800838e:	f7f8 ff55 	bl	800123c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008392:	490c      	ldr	r1, [pc, #48]	; (80083c4 <MX_USB_DEVICE_Init+0x5c>)
 8008394:	4809      	ldr	r0, [pc, #36]	; (80083bc <MX_USB_DEVICE_Init+0x54>)
 8008396:	f7fe fdd7 	bl	8006f48 <USBD_CDC_RegisterInterface>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083a0:	f7f8 ff4c 	bl	800123c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083a4:	4805      	ldr	r0, [pc, #20]	; (80083bc <MX_USB_DEVICE_Init+0x54>)
 80083a6:	f7fe fecc 	bl	8007142 <USBD_Start>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083b0:	f7f8 ff44 	bl	800123c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083b4:	bf00      	nop
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000140 	.word	0x20000140
 80083bc:	20000914 	.word	0x20000914
 80083c0:	20000028 	.word	0x20000028
 80083c4:	2000012c 	.word	0x2000012c

080083c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083cc:	2200      	movs	r2, #0
 80083ce:	4905      	ldr	r1, [pc, #20]	; (80083e4 <CDC_Init_FS+0x1c>)
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <CDC_Init_FS+0x20>)
 80083d2:	f7fe fdce 	bl	8006f72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083d6:	4905      	ldr	r1, [pc, #20]	; (80083ec <CDC_Init_FS+0x24>)
 80083d8:	4803      	ldr	r0, [pc, #12]	; (80083e8 <CDC_Init_FS+0x20>)
 80083da:	f7fe fde8 	bl	8006fae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	200013e4 	.word	0x200013e4
 80083e8:	20000914 	.word	0x20000914
 80083ec:	20000be4 	.word	0x20000be4

080083f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
 800840c:	4613      	mov	r3, r2
 800840e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b23      	cmp	r3, #35	; 0x23
 8008414:	d84a      	bhi.n	80084ac <CDC_Control_FS+0xac>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <CDC_Control_FS+0x1c>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	080084ad 	.word	0x080084ad
 8008420:	080084ad 	.word	0x080084ad
 8008424:	080084ad 	.word	0x080084ad
 8008428:	080084ad 	.word	0x080084ad
 800842c:	080084ad 	.word	0x080084ad
 8008430:	080084ad 	.word	0x080084ad
 8008434:	080084ad 	.word	0x080084ad
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084ad 	.word	0x080084ad
 8008440:	080084ad 	.word	0x080084ad
 8008444:	080084ad 	.word	0x080084ad
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084ad 	.word	0x080084ad
 8008450:	080084ad 	.word	0x080084ad
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084ad 	.word	0x080084ad
 800845c:	080084ad 	.word	0x080084ad
 8008460:	080084ad 	.word	0x080084ad
 8008464:	080084ad 	.word	0x080084ad
 8008468:	080084ad 	.word	0x080084ad
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084ad 	.word	0x080084ad
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080084ad 	.word	0x080084ad
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084ad 	.word	0x080084ad
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084ad 	.word	0x080084ad
 8008498:	080084ad 	.word	0x080084ad
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084ad 	.word	0x080084ad
 80084a4:	080084ad 	.word	0x080084ad
 80084a8:	080084ad 	.word	0x080084ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084ac:	bf00      	nop
  }

  return (USBD_OK);
 80084ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	480f      	ldr	r0, [pc, #60]	; (8008508 <CDC_Receive_FS+0x4c>)
 80084ca:	f7fe fd70 	bl	8006fae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084ce:	480e      	ldr	r0, [pc, #56]	; (8008508 <CDC_Receive_FS+0x4c>)
 80084d0:	f7fe fdb6 	bl	8007040 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 80084d4:	2240      	movs	r2, #64	; 0x40
 80084d6:	2100      	movs	r1, #0
 80084d8:	480c      	ldr	r0, [pc, #48]	; (800850c <CDC_Receive_FS+0x50>)
 80084da:	f000 fca7 	bl	8008e2c <memset>
  uint8_t len = (uint8_t)*Len;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	4808      	ldr	r0, [pc, #32]	; (800850c <CDC_Receive_FS+0x50>)
 80084ec:	f000 fc90 	bl	8008e10 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	461a      	mov	r2, r3
 80084f4:	2100      	movs	r1, #0
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc98 	bl	8008e2c <memset>

  return (USBD_OK);
 80084fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000914 	.word	0x20000914
 800850c:	2000087c 	.word	0x2000087c

08008510 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <CDC_Transmit_FS+0x48>)
 8008522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008526:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008532:	2301      	movs	r3, #1
 8008534:	e00b      	b.n	800854e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008536:	887b      	ldrh	r3, [r7, #2]
 8008538:	461a      	mov	r2, r3
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4806      	ldr	r0, [pc, #24]	; (8008558 <CDC_Transmit_FS+0x48>)
 800853e:	f7fe fd18 	bl	8006f72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008542:	4805      	ldr	r0, [pc, #20]	; (8008558 <CDC_Transmit_FS+0x48>)
 8008544:	f7fe fd4c 	bl	8006fe0 <USBD_CDC_TransmitPacket>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000914 	.word	0x20000914

0800855c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800856e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2212      	movs	r2, #18
 8008590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008592:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	2000015c 	.word	0x2000015c

080085a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2204      	movs	r2, #4
 80085b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085b6:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	20000170 	.word	0x20000170

080085c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4907      	ldr	r1, [pc, #28]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <USBD_FS_ProductStrDescriptor+0x38>)
 80085e0:	f7ff fde1 	bl	80081a6 <USBD_GetString>
 80085e4:	e004      	b.n	80085f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4904      	ldr	r1, [pc, #16]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <USBD_FS_ProductStrDescriptor+0x38>)
 80085ec:	f7ff fddb 	bl	80081a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20001be4 	.word	0x20001be4
 8008600:	08008e70 	.word	0x08008e70

08008604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008614:	4804      	ldr	r0, [pc, #16]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008616:	f7ff fdc6 	bl	80081a6 <USBD_GetString>
  return USBD_StrDesc;
 800861a:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20001be4 	.word	0x20001be4
 8008628:	08008e84 	.word	0x08008e84

0800862c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	221a      	movs	r2, #26
 800863c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800863e:	f000 f843 	bl	80086c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008642:	4b02      	ldr	r3, [pc, #8]	; (800864c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000174 	.word	0x20000174

08008650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4907      	ldr	r1, [pc, #28]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008666:	4808      	ldr	r0, [pc, #32]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008668:	f7ff fd9d 	bl	80081a6 <USBD_GetString>
 800866c:	e004      	b.n	8008678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4904      	ldr	r1, [pc, #16]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008672:	4805      	ldr	r0, [pc, #20]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008674:	f7ff fd97 	bl	80081a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20001be4 	.word	0x20001be4
 8008688:	08008e98 	.word	0x08008e98

0800868c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4907      	ldr	r1, [pc, #28]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086a2:	4808      	ldr	r0, [pc, #32]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a4:	f7ff fd7f 	bl	80081a6 <USBD_GetString>
 80086a8:	e004      	b.n	80086b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086b0:	f7ff fd79 	bl	80081a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20001be4 	.word	0x20001be4
 80086c4:	08008ea4 	.word	0x08008ea4

080086c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <Get_SerialNum+0x44>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086d4:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <Get_SerialNum+0x48>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <Get_SerialNum+0x4c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ee:	2208      	movs	r2, #8
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <Get_SerialNum+0x50>)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f814 	bl	8008720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086f8:	2204      	movs	r2, #4
 80086fa:	4908      	ldr	r1, [pc, #32]	; (800871c <Get_SerialNum+0x54>)
 80086fc:	68b8      	ldr	r0, [r7, #8]
 80086fe:	f000 f80f 	bl	8008720 <IntToUnicode>
  }
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	1fff7a10 	.word	0x1fff7a10
 8008710:	1fff7a14 	.word	0x1fff7a14
 8008714:	1fff7a18 	.word	0x1fff7a18
 8008718:	20000176 	.word	0x20000176
 800871c:	20000186 	.word	0x20000186

08008720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
 8008736:	e027      	b.n	8008788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0f1b      	lsrs	r3, r3, #28
 800873c:	2b09      	cmp	r3, #9
 800873e:	d80b      	bhi.n	8008758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	0f1b      	lsrs	r3, r3, #28
 8008744:	b2da      	uxtb	r2, r3
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4619      	mov	r1, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	440b      	add	r3, r1
 8008750:	3230      	adds	r2, #48	; 0x30
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e00a      	b.n	800876e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	0f1b      	lsrs	r3, r3, #28
 800875c:	b2da      	uxtb	r2, r3
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	4619      	mov	r1, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	440b      	add	r3, r1
 8008768:	3237      	adds	r2, #55	; 0x37
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	3301      	adds	r3, #1
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	3301      	adds	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]
 8008788:	7dfa      	ldrb	r2, [r7, #23]
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	429a      	cmp	r2, r3
 800878e:	d3d3      	bcc.n	8008738 <IntToUnicode+0x18>
  }
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087a8:	f107 0314 	add.w	r3, r7, #20
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	605a      	str	r2, [r3, #4]
 80087b2:	609a      	str	r2, [r3, #8]
 80087b4:	60da      	str	r2, [r3, #12]
 80087b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087c0:	d13a      	bne.n	8008838 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087c2:	2300      	movs	r3, #0
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	6313      	str	r3, [r2, #48]	; 0x30
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e4:	2302      	movs	r3, #2
 80087e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ec:	2303      	movs	r3, #3
 80087ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087f0:	230a      	movs	r3, #10
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	4619      	mov	r1, r3
 80087fa:	4812      	ldr	r0, [pc, #72]	; (8008844 <HAL_PCD_MspInit+0xa4>)
 80087fc:	f7f9 fd2e 	bl	800225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008800:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008804:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880a:	6353      	str	r3, [r2, #52]	; 0x34
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008814:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800881a:	6453      	str	r3, [r2, #68]	; 0x44
 800881c:	4b08      	ldr	r3, [pc, #32]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 800881e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	2043      	movs	r0, #67	; 0x43
 800882e:	f7f9 fcde 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008832:	2043      	movs	r0, #67	; 0x43
 8008834:	f7f9 fcf7 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008838:	bf00      	nop
 800883a:	3728      	adds	r7, #40	; 0x28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40023800 	.word	0x40023800
 8008844:	40020000 	.word	0x40020000

08008848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe fcba 	bl	80071d8 <USBD_LL_SetupStage>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	4619      	mov	r1, r3
 8008896:	f7fe fcf4 	bl	8007282 <USBD_LL_DataOutStage>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	3348      	adds	r3, #72	; 0x48
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7fe fd3d 	bl	8007348 <USBD_LL_DataInStage>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fe51 	bl	800758c <USBD_LL_SOF>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
 800890a:	e008      	b.n	800891e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d102      	bne.n	800891a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	e001      	b.n	800891e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800891a:	f7f8 fc8f 	bl	800123c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fdf1 	bl	8007510 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe fd9d 	bl	8007474 <USBD_LL_Reset>
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe fdec 	bl	8007530 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <HAL_PCD_SuspendCallback+0x48>)
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	4a03      	ldr	r2, [pc, #12]	; (800898c <HAL_PCD_SuspendCallback+0x48>)
 800897e:	f043 0306 	orr.w	r3, r3, #6
 8008982:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fddc 	bl	800755c <USBD_LL_Resume>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fe2a 	bl	800761c <USBD_LL_IsoOUTIncomplete>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	4611      	mov	r1, r2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fdf2 	bl	80075d0 <USBD_LL_IsoINIncomplete>
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe fe30 	bl	8007668 <USBD_LL_DevConnected>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fe2d 	bl	800767e <USBD_LL_DevDisconnected>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d13c      	bne.n	8008ab6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a3c:	4a20      	ldr	r2, [pc, #128]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a4c:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a54:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a56:	2204      	movs	r2, #4
 8008a58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a5a:	4b19      	ldr	r3, [pc, #100]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a60:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a68:	2202      	movs	r2, #2
 8008a6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a6c:	4b14      	ldr	r3, [pc, #80]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a7e:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a84:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a8a:	480d      	ldr	r0, [pc, #52]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a8c:	f7fa feab 	bl	80037e6 <HAL_PCD_Init>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a96:	f7f8 fbd1 	bl	800123c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a9a:	2180      	movs	r1, #128	; 0x80
 8008a9c:	4808      	ldr	r0, [pc, #32]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008a9e:	f7fc f808 	bl	8004ab2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008aa2:	2240      	movs	r2, #64	; 0x40
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4806      	ldr	r0, [pc, #24]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008aa8:	f7fb ffbc 	bl	8004a24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008aac:	2280      	movs	r2, #128	; 0x80
 8008aae:	2101      	movs	r1, #1
 8008ab0:	4803      	ldr	r0, [pc, #12]	; (8008ac0 <USBD_LL_Init+0x94>)
 8008ab2:	f7fb ffb7 	bl	8004a24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20001de4 	.word	0x20001de4

08008ac4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa ffa0 	bl	8003a20 <HAL_PCD_Start>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f942 	bl	8008d70 <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	4608      	mov	r0, r1
 8008b04:	4611      	mov	r1, r2
 8008b06:	461a      	mov	r2, r3
 8008b08:	4603      	mov	r3, r0
 8008b0a:	70fb      	strb	r3, [r7, #3]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70bb      	strb	r3, [r7, #2]
 8008b10:	4613      	mov	r3, r2
 8008b12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b22:	78bb      	ldrb	r3, [r7, #2]
 8008b24:	883a      	ldrh	r2, [r7, #0]
 8008b26:	78f9      	ldrb	r1, [r7, #3]
 8008b28:	f7fb fb84 	bl	8004234 <HAL_PCD_EP_Open>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f91c 	bl	8008d70 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	4611      	mov	r1, r2
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fb fbcd 	bl	8004304 <HAL_PCD_EP_Close>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f8fd 	bl	8008d70 <USBD_Get_USB_Status>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fb fca5 	bl	80044f2 <HAL_PCD_EP_SetStall>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f8de 	bl	8008d70 <USBD_Get_USB_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bdc:	78fa      	ldrb	r2, [r7, #3]
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fb fcea 	bl	80045ba <HAL_PCD_EP_ClrStall>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f8bf 	bl	8008d70 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da0b      	bge.n	8008c34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	4613      	mov	r3, r2
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	1a9b      	subs	r3, r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	333e      	adds	r3, #62	; 0x3e
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	e00b      	b.n	8008c4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c3a:	68f9      	ldr	r1, [r7, #12]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fb fab7 	bl	80041ea <HAL_PCD_SetAddress>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f874 	bl	8008d70 <USBD_Get_USB_Status>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b086      	sub	sp, #24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cb4:	7af9      	ldrb	r1, [r7, #11]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	f7fb fbd0 	bl	800445e <HAL_PCD_EP_Transmit>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 f853 	bl	8008d70 <USBD_Get_USB_Status>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cce:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cf6:	7af9      	ldrb	r1, [r7, #11]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	f7fb fb4c 	bl	8004398 <HAL_PCD_EP_Receive>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f832 	bl	8008d70 <USBD_Get_USB_Status>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fb fb7c 	bl	800442e <HAL_PCD_EP_GetRxCount>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d48:	4b03      	ldr	r3, [pc, #12]	; (8008d58 <USBD_static_malloc+0x18>)
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	200005b4 	.word	0x200005b4

08008d5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]

}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d817      	bhi.n	8008db4 <USBD_Get_USB_Status+0x44>
 8008d84:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBD_Get_USB_Status+0x1c>)
 8008d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8a:	bf00      	nop
 8008d8c:	08008d9d 	.word	0x08008d9d
 8008d90:	08008da3 	.word	0x08008da3
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008daf 	.word	0x08008daf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008da0:	e00b      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	73fb      	strb	r3, [r7, #15]
    break;
 8008da6:	e008      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dac:	e005      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dae:	2303      	movs	r3, #3
 8008db0:	73fb      	strb	r3, [r7, #15]
    break;
 8008db2:	e002      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008db4:	2303      	movs	r3, #3
 8008db6:	73fb      	strb	r3, [r7, #15]
    break;
 8008db8:	bf00      	nop
  }
  return usb_status;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <__libc_init_array>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	4d0d      	ldr	r5, [pc, #52]	; (8008e00 <__libc_init_array+0x38>)
 8008dcc:	4c0d      	ldr	r4, [pc, #52]	; (8008e04 <__libc_init_array+0x3c>)
 8008dce:	1b64      	subs	r4, r4, r5
 8008dd0:	10a4      	asrs	r4, r4, #2
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	42a6      	cmp	r6, r4
 8008dd6:	d109      	bne.n	8008dec <__libc_init_array+0x24>
 8008dd8:	4d0b      	ldr	r5, [pc, #44]	; (8008e08 <__libc_init_array+0x40>)
 8008dda:	4c0c      	ldr	r4, [pc, #48]	; (8008e0c <__libc_init_array+0x44>)
 8008ddc:	f000 f82e 	bl	8008e3c <_init>
 8008de0:	1b64      	subs	r4, r4, r5
 8008de2:	10a4      	asrs	r4, r4, #2
 8008de4:	2600      	movs	r6, #0
 8008de6:	42a6      	cmp	r6, r4
 8008de8:	d105      	bne.n	8008df6 <__libc_init_array+0x2e>
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df0:	4798      	blx	r3
 8008df2:	3601      	adds	r6, #1
 8008df4:	e7ee      	b.n	8008dd4 <__libc_init_array+0xc>
 8008df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dfa:	4798      	blx	r3
 8008dfc:	3601      	adds	r6, #1
 8008dfe:	e7f2      	b.n	8008de6 <__libc_init_array+0x1e>
 8008e00:	0800b07c 	.word	0x0800b07c
 8008e04:	0800b07c 	.word	0x0800b07c
 8008e08:	0800b07c 	.word	0x0800b07c
 8008e0c:	0800b080 	.word	0x0800b080

08008e10 <memcpy>:
 8008e10:	440a      	add	r2, r1
 8008e12:	4291      	cmp	r1, r2
 8008e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e18:	d100      	bne.n	8008e1c <memcpy+0xc>
 8008e1a:	4770      	bx	lr
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e26:	4291      	cmp	r1, r2
 8008e28:	d1f9      	bne.n	8008e1e <memcpy+0xe>
 8008e2a:	bd10      	pop	{r4, pc}

08008e2c <memset>:
 8008e2c:	4402      	add	r2, r0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d100      	bne.n	8008e36 <memset+0xa>
 8008e34:	4770      	bx	lr
 8008e36:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3a:	e7f9      	b.n	8008e30 <memset+0x4>

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
